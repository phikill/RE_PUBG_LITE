using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;
using System.Windows.Interop;
using <CppImplementationDetails>;
using <CrtImplementationDetails>;
using ipc;
using ipc.mutex;
using logger.managed;
using msclr.interop.details;
using std;
using std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z.__l2;
using std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_KD@Z.__l2;
using std.?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2;
using std.?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@_K_W@Z.__l2;
using std.?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z.__l2;
using std.?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2;
using std.?push_back@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX_W@Z.__l2;
using std.?reserve@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAX_K@Z.__l11;
using std.?reserve@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX_K@Z.__l11;

// Token: 0x02000001 RID: 1
internal class <Module>
{
	// Token: 0x06000001 RID: 1 RVA: 0x00009DE0 File Offset: 0x000091E0
	internal unsafe static int ?A0x2bfc062d.memcpy_s(void* _Destination, ulong _DestinationSize, void* _Source, ulong _SourceSize)
	{
		//IL_0027: Expected I4, but got I8
		//IL_0031: Expected I4, but got I8
		if (_SourceSize == 0L)
		{
			return 0;
		}
		if (_Destination == null)
		{
			*_errno() = 22;
			_invalid_parameter_noinfo();
			return 22;
		}
		if (_Source != null && _DestinationSize >= _SourceSize)
		{
			// IL cpblk instruction
			System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(_Destination, _Source, _SourceSize);
			return 0;
		}
		// IL initblk instruction
		System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(_Destination, 0, _DestinationSize);
		if (_Source == null)
		{
			*_errno() = 22;
			_invalid_parameter_noinfo();
			return 22;
		}
		if (_DestinationSize < _SourceSize)
		{
			*_errno() = 34;
			_invalid_parameter_noinfo();
			return 34;
		}
		return 22;
	}

	// Token: 0x06000002 RID: 2 RVA: 0x00009E48 File Offset: 0x00009248
	internal unsafe static void {dtor}(exception* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000003 RID: 3 RVA: 0x0001BDF0 File Offset: 0x0001B1F0
	internal unsafe static void* DownloadFile.__vecDelDtor(DownloadFile* P_0, uint A_0)
	{
		//IL_000a: Expected I, but got I8
		//IL_0042: Expected I, but got I8
		if ((A_0 & 2u) != 0)
		{
			DownloadFile* ptr = (DownloadFile*)((long)(IntPtr)P_0 - 8);
			__ehvec_dtor(P_0, 72uL, *(ulong*)ptr, (UIntPtr/*delegate*<void*, void>*/)(void*)(ulong)(UIntPtr/*delegate*<DownloadFile*, void>*/)(&DownloadFile.{dtor}));
			if ((A_0 & (true ? 1u : 0u)) != 0)
			{
				delete[](ptr, (ulong)(*(long*)ptr * 72 + 8));
			}
			return ptr;
		}
		*(long*)P_0 = (long)(IntPtr)System.Runtime.CompilerServices.Unsafe.AsPointer(ref ??_7DownloadFile@@6B@);
		DeleteCriticalSection((_RTL_CRITICAL_SECTION*)((long)(IntPtr)P_0 + 32));
		if ((A_0 & (true ? 1u : 0u)) != 0)
		{
			delete(P_0, 72uL);
		}
		return P_0;
	}

	// Token: 0x06000004 RID: 4 RVA: 0x00009E68 File Offset: 0x00009268
	internal unsafe static void {dtor}(_Iterator_base12* A_0)
	{
	}

	// Token: 0x06000005 RID: 5 RVA: 0x00009E78 File Offset: 0x00009278
	internal unsafe static void _Adjust_manually_vector_aligned(void** _Ptr, ulong* _Bytes)
	{
		*_Bytes += 39L;
		long num = *_Ptr;
		ulong num2 = *(num - 8L);
		if (num - num2 - 8L <= 31L)
		{
			*_Ptr = num2;
		}
		else
		{
			<Module>._invalid_parameter_noinfo_noreturn();
		}
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00009EAC File Offset: 0x000092AC
	internal unsafe static bad_cast* {ctor}(bad_cast* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		bad_cast* ptr = A_0 + 8L;
		initblk(ptr, 0, 16L);
		*ptr = ref <Module>.??_C@_08EPJLHIJG@bad?5cast@;
		try
		{
			*A_0 = ref <Module>.??_7bad_cast@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.exception.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000007 RID: 7 RVA: 0x0001BE50 File Offset: 0x0001B250
	internal unsafe static void* __vecDelDtor(bad_cast* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			bad_cast* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 24UL, (ulong)(*ptr), ldftn(std.bad_cast.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				bad_cast* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 24L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 24UL);
		}
		return A_0;
	}

	// Token: 0x06000008 RID: 8 RVA: 0x00009E48 File Offset: 0x00009248
	internal unsafe static void {dtor}(bad_cast* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000009 RID: 9 RVA: 0x00009E68 File Offset: 0x00009268
	internal unsafe static void {dtor}(_Ref_count_base* A_0)
	{
	}

	// Token: 0x0600000A RID: 10 RVA: 0x0000B428 File Offset: 0x0000A828
	internal unsafe static void _Decref(_Ref_count_base* A_0)
	{
		if (Interlocked.Decrement(A_0 + 8L) == 0)
		{
			calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), A_0, *(*A_0));
			if (Interlocked.Decrement(A_0 + 12L) == 0)
			{
				calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), A_0, *(*A_0 + 8L));
			}
		}
	}

	// Token: 0x0600000B RID: 11 RVA: 0x00009F08 File Offset: 0x00009308
	internal unsafe static void {dtor}(locale* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			ulong num2 = num;
			_Facet_base* ptr = calli(std._Facet_base* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), (IntPtr)num2, *(*num2 + 16L));
			if (ptr != null)
			{
				long num3 = *(*(long*)ptr);
				void* ptr2 = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), ptr, 1U, num3);
			}
		}
	}

	// Token: 0x0600000C RID: 12 RVA: 0x00009F3C File Offset: 0x0000933C
	internal unsafe static locale.facet* _Getfacet(locale* A_0, ulong _Id)
	{
		long num = *(A_0 + 8L);
		locale.facet* ptr;
		if (_Id < (ulong)(*(num + 24L)))
		{
			ptr = *(_Id * 8UL + (ulong)(*(num + 16L)));
			if (ptr != null)
			{
				return ptr;
			}
		}
		else
		{
			ptr = null;
		}
		if (*(num + 36L) != 0)
		{
			locale._Locimp* ptr2 = <Module>.std.locale._Getgloballocale();
			return (_Id >= (ulong)(*(long*)(ptr2 + 24L / (long)sizeof(locale._Locimp)))) ? 0L : (*(_Id * 8UL + (ulong)(*(long*)(ptr2 + 16L / (long)sizeof(locale._Locimp)))));
		}
		return ptr;
	}

	// Token: 0x0600000D RID: 13 RVA: 0x0000B464 File Offset: 0x0000A864
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool EnsurePath(char* cwszFilePath)
	{
		if (null == cwszFilePath)
		{
			return 0;
		}
		$ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W;
		<Module>.wcscpy_s((char*)(&$ArrayType$$$BY0BAE@_W), 260UL, cwszFilePath);
		char* ptr = <Module>.wcsrchr((char*)(&$ArrayType$$$BY0BAE@_W), '\\');
		if (null == ptr)
		{
			return 1;
		}
		*ptr = '\0';
		return <Module>.FileCommon.CreatePath((char*)(&$ArrayType$$$BY0BAE@_W));
	}

	// Token: 0x0600000E RID: 14 RVA: 0x00009F98 File Offset: 0x00009398
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool CreatePath(char* cwszPath)
	{
		uint fileAttributesW = <Module>.GetFileAttributesW(cwszPath);
		if (-1 == fileAttributesW)
		{
			if (0 == <Module>.FileCommon.EnsurePath(cwszPath))
			{
				return 0;
			}
			if (0 == <Module>.CreateDirectoryW(cwszPath, null) && 183 != <Module>.GetLastError())
			{
				return 0;
			}
		}
		else if (0 == (fileAttributesW & 16))
		{
			return 0;
		}
		return 1;
	}

	// Token: 0x0600000F RID: 15 RVA: 0x0000B4A4 File Offset: 0x0000A8A4
	internal unsafe static long GetFileSize(char* cwszFilePath)
	{
		_WIN32_FILE_ATTRIBUTE_DATA win32_FILE_ATTRIBUTE_DATA;
		if (0 == <Module>.GetFileAttributesExW(cwszFilePath, (_GET_FILEEX_INFO_LEVELS)0, (void*)(&win32_FILE_ATTRIBUTE_DATA)))
		{
			return -1L;
		}
		return ((ulong)(*((ref win32_FILE_ATTRIBUTE_DATA) + 28)) << 32) | (ulong)(*((ref win32_FILE_ATTRIBUTE_DATA) + 32));
	}

	// Token: 0x06000010 RID: 16 RVA: 0x0000B4DC File Offset: 0x0000A8DC
	internal unsafe static long FileCommon.GetFileSize(char* cwszFilePath)
	{
		System.Runtime.CompilerServices.Unsafe.SkipInit(out _WIN32_FILE_ATTRIBUTE_DATA wIN32_FILE_ATTRIBUTE_DATA);
		if (0 == GetFileAttributesExW(cwszFilePath, (global::_GET_FILEEX_INFO_LEVELS)0, &wIN32_FILE_ATTRIBUTE_DATA))
		{
			return -1L;
		}
		return (long)(((ulong)(uint)System.Runtime.CompilerServices.Unsafe.As<_WIN32_FILE_ATTRIBUTE_DATA, int>(ref System.Runtime.CompilerServices.Unsafe.AddByteOffset(ref wIN32_FILE_ATTRIBUTE_DATA, 28)) << 32) | (uint)System.Runtime.CompilerServices.Unsafe.As<_WIN32_FILE_ATTRIBUTE_DATA, int>(ref System.Runtime.CompilerServices.Unsafe.AddByteOffset(ref wIN32_FILE_ATTRIBUTE_DATA, 32)));
	}

	// Token: 0x06000011 RID: 17 RVA: 0x00009FE0 File Offset: 0x000093E0
	internal unsafe static long FileCommon.ReadFile(void* hFile, void* pReadBuffer, long nSize)
	{
		//IL_0031: Expected I, but got I8
		//IL_0031: Expected I, but got I8
		uint num = 0u;
		long num2 = 0L;
		if (0 < nSize)
		{
			do
			{
				long num3 = nSize - num2;
				uint num4 = (uint)((num3 < int.MaxValue) ? num3 : int.MaxValue);
				if (0 != ReadFile(hFile, (void*)(num2 + (long)(IntPtr)pReadBuffer), num4, &num, null))
				{
					if (num == num4)
					{
						num2 = num + num2;
						continue;
					}
					return num + num2;
				}
				return -1L;
			}
			while (num2 < nSize);
		}
		return nSize;
	}

	// Token: 0x06000012 RID: 18 RVA: 0x0000A040 File Offset: 0x00009440
	internal unsafe static long FileCommon.WriteFile(void* hFile, void* pWriteBuffer, long nSize)
	{
		//IL_0031: Expected I, but got I8
		//IL_0031: Expected I, but got I8
		uint num = 0u;
		long num2 = 0L;
		if (0 < nSize)
		{
			do
			{
				long num3 = nSize - num2;
				uint num4 = (uint)((num3 < int.MaxValue) ? num3 : int.MaxValue);
				if (0 != WriteFile(hFile, (void*)(num2 + (long)(IntPtr)pWriteBuffer), num4, &num, null))
				{
					if (num == num4)
					{
						num2 = num + num2;
						continue;
					}
					return num + num2;
				}
				return -1L;
			}
			while (num2 < nSize);
		}
		return nSize;
	}

	// Token: 0x06000013 RID: 19 RVA: 0x0000B510 File Offset: 0x0000A910
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool FileCommon.DeleteFileIfExist(char* cwszFilePath)
	{
		uint fileAttributesW = GetFileAttributesW(cwszFilePath);
		if (fileAttributesW != uint.MaxValue && (fileAttributesW & (true ? 1u : 0u)) != 0)
		{
			SetFileAttributesW(cwszFilePath, fileAttributesW ^ 1u);
		}
		if (0 == DeleteFileW(cwszFilePath))
		{
			uint lastError = GetLastError();
			if (2 != lastError && 3 != lastError)
			{
				if ((GetFileAttributesW(cwszFilePath) & 0x10u) != 0)
				{
					return FileCommon.DeleteDirectory(cwszFilePath);
				}
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000014 RID: 20 RVA: 0x0000A0A0 File Offset: 0x000094A0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool FileCommon.DeleteDirectory(char* cwszPath)
	{
		//IL_006d: Expected I4, but got I8
		System.Runtime.CompilerServices.Unsafe.SkipInit(out $ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W);
		wsprintfW((char*)(&$ArrayType$$$BY0BAE@_W), (char*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref ??_C@_1O@NOAPAMN@?$AA?$CF?$AAs?$AA?2?$AA?$CK?$AA?4?$AA?$CK@), __arglist((ushort*)cwszPath));
		System.Runtime.CompilerServices.Unsafe.SkipInit(out _WIN32_FIND_DATAW wIN32_FIND_DATAW);
		void* ptr = FindFirstFileW((char*)(&$ArrayType$$$BY0BAE@_W), &wIN32_FIND_DATAW);
		if (-1L == (long)(IntPtr)ptr)
		{
			if (0 == RemoveDirectoryW(cwszPath))
			{
				uint lastError = GetLastError();
				if (2 != lastError && 3 != lastError)
				{
					return false;
				}
			}
			return true;
		}
		System.Runtime.CompilerServices.Unsafe.SkipInit(out $ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W2);
		do
		{
			if (46 == System.Runtime.CompilerServices.Unsafe.As<_WIN32_FIND_DATAW, ushort>(ref System.Runtime.CompilerServices.Unsafe.AddByteOffset(ref wIN32_FIND_DATAW, 44)))
			{
				continue;
			}
			// IL cpblk instruction
			System.Runtime.CompilerServices.Unsafe.CopyBlockUnaligned(ref $ArrayType$$$BY0BAE@_W2, ref ??_C@_11LOCGONAA@@, 2);
			// IL initblk instruction
			System.Runtime.CompilerServices.Unsafe.InitBlockUnaligned(ref System.Runtime.CompilerServices.Unsafe.AddByteOffset(ref $ArrayType$$$BY0BAE@_W2, 2), 0, 518);
			PathAppendW((char*)(&$ArrayType$$$BY0BAE@_W2), cwszPath);
			PathAppendW((char*)(&$ArrayType$$$BY0BAE@_W2), (char*)System.Runtime.CompilerServices.Unsafe.AsPointer(ref System.Runtime.CompilerServices.Unsafe.AddByteOffset(ref wIN32_FIND_DATAW, 44)));
			if (((uint)(*(int*)(&wIN32_FIND_DATAW)) & 0x10u) != 0)
			{
				if (!FileCommon.DeleteDirectory((char*)(&$ArrayType$$$BY0BAE@_W2)))
				{
					FindClose(ptr);
					return false;
				}
			}
			else if (!FileCommon.DeleteFileIfExist((char*)(&$ArrayType$$$BY0BAE@_W2)))
			{
				FindClose(ptr);
				return false;
			}
		}
		while (FindNextFileW(ptr, &wIN32_FIND_DATAW) != 0);
		FindClose(ptr);
		if (0 == RemoveDirectoryW(cwszPath))
		{
			uint lastError2 = GetLastError();
			if (2 != lastError2 && 3 != lastError2)
			{
				return false;
			}
		}
		return true;
	}

	// Token: 0x06000015 RID: 21 RVA: 0x0000A194 File Offset: 0x00009594
	internal unsafe static void {dtor}(escape_string* A_0)
	{
		ulong num = (ulong)(*A_0);
		if (num != 0UL)
		{
			<Module>.free(num);
		}
	}

	// Token: 0x06000016 RID: 22 RVA: 0x0000A1B0 File Offset: 0x000095B0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool escape_string.resize(escape_string* P_0, ulong len)
	{
		//IL_0017: Expected I, but got I8
		//IL_0020: Expected I8, but got I
		//IL_002c: Expected I8, but got I
		if ((ulong)(*(long*)((long)(IntPtr)P_0 + 8)) >= len)
		{
			return true;
		}
		ulong num = *(ulong*)P_0;
		if (num != 0L)
		{
			sbyte* ptr = (sbyte*)realloc((void*)num, len);
			if (ptr == null)
			{
				return false;
			}
			*(long*)P_0 = (long)(IntPtr)ptr;
		}
		else
		{
			void* ptr2 = malloc(len);
			*(long*)P_0 = (long)(IntPtr)ptr2;
			if (ptr2 == null)
			{
				return false;
			}
		}
		*(ulong*)((long)(IntPtr)P_0 + 8) = len;
		return true;
	}

	// Token: 0x06000017 RID: 23 RVA: 0x0000A1F8 File Offset: 0x000095F8
	internal unsafe static DownloadFile* {ctor}(DownloadFile* A_0)
	{
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.InitializeCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
		*(A_0 + 8L) = 0;
		*(A_0 + 12L) = 0;
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 0L;
		return A_0;
	}

	// Token: 0x06000018 RID: 24 RVA: 0x0000A234 File Offset: 0x00009634
	/*internal unsafe static void {dtor}(DownloadFile* A_0)
	{
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
	}*/

	internal unsafe static void DownloadFile.{dtor}(DownloadFile* P_0)
	{
		//IL_0011: Expected I, but got I8
		*(long*)P_0 = (long)(IntPtr)System.Runtime.CompilerServices.Unsafe.AsPointer(ref ??_7DownloadFile@@6B@);
		DeleteCriticalSection((_RTL_CRITICAL_SECTION*)((long)(IntPtr)P_0 + 32));
	}

	// Token: 0x06000019 RID: 25 RVA: 0x0000A254 File Offset: 0x00009654
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool IsDownloadFailed(DownloadFile* A_0)
	{
		DownloadFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		if (*(A_0 + 12L) >= 400)
		{
			<Module>.LeaveCriticalSection(ptr);
			return 1;
		}
		<Module>.LeaveCriticalSection(ptr);
		return 0;
	}

	// Token: 0x0600001A RID: 26 RVA: 0x0001BEB0 File Offset: 0x0001B2B0
	internal unsafe static void* __vecDelDtor(DownloadFile* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			DownloadFile* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 72UL, (ulong)(*ptr), ldftn(DownloadFile.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				DownloadFile* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 72L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 72UL);
		}
		return A_0;
	}

	// Token: 0x0600001B RID: 27 RVA: 0x0001CFB4 File Offset: 0x0001C3B4
	internal unsafe static void {dtor}(LocalFile* A_0)
	{
		*A_0 = ref <Module>.??_7LocalFile@@6B@;
		try
		{
			ulong num = (ulong)(*(A_0 + 608L));
			if (num != 0UL)
			{
				<Module>.UnmapViewOfFile(num);
			}
			ulong num2 = (ulong)(*(A_0 + 600L));
			if (num2 != 0UL)
			{
				<Module>.CloseHandle(num2);
			}
			LocalFile* ptr = A_0 + 592L;
			ulong num3 = (ulong)(*ptr);
			if (18446744073709551615UL != num3)
			{
				bool flag = false;
				if (4 != *(A_0 + 8L))
				{
					flag = 0 == <Module>.GetFileSize(num3, null) || flag;
				}
				<Module>.CloseHandle(*ptr);
				if (flag)
				{
					<Module>.DeleteFileW(A_0 / sizeof(char) + 72L);
				}
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(DownloadFile.{dtor}), A_0);
			throw;
		}
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
	}

	// Token: 0x0600001C RID: 28 RVA: 0x0001D07C File Offset: 0x0001C47C
	internal unsafe static void GetDstFilePath(LocalFile* A_0, char* wszFilePath, int nLen)
	{
		if (wszFilePath != null && nLen > 0)
		{
			<Module>.wcscpy_s(wszFilePath, (ulong)((long)nLen), A_0 / sizeof(char) + 72L);
		}
	}

	// Token: 0x0600001D RID: 29 RVA: 0x0001D0A0 File Offset: 0x0001C4A0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ResetFilePointer(LocalFile* A_0)
	{
		LocalFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		if (1 != *(A_0 + 8L))
		{
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		*(A_0 + 24L) = 0L;
		<Module>.LeaveCriticalSection(ptr);
		return 1;
	}

	// Token: 0x0600001E RID: 30 RVA: 0x0001D0D8 File Offset: 0x0001C4D8
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool WriteFileData(LocalFile* A_0, @byte* pBuffer, uint dwSize)
	{
		LocalFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		int num = *(A_0 + 8L);
		<Module>.LeaveCriticalSection(ptr);
		if (1 >= num || 4 == num)
		{
			return 0;
		}
		if (-1L == *(A_0 + 592L))
		{
			void* ptr2 = <Module>.CreateFileW(A_0 / sizeof(char) + 72L, -1073741824, 0, null, 4, 128, null);
			*(A_0 + 592L) = ptr2;
			if (-1L == ptr2)
			{
				<Module>.EnterCriticalSection(ptr);
				*(A_0 + 8L) = -4;
				<Module>.LeaveCriticalSection(ptr);
				return 0;
			}
			long num2 = *(A_0 + 24L);
			if (num2 != 0L)
			{
				int num3 = (int)num2;
				int num4 = (int)((ulong)num2 >> 32);
				if (-1 == <Module>.SetFilePointer(ptr2, num3, &num4, 0) && 0 != <Module>.GetLastError())
				{
					<Module>.EnterCriticalSection(ptr);
					*(A_0 + 8L) = -5;
					<Module>.LeaveCriticalSection(ptr);
					return 0;
				}
			}
			if (0 == <Module>.SetEndOfFile(*(A_0 + 592L)))
			{
				<Module>.EnterCriticalSection(ptr);
				*(A_0 + 8L) = -5;
				<Module>.LeaveCriticalSection(ptr);
				return 0;
			}
		}
		uint num5;
		if (<Module>.WriteFile(*(A_0 + 592L), (void*)pBuffer, dwSize, &num5, null) == null)
		{
			<Module>.EnterCriticalSection(ptr);
			*(A_0 + 8L) = -5;
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 24L) = *(A_0 + 24L) + (long)num5;
		<Module>.LeaveCriticalSection(ptr);
		if (dwSize != num5)
		{
			<Module>.EnterCriticalSection(ptr);
			*(A_0 + 8L) = -5;
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		return 1;
	}

	// Token: 0x0600001F RID: 31 RVA: 0x0001D234 File Offset: 0x0001C634
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool FlushFileData(LocalFile* A_0)
	{
		if (0 == <Module>.FlushFileBuffers(*(A_0 + 592L)))
		{
			$ArrayType$$$BY0EAA@D $ArrayType$$$BY0EAA@D;
			<Module>.sprintf_s<1024>(ref $ArrayType$$$BY0EAA@D, (sbyte*)(&<Module>.??_C@_0BM@HNCPBHPF@FlushFileBuffers?5error?5?3?5?$CFd@), __arglist(<Module>.GetLastError()));
			<Module>.OutputDebugStringA((sbyte*)(&$ArrayType$$$BY0EAA@D));
			LocalFile* ptr = A_0 + 32L;
			<Module>.EnterCriticalSection(ptr);
			*(A_0 + 8L) = -8;
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		return 1;
	}

	// Token: 0x06000020 RID: 32 RVA: 0x0001D288 File Offset: 0x0001C688
	internal unsafe static @byte* GetFileBuffer(LocalFile* A_0)
	{
		LocalFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		int num = *(A_0 + 8L);
		<Module>.LeaveCriticalSection(ptr);
		if (4 != num)
		{
			return 0L;
		}
		ulong num2 = (ulong)(*(A_0 + 592L));
		if (18446744073709551615UL == num2)
		{
			return 0L;
		}
		if (0L == *(A_0 + 600L))
		{
			ulong num3 = (ulong)(*(A_0 + 24L));
			void* ptr2 = <Module>.CreateFileMappingW(num2, null, 134217730, (uint)(num3 >> 32), (uint)num3, null);
			*(A_0 + 600L) = ptr2;
			if (null == ptr2)
			{
				return 0L;
			}
		}
		if (0L == *(A_0 + 608L))
		{
			*(A_0 + 608L) = <Module>.MapViewOfFile(*(A_0 + 600L), 4, 0, 0, 0UL);
		}
		return *(A_0 + 608L);
	}

	// Token: 0x06000021 RID: 33 RVA: 0x0001D340 File Offset: 0x0001C740
	internal unsafe static void Close(LocalFile* A_0)
	{
		ulong num = (ulong)(*(A_0 + 608L));
		if (num != 0UL)
		{
			<Module>.UnmapViewOfFile(num);
			*(A_0 + 608L) = 0L;
		}
		ulong num2 = (ulong)(*(A_0 + 600L));
		if (num2 != 0UL)
		{
			<Module>.CloseHandle(num2);
			*(A_0 + 600L) = 0L;
		}
		ulong num3 = (ulong)(*(A_0 + 592L));
		if (18446744073709551615UL != num3)
		{
			bool flag = false;
			if (4 != *(A_0 + 8L))
			{
				flag = 0 == <Module>.GetFileSize(num3, null) || flag;
			}
			<Module>.CloseHandle(*(A_0 + 592L));
			*(A_0 + 592L) = -1L;
			if (flag)
			{
				<Module>.DeleteFileW(A_0 / sizeof(char) + 72L);
			}
		}
		*(A_0 + 8L) = 0;
	}

	// Token: 0x06000022 RID: 34 RVA: 0x0001D3F0 File Offset: 0x0001C7F0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetFullSize(LocalFile* A_0, long nFullSize)
	{
		LocalFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 16L) = nFullSize;
		<Module>.LeaveCriticalSection(ptr);
		return 1;
	}

	// Token: 0x06000023 RID: 35 RVA: 0x0000B564 File Offset: 0x0000A964
	internal unsafe static void Init(LocalFile* A_0, char* cwszFilePath)
	{
		*(A_0 + 592L) = -1L;
		*(A_0 + 600L) = 0L;
		*(A_0 + 608L) = 0L;
		LocalFile* ptr = A_0 + 72L;
		<Module>.wcscpy_s(ptr, 260UL, cwszFilePath);
		_WIN32_FILE_ATTRIBUTE_DATA win32_FILE_ATTRIBUTE_DATA;
		if (<Module>.GetFileAttributesExW(ptr, (_GET_FILEEX_INFO_LEVELS)0, (void*)(&win32_FILE_ATTRIBUTE_DATA)) != null)
		{
			*(A_0 + 24L) = (long)(((ulong)(*((ref win32_FILE_ATTRIBUTE_DATA) + 28)) << 32) | (ulong)(*((ref win32_FILE_ATTRIBUTE_DATA) + 32)));
		}
		else if (2 != <Module>.GetLastError())
		{
			*(A_0 + 8L) = -4;
			return;
		}
		*(A_0 + 8L) = 1;
	}

	// Token: 0x06000024 RID: 36 RVA: 0x0001CF58 File Offset: 0x0001C358
	internal unsafe static void* __vecDelDtor(LocalFile* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			LocalFile* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 616UL, (ulong)(*ptr), ldftn(LocalFile.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				LocalFile* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 616L + 8L));
			}
			return ptr;
		}
		<Module>.LocalFile.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 616UL);
		}
		return A_0;
	}

	// Token: 0x06000025 RID: 37 RVA: 0x0001BFB4 File Offset: 0x0001B3B4
	internal unsafe static void {dtor}(MemoryFile* A_0)
	{
		*A_0 = ref <Module>.??_7MemoryFile@@6B@;
		try
		{
			ulong num = (ulong)(*(A_0 + 72L));
			if (num != 0UL)
			{
				<Module>.free(num);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(DownloadFile.{dtor}), A_0);
			throw;
		}
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
	}

	// Token: 0x06000026 RID: 38 RVA: 0x0001C018 File Offset: 0x0001B418
	internal unsafe static void GetDstFilePath(MemoryFile* A_0, char* wszFilePath, int nLen)
	{
		if (wszFilePath != null && nLen > 0)
		{
			<Module>.wcscpy_s(wszFilePath, (ulong)((long)nLen), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		}
	}

	// Token: 0x06000027 RID: 39 RVA: 0x0001C03C File Offset: 0x0001B43C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ResetFilePointer(MemoryFile* A_0)
	{
		MemoryFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		if (1 != *(A_0 + 8L))
		{
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		*(A_0 + 24L) = 0L;
		<Module>.LeaveCriticalSection(ptr);
		return 1;
	}

	// Token: 0x06000028 RID: 40 RVA: 0x0001C074 File Offset: 0x0001B474
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool WriteFileData(MemoryFile* A_0, @byte* pBuffer, uint dwSize)
	{
		MemoryFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		int num = *(A_0 + 8L);
		<Module>.LeaveCriticalSection(ptr);
		if (1 < num && 4 != num)
		{
			if (null != pBuffer)
			{
				long num2 = (long)((ulong)dwSize);
				long num3 = *(A_0 + 16L);
				if (*(A_0 + 24L) + num2 <= num3)
				{
					if (0L == *(A_0 + 72L))
					{
						void* ptr2 = <Module>.malloc((ulong)((int)num3));
						*(A_0 + 72L) = ptr2;
						if (null == ptr2)
						{
							<Module>.EnterCriticalSection(ptr);
							*(A_0 + 8L) = -4;
							<Module>.LeaveCriticalSection(ptr);
							return 0;
						}
					}
					long num4 = *(A_0 + 24L);
					<Module>.?A0x2bfc062d.memcpy_s(num4 + *(A_0 + 72L), *(A_0 + 16L) - num4, pBuffer, (ulong)dwSize);
					<Module>.EnterCriticalSection(ptr);
					*(A_0 + 24L) = *(A_0 + 24L) + num2;
					<Module>.LeaveCriticalSection(ptr);
					return 1;
				}
			}
			<Module>.EnterCriticalSection(ptr);
			*(A_0 + 8L) = -5;
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		return 0;
	}

	// Token: 0x06000029 RID: 41 RVA: 0x0001C150 File Offset: 0x0001B550
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool FlushFileData(MemoryFile* A_0)
	{
		return 1;
	}

	// Token: 0x0600002A RID: 42 RVA: 0x0001C160 File Offset: 0x0001B560
	internal unsafe static @byte* GetFileBuffer(MemoryFile* A_0)
	{
		MemoryFile* ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		int num = *(A_0 + 8L);
		<Module>.LeaveCriticalSection(ptr);
		if (4 != num)
		{
			return 0L;
		}
		return *(A_0 + 72L);
	}

	// Token: 0x0600002B RID: 43 RVA: 0x0001C194 File Offset: 0x0001B594
	internal unsafe static void Close(MemoryFile* A_0)
	{
		ulong num = (ulong)(*(A_0 + 72L));
		if (num != 0UL)
		{
			<Module>.free(num);
			*(A_0 + 72L) = 0L;
		}
		*(A_0 + 8L) = 0;
	}

	// Token: 0x0600002C RID: 44 RVA: 0x0001C1C0 File Offset: 0x0001B5C0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetFullSize(MemoryFile* A_0, long nFullSize)
	{
		MemoryFile* ptr;
		if (nFullSize < 0L)
		{
			ptr = A_0 + 32L;
			<Module>.EnterCriticalSection(ptr);
			*(A_0 + 8L) = -6;
			<Module>.LeaveCriticalSection(ptr);
			return 0;
		}
		ptr = A_0 + 32L;
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 16L) = nFullSize;
		<Module>.LeaveCriticalSection(ptr);
		return 1;
	}

	// Token: 0x0600002D RID: 45 RVA: 0x0001BF10 File Offset: 0x0001B310
	internal unsafe static void* __vecDelDtor(MemoryFile* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			MemoryFile* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 80UL, (ulong)(*ptr), ldftn(MemoryFile.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				MemoryFile* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 80L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7MemoryFile@@6B@;
		try
		{
			ulong num = (ulong)(*(A_0 + 72L));
			if (num != 0UL)
			{
				<Module>.free(num);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(DownloadFile.{dtor}), A_0);
			throw;
		}
		*A_0 = ref <Module>.??_7DownloadFile@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 32L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 80UL);
		}
		return A_0;
	}

	// Token: 0x0600002E RID: 46 RVA: 0x00012E58 File Offset: 0x00012258
	internal unsafe static DownloadSpeed* {ctor}(DownloadSpeed* A_0)
	{
		*A_0 = ref <Module>.??_7DownloadSpeed@@6B@;
		deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* ptr = A_0 + 8L;
		*ptr = 0L;
		*(ptr + 8L) = 0L;
		*(ptr + 16L) = 0L;
		*(ptr + 24L) = 0L;
		*(ptr + 32L) = 0L;
		<Module>.std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>._Alloc_proxy(ptr);
		try
		{
			*(A_0 + 48L) = 0;
			*(A_0 + 52L) = 0;
			*(A_0 + 56L) = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.{dtor}), (void*)(A_0 + (byte*)8L));
			throw;
		}
		return A_0;
	}

	// Token: 0x0600002F RID: 47 RVA: 0x000109F4 File Offset: 0x0000FDF4
	internal unsafe static void {dtor}(DownloadSpeed* A_0)
	{
		*A_0 = ref <Module>.??_7DownloadSpeed@@6B@;
		DownloadSpeed* ptr;
		try
		{
			ptr = A_0 + 8L;
			<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>._Tidy(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.{dtor}), (void*)(A_0 + (byte*)8L));
			throw;
		}
		deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* ptr2 = ptr;
		try
		{
			<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>._Tidy(ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>.{dtor}), ptr2);
			throw;
		}
		<Module>.std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>._Free_proxy(ptr2);
	}

	// Token: 0x06000030 RID: 48 RVA: 0x00010A78 File Offset: 0x0000FE78
	internal unsafe static void AddDownloadInfo(DownloadSpeed* A_0, uint dwSize, uint dwCurrTime)
	{
		if (*(A_0 + 56L) == 0)
		{
			*(A_0 + 56L) = (int)dwCurrTime;
		}
		uint num = (uint)(*(A_0 + 56L));
		uint num2;
		if (dwCurrTime > num)
		{
			num2 = dwCurrTime - num;
		}
		else
		{
			num2 = 0U;
		}
		*(A_0 + 56L) = (int)dwCurrTime;
		DownloadSpeed.DOWNLOAD_INFO download_INFO = dwSize;
		*((ref download_INFO) + 4) = (int)num2;
		DownloadSpeed* ptr = A_0 + 8L;
		<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.push_back(ptr, ref download_INFO);
		*(A_0 + 48L) = *(A_0 + 48L) + (int)dwSize;
		*(A_0 + 52L) = *(A_0 + 52L) + (int)num2;
		uint num3 = (uint)(*(A_0 + 52L));
		if (10000U < num3)
		{
			DownloadSpeed* ptr2 = A_0 + 40L;
			while (1L != *ptr2)
			{
				DownloadSpeed.DOWNLOAD_INFO* ptr3 = <Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.front(ptr);
				*(A_0 + 48L) = *(A_0 + 48L) - *ptr3;
				*(A_0 + 52L) = *(A_0 + 52L) - *(ptr3 + 4L);
				<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.pop_front(ptr);
				if (10000 >= *(A_0 + 52L))
				{
					break;
				}
			}
		}
	}

	// Token: 0x06000031 RID: 49 RVA: 0x0001D52C File Offset: 0x0001C92C
	internal unsafe static void* __vecDelDtor(DownloadSpeed* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			DownloadSpeed* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 64UL, (ulong)(*ptr), ldftn(DownloadSpeed.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				DownloadSpeed* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 64L + 8L));
			}
			return ptr;
		}
		<Module>.DownloadSpeed.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 64UL);
		}
		return A_0;
	}

	// Token: 0x06000032 RID: 50 RVA: 0x00012EE0 File Offset: 0x000122E0
	internal unsafe static FileDownloader* {ctor}(FileDownloader* A_0)
	{
		*A_0 = ref <Module>.??_7FileDownloader@@6B@;
		escape_string* ptr = A_0 + 16L;
		*ptr = 0L;
		*(ptr + 8L) = 0L;
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_0 + 32L);
			try
			{
				shared_ptr<LocalFile>* ptr2 = A_0 + 336L;
				*ptr2 = 0L;
				*(ptr2 + 8L) = 0L;
				try
				{
					shared_ptr<MemoryFile>* ptr3 = A_0 + 352L;
					*ptr3 = 0L;
					*(ptr3 + 8L) = 0L;
					try
					{
						<Module>.DownloadSpeed.{ctor}(A_0 + 408L);
						try
						{
							<Module>.InitializeCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 368L);
							*(A_0 + 8L) = <Module>.curl_easy_init();
							*(A_0 + 64L) = 0;
							*(A_0 + 320L) = 0L;
							*(A_0 + 328L) = 0L;
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(DownloadSpeed.{dtor}), (void*)(A_0 + (byte*)408L));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(A_0 + (byte*)352L));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(A_0 + (byte*)336L));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(escape_string.{dtor}), (void*)(A_0 + (byte*)16L));
			throw;
		}
		return A_0;
	}

	// Token: 0x06000033 RID: 51 RVA: 0x00010B3C File Offset: 0x0000FF3C
	internal unsafe static void {dtor}(FileDownloader* A_0)
	{
		*A_0 = ref <Module>.??_7FileDownloader@@6B@;
		try
		{
			try
			{
				try
				{
					try
					{
						try
						{
							ulong num = (ulong)(*(A_0 + 8L));
							if (num != 0UL)
							{
								<Module>.curl_easy_cleanup(num);
							}
							<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 368L);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(DownloadSpeed.{dtor}), (void*)(A_0 + (byte*)408L));
							throw;
						}
						<Module>.DownloadSpeed.{dtor}(A_0 + 408L);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(A_0 + (byte*)352L));
						throw;
					}
					ulong num2 = (ulong)(*(A_0 + 352L + 8L));
					if (num2 != 0UL)
					{
						<Module>.std._Ref_count_base._Decref(num2);
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(A_0 + (byte*)336L));
					throw;
				}
				ulong num3 = (ulong)(*(A_0 + 336L + 8L));
				if (num3 != 0UL)
				{
					<Module>.std._Ref_count_base._Decref(num3);
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
			basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr = A_0 + 32L;
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(escape_string.{dtor}), (void*)(A_0 + (byte*)16L));
			throw;
		}
		ulong num4 = (ulong)(*(A_0 + 16L));
		if (num4 != 0UL)
		{
			<Module>.free(num4);
		}
	}

	// Token: 0x06000034 RID: 52 RVA: 0x0000A28C File Offset: 0x0000968C
	internal static void Cleanup()
	{
		<Module>.curl_global_cleanup();
	}

	// Token: 0x06000035 RID: 53 RVA: 0x00013060 File Offset: 0x00012460
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Prepare(FileDownloader* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (0UL == num || *(A_0 + 320L) != 0L)
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.FileDownloader.CurlSetDefaultOpt(num))
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)43, __arglist(0)))
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)20056, __arglist(<Module>.__unep@?ProgressFunction@FileDownloader@@$$FCAHPEAXNNNN@Z)))
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)10057, __arglist(A_0)))
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)20011, __arglist(<Module>.__unep@?WriteFunction@FileDownloader@@$$FCA_KPEAX_K10@Z)))
		{
			return 0;
		}
		if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)10001, __arglist(A_0)))
		{
			return 0;
		}
		return ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)10010, __arglist(A_0 / sizeof(sbyte) + 64L))) ? 0 : 1;
	}

	// Token: 0x06000036 RID: 54 RVA: 0x00010CD4 File Offset: 0x000100D4
	internal unsafe static void Clear(FileDownloader* A_0)
	{
		FileDownloader* ptr = A_0 + 368L;
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 320L) = 0L;
		*(A_0 + 328L) = 0L;
		shared_ptr<LocalFile> shared_ptr<LocalFile> = 0L;
		*((ref shared_ptr<LocalFile>) + 8) = 0L;
		try
		{
			<Module>.std.shared_ptr<LocalFile>.=(A_0 + 336L, ref shared_ptr<LocalFile>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
			throw;
		}
		if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
		}
		shared_ptr<MemoryFile> shared_ptr<MemoryFile> = 0L;
		*((ref shared_ptr<MemoryFile>) + 8) = 0L;
		try
		{
			<Module>.std.shared_ptr<MemoryFile>.=(A_0 + 352L, ref shared_ptr<MemoryFile>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(&shared_ptr<MemoryFile>));
			throw;
		}
		if (*((ref shared_ptr<MemoryFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<MemoryFile>) + 8));
		}
		<Module>.LeaveCriticalSection(ptr);
	}

	// Token: 0x06000037 RID: 55 RVA: 0x00010DBC File Offset: 0x000101BC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetDownload(FileDownloader* A_0, shared_ptr<LocalFile>* pLocalFile, char* cwszUrl, int nUrlLen, uint nCodePage)
	{
		bool flag;
		try
		{
			FileDownloader* ptr = A_0 + 336L;
			<Module>.std.shared_ptr<LocalFile>.=(ptr, pLocalFile);
			shared_ptr<MemoryFile> shared_ptr<MemoryFile> = 0L;
			*((ref shared_ptr<MemoryFile>) + 8) = 0L;
			try
			{
				<Module>.std.shared_ptr<MemoryFile>.=(A_0 + 352L, ref shared_ptr<MemoryFile>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(&shared_ptr<MemoryFile>));
				throw;
			}
			if (*((ref shared_ptr<MemoryFile>) + 8) != 0L)
			{
				<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<MemoryFile>) + 8));
			}
			LocalFile* ptr2 = *ptr;
			flag = <Module>.FileDownloader.SetDownload(A_0, (DownloadFile*)ptr2, cwszUrl, nUrlLen, nCodePage) != null;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)pLocalFile);
			throw;
		}
		ulong num = (ulong)(*(long*)(pLocalFile + 8L / (long)sizeof(shared_ptr<LocalFile>)));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
		return flag;
	}

	// Token: 0x06000038 RID: 56 RVA: 0x00010E7C File Offset: 0x0001027C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetDownload(FileDownloader* A_0, shared_ptr<MemoryFile>* MemoryFile, char* cwszUrl, int nUrlLen, uint nCodePage)
	{
		bool flag;
		try
		{
			shared_ptr<LocalFile> shared_ptr<LocalFile> = 0L;
			*((ref shared_ptr<LocalFile>) + 8) = 0L;
			try
			{
				<Module>.std.shared_ptr<LocalFile>.=(A_0 + 336L, ref shared_ptr<LocalFile>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
				throw;
			}
			if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
			{
				<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
			}
			FileDownloader* ptr = A_0 + 352L;
			<Module>.std.shared_ptr<MemoryFile>.=(ptr, MemoryFile);
			MemoryFile* ptr2 = *ptr;
			flag = <Module>.FileDownloader.SetDownload(A_0, (DownloadFile*)ptr2, cwszUrl, nUrlLen, nCodePage) != null;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)MemoryFile);
			throw;
		}
		ulong num = (ulong)(*(long*)(MemoryFile + 8L / (long)sizeof(shared_ptr<MemoryFile>)));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
		return flag;
	}

	// Token: 0x06000039 RID: 57 RVA: 0x0000B5EC File Offset: 0x0000A9EC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetDownload(FileDownloader* A_0, DownloadFile* pFile, sbyte* cszUrl, int nUrlLen)
	{
		if (null == pFile || 0L == *(A_0 + 8L) || *(A_0 + 320L) != 0L)
		{
			return 0;
		}
		DownloadFile* ptr = pFile + 32L / (long)sizeof(DownloadFile);
		<Module>.EnterCriticalSection((_RTL_CRITICAL_SECTION*)ptr);
		int num = *(int*)(pFile + 8L / (long)sizeof(DownloadFile));
		<Module>.LeaveCriticalSection((_RTL_CRITICAL_SECTION*)ptr);
		if (1 != num)
		{
			return 0;
		}
		FileDownloader* ptr2 = A_0 + 16L;
		if (<Module>.FileDownloader.easy_escape(cszUrl, (ulong)((long)nUrlLen), ptr2) == null)
		{
			return 0;
		}
		long num2 = *ptr2;
		long num3 = *(A_0 + 8L);
		if ((CURLcode)0 != <Module>.curl_easy_setopt(num3, (CURLoption)10002, __arglist(num2)))
		{
			return 0;
		}
		FileDownloader* ptr3 = A_0 + 368L;
		<Module>.EnterCriticalSection(ptr3);
		*(A_0 + 320L) = pFile;
		<Module>.LeaveCriticalSection(ptr3);
		return 1;
	}

	// Token: 0x0600003A RID: 58 RVA: 0x0000B68C File Offset: 0x0000AA8C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetDownload(FileDownloader* A_0, DownloadFile* pFile, char* cwszUrl, int nUrlLen, uint nCodePage)
	{
		if (0 == nUrlLen)
		{
			char* ptr = cwszUrl;
			if (*(short*)cwszUrl != 0)
			{
				do
				{
					ptr += 2L / (long)sizeof(char);
				}
				while (*(short*)ptr != 0);
			}
			nUrlLen = (int)(ptr - cwszUrl >> 1);
		}
		int num = <Module>.WideCharToMultiByte(nCodePage, 0, cwszUrl, nUrlLen, null, 0, null, null);
		if (0 == num)
		{
			return 0;
		}
		ulong num2 = (ulong)((long)(num + 1));
		sbyte* ptr2 = <Module>.malloc(num2);
		if (null == ptr2)
		{
			return 0;
		}
		initblk(ptr2, 0, num2);
		if (num != <Module>.WideCharToMultiByte(nCodePage, 0, cwszUrl, nUrlLen, ptr2, num, null, null))
		{
			<Module>.free((void*)ptr2);
			return 0;
		}
		bool flag = <Module>.FileDownloader.SetDownload(A_0, pFile, (sbyte*)ptr2, num) != null;
		<Module>.free((void*)ptr2);
		return flag;
	}

	// Token: 0x0600003B RID: 59 RVA: 0x0000B71C File Offset: 0x0000AB1C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool DownloadFileInfo(FileDownloader* A_0, void* hAbortEvent)
	{
		if (0L != *(A_0 + 8L))
		{
			ulong num = (ulong)(*(A_0 + 320L));
			if (0UL != num)
			{
				*(A_0 + 328L) = hAbortEvent;
				<Module>.EnterCriticalSection(num / (ulong)sizeof(_RTL_CRITICAL_SECTION) + 32UL);
				ulong num2 = (ulong)(*(A_0 + 320L));
				if (1 != *(num2 + 8UL))
				{
					<Module>.LeaveCriticalSection(num2 / (ulong)sizeof(_RTL_CRITICAL_SECTION) + 32UL);
					return 0;
				}
				if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)44, __arglist(1)))
				{
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return 0;
				}
				if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)21, __arglist(0)))
				{
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return 0;
				}
				*(*(A_0 + 320L) + 8L) = 2;
				*(*(A_0 + 320L) + 12L) = 0;
				<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
				CURLcode curlcode = (CURLcode)<Module>.curl_easy_perform(*(A_0 + 8L));
				if ((CURLcode)0 != curlcode)
				{
					<Module>.OutputDebugStringA(A_0 / sizeof(sbyte) + 64L);
					<Module>.FileDownloader.SetDownloadError(A_0, curlcode);
					return 0;
				}
				int num3;
				if ((CURLcode)0 != <Module>.curl_easy_getinfo(*(A_0 + 8L), (CURLINFO)2097154, __arglist(&num3)))
				{
					return 0;
				}
				double num4;
				if ((CURLcode)0 != <Module>.curl_easy_getinfo(*(A_0 + 8L), (CURLINFO)3145743, __arglist(&num4)))
				{
					return 0;
				}
				<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
				*(*(A_0 + 320L) + 12L) = num3;
				if (-1.0 == num4)
				{
					*(*(A_0 + 320L) + 8L) = -7;
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return 0;
				}
				*(*(A_0 + 320L) + 8L) = 1;
				<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
				if (<Module>.DownloadFile.IsDownloadFailed(*(A_0 + 320L)) != null)
				{
					return 0;
				}
				ulong num5 = (ulong)(*(A_0 + 320L));
				IntPtr intPtr = (IntPtr)num5;
				long num6 = *(*num5 + 56L);
				return (calli(System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.Int64), intPtr, (long)num4, num6) == 0) ? 0 : 1;
			}
		}
		return 0;
	}

	// Token: 0x0600003C RID: 60 RVA: 0x00013120 File Offset: 0x00012520
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Download(FileDownloader* A_0, void* hAbortEvent, long nFileSize)
	{
		if (0L != *(A_0 + 8L))
		{
			ulong num = (ulong)(*(A_0 + 320L));
			if (0UL != num)
			{
				*(A_0 + 328L) = hAbortEvent;
				<Module>.EnterCriticalSection(num / (ulong)sizeof(_RTL_CRITICAL_SECTION) + 32UL);
				ulong num2 = (ulong)(*(A_0 + 320L));
				long num3 = *(num2 + 24UL);
				long num4;
				if (nFileSize > 0L && *(num2 + 16UL) == 0L)
				{
					num4 = nFileSize;
				}
				else
				{
					num4 = *(num2 + 16UL);
				}
				long num5 = num4;
				int num6 = *(num2 + 8UL);
				<Module>.LeaveCriticalSection(num2 / (ulong)sizeof(_RTL_CRITICAL_SECTION) + 32UL);
				if (0L < num3)
				{
					if (0L == num4)
					{
						if (<Module>.FileDownloader.DownloadFileInfo(A_0, hAbortEvent) == null)
						{
							return 0;
						}
						<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
						num2 = (ulong)(*(A_0 + 320L));
						num5 = *(num2 + 16UL);
						num6 = *(num2 + 8UL);
						<Module>.LeaveCriticalSection(num2 / (ulong)sizeof(_RTL_CRITICAL_SECTION) + 32UL);
					}
					if (num3 == num5)
					{
						<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
						*(*(A_0 + 320L) + 8L) = 4;
						*(*(A_0 + 320L) + 12L) = 0;
						<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
						return 1;
					}
				}
				if (1 != num6)
				{
					return 0;
				}
				sbyte* ptr = *(A_0 + 16L);
				basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ptr);
				bool flag;
				try
				{
					if ((<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.find(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ref <Module>.??_C@_07FGAOOBMN@http?3?1?1@, 0L) != null && <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.find(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ref <Module>.??_C@_08MFLLBFBE@https?3?1?1@, 0L) != null) || (CURLcode)0 == <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)80, __arglist(1)))
					{
						if (0L < num3)
						{
							if (num3 > num5)
							{
								goto IL_21C;
							}
							if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)30116, __arglist(num3)))
							{
								goto IL_21C;
							}
						}
						else if ((CURLcode)0 != <Module>.curl_easy_setopt(*(A_0 + 8L), (CURLoption)21, __arglist(0)))
						{
							goto IL_21C;
						}
						<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
						*(*(A_0 + 320L) + 8L) = 3;
						*(*(A_0 + 320L) + 12L) = 0;
						<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
						ref int ptr2 = A_0 + 408L;
						uint tickCount = <Module>.GetTickCount();
						*((ref ptr2) + 56L) = (int)tickCount;
						CURLcode curlcode = (CURLcode)<Module>.curl_easy_perform(*(A_0 + 8L));
						if ((CURLcode)0 != curlcode)
						{
							<Module>.OutputDebugStringA(A_0 / sizeof(sbyte) + 64L);
							<Module>.FileDownloader.SetDownloadError(A_0, (CURLcode)curlcode);
						}
						else
						{
							num2 = (ulong)(*(A_0 + 320L));
							ulong num7 = num2;
							if (calli(System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), (IntPtr)num7, *(*num7 + 32L)) != null)
							{
								<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
								*(*(A_0 + 320L) + 8L) = 4;
								<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
								flag = true;
								goto IL_256;
							}
						}
					}
					IL_21C:
					flag = false;
					IL_256:;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
					throw;
				}
				return flag;
			}
		}
		return 0;
	}

	// Token: 0x0600003D RID: 61 RVA: 0x0000B8EC File Offset: 0x0000ACEC
	internal unsafe static int GetErrorCode(FileDownloader* A_0)
	{
		ulong num = (ulong)(*(A_0 + 320L));
		if (0UL == num)
		{
			return 0;
		}
		int num2 = *(num + 12UL);
		DownloadFile* ptr = num;
		DownloadFile* ptr2 = ptr + 32L;
		<Module>.EnterCriticalSection(ptr2);
		int num3 = *(ptr + 8L);
		<Module>.LeaveCriticalSection(ptr2);
		return num2 * 100 - num3;
	}

	// Token: 0x0600003E RID: 62 RVA: 0x0000F344 File Offset: 0x0000E744
	internal unsafe static shared_ptr<LocalFile>* OpenFile(shared_ptr<LocalFile>* A_0, char* cwszFilePath)
	{
		uint num = 0U;
		if (cwszFilePath != null)
		{
			if (<Module>.FileCommon.EnsurePath(cwszFilePath) == null)
			{
				*(long*)A_0 = 0L;
				*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<LocalFile>)) = 0L;
				try
				{
					num = 1U;
					return A_0;
				}
				catch
				{
					if ((num & 1U) != 0U)
					{
						num &= 4294967294U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)A_0);
					}
					throw;
				}
			}
			<Module>.std.make_shared<class\u0020LocalFile,wchar_t\u0020const\u0020*\u0020&>(A_0, ref cwszFilePath);
			try
			{
				num = 1U;
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		*(long*)A_0 = 0L;
		*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<LocalFile>)) = 0L;
		shared_ptr<LocalFile>* ptr;
		try
		{
			num = 1U;
			ptr = A_0;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return ptr;
	}

	// Token: 0x0600003F RID: 63 RVA: 0x0000F424 File Offset: 0x0000E824
	internal unsafe static shared_ptr<MemoryFile>* OpenMemory(shared_ptr<MemoryFile>* A_0)
	{
		uint num = 0U;
		<Module>.std.make_shared<class\u0020MemoryFile>(A_0);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000040 RID: 64 RVA: 0x0000A2A0 File Offset: 0x000096A0
	internal unsafe static void SetDownloadError(FileDownloader* A_0, CURLcode nResult)
	{
		if ((CURLcode)0 != nResult)
		{
			if (nResult != (CURLcode)7 && nResult != (CURLcode)18)
			{
				if (nResult == (CURLcode)28)
				{
					<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					*(*(A_0 + 320L) + 8L) = -2;
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return;
				}
				if (nResult == (CURLcode)42)
				{
					<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					*(*(A_0 + 320L) + 8L) = -1;
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return;
				}
				if (nResult != (CURLcode)56)
				{
					<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					long num = *(A_0 + 320L);
					if (*(num + 12L) >= 400)
					{
						*(num + 8L) = 0;
					}
					else
					{
						*(num + 8L) = (int)((CURLcode)(-10) - nResult);
					}
					<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
					return;
				}
			}
			<Module>.EnterCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
			*(*(A_0 + 320L) + 8L) = -3;
			<Module>.LeaveCriticalSection(*(A_0 + 320L) / (long)sizeof(_RTL_CRITICAL_SECTION) + 32L);
		}
	}

	// Token: 0x06000041 RID: 65 RVA: 0x0000A3C8 File Offset: 0x000097C8
	internal unsafe static int ProgressFunction(void* clientp, double dltotal, double dlnow, double ultotal, double ulnow)
	{
		if (null == clientp)
		{
			return -1;
		}
		ulong num = (ulong)(*(long*)((byte*)clientp + 328L));
		if (num != 0UL && 258 != <Module>.WaitForSingleObject(num, 0))
		{
			return -1;
		}
		return 0;
	}

	// Token: 0x06000042 RID: 66 RVA: 0x00010F3C File Offset: 0x0001033C
	internal unsafe static ulong WriteFunction(void* ptr, ulong size, ulong nmemb, void* stream)
	{
		if (null == stream)
		{
			return -1L;
		}
		DownloadFile* ptr2 = *(long*)((byte*)stream + 320L);
		if (null == ptr2)
		{
			return -1L;
		}
		if (0L == *(long*)(ptr2 + 16L / (long)sizeof(DownloadFile)))
		{
			int num;
			if ((CURLcode)0 != <Module>.curl_easy_getinfo(*(long*)((byte*)stream + 8L), (CURLINFO)2097154, __arglist(&num)))
			{
				return -1L;
			}
			DownloadFile* ptr3 = ptr2 + 32L / (long)sizeof(DownloadFile);
			<Module>.EnterCriticalSection((_RTL_CRITICAL_SECTION*)ptr3);
			*(int*)(ptr2 + 12L / (long)sizeof(DownloadFile)) = num;
			<Module>.LeaveCriticalSection((_RTL_CRITICAL_SECTION*)ptr3);
			double num2 = 0.0;
			if ((CURLcode)0 != <Module>.curl_easy_getinfo(*(long*)((byte*)stream + 8L), (CURLINFO)3145743, __arglist(&num2)))
			{
				return -1L;
			}
			if (-1.0 == num2)
			{
				<Module>.EnterCriticalSection((_RTL_CRITICAL_SECTION*)ptr3);
				*(int*)(ptr2 + 8L / (long)sizeof(DownloadFile)) = -7;
				<Module>.LeaveCriticalSection((_RTL_CRITICAL_SECTION*)ptr3);
				return -1L;
			}
			if (<Module>.DownloadFile.IsDownloadFailed(ptr2) != null)
			{
				return -1L;
			}
			long num3 = *(*(long*)ptr2 + 56L);
			byte b = calli(System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.Int64), ptr2, (long)num2 + *(long*)(ptr2 + 24L / (long)sizeof(DownloadFile)), num3);
		}
		uint num4 = (uint)(size * nmemb);
		if (num4 + (ulong)(*(long*)(ptr2 + 24L / (long)sizeof(DownloadFile))) > (ulong)(*(long*)(ptr2 + 16L / (long)sizeof(DownloadFile))))
		{
			DownloadFile* ptr4 = ptr2 + 32L / (long)sizeof(DownloadFile);
			<Module>.EnterCriticalSection((_RTL_CRITICAL_SECTION*)ptr4);
			*(int*)(ptr2 + 8L / (long)sizeof(DownloadFile)) = -7;
			<Module>.LeaveCriticalSection((_RTL_CRITICAL_SECTION*)ptr4);
			return -1L;
		}
		long num5 = *(*(long*)ptr2 + 24L);
		if (0 == calli(System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,std.byte modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt32), ptr2, (@byte*)ptr, num4, num5))
		{
			return -1L;
		}
		void* ptr5 = (void*)((byte*)stream + 368L);
		<Module>.EnterCriticalSection((_RTL_CRITICAL_SECTION*)ptr5);
		<Module>.DownloadSpeed.AddDownloadInfo((byte*)stream + 408L, num4, <Module>.GetTickCount());
		<Module>.LeaveCriticalSection((_RTL_CRITICAL_SECTION*)ptr5);
		return num4;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x0000A3FC File Offset: 0x000097FC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool easy_escape(sbyte* @string, ulong inlength, escape_string* out_string)
	{
		ulong num;
		if (inlength != 0UL)
		{
			num = inlength;
		}
		else
		{
			sbyte* ptr = @string;
			if (*(sbyte*)@string != 0)
			{
				do
				{
					ptr += 1L / (long)sizeof(sbyte);
				}
				while (*(sbyte*)ptr != 0);
			}
			num = (ulong)(ptr - @string);
		}
		ulong num2 = num + 1UL;
		ulong num3 = num2;
		ulong num4 = 0UL;
		if (<Module>.escape_string.resize(out_string, num2) == null)
		{
			return 0;
		}
		ulong num5 = num2 - 1UL;
		if (num5 != 0UL)
		{
			for (;;)
			{
				num5 -= 1UL;
				byte b = (byte)(*(sbyte*)@string);
				switch (b)
				{
				case 33:
				case 36:
				case 38:
				case 39:
				case 40:
				case 41:
				case 42:
				case 43:
				case 44:
				case 45:
				case 46:
				case 47:
				case 48:
				case 49:
				case 50:
				case 51:
				case 52:
				case 53:
				case 54:
				case 55:
				case 56:
				case 57:
				case 58:
				case 59:
				case 61:
				case 63:
				case 64:
				case 65:
				case 66:
				case 67:
				case 68:
				case 69:
				case 70:
				case 71:
				case 72:
				case 73:
				case 74:
				case 75:
				case 76:
				case 77:
				case 78:
				case 79:
				case 80:
				case 81:
				case 82:
				case 83:
				case 84:
				case 85:
				case 86:
				case 87:
				case 88:
				case 89:
				case 90:
				case 95:
				case 97:
				case 98:
				case 99:
				case 100:
				case 101:
				case 102:
				case 103:
				case 104:
				case 105:
				case 106:
				case 107:
				case 108:
				case 109:
				case 110:
				case 111:
				case 112:
				case 113:
				case 114:
				case 115:
				case 116:
				case 117:
				case 118:
				case 119:
				case 120:
				case 121:
				case 122:
				case 126:
					*(*out_string + (long)num4) = (byte)((sbyte)b);
					num4 += 1UL;
					break;
				case 34:
				case 35:
				case 37:
				case 60:
				case 62:
				case 91:
				case 92:
				case 93:
				case 94:
				case 96:
				case 123:
				case 124:
				case 125:
					goto IL_1DB;
				default:
					goto IL_1DB;
				}
				IL_210:
				@string += 1L / (long)sizeof(sbyte);
				if (num5 == 0UL)
				{
					break;
				}
				continue;
				IL_1DB:
				num3 += 2UL;
				if (num3 > num2)
				{
					num2 *= 2UL;
					if (<Module>.escape_string.resize(out_string, num2) == null)
					{
						return 0;
					}
				}
				<Module>._snprintf_s(*out_string + (long)num4, num2 - num4, 4L, ref <Module>.??_C@_06EPABMEI@?$CF?$CF?$CF02X@, __arglist((int)b));
				num4 += 3UL;
				goto IL_210;
			}
		}
		*(*out_string + (long)num4) = 0;
		return 1;
	}

	// Token: 0x06000044 RID: 68 RVA: 0x0000A630 File Offset: 0x00009A30
	internal unsafe static CURLcode CurlSetDefaultOpt(void* curl)
	{
		CURLcode curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)181, __arglist(1027));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)182, __arglist(1027));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)52, __arglist(1));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)78, __arglist(30));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)19, __arglist(1));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)20, __arglist(30));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)20, __arglist(30));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		curlcode = (CURLcode)<Module>.curl_easy_setopt(curl, (CURLoption)64, __arglist(0));
		if ((CURLcode)0 != curlcode)
		{
			return (CURLcode)curlcode;
		}
		return <Module>.curl_easy_setopt(curl, (CURLoption)81, __arglist(0));
	}

	// Token: 0x06000045 RID: 69 RVA: 0x0001D580 File Offset: 0x0001C980
	internal unsafe static void* __vecDelDtor(FileDownloader* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			FileDownloader* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 472UL, (ulong)(*ptr), ldftn(FileDownloader.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				FileDownloader* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 472L + 8L));
			}
			return ptr;
		}
		<Module>.FileDownloader.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 472UL);
		}
		return A_0;
	}

	// Token: 0x06000046 RID: 70 RVA: 0x0000A6DC File Offset: 0x00009ADC
	internal unsafe static FileHash* {ctor}(FileHash* A_0)
	{
		*A_0 = ref <Module>.??_7FileHash@@6B@;
		*(A_0 + 616L) = 0;
		<Module>.InitializeCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 8L);
		*(A_0 + 48L) = 0;
		FileHash* ptr = A_0 + 568L;
		<Module>.CryptAcquireContextW(ptr, null, null, 1, -268435424);
		<Module>.CryptCreateHash((ulong)(*ptr), 32771U, 0UL, 0, A_0 / 8 + 576L);
		*(A_0 + 584L) = 0L;
		*(A_0 + 592L) = 0L;
		*(A_0 + 608L) = <Module>.malloc(16UL);
		*(A_0 + 600L) = 16;
		return A_0;
	}

	// Token: 0x06000047 RID: 71 RVA: 0x0000A770 File Offset: 0x00009B70
	internal unsafe static void {dtor}(FileHash* A_0)
	{
		*A_0 = ref <Module>.??_7FileHash@@6B@;
		<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 8L);
		<Module>.CryptDestroyHash((ulong)(*(A_0 + 576L)));
		<Module>.CryptReleaseContext((ulong)(*(A_0 + 568L)), 0);
		ulong num = (ulong)(*(A_0 + 608L));
		if (num != 0UL)
		{
			<Module>.free(num);
		}
	}

	// Token: 0x06000048 RID: 72 RVA: 0x0000B930 File Offset: 0x0000AD30
	internal unsafe static void SetFile(FileHash* A_0, char* cwszFilePath)
	{
		FileHash* ptr = A_0 + 8L;
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 584L) = 0L;
		*(A_0 + 592L) = 0L;
		<Module>.LeaveCriticalSection(ptr);
		if (cwszFilePath != null)
		{
			<Module>.wcscpy_s(A_0 / 2 + 48L, 260UL, cwszFilePath);
		}
		else
		{
			*(A_0 + 48L) = 0;
		}
		<Module>.FileHash.Clear(A_0);
	}

	// Token: 0x06000049 RID: 73 RVA: 0x0000B988 File Offset: 0x0000AD88
	internal unsafe static int CalcFileHash(FileHash* A_0, void* hAbortEvent)
	{
		if (*(A_0 + 616L) != 0)
		{
			return 0;
		}
		void* ptr = <Module>.CreateFileW(A_0 / sizeof(char) + 48L, int.MinValue, 1, null, 3, 128, null);
		if (-1L == ptr)
		{
			return 4;
		}
		FileHash* ptr2 = A_0 + 8L;
		<Module>.EnterCriticalSection(ptr2);
		long num = <Module>.FileCommon.GetFileSize(ptr);
		*(A_0 + 584L) = num;
		*(A_0 + 592L) = 0L;
		if (-1L == num)
		{
			*(A_0 + 584L) = 0L;
			<Module>.LeaveCriticalSection(ptr2);
			<Module>.CloseHandle(ptr);
			return 3;
		}
		<Module>.LeaveCriticalSection(ptr2);
		while (hAbortEvent == null || 258 == <Module>.WaitForSingleObject(hAbortEvent, 0))
		{
			$ArrayType$$$BY0BAAAA@W4byte@std@@ $ArrayType$$$BY0BAAAA@W4byte@std@@;
			long num2 = <Module>.FileCommon.ReadFile(ptr, (void*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@), 65536L);
			if (-1L == num2)
			{
				<Module>.CloseHandle(ptr);
				return 6;
			}
			if (0L == num2)
			{
				<Module>.CloseHandle(ptr);
				return (0 == <Module>.FileHash.CalcHash(A_0)) ? 8 : 0;
			}
			if (0 == <Module>.FileHash.AddData(A_0, (@byte*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@), num2))
			{
				<Module>.CloseHandle(ptr);
				return 8;
			}
			<Module>.EnterCriticalSection(ptr2);
			*(A_0 + 592L) = *(A_0 + 592L) + num2;
			<Module>.LeaveCriticalSection(ptr2);
		}
		<Module>.CloseHandle(ptr);
		return 1;
	}

	// Token: 0x0600004A RID: 74 RVA: 0x0000A7C0 File Offset: 0x00009BC0
	internal unsafe static void Clear(FileHash* A_0)
	{
		FileHash* ptr = A_0 + 576L;
		<Module>.CryptDestroyHash((ulong)(*ptr));
		<Module>.CryptCreateHash((ulong)(*(A_0 + 568L)), 32771U, 0UL, 0, ptr);
		*(A_0 + 616L) = 0;
	}

	// Token: 0x0600004B RID: 75 RVA: 0x0000A800 File Offset: 0x00009C00
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool AddData(FileHash* A_0, @byte* cpData, long nSize)
	{
		long num = 0L;
		if (0L < nSize)
		{
			FileHash* ptr = A_0 + 576L;
			do
			{
				long num2 = nSize - num;
				int num3 = (int)((num2 < 4294967295L) ? num2 : 4294967295L);
				if (0 == <Module>.CryptHashData((ulong)(*ptr), (byte*)(num + cpData), num3, 0))
				{
					return 0;
				}
				num = (long)num3 + num;
			}
			while (num < nSize);
			return 1;
		}
		return 1;
	}

	// Token: 0x0600004C RID: 76 RVA: 0x0000A85C File Offset: 0x00009C5C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool CalcHash(FileHash* A_0)
	{
		if (*(A_0 + 616L) != 0)
		{
			return 1;
		}
		ulong num = (ulong)(*(A_0 + 608L));
		if (0UL == num)
		{
			return 0;
		}
		uint num2 = *(A_0 + 600L);
		if (0 == <Module>.CryptGetHashParam((ulong)(*(A_0 + 576L)), 2, num, &num2, 0))
		{
			return 0;
		}
		if (num2 < *(A_0 + 600L))
		{
			*(A_0 + 600L) = num2;
		}
		*(A_0 + 616L) = 1;
		return 1;
	}

	// Token: 0x0600004D RID: 77 RVA: 0x0000BAAC File Offset: 0x0000AEAC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool GetHash(FileHash* A_0, char* wszHash, int nLen)
	{
		if (null == wszHash || 33 > nLen)
		{
			return 0;
		}
		if (<Module>.FileHash.CalcHash(A_0) == null)
		{
			return 0;
		}
		$ArrayType$$$BY0BA@$$CB_W $ArrayType$$$BY0BA@$$CB_W = 48;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 2) = 49;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 4) = 50;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 6) = 51;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 8) = 52;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 10) = 53;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 12) = 54;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 14) = 55;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 16) = 56;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 18) = 57;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 20) = 97;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 22) = 98;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 24) = 99;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 26) = 100;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 28) = 101;
		*((ref $ArrayType$$$BY0BA@$$CB_W) + 30) = 102;
		int num = 0;
		int num2 = 0;
		if (0 < *(A_0 + 600L))
		{
			long num3 = 0L;
			char* ptr = wszHash;
			do
			{
				*ptr = (char)(*(((ulong)(*(*(A_0 + 608L) + num3)) >> (int)4L) * 2UL + (ref $ArrayType$$$BY0BA@$$CB_W)));
				ptr[2L / 2L] = (char)(*(((ulong)(*(*(A_0 + 608L) + num3)) & 15UL) * 2UL + (ref $ArrayType$$$BY0BA@$$CB_W)));
				num++;
				num3 += 1L;
				num2 += 2;
				ptr += 4L / 2L;
			}
			while (num < *(A_0 + 600L));
		}
		((long)num2 * 2L)[wszHash / 2] = '\0';
		return 1;
	}

	// Token: 0x0600004E RID: 78 RVA: 0x0000BBC4 File Offset: 0x0000AFC4
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool GetHashA(FileHash* A_0, sbyte* szHash, int nLen)
	{
		if (null == szHash || 33 > nLen)
		{
			return 0;
		}
		if (<Module>.FileHash.CalcHash(A_0) == null)
		{
			return 0;
		}
		$ArrayType$$$BY0BA@$$CBD $ArrayType$$$BY0BA@$$CBD = 48;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 1) = 49;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 2) = 50;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 3) = 51;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 4) = 52;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 5) = 53;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 6) = 54;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 7) = 55;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 8) = 56;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 9) = 57;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 10) = 97;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 11) = 98;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 12) = 99;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 13) = 100;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 14) = 101;
		*((ref $ArrayType$$$BY0BA@$$CBD) + 15) = 102;
		int num = 0;
		int num2 = 0;
		if (0 < *(A_0 + 600L))
		{
			long num3 = 0L;
			sbyte* ptr = szHash + 1L / (long)sizeof(sbyte);
			do
			{
				*(byte*)(ptr - 1L / (long)sizeof(sbyte)) = (byte)(*(((ulong)(*(*(A_0 + 608L) + num3)) >> (int)4L) + (ref $ArrayType$$$BY0BA@$$CBD)));
				*(byte*)ptr = (byte)(*(((ulong)(*(*(A_0 + 608L) + num3)) & 15UL) + (ref $ArrayType$$$BY0BA@$$CBD)));
				num++;
				num3 += 1L;
				num2 += 2;
				ptr += 2L / (long)sizeof(sbyte);
			}
			while (num < *(A_0 + 600L));
		}
		num2[szHash] = 0;
		return 1;
	}

	// Token: 0x0600004F RID: 79 RVA: 0x0001C28C File Offset: 0x0001B68C
	internal unsafe static void* __vecDelDtor(FileHash* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			FileHash* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 624UL, (ulong)(*ptr), ldftn(FileHash.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				FileHash* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 624L + 8L));
			}
			return ptr;
		}
		<Module>.FileHash.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 624UL);
		}
		return A_0;
	}

	// Token: 0x06000050 RID: 80 RVA: 0x0000BCD0 File Offset: 0x0000B0D0
	internal unsafe static FileCompress* {ctor}(FileCompress* A_0)
	{
		*A_0 = ref <Module>.??_7FileCompress@@6B@;
		<Module>.FileHash.{ctor}(A_0 + 1128L);
		try
		{
			<Module>.InitializeCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 8L);
			*(A_0 + 48L) = <Module>.__unep@?SzAlloc@FileCompress@@$$FSAPEAXPEAX_K@Z;
			*(A_0 + 56L) = <Module>.__unep@?SzFree@FileCompress@@$$FSAXPEAX0@Z;
			*(A_0 + 64L) = 0;
			*(A_0 + 68L) = 0;
			*(A_0 + 592L) = 0L;
			*(A_0 + 600L) = 0L;
			*(A_0 + 608L) = 0;
			*(A_0 + 1752L) = 0L;
			*(A_0 + 1760L) = 0L;
			*(A_0 + 1768L) = 1;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(A_0 + (byte*)1128L));
			throw;
		}
		return A_0;
	}

	// Token: 0x06000051 RID: 81 RVA: 0x0000A8CC File Offset: 0x00009CCC
	internal unsafe static void {dtor}(FileCompress* A_0)
	{
		*A_0 = ref <Module>.??_7FileCompress@@6B@;
		try
		{
			<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 8L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(A_0 + (byte*)1128L));
			throw;
		}
		<Module>.FileHash.{dtor}(A_0 + 1128L);
	}

	// Token: 0x06000052 RID: 82 RVA: 0x000133E4 File Offset: 0x000127E4
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Extract(char* cwszSrcFile, char* cwszDstFile, char* wszHash, int nHashLen, LastErrorInfo<LastErrorType>* last_error_info)
	{
		FileCompress fileCompress;
		initblk(ref fileCompress, 0, 1776L);
		<Module>.FileCompress.{ctor}(ref fileCompress);
		bool flag;
		try
		{
			<Module>.FileCompress.SetFile(ref fileCompress, cwszSrcFile, cwszDstFile);
			int num = <Module>.FileCompress.Extract(ref fileCompress, null);
			if (0 == num)
			{
				if (wszHash != null && 0 < nHashLen && *((ref fileCompress) + 1768) != 0)
				{
					<Module>.FileHash.GetHash((ref fileCompress) + 1128, wszHash, nHashLen);
				}
				flag = true;
			}
			else
			{
				if (1 != num && last_error_info != null)
				{
					LastErrorType lastErrorType;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref lastErrorType, cwszSrcFile);
					try
					{
						*((ref lastErrorType) + 32) = 2;
						*((ref lastErrorType) + 36) = num;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&lastErrorType));
						throw;
					}
					<Module>.LastErrorInfo<LastErrorType>.SetLastErrorInfo(last_error_info, (LastErrorType*)(&lastErrorType));
				}
				flag = false;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileCompress.{dtor}), (void*)(&fileCompress));
			throw;
		}
		fileCompress = ref <Module>.??_7FileCompress@@6B@;
		try
		{
			<Module>.DeleteCriticalSection((ref fileCompress) + 8);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)((ref fileCompress) + (byte*)1128L));
			throw;
		}
		<Module>.FileHash.{dtor}((ref fileCompress) + 1128);
		return flag;
	}

	// Token: 0x06000053 RID: 83 RVA: 0x0000A928 File Offset: 0x00009D28
	internal unsafe static void* SzAlloc(void* p, ulong size)
	{
		return <Module>.malloc(size);
	}

	// Token: 0x06000054 RID: 84 RVA: 0x0000A93C File Offset: 0x00009D3C
	internal unsafe static void SzFree(void* p, void* address)
	{
		<Module>.free(address);
	}

	// Token: 0x06000055 RID: 85 RVA: 0x0000BD94 File Offset: 0x0000B194
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool SetFile(FileCompress* A_0, char* cwszSrcFile, char* cwszDstFile)
	{
		if (0 != *(A_0 + 64L))
		{
			return 0;
		}
		FileCompress* ptr = A_0 + 8L;
		<Module>.EnterCriticalSection(ptr);
		*(A_0 + 1752L) = 0L;
		*(A_0 + 1760L) = 0L;
		<Module>.LeaveCriticalSection(ptr);
		if (cwszSrcFile != null)
		{
			<Module>.wcscpy_s(A_0 / 2 + 68L, 260UL, cwszSrcFile);
		}
		else
		{
			*(A_0 + 68L) = 0;
		}
		if (cwszDstFile != null)
		{
			<Module>.wcscpy_s(A_0 / 2 + 608L, 260UL, cwszDstFile);
		}
		else
		{
			*(A_0 + 608L) = 0;
		}
		<Module>.FileHash.Clear(A_0 + 1128L);
		*(A_0 + 1768L) = 0;
		*(A_0 + 64L) = 1;
		return 1;
	}

	// Token: 0x06000056 RID: 86 RVA: 0x0000BE34 File Offset: 0x0000B234
	internal unsafe static int Extract(FileCompress* A_0, void* hAbortEvent)
	{
		if (0 == *(A_0 + 64L))
		{
			return 2;
		}
		if (*(A_0 + 1768L) != 0)
		{
			return 2;
		}
		FileCompress* ptr = A_0 + 608L;
		if (0 == <Module>.FileCommon.EnsurePath(ptr))
		{
			return 5;
		}
		void* ptr2 = -1L;
		@byte* ptr3 = *(A_0 + 592L);
		void* ptr4 = -1L;
		long num = 0L;
		int num2 = *(A_0 + 64L);
		int num3;
		long num4;
		@byte* ptr5;
		if (num2 != 1)
		{
			if (num2 != 2)
			{
				num3 = 2;
				goto IL_3A1;
			}
			num4 = *(A_0 + 600L);
			if (num4 < 13L)
			{
				num3 = 6;
				goto IL_3A1;
			}
			ptr5 = ptr3;
			ptr3 += 13L;
		}
		else
		{
			ptr2 = <Module>.CreateFileW(A_0 / sizeof(char) + 68L, int.MinValue, 1, null, 3, 128, null);
			if (-1L == ptr2)
			{
				num3 = 4;
				goto IL_3A1;
			}
			num4 = <Module>.FileCommon.GetFileSize(ptr2);
			if (-1L == num4)
			{
				num3 = 3;
				goto IL_36F;
			}
			$ArrayType$$$BY0N@W4byte@std@@ $ArrayType$$$BY0N@W4byte@std@@;
			num = <Module>.FileCommon.ReadFile(ptr2, (void*)(&$ArrayType$$$BY0N@W4byte@std@@), 13L);
			if (num != 13L)
			{
				num3 = 6;
				goto IL_36F;
			}
			ptr5 = (@byte*)(&$ArrayType$$$BY0N@W4byte@std@@);
		}
		num4 -= 13L;
		ptr4 = <Module>.CreateFileW(ptr, 1073741824, 0, null, 2, 128, null);
		if (-1L == ptr4)
		{
			num3 = 5;
		}
		else
		{
			long num5 = *(long*)(ptr5 + 5L);
			FileCompress* ptr6 = A_0 + 8L;
			<Module>.EnterCriticalSection(ptr6);
			*(A_0 + 1752L) = num5;
			<Module>.LeaveCriticalSection(ptr6);
			ulong num6 = 0UL;
			ulong num7 = 0UL;
			long num8 = 0L;
			long num9 = 0L;
			ELzmaStatus elzmaStatus = (ELzmaStatus)0;
			CLzmaDec clzmaDec;
			*((ref clzmaDec) + 24) = 0L;
			*((ref clzmaDec) + 16) = 0L;
			FileCompress* ptr7 = A_0 + 48L;
			if (0 != <Module>.LzmaDec_Allocate(&clzmaDec, (byte*)ptr5, 5U, ptr7))
			{
				num3 = 8;
			}
			else
			{
				<Module>.LzmaDec_Init(&clzmaDec);
				if (num4 != 0L)
				{
					while (hAbortEvent == null || 258 == <Module>.WaitForSingleObject(hAbortEvent, 0))
					{
						$ArrayType$$$BY0BAAAA@W4byte@std@@ $ArrayType$$$BY0BAAAA@W4byte@std@@;
						if (0L == num9)
						{
							int num10 = *(A_0 + 64L);
							if (num10 != 1)
							{
								if (num10 == 2)
								{
									if (num4 < 65536L)
									{
										num = num4;
										if (num4 == 0L)
										{
											goto IL_344;
										}
									}
									else
									{
										num = 65536L;
									}
									<Module>.?A0x2bfc062d.memcpy_s(ref $ArrayType$$$BY0BAAAA@W4byte@std@@, 65536L, ptr3, num);
									ptr3 = num + ptr3;
								}
							}
							else
							{
								long num11 = ((65536L < num4) ? 65536L : num4);
								num = <Module>.FileCommon.ReadFile(ptr2, (void*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@), num11);
								if (((65536L < num4) ? 65536L : num4) != num)
								{
									<Module>.LzmaDec_Free(&clzmaDec, ptr7);
									num3 = 6;
									goto IL_36F;
								}
							}
							if (0L == num)
							{
								goto IL_344;
							}
							num8 = 0L;
							num9 = num;
						}
						num6 = (ulong)num9;
						num7 = 65536UL;
						$ArrayType$$$BY0BAAAA@W4byte@std@@ $ArrayType$$$BY0BAAAA@W4byte@std@@2;
						int num12 = <Module>.LzmaDec_DecodeToBuf(&clzmaDec, (byte*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@2), &num7, num8 + (ref $ArrayType$$$BY0BAAAA@W4byte@std@@), &num6, (ELzmaFinishMode)0, &elzmaStatus);
						if (0 != num12)
						{
							<Module>.LzmaDec_Free(&clzmaDec, ptr7);
							num3 = num12 + 10;
							goto IL_36F;
						}
						if (0UL == num6)
						{
							<Module>.LzmaDec_Free(&clzmaDec, ptr7);
							num3 = 10;
							goto IL_36F;
						}
						if (<Module>.FileCommon.WriteFile(ptr4, (void*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@2), (long)num7) != num7)
						{
							<Module>.LzmaDec_Free(&clzmaDec, ptr7);
							num3 = 7;
							goto IL_36F;
						}
						num8 = (long)(num6 + (ulong)num8);
						num9 -= (long)num6;
						num4 -= (long)num6;
						num5 -= (long)num7;
						<Module>.FileHash.AddData(A_0 + 1128L, (@byte*)(&$ArrayType$$$BY0BAAAA@W4byte@std@@2), (long)num7);
						<Module>.EnterCriticalSection(ptr6);
						*(A_0 + 1760L) = *(A_0 + 1760L) + (long)num7;
						<Module>.LeaveCriticalSection(ptr6);
						<Module>.printf(ref <Module>.??_C@_0BF@FJMPBGJJ@extract?5?$CFlld?5?1?5?$CFlld?6@, __arglist(*(A_0 + 1760L), *(A_0 + 1752L)));
						if (num4 == 0L)
						{
							goto IL_344;
						}
					}
					<Module>.LzmaDec_Free(&clzmaDec, ptr7);
					num3 = 1;
					goto IL_36F;
				}
				IL_344:
				if (0L == num5 && (ELzmaStatus)1 == elzmaStatus)
				{
					<Module>.LzmaDec_Free(&clzmaDec, ptr7);
					*(A_0 + 1768L) = 1;
					num3 = 0;
				}
				else
				{
					<Module>.LzmaDec_Free(&clzmaDec, ptr7);
					num3 = 8;
				}
			}
		}
		IL_36F:
		if (-1L != ptr2)
		{
			<Module>.CloseHandle(ptr2);
		}
		if (-1L != ptr4)
		{
			num3 = ((0 == <Module>.CloseHandle(ptr4)) ? 9 : num3);
		}
		IL_3A1:
		*(A_0 + 64L) = 0;
		return num3;
	}

	// Token: 0x06000057 RID: 87 RVA: 0x0001C2E8 File Offset: 0x0001B6E8
	internal unsafe static void* __vecDelDtor(FileCompress* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			FileCompress* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 1776UL, (ulong)(*ptr), ldftn(FileCompress.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				FileCompress* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 1776L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7FileCompress@@6B@;
		try
		{
			<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 8L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(A_0 + (byte*)1128L));
			throw;
		}
		<Module>.FileHash.{dtor}(A_0 + 1128L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 1776UL);
		}
		return A_0;
	}

	// Token: 0x06000058 RID: 88 RVA: 0x0000FB58 File Offset: 0x0000EF58
	internal unsafe static void {dtor}(LastErrorType* A_0)
	{
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000059 RID: 89 RVA: 0x000170D0 File Offset: 0x000164D0
	internal unsafe static FileInfoList* {ctor}(FileInfoList* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* path, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* info_list_file_name)
	{
		uint num = 0U;
		*A_0 = ref <Module>.??_7FileInfoList@@6B@;
		FileInfoList* ptr = A_0 + 8L;
		*ptr = 0;
		FileInfoList* ptr2 = A_0 + 16L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = ptr2;
		<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr3);
		try
		{
			*(ptr3 + 16L) = 0L;
			*(ptr3 + 24L) = 7L;
			*ptr3 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
			throw;
		}
		try
		{
			FileInfoList* ptr4 = A_0 + 48L;
			FileInfoList* ptr5 = ptr4;
			_One_then_variadic_args_t one_then_variadic_args_t;
			allocator<wchar_t> allocator<wchar_t>;
			<Module>.std._Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>.{ctor}<class\u0020std::allocator<wchar_t>\u0020>(ptr5, one_then_variadic_args_t, ref allocator<wchar_t>);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ptr5, info_list_file_name);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr5);
				throw;
			}
			try
			{
				FileInfoList* ptr6 = A_0 + 80L;
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = ptr6;
				<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr7);
				try
				{
					*(ptr7 + 16L) = 0L;
					*(ptr7 + 24L) = 7L;
					*ptr7 = 0;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr7);
					throw;
				}
				try
				{
					list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* ptr8 = A_0 + 112L;
					*ptr8 = 0L;
					*(ptr8 + 8L) = 0L;
					list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* ptr9 = ptr8;
					*ptr9 = <Module>.std._List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>._Buynode0(ptr9, null, null);
					try
					{
						char* ptr10 = path;
						if (((8L <= *(path + 24L)) ? 1 : 0) != 0)
						{
							ptr10 = *path;
						}
						$ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W;
						if (0 == <Module>.GetFullPathNameW(ptr10, 260, (char*)(&$ArrayType$$$BY0BAE@_W), null))
						{
							*ptr = <Module>.GetLastError();
						}
						else
						{
							$ArrayType$$$BY0BAE@_W* ptr11 = &$ArrayType$$$BY0BAE@_W;
							if ($ArrayType$$$BY0BAE@_W != null)
							{
								do
								{
									ptr11 += 2L / (long)sizeof($ArrayType$$$BY0BAE@_W);
								}
								while (*(short*)ptr11 != 0);
							}
							long num2 = ptr11 - (ref $ArrayType$$$BY0BAE@_W) / sizeof($ArrayType$$$BY0BAE@_W) >> 1;
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(ptr2, ref $ArrayType$$$BY0BAE@_W, num2);
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr2, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr13 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr12, ptr4);
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr14 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr13);
									num = 2U;
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ptr6, ptr14);
									num = 2U & 4294967293U;
								}
								catch
								{
									if ((num & 2U) != 0U)
									{
										num &= 4294967293U;
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
									}
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
								throw;
							}
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.{dtor}), (void*)(A_0 + (byte*)112L));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)80L));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)48L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)16L));
			throw;
		}
		return A_0;
	}

	// Token: 0x0600005A RID: 90 RVA: 0x000173F4 File Offset: 0x000167F4
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Init(FileInfoList* A_0)
	{
		if (*(A_0 + 8L) != 0)
		{
			return 0;
		}
		<Module>.std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.clear(A_0 + 112L);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 80L;
		char* ptr2 = ptr;
		if (((8L <= *(ptr + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *ptr;
		}
		void* ptr3 = <Module>.CreateFileW(ptr2, int.MinValue, 1, null, 4, 128, null);
		if (-1L == ptr3)
		{
			*(A_0 + 8L) = <Module>.GetLastError();
			return 0;
		}
		long num = <Module>.FileCommon.GetFileSize(ptr3);
		if (num <= 0L)
		{
			<Module>.CloseHandle(ptr3);
			return 1;
		}
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		bool flag2;
		try
		{
			if (num <= *((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16))
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Eos(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, num);
			}
			else
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, num - *((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16), 0);
			}
			sbyte* ptr4 = (((16L <= *((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 24)) ? 1 : 0) != 0 ? basic_string<char,std::char_traits<char>,std::allocator<char>_u0020> : ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
			uint num2;
			bool flag;
			if (0 != <Module>.ReadFile(ptr3, (void*)ptr4, num, &num2, null))
			{
				<Module>.CloseHandle(ptr3);
				ulong num3 = 0UL;
				for (;;)
				{
					ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.find(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ref <Module>.??_C@_02PCIJFNDE@?$AN?6@, num3);
					ulong num5 = ulong.MaxValue;
					if (18446744073709551615UL != num4)
					{
						num5 = num4 - num3;
					}
					basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2;
					basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr5 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.substr(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, &basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2, num3, num5);
					byte b;
					try
					{
						b = ((<Module>.FileInfoList.ParseFileInfo(A_0, ptr5) == 0) ? 1 : 0);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
						throw;
					}
					if (b != 0)
					{
						break;
					}
					num3 = num4 + 2UL;
					if (18446744073709551615UL == num4)
					{
						goto IL_18E;
					}
				}
				flag = false;
				goto IL_188;
				IL_18E:
				flag2 = true;
				goto IL_191;
			}
			*(A_0 + 8L) = <Module>.GetLastError();
			<Module>.CloseHandle(ptr3);
			flag = true;
			IL_188:
			flag2 = flag;
			IL_191:;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
			throw;
		}
		return flag2;
	}

	// Token: 0x0600005B RID: 91 RVA: 0x000110C0 File Offset: 0x000104C0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool CheckFileChanged(FileInfoList* A_0)
	{
		_List_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> = 0L;
		FileInfoList* ptr = A_0 + 112L;
		long num = *(*ptr);
		<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020>, num, ptr);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
		FileHash fileHash;
		int num4;
		for (;;)
		{
			long num2 = *ptr;
			_List_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020>2;
			<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020>2, num2, ptr);
			if (((((list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> == list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) != 0)
			{
				<Module>.Sleep(1);
				FileInfoList.FILE_INFO* ptr2 = list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> + 16L;
				<Module>.AnsiToUtf16(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr2, 0U);
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, A_0 + 16L, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
					try
					{
						<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ptr3, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
							throw;
						}
						long num3 = <Module>.FileCommon.GetFileSize(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						if (num3 > 0L)
						{
							goto IL_121;
						}
						FileInfoList.FILE_INFO* ptr4 = list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> + 16L;
						if (num3 != *(ptr4 + 96L))
						{
							goto IL_2D3;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				goto IL_104;
				IL_1FE:
				list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> = *list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020>;
				continue;
				IL_104:
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				goto IL_1FE;
				IL_121:
				try
				{
					try
					{
						initblk(ref fileHash, 0, 624L);
						<Module>.FileHash.{ctor}(ref fileHash);
						try
						{
							<Module>.FileHash.SetFile(ref fileHash, <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
							num4 = <Module>.FileHash.CalcFileHash(ref fileHash, null);
							if (num4 != 0)
							{
								break;
							}
							$ArrayType$$$BY0CB@D $ArrayType$$$BY0CB@D;
							if (0 == <Module>.FileHash.GetHashA(ref fileHash, (sbyte*)(&$ArrayType$$$BY0CB@D), 33))
							{
								goto IL_240;
							}
							long num5 = list_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>_u0020> + 16L;
							FileInfoList.FILE_INFO* ptr5 = num5;
							long num3;
							if (num3 != *(ptr5 + 96L))
							{
								goto IL_2AB;
							}
							if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.compare(num5 + 64L, ref $ArrayType$$$BY0CB@D) != null)
							{
								goto IL_2AB;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
							throw;
						}
						<Module>.FileHash.{dtor}(ref fileHash);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				goto IL_1FE;
			}
			return 0;
		}
		int num6;
		try
		{
			try
			{
				try
				{
					num6 = num4;
					goto IL_273;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		IL_240:
		try
		{
			try
			{
				try
				{
					num6 = 8;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		IL_273:
		try
		{
			try
			{
				try
				{
					*(A_0 + 8L) = -num6;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		IL_2AB:
		try
		{
			try
			{
				<Module>.FileHash.{dtor}(ref fileHash);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		IL_2D3:
		try
		{
			try
			{
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		return 1;
	}

	// Token: 0x0600005C RID: 92 RVA: 0x00016D60 File Offset: 0x00016160
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ParseFileInfo(FileInfoList* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* line)
	{
		uint num = 0U;
		if (((*(line + 16L) == 0L) ? 1 : 0) != 0)
		{
			return 1;
		}
		FileInfoList.FILE_INFO file_INFO;
		<Module>.FileInfoList.FILE_INFO.{ctor}(ref file_INFO);
		bool flag;
		try
		{
			ulong num2 = 0UL;
			int num3 = 0;
			do
			{
				ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.find(line, ref <Module>.??_C@_01GPOEFGEJ@?7@, num2);
				ulong num5 = ulong.MaxValue;
				if (18446744073709551615UL != num4)
				{
					num5 = num4 - num2;
				}
				if (num3 != 0)
				{
					if (num3 != 1)
					{
						if (num3 == 2)
						{
							goto IL_181;
						}
					}
					else
					{
						basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
						try
						{
							allocator<char> allocator<char>;
							<Module>.std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{ctor}<class\u0020std::allocator<char>\u0020const\u0020&,void>(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ref allocator<char>);
							try
							{
								<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_init(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
								<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, line, num2, num5);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
								throw;
							}
							num |= 2U;
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.=((ref file_INFO) + 32, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
							num &= 4294967293U;
						}
						catch
						{
							if ((num & 2U) != 0U)
							{
								num &= 4294967293U;
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
							}
							throw;
						}
						try
						{
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
							throw;
						}
						*((ref file_INFO) + 96) = <Module>.atol(<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.c_str((ref file_INFO) + 32));
					}
				}
				else
				{
					basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2;
					try
					{
						allocator<char> allocator<char>2;
						<Module>.std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{ctor}<class\u0020std::allocator<char>\u0020const\u0020&,void>(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2, ref allocator<char>2);
						try
						{
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_init(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2, line, num2, num5);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
							throw;
						}
						num |= 1U;
						<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.=(ref file_INFO, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
						num &= 4294967294U;
					}
					catch
					{
						if ((num & 1U) != 0U)
						{
							num &= 4294967294U;
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
						}
						throw;
					}
					try
					{
						<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
						throw;
					}
				}
				if (18446744073709551615UL == num4)
				{
					break;
				}
				num2 = num4 + 1UL;
				num3++;
			}
			while (num3 < 3);
			goto IL_206;
			basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3;
			try
			{
				IL_181:
				allocator<char> allocator<char>3;
				<Module>.std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{ctor}<class\u0020std::allocator<char>\u0020const\u0020&,void>(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3, ref allocator<char>3);
				try
				{
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_init(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3);
					ulong num5;
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3, line, num2, num5);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3));
					throw;
				}
				num |= 4U;
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.=((ref file_INFO) + 64, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3);
				num &= 4294967291U;
			}
			catch
			{
				if ((num & 4U) != 0U)
				{
					num &= 4294967291U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3));
				}
				throw;
			}
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3));
				throw;
			}
			<Module>.std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.push_back(A_0 + 112L, ref file_INFO);
			flag = true;
			goto IL_220;
			IL_206:
			*(A_0 + 8L) = -12;
			flag = false;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileInfoList.FILE_INFO.{dtor}), (void*)(&file_INFO));
			throw;
		}
		IL_220:
		<Module>.FileInfoList.FILE_INFO.{dtor}(ref file_INFO);
		return flag;
	}

	// Token: 0x0600005D RID: 93 RVA: 0x0001D7BC File Offset: 0x0001CBBC
	internal unsafe static void* __vecDelDtor(FileInfoList* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			FileInfoList* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 128UL, (ulong)(*ptr), ldftn(FileInfoList.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				FileInfoList* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 128L + 8L));
			}
			return ptr;
		}
		<Module>.FileInfoList.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 128UL);
		}
		return A_0;
	}

	// Token: 0x0600005E RID: 94 RVA: 0x00017620 File Offset: 0x00016A20
	internal unsafe static void {dtor}(FileInfoList* A_0)
	{
		try
		{
			try
			{
				try
				{
					list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* ptr = A_0 + 112L;
					try
					{
						<Module>.std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.clear(ptr);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.{dtor}), ptr);
						throw;
					}
					<Module>.std._List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>.{dtor}(ptr);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)80L));
					throw;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 + 80L;
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr2);
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)48L));
				throw;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 48L;
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr3);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)16L));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = A_0 + 16L;
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr4);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr4);
			throw;
		}
	}

	// Token: 0x0600005F RID: 95 RVA: 0x00011668 File Offset: 0x00010A68
	internal unsafe static FileInfoList.FILE_INFO* {ctor}(FileInfoList.FILE_INFO* A_0)
	{
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_0);
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_0 + 32L);
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_0 + 64L);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000060 RID: 96 RVA: 0x000116EC File Offset: 0x00010AEC
	internal unsafe static void {dtor}(FileInfoList.FILE_INFO* A_0)
	{
		try
		{
			try
			{
				basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr = A_0 + 64L;
				try
				{
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ptr);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), ptr);
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
			basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr2 = A_0 + 32L;
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ptr2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), ptr2);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000061 RID: 97 RVA: 0x000117E4 File Offset: 0x00010BE4
	internal unsafe static shared_ptr<IniParser>* LoadIniW(shared_ptr<IniParser>* A_0, char* int_file_path)
	{
		uint num = 0U;
		void* ptr = <Module>.CreateFileW(int_file_path, int.MinValue, 1, null, 3, 128, null);
		if (-1L == ptr)
		{
			*(long*)A_0 = 0L;
			*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<IniParser>)) = 0L;
			try
			{
				num = 1U;
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		uint fileSize = <Module>.GetFileSize(ptr, null);
		if (-1 == fileSize)
		{
			<Module>.CloseHandle(ptr);
			*(long*)A_0 = 0L;
			*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<IniParser>)) = 0L;
			try
			{
				num = 1U;
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		@byte* ptr2 = <Module>.new[](fileSize);
		if (null == ptr2)
		{
			<Module>.CloseHandle(ptr);
			*(long*)A_0 = 0L;
			*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<IniParser>)) = 0L;
			try
			{
				num = 1U;
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		uint num3;
		int num2 = <Module>.ReadFile(ptr, (void*)ptr2, fileSize, &num3, null);
		<Module>.CloseHandle(ptr);
		if (0 != num2 && num3 == fileSize)
		{
			shared_ptr<IniParser> shared_ptr<IniParser>;
			initblk(ref shared_ptr<IniParser>, 0, 16L);
			<Module>.IniParser.LoadIniData(&shared_ptr<IniParser>, (@byte*)ptr2, fileSize);
			try
			{
				try
				{
					<Module>.delete[]((void*)ptr2);
					*(long*)A_0 = shared_ptr<IniParser>;
					*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<IniParser>)) = *((ref shared_ptr<IniParser>) + 8);
					shared_ptr<IniParser> = 0L;
					*((ref shared_ptr<IniParser>) + 8) = 0L;
					num = 1U;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
					throw;
				}
				if (*((ref shared_ptr<IniParser>) + 8) != 0L)
				{
					<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
				}
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		<Module>.delete[]((void*)ptr2);
		*(long*)A_0 = 0L;
		*(long*)(A_0 + 8L / (long)sizeof(shared_ptr<IniParser>)) = 0L;
		shared_ptr<IniParser>* ptr3;
		try
		{
			num = 1U;
			ptr3 = A_0;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return ptr3;
	}

	// Token: 0x06000062 RID: 98 RVA: 0x0000F474 File Offset: 0x0000E874
	internal unsafe static shared_ptr<IniParser>* LoadIniData(shared_ptr<IniParser>* A_0, @byte* ini_buffer, uint buffer_size)
	{
		uint num = 0U;
		<Module>.std.make_shared<class\u0020IniParser,enum\u0020std::byte\u0020const\u0020*\u0020&,unsigned\u0020int\u0020&>(A_0, ref ini_buffer, ref buffer_size);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000063 RID: 99 RVA: 0x0000E4EC File Offset: 0x0000D8EC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ()(IniParser.ci_comp* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* s1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* s2)
	{
		char* ptr = s2;
		if (((8L <= *(s2 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *s2;
		}
		char* ptr2 = s1;
		if (((8L <= *(s1 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *s1;
		}
		return <Module>._wcsicmp(ptr2, ptr) < 0;
	}

	// Token: 0x06000064 RID: 100 RVA: 0x000191E4 File Offset: 0x000185E4
	internal unsafe static void OverrideIni(IniParser* A_0, shared_ptr<IniParser>* ini_parser)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
		_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* ptr = *ini_parser;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *(*ptr), ptr);
		for (;;)
		{
			_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* ptr2 = *ini_parser;
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *ptr2, ptr2);
			if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) == 0) ? 1 : 0) == 0)
			{
				break;
			}
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
			_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, *(*ptr3), ptr3);
			while (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L)) ? 1 : 0) == 0) ? 1 : 0) != 0)
			{
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr4 = *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L);
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr5 = *ptr4;
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr6 = ptr4;
				*ptr6 = *(ptr6 + 8L);
				*(ptr4 + 8L) = ptr5;
				if (ptr5 != ptr4)
				{
					do
					{
						_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr7 = ptr5;
						ptr5 = *ptr5;
						_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr8 = ptr7;
						*(long*)ptr8 = *(long*)(ptr8 + 8L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>));
						*(long*)(ptr7 + 8L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>)) = ptr5;
					}
					while (ptr5 != ptr4);
				}
				long num = *(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L));
				while (((((num == *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L)) ? 1 : 0) == 0) ? 1 : 0) != 0)
				{
					pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pa;
					<Module>.std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u002…(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pa, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L);
					pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool> pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>,bool>;
					<Module>.std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pa + 64L, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>,bool>, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L);
					<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.push_front(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>,bool> + 64L, num + 16L);
					num = *num;
				}
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr9 = *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L);
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr10 = *ptr9;
				_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr11 = ptr9;
				*ptr11 = *(ptr11 + 8L);
				*(ptr9 + 8L) = ptr10;
				if (ptr10 != ptr9)
				{
					do
					{
						_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr12 = ptr10;
						ptr10 = *ptr10;
						_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr13 = ptr12;
						*(long*)ptr13 = *(long*)(ptr13 + 8L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>));
						*(long*)(ptr12 + 8L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>)) = ptr10;
					}
					while (ptr10 != ptr9);
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
			}
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas);
		}
	}

	// Token: 0x06000065 RID: 101 RVA: 0x00015048 File Offset: 0x00014448
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetValueStringW(IniParser* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1, char* section_name, char* key_name, char* default_value)
	{
		uint num = 0U;
		if (((*(A_0 + 8L) == 0L) ? 1 : 0) != 0)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
			try
			{
				num = 1U;
				return A_1;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
				}
				throw;
			}
		}
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, section_name);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		try
		{
			try
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			long num2 = *A_0;
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num2, A_0);
			if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) != 0)
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
				num = 1U;
				ptr = A_1;
			}
			else
			{
				long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
				if (((*(num3 + 40L) == 0L) ? 1 : 0) != 0)
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
					num = 1U;
					ptr = A_1;
				}
				else
				{
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
					pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr2 = num3 + 32L;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, key_name);
					try
					{
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr2, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					long num4 = *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L);
					if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == num4) ? 1 : 0) != 0)
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
						num = 1U;
						ptr = A_1;
					}
					else
					{
						long num5 = *(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L + 32L)) + 16L;
						<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(A_1);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_1, num5);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
							throw;
						}
						num = 1U;
						ptr = A_1;
					}
				}
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return ptr;
	}

	// Token: 0x06000066 RID: 102 RVA: 0x0001528C File Offset: 0x0001468C
	internal unsafe static int GetValueIntW(IniParser* A_0, char* section_name, char* key_name, int default_value)
	{
		if (((*(A_0 + 8L) == 0L) ? 1 : 0) != 0)
		{
			return default_value;
		}
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, section_name);
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		long num = *A_0;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == num) ? 1 : 0) != 0)
		{
			return default_value;
		}
		long num2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
		if (((*(num2 + 40L) == 0L) ? 1 : 0) != 0)
		{
			return default_value;
		}
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
		pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = num2 + 32L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, key_name);
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L)) ? 1 : 0) != 0)
		{
			return default_value;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = *(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L)) + 16L;
		char* ptr3 = ptr2;
		if (((8L <= *(ptr2 + 24L)) ? 1 : 0) != 0)
		{
			ptr3 = *ptr2;
		}
		return <Module>._wtoi(ptr3);
	}

	// Token: 0x06000067 RID: 103 RVA: 0x0000F4C8 File Offset: 0x0000E8C8
	internal unsafe static void GetIniBuffer(IniParser* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ini_buffer)
	{
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, 1L, -1);
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, 1L, -2);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *(*A_0), A_0);
		for (;;)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *A_0, A_0);
			if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) == 0) ? 1 : 0) == 0)
			{
				break;
			}
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_13MCLHKIEA@?$AA?$FL@, 2L);
			ulong num = (ulong)(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 48L) * 2L);
			pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
			char* ptr2 = ptr;
			if (((8L <= *(ptr + 24L)) ? 1 : 0) != 0)
			{
				ptr2 = *ptr;
			}
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr2, num);
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6@, 6L);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
			_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, *(*ptr3), ptr3);
			for (;;)
			{
				_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr4 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, *ptr4, ptr4);
				if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) == 0)
				{
					break;
				}
				_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> = 0L;
				long num2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L;
				<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>, *(*num2), num2);
				for (;;)
				{
					long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L;
					_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2;
					<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2, *num3, num3);
					if (((((list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> == list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) == 0)
					{
						break;
					}
					ulong num4 = (ulong)(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 48L) * 2L);
					pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr5 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
					char* ptr6 = ptr5;
					if (((8L <= *(ptr5 + 24L)) ? 1 : 0) != 0)
					{
						ptr6 = *ptr5;
					}
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr6, num4);
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_13NMPKAAJP@?$AA?$DN@, 2L);
					ulong num5 = (ulong)(*(list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 32L) * 2L);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
					char* ptr8 = ptr7;
					if (((8L <= *(ptr7 + 24L)) ? 1 : 0) != 0)
					{
						ptr8 = *ptr7;
					}
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr8, num5);
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@, 4L);
					list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> = *list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
			}
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas);
		}
	}

	// Token: 0x06000068 RID: 104 RVA: 0x000153F8 File Offset: 0x000147F8
	internal unsafe static int CheckSignature(IniParser* A_0, byte* public_key_buffer, int key_buffer_size, char* signature_section_name, char* signature_key_name)
	{
		if (null != public_key_buffer && 0 != key_buffer_size && null != signature_section_name && null != signature_key_name && 0 != *(ushort*)signature_section_name && 0 != *(ushort*)signature_key_name)
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			int num12;
			try
			{
				FileHash fileHash;
				initblk(ref fileHash, 0, 624L);
				<Module>.FileHash.{ctor}(ref fileHash);
				try
				{
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
					long num = *(*A_0);
					<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num, A_0);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
					for (;;)
					{
						long num2 = *A_0;
						_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num2, A_0);
						if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) == 0) ? 1 : 0) != 0)
						{
							pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
							allocator<wchar_t> allocator<wchar_t>;
							<Module>.std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{ctor}<class\u0020std::allocator<wchar_t>,void>(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ref allocator<wchar_t>);
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							try
							{
								if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Equal(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, signature_section_name) == null)
								{
									goto IL_1B6;
								}
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
								pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, signature_key_name);
								try
								{
									<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr2, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
									throw;
								}
								_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L;
								long num3 = *ptr3;
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
								<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, num3, ptr3);
								if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) != 0)
								{
									goto IL_41A;
								}
								_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
								_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr4 = <Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.begin(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L + 32L, &list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>);
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, *ptr4 + 16L);
								if (((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16) == 0L) ? 1 : 0) != 0)
								{
									goto IL_41A;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							goto IL_199;
							IL_38D:
							<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas);
							continue;
							IL_199:
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							goto IL_38D;
							IL_1B6:
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, 1L, 47);
								long num4 = *((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2) + 16) * 2L;
								char* ptr5 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.data(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
								if (<Module>.FileHash.AddData(ref fileHash, (@byte*)ptr5, num4) == null)
								{
									goto IL_41A;
								}
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 = 0L;
								_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr6 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L;
								long num5 = *(*ptr6);
								<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3, num5, ptr6);
								for (;;)
								{
									_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr7 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L;
									long num6 = *ptr7;
									_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>4;
									<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>4, num6, ptr7);
									if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>4) ? 1 : 0) == 0) ? 1 : 0) == 0)
									{
										break;
									}
									pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr8 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 + 32L;
									allocator<wchar_t> allocator<wchar_t>2;
									<Module>.std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{ctor}<class\u0020std::allocator<wchar_t>,void>(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ref allocator<wchar_t>2);
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ptr8);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, 1L, 61);
										long num7 = *((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4) + 16) * 2L;
										char* ptr9 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.data(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
										if (<Module>.FileHash.AddData(ref fileHash, (@byte*)ptr9, num7) == null)
										{
											goto IL_3D1;
										}
										_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr10 = *<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.begin(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 + 32L + 32L, &list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2) + 16L;
										allocator<wchar_t> allocator<wchar_t>3;
										<Module>.std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{ctor}<class\u0020std::allocator<wchar_t>,void>(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref allocator<wchar_t>3);
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ptr10);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
											throw;
										}
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, 1L, 44);
											long num8 = *((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5) + 16) * 2L;
											char* ptr11 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.data(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
											if (<Module>.FileHash.AddData(ref fileHash, (@byte*)ptr11, num8) == null)
											{
												goto IL_39A;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
											throw;
										}
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
										throw;
									}
									<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3);
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							goto IL_38D;
						}
						goto IL_455;
					}
					try
					{
						try
						{
							try
							{
								IL_39A:
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					IL_3D1:
					try
					{
						try
						{
							try
							{
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					IL_41A:
					try
					{
						try
						{
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					goto IL_46E;
					IL_455:
					if (<Module>.FileHash.CalcHash(ref fileHash) != null)
					{
						rsa_st* ptr12 = <Module>.d2i_RSAPublicKey(null, &public_key_buffer, key_buffer_size);
						if (null != ptr12)
						{
							basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
							<Module>.IniParser.GetSignatureBuffer(A_0, &basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
							try
							{
								int num9;
								if (((*((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16) == 0L) ? 1 : 0) != 0)
								{
									num9 = -1;
								}
								else
								{
									uint num10 = (uint)(*((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16));
									sbyte* ptr13 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.c_str(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
									int num11 = <Module>.RSA_verify(64, *((ref fileHash) + 608), (uint)(*((ref fileHash) + 600)), (byte*)ptr13, num10, ptr12);
									<Module>.RSA_free(ptr12);
									if (1 == num11)
									{
										num12 = 1;
										goto IL_4D6;
									}
									num9 = 0;
								}
								num12 = num9;
								IL_4D6:;
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
								throw;
							}
							try
							{
								<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
								throw;
							}
							goto IL_50E;
						}
					}
					IL_46E:
					num12 = -1;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
					throw;
				}
				IL_50E:
				<Module>.FileHash.{dtor}(ref fileHash);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			return num12;
		}
		return -1;
	}

	// Token: 0x06000069 RID: 105 RVA: 0x0000A950 File Offset: 0x00009D50
	internal unsafe static byte GetCharValue(IniParser* A_0, [MarshalAs(UnmanagedType.U2)] char wch)
	{
		if (wch + 65488 <= 9)
		{
			return wch - 48;
		}
		if (wch + 65439 <= 5)
		{
			return wch - 87;
		}
		if (wch + 65471 <= 5)
		{
			return wch - 55;
		}
		return 255;
	}

	// Token: 0x0600006A RID: 106 RVA: 0x00011A1C File Offset: 0x00010E1C
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* GetSignatureBuffer(IniParser* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* signature_str)
	{
		uint num = 0U;
		uint num2 = (uint)(*(signature_str + 16L)) >> 1;
		if (0U == num2)
		{
			<Module>.std._String_val<std::_Simple_types<char>\u0020>.{ctor}(A_1);
			try
			{
				try
				{
					*(long*)(A_1 + 16L / (long)sizeof(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>)) = 0L;
					*(long*)(A_1 + 24L / (long)sizeof(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>)) = 15L;
					*(byte*)A_1 = 0;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)A_1);
					throw;
				}
				num = 1U;
				return A_1;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)A_1);
				}
				throw;
			}
		}
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr3;
		try
		{
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.reserve(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, (ulong)num2);
				uint num3 = 0U;
				uint num4 = 0U;
				if (0U >= num2)
				{
					goto IL_138;
				}
				do
				{
					char* ptr = signature_str;
					if (((8L <= *(signature_str + 24L)) ? 1 : 0) != 0)
					{
						ptr = *signature_str;
					}
					byte b = <Module>.IniParser.GetCharValue(A_0, (num4 * 2L)[ptr / 2]);
					char* ptr2 = signature_str;
					if (((8L <= *(signature_str + 24L)) ? 1 : 0) != 0)
					{
						ptr2 = *signature_str;
					}
					byte b2 = <Module>.IniParser.GetCharValue(A_0, ((num4 + 1U) * 2L)[ptr2 / 2]);
					if (255 == b || 255 == b2)
					{
						goto IL_102;
					}
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, 1L, (sbyte)(((int)b << 4) | (int)b2));
					num3 += 1U;
					num4 += 2U;
				}
				while (num3 < num2);
				goto IL_138;
				IL_102:
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_1);
				num = 1U;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
				throw;
			}
			return A_1;
			IL_138:
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(A_1, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
				num = 1U;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
				throw;
			}
			ptr3 = A_1;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return ptr3;
	}

	// Token: 0x0600006B RID: 107 RVA: 0x000135C8 File Offset: 0x000129C8
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ParseUpdateUrlName(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* base_url, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* url_name, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* download_url, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* update_file_name, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* file_name, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* file_size, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* file_hash)
	{
		uint num = 0U;
		if (download_url != null)
		{
			if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(url_name, 0L, 7L, ref <Module>.??_C@_1BA@GBHGOCBB@?$AAh?$AAt?$AAt?$AAp?$AA?3?$AA?1?$AA?1@) != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, base_url, ref <Module>.??_C@_13CGOKJPIL@?$AA?1@);
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr, url_name);
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr2);
						num = 2U;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(download_url, ptr3);
						num = 2U & 4294967293U;
					}
					catch
					{
						if ((num & 2U) != 0U)
						{
							num &= 4294967293U;
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						}
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
			}
			else
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(download_url, url_name);
			}
		}
		ulong num2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.find_last_of(url_name, 46, -1L);
		if (18446744073709551615UL == num2 || 0UL == num2)
		{
			return 0;
		}
		ulong num3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.find_last_of(url_name, 46, num2 - 1UL);
		if (18446744073709551615UL == num3 || 0UL == num3)
		{
			return 0;
		}
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.find_last_of(url_name, 46, num3 - 1UL);
		if (18446744073709551615UL != num4 && 0UL != num4)
		{
			ulong num5 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.find_last_of(url_name, 47, num4 - 1UL);
			if (18446744073709551615UL == num5)
			{
				num5 = 0UL;
			}
			else
			{
				num5 += 1UL;
			}
			if (update_file_name != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
				try
				{
					allocator<wchar_t> allocator<wchar_t>;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, url_name, num5, -1L, ref allocator<wchar_t>);
					num |= 4U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(update_file_name, ptr4);
					num &= 4294967291U;
				}
				catch
				{
					if ((num & 4U) != 0U)
					{
						num &= 4294967291U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
			}
			if (file_name != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
				try
				{
					allocator<wchar_t> allocator<wchar_t>2;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, url_name, num5, num4 - num5, ref allocator<wchar_t>2);
					num |= 8U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(file_name, ptr5);
					num &= 4294967287U;
				}
				catch
				{
					if ((num & 8U) != 0U)
					{
						num &= 4294967287U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
					throw;
				}
			}
			if (file_size != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
				try
				{
					allocator<wchar_t> allocator<wchar_t>3;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, url_name, num4 + 1UL, num3 - num4 - 1UL, ref allocator<wchar_t>3);
					num |= 16U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(file_size, ptr6);
					num &= 4294967279U;
				}
				catch
				{
					if ((num & 16U) != 0U)
					{
						num &= 4294967279U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
			}
			if (file_hash != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
				try
				{
					allocator<wchar_t> allocator<wchar_t>4;
					<Module>.std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{ctor}<class\u0020std::allocator<wchar_t>\u0020const\u0020&,void>(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ref allocator<wchar_t>4);
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, url_name, num3 + 1UL, num2 - num3 - 1UL);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					num |= 32U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(file_hash, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					num &= 4294967263U;
				}
				catch
				{
					if ((num & 32U) != 0U)
					{
						num &= 4294967263U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
					throw;
				}
			}
			return 1;
		}
		return 0;
	}

	// Token: 0x0600006C RID: 108 RVA: 0x00013A00 File Offset: 0x00012E00
	internal unsafe static LauncherupdateInfo* {ctor}(LauncherupdateInfo* A_0)
	{
		<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(A_0);
		LauncherupdateInfo* ptr;
		try
		{
			*(A_0 + 16L) = 0L;
			ptr = A_0 + 24L;
			*ptr = 7L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 + 32L;
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr2);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr2);
				throw;
			}
			try
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 64L;
				<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr3);
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
					throw;
				}
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = A_0 + 96L;
					<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr4);
					try
					{
						*(ptr4 + 16L) = 0L;
						*(ptr4 + 24L) = 7L;
						*ptr4 = 0;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr4);
						throw;
					}
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = A_0 + 128L;
						<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr5);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr5);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr5);
							throw;
						}
						try
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = A_0 + 160L;
							<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr6);
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr6);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr6);
								throw;
							}
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = A_0 + 192L;
								<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr7);
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr7);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr7);
									throw;
								}
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = A_0 + 224L;
									<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr8);
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr8);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr8);
										throw;
									}
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = A_0 + 256L;
										<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr9);
										try
										{
											*(ptr9 + 16L) = 0L;
											*(ptr9 + 24L) = 7L;
											*ptr9 = 0;
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr9);
											throw;
										}
										try
										{
											*(A_0 + 288L) = 0;
											*(A_0 + 292L) = 0;
											LauncherupdateInfo* ptr10 = A_0 + 296L;
											basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr11 = ptr10;
											<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr11);
											try
											{
												<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr11);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr11);
												throw;
											}
											try
											{
												<Module>.FileDownloader.{ctor}(A_0 + 328L);
												try
												{
													*(A_0 + 800L) = 0L;
													shared_ptr<IniParser>* ptr12 = A_0 + 808L;
													*ptr12 = 0L;
													*(ptr12 + 8L) = 0L;
													try
													{
														$ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W;
														cpblk(ref $ArrayType$$$BY0BAE@_W, ref <Module>.??_C@_11LOCGONAA@@, 2);
														initblk((ref $ArrayType$$$BY0BAE@_W) + 2, 0, 518L);
														$ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W2;
														cpblk(ref $ArrayType$$$BY0BAE@_W2, ref <Module>.??_C@_11LOCGONAA@@, 2);
														initblk((ref $ArrayType$$$BY0BAE@_W2) + 2, 0, 518L);
														<Module>.GetModuleFileNameW(null, (char*)(&$ArrayType$$$BY0BAE@_W), 260);
														$ArrayType$$$BY0BAE@_W* ptr13 = &$ArrayType$$$BY0BAE@_W;
														if ($ArrayType$$$BY0BAE@_W != null)
														{
															do
															{
																ptr13 += 2L / (long)sizeof($ArrayType$$$BY0BAE@_W);
															}
															while (*(short*)ptr13 != 0);
														}
														long num = ptr13 - (ref $ArrayType$$$BY0BAE@_W) / sizeof($ArrayType$$$BY0BAE@_W) >> 1;
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(ptr10, ref $ArrayType$$$BY0BAE@_W, num);
														<Module>.LauncherupdateInfo.MakeEventName((char*)(&$ArrayType$$$BY0BAE@_W));
														<Module>.swprintf_s<260>(ref $ArrayType$$$BY0BAE@_W2, (char*)(&<Module>.??_C@_17PFPODFCN@?$AA_?$AA?$CF?$AAd@), __arglist(<Module>.GetTickCount()));
														$ArrayType$$$BY0BAE@_W* ptr14 = &$ArrayType$$$BY0BAE@_W;
														if ($ArrayType$$$BY0BAE@_W != null)
														{
															do
															{
																ptr14 += 2L / (long)sizeof($ArrayType$$$BY0BAE@_W);
															}
															while (*(short*)ptr14 != 0);
														}
														long num2 = ptr14 - (ref $ArrayType$$$BY0BAE@_W) / sizeof($ArrayType$$$BY0BAE@_W) >> 1;
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, ref $ArrayType$$$BY0BAE@_W, num2);
														$ArrayType$$$BY0BAE@_W* ptr15 = &$ArrayType$$$BY0BAE@_W2;
														if ($ArrayType$$$BY0BAE@_W2 != null)
														{
															do
															{
																ptr15 += 2L / (long)sizeof($ArrayType$$$BY0BAE@_W);
															}
															while (*(short*)ptr15 != 0);
														}
														long num3 = ptr15 - (ref $ArrayType$$$BY0BAE@_W2) / sizeof($ArrayType$$$BY0BAE@_W) >> 1;
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, ref $ArrayType$$$BY0BAE@_W2, num3);
														char* ptr16 = A_0;
														if (((8L <= *ptr) ? 1 : 0) != 0)
														{
															ptr16 = *A_0;
														}
														<Module>.CreateEventW(null, 0, 1, ptr16);
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(A_0 + (byte*)808L));
														throw;
													}
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(FileDownloader.{dtor}), (void*)(A_0 + (byte*)328L));
													throw;
												}
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)296L));
												throw;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)256L));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)224L));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)192L));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)160L));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)128L));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)96L));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)64L));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600006D RID: 109 RVA: 0x00011C60 File Offset: 0x00011060
	internal unsafe static void {dtor}(LauncherupdateInfo* A_0)
	{
		try
		{
			try
			{
				try
				{
					try
					{
						try
						{
							try
							{
								try
								{
									try
									{
										try
										{
											try
											{
												try
												{
													try
													{
														ulong num = (ulong)(*(A_0 + 800L));
														if (num != 0UL)
														{
															<Module>.WaitForSingleObject(num, -1);
														}
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(A_0 + (byte*)808L));
														throw;
													}
													ulong num2 = (ulong)(*(A_0 + 808L + 8L));
													if (num2 != 0UL)
													{
														<Module>.std._Ref_count_base._Decref(num2);
													}
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(FileDownloader.{dtor}), (void*)(A_0 + (byte*)328L));
													throw;
												}
												<Module>.FileDownloader.{dtor}(A_0 + 328L);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)296L));
												throw;
											}
											basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 296L;
											try
											{
												<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
												throw;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)256L));
											throw;
										}
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 + 256L;
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr2);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr2);
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)224L));
										throw;
									}
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 224L;
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr3);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)192L));
									throw;
								}
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = A_0 + 192L;
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr4);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr4);
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)160L));
								throw;
							}
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = A_0 + 160L;
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr5);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr5);
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)128L));
							throw;
						}
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = A_0 + 128L;
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr6);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr6);
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)96L));
						throw;
					}
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = A_0 + 96L;
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr7);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr7);
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)64L));
					throw;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = A_0 + 64L;
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr8);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr8);
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = A_0 + 32L;
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr9);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr9);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x0600006E RID: 110 RVA: 0x00014014 File Offset: 0x00013414
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Init(LauncherupdateInfo* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* path, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* update_url)
	{
		if (*(A_0 + 288L) != 0)
		{
			return 0;
		}
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0 + 296L, ref <Module>.??_C@_11LOCGONAA@@, 0L);
		if ((CURLcode)0 != <Module>.curl_global_init(3))
		{
			*(A_0 + 288L) = 2;
			*(A_0 + 292L) = 0;
			return 0;
		}
		if (<Module>.FileDownloader.Prepare(A_0 + 328L) == null)
		{
			*(A_0 + 288L) = 3;
			*(A_0 + 292L) = 0;
			return 0;
		}
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_0 + 64L, path);
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_0 + 32L, update_url);
		return 1;
	}

	// Token: 0x0600006F RID: 111 RVA: 0x00015C04 File Offset: 0x00015004
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool LoadLocalLauncherIni(LauncherupdateInfo* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* file_name)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, A_0 + 64L, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		try
		{
			<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr, file_name);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		bool flag;
		try
		{
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			shared_ptr<IniParser> shared_ptr<IniParser>;
			initblk(ref shared_ptr<IniParser>, 0, 16L);
			<Module>.IniParser.LoadIniW((shared_ptr<IniParser>*)(&shared_ptr<IniParser>), <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			try
			{
				if (((0L == shared_ptr<IniParser>) ? 1 : 0) != 0)
				{
					flag = false;
				}
				else
				{
					LauncherupdateInfo* ptr2 = A_0 + 808L;
					<Module>.std.shared_ptr<IniParser>.=(ptr2, ref shared_ptr<IniParser>);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
					<Module>.IniParser.GetValueStringW(*ptr2, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1BG@JLHGJLOE@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAu?$AAr?$AAl@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
					try
					{
						if (((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) + 16) == 0L) ? 1 : 0) == 0)
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_0 + 32L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
						}
						flag = true;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
				throw;
			}
			if (*((ref shared_ptr<IniParser>) + 8) != 0L)
			{
				<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return flag;
	}

	// Token: 0x06000070 RID: 112 RVA: 0x00019344 File Offset: 0x00018744
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool DownloadLauncherIni(LauncherupdateInfo* A_0, char* current_work_path)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ref <Module>.??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@);
		bool flag;
		try
		{
			LauncherupdateInfo* ptr = A_0 + 32L;
			if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.find(ptr, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 0L) == null && current_work_path != null)
			{
				ulong num2 = (ulong)(*(A_0 + 48L));
				if (num2 > (ulong)(*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16)))
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = ptr;
					ulong num3 = num2 - (ulong)(*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16));
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.substr(ptr2, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, *((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16), num3);
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, current_work_path);
						try
						{
							<Module>.ConvertPathToUrl(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
							char* ptr3 = (((8L <= *((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) + 24)) ? 1 : 0) != 0 ? basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3 : ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
							if (*ptr3 != '/')
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, 47, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ptr4);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
									throw;
								}
							}
							if (*<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.back(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2) == 47 && *<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.back(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) != 47)
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.push_back(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, 47);
							}
							if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Equal(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) == null)
							{
								goto IL_158;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					flag = true;
					goto IL_446;
					try
					{
						try
						{
							IL_158:
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
						}
						catch
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
				}
			}
			$ArrayType$$$BY0CA@_W $ArrayType$$$BY0CA@_W;
			<Module>.swprintf_s<32>(ref $ArrayType$$$BY0CA@_W, (char*)(&<Module>.??_C@_1BC@EIHMOPKK@?$AA?$DP?$AAt?$AAi?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAd@), __arglist(<Module>._time32(null) / 60));
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ptr, ref <Module>.??_C@_13CGOKJPIL@?$AA?1@);
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7;
			try
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
				try
				{
					char* ptr6 = ref <Module>.??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@;
					if (<Module>.??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@ != null)
					{
						do
						{
							ptr6 += 2L;
						}
						while (*ptr6 != 0);
					}
					long num4 = ptr6 - (ref <Module>.??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@) >> 1;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr5, ref <Module>.??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@, num4);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ptr7);
					num = 8U;
					<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7, ptr8, ref $ArrayType$$$BY0CA@_W);
					try
					{
						num = 8U & 4294967287U;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
						throw;
					}
				}
				catch
				{
					if ((num & 8U) != 0U)
					{
						num &= 4294967287U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
					}
					throw;
				}
				try
				{
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
				throw;
			}
			try
			{
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
				shared_ptr<MemoryFile> shared_ptr<MemoryFile>;
				initblk(ref shared_ptr<MemoryFile>, 0, 16L);
				<Module>.FileDownloader.OpenMemory(&shared_ptr<MemoryFile>);
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_0 + 296L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
					LauncherupdateInfo* ptr9 = A_0 + 328L;
					<Module>.FileDownloader.Clear(ptr9);
					LauncherupdateInfo* ptr10 = ptr9;
					char* ptr11 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
					shared_ptr<MemoryFile> shared_ptr<MemoryFile>2 = 0L;
					*((ref shared_ptr<MemoryFile>2) + 8) = 0L;
					<Module>.std._Ptr_base<MemoryFile>._Copy_construct_from<class\u0020MemoryFile>(ref shared_ptr<MemoryFile>2, ref shared_ptr<MemoryFile>);
					if (<Module>.FileDownloader.SetDownload(ptr10, (shared_ptr<MemoryFile>*)(&shared_ptr<MemoryFile>2), ptr11, 0, 65001U) == null)
					{
						int num5 = <Module>.FileDownloader.GetErrorCode(ptr9);
						*(A_0 + 288L) = 5;
						*(A_0 + 292L) = num5;
					}
					else if (<Module>.FileDownloader.Download(ptr9, null, 0L) == null)
					{
						int num6 = <Module>.FileDownloader.GetErrorCode(ptr9);
						*(A_0 + 288L) = 5;
						*(A_0 + 292L) = num6;
					}
					else
					{
						shared_ptr<IniParser> shared_ptr<IniParser>;
						initblk(ref shared_ptr<IniParser>, 0, 16L);
						long num7 = shared_ptr<MemoryFile>;
						long num8 = shared_ptr<MemoryFile> + 32L;
						<Module>.EnterCriticalSection(num8);
						int num9 = (int)(*(num7 + 16L));
						<Module>.LeaveCriticalSection(num8);
						uint num10 = (uint)num9;
						long num11 = calli(std.byte* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), shared_ptr<MemoryFile>, *(*shared_ptr<MemoryFile> + 40L));
						<Module>.IniParser.LoadIniData(&shared_ptr<IniParser>, num11, num10);
						try
						{
							if (((0L == shared_ptr<IniParser>) ? 1 : 0) != 0)
							{
								*(A_0 + 288L) = 6;
								*(A_0 + 292L) = 0;
								flag = false;
							}
							else
							{
								LauncherupdateInfo* ptr12 = A_0 + 808L;
								if (((*ptr12 != 0L) ? 1 : 0) != 0)
								{
									<Module>.IniParser.OverrideIni(shared_ptr<IniParser>, ptr12);
								}
								<Module>.std.shared_ptr<IniParser>.=(ptr12, ref shared_ptr<IniParser>);
								flag = true;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
							throw;
						}
						if (*((ref shared_ptr<IniParser>) + 8) == 0L)
						{
							goto IL_40D;
						}
						<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
						goto IL_40D;
					}
					flag = false;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(&shared_ptr<MemoryFile>));
					throw;
				}
				IL_40D:
				if (*((ref shared_ptr<MemoryFile>) + 8) != 0L)
				{
					<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<MemoryFile>) + 8));
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
				throw;
			}
			IL_446:
			try
			{
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		return flag;
	}

	// Token: 0x06000071 RID: 113 RVA: 0x00017A2C File Offset: 0x00016E2C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool CheckUpdate(LauncherupdateInfo* A_0, bool* need_update, [MarshalAs(UnmanagedType.U1)] bool run_check_thread)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.IniParser.GetValueStringW(*(A_0 + 808L), &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1BE@EHJBLODE@?$AAi?$AAn?$AAf?$AAo?$AA_?$AAf?$AAi?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		bool flag;
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
			<Module>.IniParser.GetValueStringW(*(A_0 + 808L), &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1BK@CLBAMJDO@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AAr?$AA_?$AAf?$AAi?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
			try
			{
				if (((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16) == 0L) ? 1 : 0) == 0 && ((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2) + 16) == 0L) ? 1 : 0) == 0)
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
					<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
						<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
						try
						{
							LauncherupdateInfo* ptr = A_0 + 96L;
							LauncherupdateInfo* ptr2 = A_0 + 32L;
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
							if (<Module>.LauncherupdateInfo.ParseUpdateUrlName(ptr2, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, null, null, ptr, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4) == null)
							{
								*(A_0 + 288L) = 6;
								*(A_0 + 292L) = 0;
							}
							else
							{
								LauncherupdateInfo* ptr3 = A_0 + 192L;
								if (<Module>.LauncherupdateInfo.ParseUpdateUrlName(ptr2, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, A_0 / sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>) + 128L, A_0 / sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>) + 160L, ptr3, A_0 / sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>) + 224L, A_0 / sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>) + 256L) != null)
								{
									LauncherupdateInfo* ptr4 = A_0 + 64L;
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ptr4, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
									try
									{
										<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ptr5, ptr);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
										throw;
									}
									try
									{
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
											throw;
										}
										FileHash fileHash;
										initblk(ref fileHash, 0, 624L);
										<Module>.FileHash.{ctor}(ref fileHash);
										try
										{
											<Module>.FileHash.SetFile(ref fileHash, <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
											$ArrayType$$$BY0CB@_W $ArrayType$$$BY0CB@_W;
											if (<Module>.FileHash.CalcFileHash(ref fileHash, null) != null || 0 == <Module>.FileHash.GetHash(ref fileHash, (char*)(&$ArrayType$$$BY0CB@_W), 33))
											{
												*need_update = 1;
											}
											else
											{
												if (*((ref fileHash) + 584) == <Module>._wtol(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3)) && ((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Equal(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ref $ArrayType$$$BY0CB@_W) == 0) ? 1 : 0) == 0)
												{
													basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7;
													basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7, ptr4, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
													basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8;
													try
													{
														<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8, ptr6, ptr3);
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
														throw;
													}
													try
													{
														try
														{
															<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
														}
														catch
														{
															<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
															throw;
														}
														<Module>.FileCommon.DeleteFileIfExist(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
														if (run_check_thread)
														{
															*(A_0 + 800L) = <Module>._beginthreadex(null, 0U, <Module>.__unep@?ThreadProc@LauncherupdateInfo@@$$FCAIPEAX@Z, A_0, 0U, null);
														}
														*need_update = 0;
														flag = true;
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
														throw;
													}
													try
													{
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8);
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
														throw;
													}
													goto IL_291;
												}
												*need_update = 1;
											}
											flag = true;
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(FileHash.{dtor}), (void*)(&fileHash));
											throw;
										}
										IL_291:
										<Module>.FileHash.{dtor}(ref fileHash);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
										throw;
									}
									goto IL_2C0;
								}
								*(A_0 + 288L) = 6;
								*(A_0 + 292L) = 0;
							}
							flag = false;
							IL_2C0:
							try
							{
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
				}
				else
				{
					*need_update = 0;
					flag = true;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		return flag;
	}

	// Token: 0x06000072 RID: 114 RVA: 0x00015DE8 File Offset: 0x000151E8
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool Update(LauncherupdateInfo* A_0)
	{
		LauncherupdateInfo* ptr = A_0 + 64L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
		LauncherupdateInfo* ptr3;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		try
		{
			ptr3 = A_0 + 160L;
			<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr2, ptr3);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
		try
		{
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ptr, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
			try
			{
				LauncherupdateInfo* ptr5 = A_0 + 192L;
				<Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ptr4, ptr5);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
			try
			{
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
				int num = <Module>.IniParser.GetValueIntW(*(A_0 + 808L), (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1CC@HPPLJKMN@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAx?$AA_?$AAr?$AAe?$AAt?$AAr@), 0);
				int num2 = <Module>.IniParser.GetValueIntW(*(A_0 + 808L), (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1CK@IFKKHFBP@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAr?$AAe?$AAt?$AAr?$AAy?$AA_?$AAw?$AAa@), 0);
				bool flag = false;
				int num3 = 0;
				if (0 > num)
				{
					goto IL_579;
				}
				LauncherupdateInfo* ptr6 = A_0 + 128L;
				LauncherupdateInfo* ptr7 = A_0 + 296L;
				shared_ptr<LocalFile> shared_ptr<LocalFile>;
				for (;;)
				{
					if (num3 > 0)
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = ptr6;
						char* ptr9 = ptr8;
						if (((8L <= *(ptr8 + 24L)) ? 1 : 0) != 0)
						{
							ptr9 = *ptr8;
						}
						$ArrayType$$$BY0EAA@_W $ArrayType$$$BY0EAA@_W;
						<Module>.swprintf_s<1024>(ref $ArrayType$$$BY0EAA@_W, (char*)(&<Module>.??_C@_1BM@JDLOOPKC@?$AAr?$AAe?$AAt?$AAr?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs@), __arglist(num3, (ushort*)ptr9));
						<Module>.OutputDebugStringW((char*)(&$ArrayType$$$BY0EAA@_W));
						<Module>.Sleep(num2);
					}
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ptr7, ptr6);
					initblk(ref shared_ptr<LocalFile>, 0, 16L);
					<Module>.FileDownloader.OpenFile(&shared_ptr<LocalFile>, <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					try
					{
						if (((0L == shared_ptr<LocalFile>) ? 1 : 0) != 0)
						{
							goto IL_3BF;
						}
						LauncherupdateInfo* ptr10 = A_0 + 328L;
						<Module>.FileDownloader.Clear(ptr10);
						LauncherupdateInfo* ptr11 = ptr10;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = ptr6;
						char* ptr13 = ptr12;
						if (((8L <= *(ptr12 + 24L)) ? 1 : 0) != 0)
						{
							ptr13 = *ptr12;
						}
						shared_ptr<LocalFile> shared_ptr<LocalFile>2 = 0L;
						*((ref shared_ptr<LocalFile>2) + 8) = 0L;
						<Module>.std._Ptr_base<LocalFile>._Copy_construct_from<class\u0020LocalFile>(ref shared_ptr<LocalFile>2, ref shared_ptr<LocalFile>);
						if (<Module>.FileDownloader.SetDownload(ptr11, (shared_ptr<LocalFile>*)(&shared_ptr<LocalFile>2), ptr13, 0, 65001U) == null)
						{
							goto IL_447;
						}
						flag = <Module>.FileDownloader.Download(ptr10, null, 0L) != null;
						if (flag)
						{
							goto IL_23E;
						}
						int num4 = <Module>.FileDownloader.GetErrorCode(ptr10);
						*(A_0 + 288L) = 11;
						*(A_0 + 292L) = num4;
						calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), shared_ptr<LocalFile>, *(*shared_ptr<LocalFile> + 48L));
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
						throw;
					}
					goto IL_225;
					IL_3AE:
					num3++;
					if (num3 > num)
					{
						break;
					}
					continue;
					IL_225:
					if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
					{
						<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
						goto IL_3AE;
					}
					goto IL_3AE;
					IL_23E:
					try
					{
						calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), shared_ptr<LocalFile>, *(*shared_ptr<LocalFile> + 48L));
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ptr7, ptr3);
						LastErrorInfo<LastErrorType> lastErrorInfo<LastErrorType>;
						<Module>.LastErrorInfo<LastErrorType>.{ctor}(ref lastErrorInfo<LastErrorType>);
						try
						{
							char* ptr14 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
							$ArrayType$$$BY0CB@_W $ArrayType$$$BY0CB@_W;
							flag = <Module>.FileCompress.Extract(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2), ptr14, (char*)(&$ArrayType$$$BY0CB@_W), 33, &lastErrorInfo<LastErrorType>) != null;
							if (flag)
							{
								goto IL_4F1;
							}
							LastErrorType lastErrorType;
							LastErrorType* ptr15 = <Module>.LastErrorInfo<LastErrorType>.GetLastErrorInfo(ref lastErrorInfo<LastErrorType>, &lastErrorType);
							try
							{
								LastErrorType lastErrorType2;
								LastErrorType* ptr16 = <Module>.LastErrorInfo<LastErrorType>.GetLastErrorInfo(ref lastErrorInfo<LastErrorType>, &lastErrorType2);
								try
								{
									int num5 = (int)(((ushort)(*(int*)(ptr16 + 36L / (long)sizeof(LastErrorType))) & 255) + (ushort)(*(int*)(ptr15 + 32L / (long)sizeof(LastErrorType)) << 8));
									*(A_0 + 288L) = 12;
									*(A_0 + 292L) = num5;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)(&lastErrorType2));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref lastErrorType2);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&lastErrorType2));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)(&lastErrorType));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref lastErrorType);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&lastErrorType));
								throw;
							}
							<Module>.FileCommon.DeleteFileIfExist(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
							<Module>.FileCommon.DeleteFileIfExist(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(LastErrorInfo<LastErrorType>.{dtor}), (void*)(&lastErrorInfo<LastErrorType>));
							throw;
						}
						lastErrorInfo<LastErrorType> = ref <Module>.??_7?$LastErrorInfo@ULastErrorType@@@@6B@;
						try
						{
							<Module>.DeleteCriticalSection((ref lastErrorInfo<LastErrorType>) + 48);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)((ref lastErrorInfo<LastErrorType>) + (byte*)8L));
							throw;
						}
						LastErrorType* ptr17 = (ref lastErrorInfo<LastErrorType>) + 8;
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate((ref lastErrorInfo<LastErrorType>) + 8);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr17);
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
						throw;
					}
					if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
					{
						<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
						goto IL_3AE;
					}
					goto IL_3AE;
				}
				goto IL_579;
				IL_3BF:
				try
				{
					*(A_0 + 288L) = 1;
					*(A_0 + 292L) = 0;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
					throw;
				}
				if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
				{
					<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
		IL_447:
		try
		{
			try
			{
				shared_ptr<LocalFile> shared_ptr<LocalFile>;
				try
				{
					int num6 = <Module>.FileDownloader.GetErrorCode(A_0 + 328L);
					*(A_0 + 288L) = 11;
					*(A_0 + 292L) = num6;
					calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), shared_ptr<LocalFile>, *(*shared_ptr<LocalFile> + 48L));
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
					throw;
				}
				if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
				{
					<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
		IL_4F1:
		try
		{
			try
			{
				shared_ptr<LocalFile> shared_ptr<LocalFile>;
				try
				{
					LastErrorInfo<LastErrorType> lastErrorInfo<LastErrorType> = ref <Module>.??_7?$LastErrorInfo@ULastErrorType@@@@6B@;
					try
					{
						<Module>.DeleteCriticalSection((ref lastErrorInfo<LastErrorType>) + 48);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)((ref lastErrorInfo<LastErrorType>) + (byte*)8L));
						throw;
					}
					LastErrorType* ptr18 = (ref lastErrorInfo<LastErrorType>) + 8;
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate((ref lastErrorInfo<LastErrorType>) + 8);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr18);
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
					throw;
				}
				if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
				{
					<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		IL_579:
		try
		{
			try
			{
				<Module>.FileCommon.DeleteFileIfExist(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				bool flag;
				if (flag)
				{
					goto IL_5DE;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
		IL_5DE:
		try
		{
			try
			{
				LauncherupdateInfo* ptr5;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_0 + 296L, ptr5);
				long num7 = <Module>.FileCommon.GetFileSize(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr19 = A_0 + 224L;
				char* ptr20 = ptr19;
				if (((8L <= *(ptr19 + 24L)) ? 1 : 0) != 0)
				{
					ptr20 = *ptr19;
				}
				if (num7 != <Module>._wtol(ptr20))
				{
					goto IL_909;
				}
				$ArrayType$$$BY0CB@_W $ArrayType$$$BY0CB@_W;
				if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Equal(A_0 + 256L, ref $ArrayType$$$BY0CB@_W) == 0) ? 1 : 0) != 0)
				{
					goto IL_909;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref <Module>.??_C@_13NEIAEHFG@?$AA?$CC@);
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
					char* ptr21 = ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@;
					do
					{
						ptr21 += 2L;
					}
					while (*ptr21 != 0);
					ulong num8 = ptr21 - (ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@) >> 1;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@, num8);
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, A_0 + 32L);
					char* ptr22 = ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@;
					do
					{
						ptr22 += 2L;
					}
					while (*ptr22 != 0);
					ulong num9 = ptr22 - (ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@) >> 1;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref <Module>.??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@, num9);
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, A_0);
					char* ptr23 = ref <Module>.??_C@_15KEGLFFFP@?$AA?$CC?$AA?5@;
					do
					{
						ptr23 += 2L;
					}
					while (*ptr23 != 0);
					ulong num10 = ptr23 - (ref <Module>.??_C@_15KEGLFFFP@?$AA?$CC?$AA?5@) >> 1;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref <Module>.??_C@_15KEGLFFFP@?$AA?$CC?$AA?5@, num10);
					char* commandLineW = <Module>.GetCommandLineW();
					char* ptr24 = commandLineW;
					if (*commandLineW != 0)
					{
						do
						{
							ptr24 += 2L;
						}
						while (*ptr24 != 0);
					}
					ulong num11 = ptr24 - commandLineW >> 1;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, commandLineW, num11);
					ulong num12 = (ulong)((long)((int)(*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5) + 16)) + 1));
					char* ptr25 = <Module>.malloc(num12 * 2UL);
					if (null != ptr25)
					{
						goto IL_7EB;
					}
					*(A_0 + 288L) = 14;
					*(A_0 + 292L) = 0;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
		IL_7EB:
		try
		{
			try
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
				try
				{
					ulong num12;
					char* ptr25;
					<Module>.wcscpy_s(ptr25, num12, <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					_STARTUPINFOW startupinfow;
					initblk(ref startupinfow, 0, 104L);
					_PROCESS_INFORMATION process_INFORMATION;
					initblk(ref process_INFORMATION, 0, 24L);
					startupinfow = 104;
					if (0 != <Module>.CreateProcessW(null, ptr25, null, null, 0, 0, null, null, &startupinfow, &process_INFORMATION))
					{
						goto IL_8CC;
					}
					int lastError = <Module>.GetLastError();
					*(A_0 + 288L) = 25;
					*(A_0 + 292L) = lastError;
					<Module>.free((void*)ptr25);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
		IL_8CC:
		try
		{
			try
			{
				try
				{
					char* ptr25;
					<Module>.free((void*)ptr25);
					<Module>.ExitProcess(0U);
				}
				catch
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		IL_909:
		try
		{
			try
			{
				*(A_0 + 288L) = 13;
				*(A_0 + 292L) = 0;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		return 0;
	}

	// Token: 0x06000073 RID: 115 RVA: 0x000120E8 File Offset: 0x000114E8
	internal unsafe static void DeleteLauncherInfoFile(LauncherupdateInfo* A_0)
	{
		uint num = 0U;
		if (((*(A_0 + 112L) == 0L) ? 1 : 0) == 0)
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.std.operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, A_0 + 64L, ref <Module>.??_C@_13FPGAJAPJ@?$AA?2@);
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
			try
			{
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr, A_0 + 96L);
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr2);
					num = 2U;
				}
				catch
				{
					if ((num & 2U) != 0U)
					{
						num &= 4294967293U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					}
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				<Module>.FileCommon.DeleteFileIfExist(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				num = 2U & 4294967293U;
			}
			catch
			{
				if ((num & 2U) != 0U)
				{
					num &= 4294967293U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				}
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				throw;
			}
		}
	}

	// Token: 0x06000074 RID: 116 RVA: 0x0000E534 File Offset: 0x0000D934
	internal unsafe static shared_ptr<IniParser>* GetLauncherIni(LauncherupdateInfo* A_0, shared_ptr<IniParser>* A_1)
	{
		uint num = 0U;
		*(long*)A_1 = 0L;
		shared_ptr<IniParser>* ptr = A_1 + 8L / (long)sizeof(shared_ptr<IniParser>);
		*(long*)ptr = 0L;
		ulong num2 = (ulong)(*(A_0 + 808L + 8L));
		if (num2 != 0UL)
		{
			Interlocked.Increment(num2 + 8UL);
		}
		*(long*)A_1 = *(A_0 + 808L);
		*(long*)ptr = *(A_0 + 808L + 8L);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x06000075 RID: 117 RVA: 0x0000A998 File Offset: 0x00009D98
	internal unsafe static void MakeEventName(char* filename)
	{
		if (*filename != '\0')
		{
			long num = 0L;
			char* ptr = filename;
			do
			{
				if ('\\' == *ptr)
				{
					*ptr = '/';
				}
				num += 1L;
				ptr = num * 2L / 2L + filename;
			}
			while (*ptr != '\0');
		}
	}

	// Token: 0x06000076 RID: 118 RVA: 0x00017968 File Offset: 0x00016D68
	internal unsafe static uint ThreadProc(void* pData)
	{
		<Module>.LauncherupdateInfo.CheckLauncherInfo(pData);
		return 0;
	}

	// Token: 0x06000077 RID: 119 RVA: 0x00017784 File Offset: 0x00016B84
	internal unsafe static void CheckLauncherInfo(LauncherupdateInfo* A_0)
	{
		FileInfoList fileInfoList;
		initblk(ref fileInfoList, 0, 128L);
		<Module>.FileInfoList.{ctor}(ref fileInfoList, A_0 + 64L, A_0 + 96L);
		try
		{
			if (<Module>.FileInfoList.Init(ref fileInfoList) == null)
			{
				<Module>.LauncherupdateInfo.DeleteLauncherInfoFile(A_0);
			}
			else if (<Module>.FileInfoList.CheckFileChanged(ref fileInfoList) != null)
			{
				<Module>.LauncherupdateInfo.DeleteLauncherInfoFile(A_0);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(FileInfoList.{dtor}), (void*)(&fileInfoList));
			throw;
		}
		<Module>.FileInfoList.{dtor}(ref fileInfoList);
	}

	// Token: 0x06000078 RID: 120 RVA: 0x0000A9C8 File Offset: 0x00009DC8
	internal unsafe static ResourceBuffer* {ctor}(ResourceBuffer* A_0, HINSTANCE__* module, int resource_id, char* type)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0;
		*(A_0 + 12L) = 1;
		HRSRC__* ptr = <Module>.FindResourceW(module, (ushort)resource_id, type);
		if (null != ptr)
		{
			uint num = <Module>.SizeofResource(module, ptr);
			*(A_0 + 8L) = (int)num;
			if (0U != num)
			{
				void* ptr2 = <Module>.LoadResource(module, ptr);
				if (null == ptr2)
				{
					*(A_0 + 8L) = 0;
				}
				else
				{
					void* ptr3 = <Module>.LockResource(ptr2);
					*A_0 = ptr3;
					if (null == ptr3)
					{
						*(A_0 + 8L) = 0;
					}
				}
			}
		}
		return A_0;
	}

	// Token: 0x06000079 RID: 121 RVA: 0x0000AA34 File Offset: 0x00009E34
	internal unsafe static void {dtor}(ResourceBuffer* A_0)
	{
		if (*(A_0 + 12L) == 0)
		{
			ulong num = (ulong)(*A_0);
			if (num != 0UL)
			{
				<Module>.free(num);
			}
		}
	}

	// Token: 0x0600007A RID: 122 RVA: 0x000140A0 File Offset: 0x000134A0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetErrorCodeFormat(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 1000, <Module>.GetModuleHandleW(null));
		try
		{
			try
			{
				char* ptr2 = (char*)ptr;
				if (((8L <= *(long*)(ptr + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
				{
					ptr2 = *(long*)ptr;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr2);
				try
				{
					<Module>.UnescapeString<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(A_0, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					num = 1U;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600007B RID: 123 RVA: 0x000141D8 File Offset: 0x000135D8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetErrorTitle(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint res_id)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, res_id + 1000, <Module>.GetModuleHandleW(null));
		try
		{
			try
			{
				char* ptr2 = (char*)ptr;
				if (((8L <= *(long*)(ptr + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
				{
					ptr2 = *(long*)ptr;
				}
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0, ptr2);
				num = 1U;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600007C RID: 124 RVA: 0x000142B0 File Offset: 0x000136B0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetErrorMessageByID(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint error_id)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, error_id + 2000, <Module>.GetModuleHandleW(null));
		try
		{
			try
			{
				char* ptr2 = (char*)ptr;
				if (((8L <= *(long*)(ptr + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
				{
					ptr2 = *(long*)ptr;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr2);
				try
				{
					<Module>.UnescapeString<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(A_0, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					num = 1U;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600007D RID: 125 RVA: 0x000143E8 File Offset: 0x000137E8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetErrorMessageByCode(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, long error_code)
	{
		uint num = 0U;
		uint num2 = (uint)((ulong)error_code >> 32);
		if (num2 > 0)
		{
			<Module>.GetErrorMessageByID(A_0, num2);
			try
			{
				num = 1U;
				return A_0;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
				}
				throw;
			}
		}
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0, ref <Module>.??_C@_11LOCGONAA@@);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		try
		{
			num = 1U;
			ptr = A_0;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return ptr;
	}

	// Token: 0x0600007E RID: 126 RVA: 0x00014484 File Offset: 0x00013884
	internal unsafe static void ErrorMsgBox(uint res_id, long error_code, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* current_file)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.GetErrorCodeFormat(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
			<Module>.GetErrorTitle(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, res_id);
			try
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
				<Module>.GetErrorMessageByCode(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, error_code);
				try
				{
					if (((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) + 16) == 0L) ? 1 : 0) != 0)
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* errorMessageByID = <Module>.GetErrorMessageByID(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, res_id);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, errorMessageByID);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
							throw;
						}
					}
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7;
					if (((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16) == 0L) ? 1 : 0) == 0 && ((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2) + 16) == 0L) ? 1 : 0) == 0 && ((*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3) + 16) == 0L) ? 1 : 0) == 0)
					{
						char* ptr;
						if (((*(current_file + 16L) == 0L) ? 1 : 0) != 0)
						{
							ptr = (char*)(&<Module>.??_C@_19OEJGHIEG@?$AAn?$AAo?$AAn?$AAe@);
						}
						else
						{
							char* ptr2 = current_file;
							if (((8L <= *(current_file + 24L)) ? 1 : 0) != 0)
							{
								ptr2 = *current_file;
							}
							ptr = ptr2;
						}
						char* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
						$ArrayType$$$BY0EAA@_W $ArrayType$$$BY0EAA@_W;
						<Module>.swprintf_s<1024>(ref $ArrayType$$$BY0EAA@_W, ptr3, __arglist(error_code, (ushort*)ptr));
						$ArrayType$$$BY0EAA@_W* ptr4 = &$ArrayType$$$BY0EAA@_W;
						if ($ArrayType$$$BY0EAA@_W != null)
						{
							do
							{
								ptr4 += 2L / (long)sizeof($ArrayType$$$BY0EAA@_W);
							}
							while (*(short*)ptr4 != 0);
						}
						long num = ptr4 - (ref $ArrayType$$$BY0EAA@_W) / sizeof($ArrayType$$$BY0EAA@_W) >> 1;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ref $ArrayType$$$BY0EAA@_W, num);
						char* ptr5 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
						char* ptr6 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
						<Module>.MessageBoxW(null, ptr6, ptr5, 16U);
					}
					else
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, res_id, <Module>.GetModuleHandleW(null));
						try
						{
							char* ptr8 = (char*)ptr7;
							if (((8L <= *(long*)(ptr7 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
							{
								ptr8 = *(long*)ptr7;
							}
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ptr8);
							try
							{
								<Module>.UnescapeString<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
								throw;
							}
							try
							{
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
							throw;
						}
						try
						{
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
								throw;
							}
							char* ptr9;
							if (((*(current_file + 16L) == 0L) ? 1 : 0) != 0)
							{
								ptr9 = (char*)(&<Module>.??_C@_19OEJGHIEG@?$AAn?$AAo?$AAn?$AAe@);
							}
							else
							{
								char* ptr10 = current_file;
								if (((8L <= *(current_file + 24L)) ? 1 : 0) != 0)
								{
									ptr10 = *current_file;
								}
								ptr9 = ptr10;
							}
							char* ptr11 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
							$ArrayType$$$BY0EAA@_W $ArrayType$$$BY0EAA@_W2;
							<Module>.swprintf_s<1024>(ref $ArrayType$$$BY0EAA@_W2, ptr11, __arglist(error_code, (ushort*)ptr9));
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8;
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8, 111, <Module>.GetModuleHandleW(null));
							try
							{
								char* ptr13 = (char*)ptr12;
								if (((8L <= *(long*)(ptr12 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
								{
									ptr13 = *(long*)ptr12;
								}
								<Module>.MessageBoxW(null, (char*)(&$ArrayType$$$BY0EAA@_W2), ptr13, 16U);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
							throw;
						}
					}
					try
					{
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
	}

	// Token: 0x0600007F RID: 127 RVA: 0x0000AA58 File Offset: 0x00009E58
	internal static ulong GetAnsiStringSize(string _str)
	{
		ref byte ptr = _str;
		if ((ref ptr) != null)
		{
			ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
		}
		ref char char_u0020modopt(IsConst)& = ref ptr;
		ulong num = (ulong)<Module>.WideCharToMultiByte(3U, 1024, ref char_u0020modopt(IsConst)&, _str.Length, null, 0, null, null);
		if (num == 0UL && _str.Length != 0)
		{
			throw new ArgumentException("Conversion from WideChar to MultiByte failed.  Please check the content of the string and/or locale settings.");
		}
		return num + 1UL;
	}

	// Token: 0x06000080 RID: 128 RVA: 0x0000AAAC File Offset: 0x00009EAC
	internal unsafe static void WriteAnsiString(sbyte* _buf, ulong _size, string _str)
	{
		ref byte ptr = _str;
		if ((ref ptr) != null)
		{
			ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
		}
		ref char char_u0020modopt(IsConst)& = ref ptr;
		if (_size > 2147483647UL)
		{
			throw new ArgumentOutOfRangeException("Size of string exceeds INT_MAX.");
		}
		ulong num = (ulong)<Module>.WideCharToMultiByte(3U, 1024, ref char_u0020modopt(IsConst)&, _str.Length, _buf, (int)_size, null, null);
		if (num < _size && (num != 0UL || _size == 1UL))
		{
			*(byte*)(num / (ulong)sizeof(sbyte) + _buf) = 0;
			return;
		}
		throw new ArgumentException("Conversion from WideChar to MultiByte failed.  Please check the content of the string and/or locale settings.");
	}

	// Token: 0x06000081 RID: 129 RVA: 0x00012234 File Offset: 0x00011634
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* marshal_as<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020System::String\u0020^>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, string* _from_obj)
	{
		try
		{
			uint num = 0U;
			if (!(*_from_obj != null))
			{
				throw new ArgumentNullException("NULLPTR is not supported for this conversion.");
			}
			ref byte ptr = *_from_obj;
			if ((ref ptr) != null)
			{
				ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
			}
			ref char char_u0020modopt(IsConst)& = ref ptr;
			ulong num2 = (long)_from_obj->Length;
			char* ptr2 = ref char_u0020modopt(IsConst)&;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4;
			try
			{
				ptr3 = A_0 + 16L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr3 = 0L;
				ptr4 = A_0 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr4 = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)A_0);
				throw;
			}
			try
			{
				*(long*)ptr3 = 0L;
				*(long*)ptr4 = 7L;
				*(short*)A_0 = 0;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, ptr2, num2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_0);
				throw;
			}
			num = 1U;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000082 RID: 130 RVA: 0x0001233C File Offset: 0x0001173C
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* GetModuleLogName(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* module_name)
	{
		uint num = 0U;
		try
		{
			try
			{
				$ArrayType$$$BY07_W $ArrayType$$$BY07_W;
				<Module>.swprintf_s<8>(ref $ArrayType$$$BY07_W, (char*)(&<Module>.??_C@_17PFPODFCN@?$AA_?$AA?$CF?$AAd@), __arglist(64));
				$ArrayType$$$BY07_W* ptr = &$ArrayType$$$BY07_W;
				if ($ArrayType$$$BY07_W != null)
				{
					do
					{
						ptr += 2L / (long)sizeof($ArrayType$$$BY07_W);
					}
					while (*(short*)ptr != 0);
				}
				long num2 = ptr - (ref $ArrayType$$$BY07_W) / sizeof($ArrayType$$$BY07_W) >> 1;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(module_name, ref $ArrayType$$$BY07_W, num2);
				<Module>.Utf16ToUtf8(A_0, module_name);
				num = 1U;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)module_name);
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(module_name);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)module_name);
				throw;
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000083 RID: 131 RVA: 0x00014964 File Offset: 0x00013D64
	internal unsafe static void LogFunction(int log_type, ulong num_param, sbyte* str_param, ulong str_param_len)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		try
		{
			*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16) = 0L;
			*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 24) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
			initblk(ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 0, 248L);
			<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 3, 1);
			try
			{
				basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* ptr = <Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.<<(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.<<(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16, (sbyte*)(&<Module>.??_C@_01OHGJGJJP@?$FL@)), log_type), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@)), num_param), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@));
				sbyte* ptr2 = ((str_param != null) ? str_param : ((sbyte*)(&<Module>.??_C@_04HIBGFPH@NULL@)));
				<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.<<(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(ptr, ptr2), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@)), str_param_len), (sbyte*)(&<Module>.??_C@_01LBDDMOBJ@?$FN@));
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.str((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 24, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					num = 2U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr3);
					num = 2U & 4294967293U;
				}
				catch
				{
					if ((num & 2U) != 0U)
					{
						num &= 4294967293U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.__vbaseDtor), (void*)(&basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 152);
			<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 152);
			char* ptr4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			if (<Module>.?use_log@LogMsg@@2_NA)
			{
				<Module>.LogMsg.Write(ptr4, __arglist());
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
	}

	// Token: 0x06000084 RID: 132 RVA: 0x00012418 File Offset: 0x00011818
	internal unsafe static void __vbaseDtor(basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 152L;
		<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}(ptr);
		<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(ptr);
	}

	// Token: 0x06000085 RID: 133 RVA: 0x00014B84 File Offset: 0x00013F84
	internal unsafe static void ErrorMsg(int report_id, uint res_id, long error_code, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* current_file)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		try
		{
			basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
			initblk(ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 0, 248L);
			<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 3, 1);
			try
			{
				basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* ptr = <Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.<<(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16, (sbyte*)(&<Module>.??_C@_01OHGJGJJP@?$FL@)), report_id), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@));
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* errorTitle = <Module>.GetErrorTitle(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, res_id);
				try
				{
					<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.<<(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(<Module>.std.operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(ptr, errorTitle), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@)), error_code), (sbyte*)(&<Module>.??_C@_02DNJFBPJB@?$FN?$FL@)), current_file);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
					throw;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.str((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 24, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					num = 4U;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr2);
					num = 4U & 4294967291U;
				}
				catch
				{
					if ((num & 4U) != 0U)
					{
						num &= 4294967291U;
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					}
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.__vbaseDtor), (void*)(&basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 152);
			<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}((ref basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 152);
			char* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			if (<Module>.?use_log@LogMsg@@2_NA)
			{
				<Module>.LogMsg.Write(ptr3, __arglist());
			}
			<Module>.ErrorMsgBox(res_id, error_code, current_file);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
	}

	// Token: 0x06000086 RID: 134 RVA: 0x0000AC40 File Offset: 0x0000A040
	internal unsafe static int FindLauncherWindow(HWND__* hWnd, long lParam)
	{
		if (lParam == 0L)
		{
			return 0;
		}
		if (hWnd == *lParam)
		{
			*(lParam + 8L) = 1;
			return 0;
		}
		return 1;
	}

	// Token: 0x06000087 RID: 135 RVA: 0x0000E5C0 File Offset: 0x0000D9C0
	internal unsafe static LauncherWindowRestoreResult RestoreLauncherWindow()
	{
		scoped_shm_reader scoped_shm_reader;
		initblk(ref scoped_shm_reader, 0, 8L);
		<Module>.ipc.shm.reader((scoped_shm_reader*)(&scoped_shm_reader));
		HWND__* ptr;
		try
		{
			ptr = <Module>.ipc.scoped_shm_reader.read_window_handle(ref scoped_shm_reader);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(ipc.scoped_shm_reader.{dtor}), (void*)(&scoped_shm_reader));
			throw;
		}
		<Module>.ipc.scoped_shm_reader.{dtor}(ref scoped_shm_reader);
		if (ptr == null || ptr == -1L)
		{
			return (LauncherWindowRestoreResult)1;
		}
		pair<HWND__\u0020*,bool> pair<HWND___u0020*,bool> = ptr;
		*((ref pair<HWND___u0020*,bool>) + 8) = 0;
		<Module>.EnumWindows(<Module>.__unep@?FindLauncherWindow@@$$FYAHPEAUHWND__@@_J@Z, ref pair<HWND___u0020*,bool>);
		if (*((ref pair<HWND___u0020*,bool>) + 8) == 0)
		{
			return (LauncherWindowRestoreResult)2;
		}
		if (<Module>.IsWindowVisible(ptr) == null)
		{
			<Module>.ShowWindow(ptr, 1);
		}
		if (<Module>.IsIconic(ptr) == 1)
		{
			<Module>.ShowWindow(ptr, 9);
		}
		<Module>.SetForegroundWindow(ptr);
		return (LauncherWindowRestoreResult)0;
	}

	// Token: 0x06000088 RID: 136 RVA: 0x0000AC60 File Offset: 0x0000A060
	internal static void UnhandledExceptionHandler(object sender, UnhandledExceptionEventArgs e)
	{
		<Module>.ipc.destroy_all();
		Exception ex = (Exception)e.ExceptionObject;
		bool flag = <Module>.?use_log@LogMsg@@2_NA;
		Log.Write(ex.Message, flag);
	}

	// Token: 0x06000089 RID: 137 RVA: 0x0000AC90 File Offset: 0x0000A090
	internal static void FilterMessage(ref MSG msg, ref bool handled)
	{
		int message = msg.message;
		if (message == 16 || message == 18)
		{
			<Module>.ipc.destroy_all();
		}
	}

	// Token: 0x0600008A RID: 138 RVA: 0x000199E8 File Offset: 0x00018DE8
	[STAThread]
	internal unsafe static int wWinMain(HINSTANCE__* hInstance, HINSTANCE__* __unnamed001, char* __unnamed002, int __unnamed003)
	{
		string text = null;
		string text2 = null;
		uint num = 0U;
		long num2 = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		<Module>.?use_log@LogMsg@@2_NA = true;
		AppDomain currentDomain = AppDomain.CurrentDomain;
		text = currentDomain.FriendlyName;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.msclr.interop.marshal_as<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020System::String\u0020^>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ref text);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		try
		{
			try
			{
				char* ptr2 = ref <Module>.??_C@_19JFPGGDCL@?$AA?4?$AAl?$AAo?$AAg@;
				do
				{
					ptr2 += 2L;
				}
				while (*ptr2 != 0);
				ulong num3 = ptr2 - (ref <Module>.??_C@_19JFPGGDCL@?$AA?4?$AAl?$AAo?$AAg@) >> 1;
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr, ref <Module>.??_C@_19JFPGGDCL@?$AA?4?$AAl?$AAo?$AAg@, num3);
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr3);
				num = 2U;
			}
			catch
			{
				if ((num & 2U) != 0U)
				{
					num &= 4294967293U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
				}
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			<Module>.LogMsg.SetOutputFile(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
			num = 2U & 4294967293U;
		}
		catch
		{
			if ((num & 2U) != 0U)
			{
				num &= 4294967293U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			}
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		locker locker;
		<Module>.ipc.mutex.lc_lc_locker((locker*)(&locker));
		byte b = 0;
		try
		{
			if (<Module>.ipc.mutex.locker.is_locked(ref locker) != null)
			{
				goto IL_297;
			}
			LauncherWindowRestoreResult launcherWindowRestoreResult = (LauncherWindowRestoreResult)<Module>.RestoreLauncherWindow();
			if (launcherWindowRestoreResult != (LauncherWindowRestoreResult)0)
			{
				goto IL_15D;
			}
			sbyte* ptr4 = ref <Module>.??_C@_0DE@GJLFGEBG@Launcher?5exited?5because?5another@;
			do
			{
				ptr4 += 1L;
			}
			while (*ptr4 != 0);
			ulong num4 = ptr4 - (ref <Module>.??_C@_0DE@GJLFGEBG@Launcher?5exited?5because?5another@);
			<Module>.LogFunction(1, 1UL, (sbyte*)(&<Module>.??_C@_0DE@GJLFGEBG@Launcher?5exited?5because?5another@), num4);
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		<Module>.ipc.mutex.locker.{dtor}(ref locker);
		return 0;
		IL_15D:
		b = 0;
		try
		{
			LauncherWindowRestoreResult launcherWindowRestoreResult;
			if (launcherWindowRestoreResult != (LauncherWindowRestoreResult)1)
			{
				goto IL_1C6;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ref <Module>.??_C@_11LOCGONAA@@);
			try
			{
				<Module>.ErrorMsg(2, 132, 1L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
				throw;
			}
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		<Module>.ipc.mutex.locker.{dtor}(ref locker);
		return 1;
		IL_1C6:
		b = 0;
		try
		{
			LauncherWindowRestoreResult launcherWindowRestoreResult;
			if (launcherWindowRestoreResult != (LauncherWindowRestoreResult)3)
			{
				goto IL_22F;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ref <Module>.??_C@_11LOCGONAA@@);
			try
			{
				<Module>.ErrorMsg(2, 131, 3L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		<Module>.ipc.mutex.locker.{dtor}(ref locker);
		return 3;
		IL_22F:
		b = 0;
		int num5;
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, ref <Module>.??_C@_11LOCGONAA@@);
			LauncherWindowRestoreResult launcherWindowRestoreResult;
			try
			{
				<Module>.ErrorMsg(2, 130, (long)launcherWindowRestoreResult, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
				throw;
			}
			num5 = (int)launcherWindowRestoreResult;
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		<Module>.ipc.mutex.locker.{dtor}(ref locker);
		return num5;
		IL_297:
		b = 0;
		try
		{
			ComponentDispatcher.ThreadFilterMessage += <Module>.?A0x2bfc062d.FilterMessage;
			currentDomain.UnhandledException += <Module>.?A0x2bfc062d.UnhandledExceptionHandler;
			try
			{
				int num8;
				int num13;
				int num17;
				int num19;
				int num21;
				int num22;
				int num23;
				int num26;
				int num29;
				int num31;
				int num32;
				int num35;
				winapi_call_error* ptr26;
				int num39;
				exception* ptr30;
				int num41;
				int hresult;
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
					<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9;
					LauncherupdateInfo launcherupdateInfo;
					try
					{
						text2 = currentDomain.BaseDirectory;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = <Module>.msclr.interop.marshal_as<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020System::String\u0020^>(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7, ref text2);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ptr5);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
							throw;
						}
						<Module>.SetCurrentDirectoryW(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						<Module>.LOG_MSG<wchar_t\u0020const\u0020*,wchar_t\u0020const\u0020*>((char*)(&<Module>.??_C@_1EC@LEIBIDFF@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AAw?$AAo?$AAr?$AAk?$AAi?$AAn?$AAg@), <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8, 101, <Module>.GetModuleHandleW(null));
						try
						{
							char* ptr7 = (char*)ptr6;
							int num6;
							if (8L <= *(long*)(ptr6 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>)))
							{
								num6 = 1;
							}
							else
							{
								num6 = 0;
							}
							if ((byte)num6 != 0)
							{
								ptr7 = *(long*)ptr6;
							}
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9, ptr7);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
							throw;
						}
						try
						{
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
								throw;
							}
							initblk(ref launcherupdateInfo, 0, 824L);
							<Module>.LauncherupdateInfo.{ctor}(ref launcherupdateInfo);
							try
							{
								if (0 != <Module>.LauncherupdateInfo.Init(ref launcherupdateInfo, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9))
								{
									goto IL_4CB;
								}
								<Module>.LogFunction(1, 0UL, null, 0UL);
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10, (ref launcherupdateInfo) + 296);
									num |= 4U;
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = ptr8;
									long num7 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
									<Module>.ErrorMsg(2, 112, num7, ptr9);
									num &= 4294967291U;
								}
								catch
								{
									if ((num & 4U) != 0U)
									{
										num &= 4294967291U;
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10));
									}
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10));
									throw;
								}
								num8 = -1;
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_15AA;
					IL_4CB:
					try
					{
						try
						{
							try
							{
								ulong num9 = (ulong)(*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9) + 16));
								int num10;
								if (*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9) + 16) == 0L)
								{
									num10 = 1;
								}
								else
								{
									num10 = 0;
								}
								if ((byte)num10 == 1)
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11;
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11, ref <Module>.??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@);
									try
									{
										<Module>.LauncherupdateInfo.LoadLocalLauncherIni(ref launcherupdateInfo, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11));
										throw;
									}
									goto IL_BA5;
								}
								if (<Module>.LauncherupdateInfo.DownloadLauncherIni(ref launcherupdateInfo, null) != null)
								{
									goto IL_6E5;
								}
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr10 = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12, 102, <Module>.GetModuleHandleW(null));
								try
								{
									char* ptr11 = (char*)ptr10;
									int num11;
									if (8L <= *(long*)(ptr10 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>)))
									{
										num11 = 1;
									}
									else
									{
										num11 = 0;
									}
									if ((byte)num11 != 0)
									{
										ptr11 = *(long*)ptr10;
									}
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13;
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13, ptr11);
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=((ref launcherupdateInfo) + 32, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12));
									throw;
								}
								if (<Module>.LauncherupdateInfo.DownloadLauncherIni(ref launcherupdateInfo, null) != null)
								{
									goto IL_6E5;
								}
								<Module>.LogFunction(1, 0UL, null, 0UL);
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14, (ref launcherupdateInfo) + 296);
									num |= 16U;
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr13 = ptr12;
									long num12 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
									<Module>.ErrorMsg(2, 113, num12, ptr13);
									num &= 4294967279U;
								}
								catch
								{
									if ((num & 16U) != 0U)
									{
										num &= 4294967279U;
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14));
									}
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14));
									throw;
								}
								num13 = -1;
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_159E;
					IL_6E5:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								initblk(ref resourceBuffer, 0, 16L);
								<Module>.ResourceBuffer.{ctor}(ref resourceBuffer, hInstance, 103, (char*)(&<Module>.??_C@_1BG@LGFFKPND@?$AAK?$AAE?$AAY?$AA_?$AAB?$AAI?$AAN?$AAA?$AAR?$AAY@));
								try
								{
									int num14 = *((ref resourceBuffer) + 8);
									if (0 == *((ref resourceBuffer) + 8))
									{
										goto IL_1212;
									}
									if (0L == resourceBuffer)
									{
										goto IL_1212;
									}
									int num15 = *((ref resourceBuffer) + 8);
									IniParser* ptr14 = *((ref launcherupdateInfo) + 808);
									if (1 == <Module>.IniParser.CheckSignature(*((ref launcherupdateInfo) + 808), resourceBuffer, *((ref resourceBuffer) + 8), (char*)(&<Module>.??_C@_1BE@PEHMGMOH@?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe@), (char*)(&<Module>.??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe@)))
									{
										goto IL_891;
									}
									*((ref launcherupdateInfo) + 288) = 7;
									*((ref launcherupdateInfo) + 292) = 0;
									<Module>.LogFunction(1, 0UL, null, 0UL);
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15;
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr15 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15, (ref launcherupdateInfo) + 296);
										num |= 32U;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr16 = ptr15;
										long num16 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
										<Module>.ErrorMsg(2, 114, num16, ptr16);
										num &= 4294967263U;
									}
									catch
									{
										if ((num & 32U) != 0U)
										{
											num &= 4294967263U;
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15));
										}
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15));
										throw;
									}
									num17 = -1;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(ResourceBuffer.{dtor}), (void*)(&resourceBuffer));
									throw;
								}
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_1586;
					IL_891:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								try
								{
									bool flag = false;
									if (<Module>.LauncherupdateInfo.CheckUpdate(ref launcherupdateInfo, ref flag, true) != null)
									{
										goto IL_9AE;
									}
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16;
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr17 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16, (ref launcherupdateInfo) + 296);
										num |= 64U;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr18 = ptr17;
										long num18 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
										<Module>.ErrorMsg(2, 115, num18, ptr18);
										num &= 4294967231U;
									}
									catch
									{
										if ((num & 64U) != 0U)
										{
											num &= 4294967231U;
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16));
										}
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16));
										throw;
									}
									num19 = -1;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(ResourceBuffer.{dtor}), (void*)(&resourceBuffer));
									throw;
								}
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_1577;
					IL_9AE:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								try
								{
									bool flag;
									if (!flag)
									{
										goto IL_B6D;
									}
									<Module>.LogFunction(3, 0UL, null, 0UL);
									if (<Module>.LauncherupdateInfo.Update(ref launcherupdateInfo) != null)
									{
										goto IL_AE6;
									}
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17;
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr19 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17, (ref launcherupdateInfo) + 296);
										num |= 128U;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr20 = ptr19;
										long num20 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
										<Module>.ErrorMsg(4, 116, num20, ptr20);
										num &= 4294967167U;
									}
									catch
									{
										if ((num & 128U) != 0U)
										{
											num &= 4294967167U;
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17));
										}
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17));
										throw;
									}
									num21 = -1;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(ResourceBuffer.{dtor}), (void*)(&resourceBuffer));
									throw;
								}
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_1568;
					IL_AE6:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								try
								{
									num22 = 0;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(ResourceBuffer.{dtor}), (void*)(&resourceBuffer));
									throw;
								}
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_1559;
					IL_B6D:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_BA5;
					IL_1212:
					try
					{
						try
						{
							try
							{
								ResourceBuffer resourceBuffer;
								try
								{
									<Module>.LogFunction(1, 0UL, null, 0UL);
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18;
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18, ref <Module>.??_C@_11LOCGONAA@@);
									try
									{
										<Module>.ErrorMsg(2, 118, 0L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18));
										throw;
									}
									num23 = -1;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(ResourceBuffer.{dtor}), (void*)(&resourceBuffer));
									throw;
								}
								<Module>.ResourceBuffer.{dtor}(ref resourceBuffer);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_1592;
					IL_BA5:
					try
					{
						try
						{
							try
							{
								shared_ptr<IniParser> shared_ptr<IniParser>;
								initblk(ref shared_ptr<IniParser>, 0, 16L);
								<Module>.LauncherupdateInfo.GetLauncherIni(ref launcherupdateInfo, &shared_ptr<IniParser>);
								try
								{
									int num24;
									if (0L == shared_ptr<IniParser>)
									{
										num24 = 1;
									}
									else
									{
										num24 = 0;
									}
									if ((byte)num24 == 0)
									{
										goto IL_CFD;
									}
									<Module>.LogFunction(1, 0UL, null, 0UL);
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19;
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr21 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19, (ref launcherupdateInfo) + 296);
										num |= 512U;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr22 = ptr21;
										long num25 = ((long)(*((ref launcherupdateInfo) + 288)) << 32) | ((long)(*((ref launcherupdateInfo) + 292)) & 4294967295L);
										<Module>.ErrorMsg(2, 117, num25, ptr22);
										num &= 4294966783U;
									}
									catch
									{
										if ((num & 512U) != 0U)
										{
											num &= 4294966783U;
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19));
										}
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19));
										throw;
									}
									num26 = -1;
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
									throw;
								}
								if (*((ref shared_ptr<IniParser>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_154A;
					IL_CFD:
					try
					{
						try
						{
							try
							{
								shared_ptr<IniParser> shared_ptr<IniParser>;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20;
									<Module>.IniParser.GetValueStringW(shared_ptr<IniParser>, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20, (char*)(&<Module>.??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@), (char*)(&<Module>.??_C@_1CA@EDFECBEI@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA_?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
									try
									{
										ulong num27 = (ulong)(*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20) + 16));
										int num28;
										if (*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20) + 16) == 0L)
										{
											num28 = 1;
										}
										else
										{
											num28 = 0;
										}
										if ((byte)num28 == 0)
										{
											goto IL_E41;
										}
										<Module>.LogFunction(1, 0UL, null, 0UL);
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21;
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21, ref <Module>.??_C@_11LOCGONAA@@);
										try
										{
											<Module>.ErrorMsg(2, 119, 0L, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21));
											throw;
										}
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>21));
											throw;
										}
										num29 = -1;
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
									throw;
								}
								if (*((ref shared_ptr<IniParser>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_153B;
					IL_E41:
					try
					{
						try
						{
							try
							{
								shared_ptr<IniParser> shared_ptr<IniParser>;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20;
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>22;
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr23 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>22, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
										basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
										<Module>.GetModuleLogName(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>, ptr23);
										try
										{
											ulong num30 = (ulong)(*((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16));
											sbyte* ptr24 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.c_str(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
											<Module>.LogFunction(1, 0UL, ptr24, num30);
											<Module>.g_launcher_module = <Module>.LoadLibraryW(<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.c_str(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
											if (null != <Module>.g_launcher_module)
											{
												goto IL_F98;
											}
											uint lastError = <Module>.GetLastError();
											<Module>.ErrorMsg(2, 120, (long)lastError, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
											<Module>.LauncherupdateInfo.DeleteLauncherInfoFile(ref launcherupdateInfo);
											num31 = -1;
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
										try
										{
											<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
									throw;
								}
								if (*((ref shared_ptr<IniParser>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_152C;
					IL_F98:
					try
					{
						try
						{
							try
							{
								shared_ptr<IniParser> shared_ptr<IniParser>;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20;
									try
									{
										basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
										try
										{
											method procAddress = <Module>.GetProcAddress(<Module>.g_launcher_module, (sbyte*)(&<Module>.??_C@_05JIOJAJDK@lmRun@));
											if (0L != procAddress)
											{
												goto IL_10B2;
											}
											uint lastError2 = <Module>.GetLastError();
											<Module>.ErrorMsg(2, 121, (long)lastError2, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
											<Module>.LauncherupdateInfo.DeleteLauncherInfoFile(ref launcherupdateInfo);
											num32 = -1;
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
										try
										{
											<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
									throw;
								}
								if (*((ref shared_ptr<IniParser>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_151D;
					IL_10B2:
					try
					{
						try
						{
							try
							{
								shared_ptr<IniParser> shared_ptr<IniParser>;
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20;
									try
									{
										basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
										try
										{
											<Module>.FileDownloader.Cleanup();
											basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2;
											<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
											try
											{
												<Module>.IniParser.GetIniBuffer(shared_ptr<IniParser>, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
												method procAddress;
												method system.Int32_u0020modopt(System.Runtime.CompilerServices.CallConvCdecl)_u0020(HINSTANCE__*,System.SByte_u0020modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte)_u0020modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,System.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)) = procAddress;
												ulong num33 = (ulong)(*((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2) + 16));
												sbyte* ptr25 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.c_str(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
												int num34 = calli(System.Int32 modopt(System.Runtime.CompilerServices.CallConvCdecl)(HINSTANCE__*,System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)), <Module>.g_launcher_module, ptr25, num33, 0, system.Int32_u0020modopt(System.Runtime.CompilerServices.CallConvCdecl)_u0020(HINSTANCE__*,System.SByte_u0020modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte)_u0020modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,System.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)));
												if (num34 >= 0)
												{
													<Module>.LogFunction(2, (ulong)num34, null, 0UL);
												}
												num35 = num34;
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
												throw;
											}
											try
											{
												<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>2));
												throw;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
										try
										{
											<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
									throw;
								}
								if (*((ref shared_ptr<IniParser>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(LauncherupdateInfo.{dtor}), (void*)(&launcherupdateInfo));
								throw;
							}
							<Module>.LauncherupdateInfo.{dtor}(ref launcherupdateInfo);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
						throw;
					}
					goto IL_150E;
				}
				catch when (endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), (void*)(&<Module>.??_R0?AVwinapi_call_error@ipc@@@8), 9, (void*)(&ptr26)) != null))
				{
					uint num36 = 0U;
					<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num2);
					try
					{
						try
						{
							winapi_call_error* ptr27 = ptr26;
							basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3;
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3, calli(System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr27, *(*ptr27 + 8L)));
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>23;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr28 = <Module>.AnsiToUtf16(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>23, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3, 0U);
								try
								{
									char* ptr29 = (char*)ptr28;
									int num37;
									if (8L <= *(long*)(ptr28 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>)))
									{
										num37 = 1;
									}
									else
									{
										num37 = 0;
									}
									if ((byte)num37 != 0)
									{
										ptr29 = *(long*)ptr28;
									}
									<Module>.LOG_MSG<wchar_t\u0020const\u0020*>(ptr29);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>23));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>23);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>23));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3));
								throw;
							}
							try
							{
								<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>3));
								throw;
							}
							uint num38 = (uint)(*(ptr26 + 56L));
							num39 = (int)num38;
							goto IL_14FF;
						}
						catch when (delegate
						{
							// Failed to create a 'catch-when' expression
							num36 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
							endfilter(num36 != 0U);
						})
						{
						}
						if (num36 != 0U)
						{
							throw;
						}
					}
					finally
					{
						<Module>.__CxxUnregisterExceptionObject(num2, (int)num36);
					}
					goto IL_15C2;
				}
				catch when (endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), (void*)(&<Module>.??_R0?AVexception@std@@@8), 9, (void*)(&ptr30)) != null))
				{
					uint num36 = 0U;
					<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num2);
					try
					{
						try
						{
							exception* ptr31 = ptr30;
							basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4;
							<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4, calli(System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr31, *(*ptr31 + 8L)));
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>24;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr32 = <Module>.AnsiToUtf16(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>24, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4, 0U);
								try
								{
									char* ptr33 = (char*)ptr32;
									int num40;
									if (8L <= *(long*)(ptr32 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>)))
									{
										num40 = 1;
									}
									else
									{
										num40 = 0;
									}
									if ((byte)num40 != 0)
									{
										ptr33 = *(long*)ptr32;
									}
									<Module>.LOG_MSG<wchar_t\u0020const\u0020*>(ptr33);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>24));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>24);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>24));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4));
								throw;
							}
							try
							{
								<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>4));
								throw;
							}
							num41 = 1;
							goto IL_14F0;
						}
						catch when (delegate
						{
							// Failed to create a 'catch-when' expression
							num36 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
							endfilter(num36 != 0U);
						})
						{
						}
						if (num36 != 0U)
						{
							throw;
						}
					}
					finally
					{
						<Module>.__CxxUnregisterExceptionObject(num2, (int)num36);
					}
					goto IL_15C2;
				}
				catch (Exception ex)
				{
					bool flag2 = <Module>.?use_log@LogMsg@@2_NA;
					Log.Write(ex.Message, flag2);
					hresult = ex.HResult;
					goto IL_15B6;
				}
				IL_14F0:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num41;
				IL_14FF:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num39;
				IL_150E:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num35;
				IL_151D:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num32;
				IL_152C:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num31;
				IL_153B:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num29;
				IL_154A:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num26;
				IL_1559:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num22;
				IL_1568:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num21;
				IL_1577:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num19;
				IL_1586:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num17;
				IL_1592:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num23;
				IL_159E:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num13;
				IL_15AA:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return num8;
				IL_15B6:
				<Module>.ipc.mutex.locker.{dtor}(ref locker);
				return hresult;
				IL_15C2:;
			}
			finally
			{
				<Module>.ipc.destroy_all();
			}
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		<Module>.ipc.mutex.locker.{dtor}(ref locker);
		return 1;
		try
		{
		}
		catch
		{
			if (b == 0)
			{
				<Module>.___CxxCallUnwindDtor(ldftn(ipc.mutex.locker.{dtor}), (void*)(&locker));
			}
			throw;
		}
		int num42;
		return num42;
	}

	// Token: 0x0600008B RID: 139 RVA: 0x0000ACB4 File Offset: 0x0000A0B4
	internal unsafe static void {dtor}(char_buffer<char>* A_0)
	{
		<Module>.delete[](*A_0);
	}

	// Token: 0x0600008C RID: 140 RVA: 0x00014D98 File Offset: 0x00014198
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* find(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0 && <Module>.IniParser.ci_comp.()(A_0, _Keyval, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L) == null)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
		}
		else
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 = *A_0;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600008D RID: 141 RVA: 0x00014DE0 File Offset: 0x000141E0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* ptr;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == *A_0) ? 1 : 0) == 0 && <Module>.IniParser.ci_comp.()(A_0, _Keyval, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L) == null)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		}
		else
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = *A_0;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600008E RID: 142 RVA: 0x00016C34 File Offset: 0x00016034
	internal unsafe static void push_front(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Val)
	{
		_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0> list_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,std::_Iterator_base0> = *(*A_0);
		<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>._Insert<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(A_0, list_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,std::_Iterator_base0>, _Val);
	}

	// Token: 0x0600008F RID: 143 RVA: 0x0000E674 File Offset: 0x0000DA74
	internal unsafe static _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* begin(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x06000090 RID: 144 RVA: 0x0000F6A4 File Offset: 0x0000EAA4
	internal unsafe static shared_ptr<IniParser>* =(shared_ptr<IniParser>* A_0, shared_ptr<IniParser>* _Right)
	{
		ulong num = (ulong)(*(_Right + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		shared_ptr<IniParser> shared_ptr<IniParser> = *_Right;
		*((ref shared_ptr<IniParser>) + 8) = *(_Right + 8L);
		try
		{
			IniParser* ptr = shared_ptr<IniParser>;
			shared_ptr<IniParser> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<IniParser>) + 8);
			*((ref shared_ptr<IniParser>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
			throw;
		}
		if (*((ref shared_ptr<IniParser>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
		}
		return A_0;
	}

	// Token: 0x06000091 RID: 145 RVA: 0x0000D020 File Offset: 0x0000C420
	internal unsafe static void {dtor}(shared_ptr<IniParser>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x06000092 RID: 146 RVA: 0x00016D08 File Offset: 0x00016108
	internal unsafe static void clear(list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0)
	{
		long num = *A_0;
		_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr = *num;
		long num2 = num;
		*num2 = num2;
		long num3 = *A_0;
		*(num3 + 8L) = num3;
		*(A_0 + 8L) = 0L;
		if (ptr != *A_0)
		{
			_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr2;
			do
			{
				ptr2 = *(long*)ptr;
				<Module>.std._List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>._Freenode(A_0, ptr);
				ptr = ptr2;
			}
			while (ptr2 != *A_0);
		}
	}

	// Token: 0x06000093 RID: 147 RVA: 0x00016D44 File Offset: 0x00016144
	internal unsafe static void push_back(list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0, FileInfoList.FILE_INFO* _Val)
	{
		_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0> list_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>,std::_Iterator_base0> = *A_0;
		<Module>.std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>._Insert<struct\u0020FileInfoList::FILE_INFO\u0020const\u0020&>(A_0, list_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>_u0020>,std::_Iterator_base0>, _Val);
	}

	// Token: 0x06000094 RID: 148 RVA: 0x0001708C File Offset: 0x0001648C
	internal unsafe static void {dtor}(list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0)
	{
		try
		{
			<Module>.std.list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.clear(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>.{dtor}(A_0);
	}

	// Token: 0x06000095 RID: 149 RVA: 0x000124B4 File Offset: 0x000118B4
	internal unsafe static LastErrorType* GetLastErrorInfo(LastErrorInfo<LastErrorType>* A_0, LastErrorType* A_1)
	{
		uint num = 0U;
		LastErrorInfo<LastErrorType>.Lock @lock = A_0 + 48L;
		<Module>.EnterCriticalSection(@lock);
		try
		{
			try
			{
				LastErrorType* ptr = A_0 + 8L;
				try
				{
					*(long*)(A_1 + 16L / (long)sizeof(LastErrorType)) = 0L;
					*(long*)(A_1 + 24L / (long)sizeof(LastErrorType)) = 0L;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)A_1);
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_1, ptr);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
					throw;
				}
				try
				{
					*(int*)(A_1 + 32L / (long)sizeof(LastErrorType)) = *(ptr + 32L);
					*(int*)(A_1 + 36L / (long)sizeof(LastErrorType)) = *(ptr + 36L);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
					throw;
				}
				num = 1U;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(LastErrorInfo<LastErrorType>.Lock.{dtor}), (void*)(&@lock));
				throw;
			}
			<Module>.LeaveCriticalSection(@lock);
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x06000096 RID: 150 RVA: 0x000125E8 File Offset: 0x000119E8
	internal unsafe static void SetLastErrorInfo(LastErrorInfo<LastErrorType>* A_0, LastErrorType* error_info)
	{
		try
		{
			LastErrorInfo<LastErrorType>.Lock @lock = A_0 + 48L;
			<Module>.EnterCriticalSection(@lock);
			try
			{
				LastErrorType* ptr = A_0 + 8L;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ptr, error_info);
				*(ptr + 32L) = *(int*)(error_info + 32L / (long)sizeof(LastErrorType));
				*(ptr + 36L) = *(int*)(error_info + 36L / (long)sizeof(LastErrorType));
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(LastErrorInfo<LastErrorType>.Lock.{dtor}), (void*)(&@lock));
				throw;
			}
			<Module>.LeaveCriticalSection(@lock);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)error_info);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(error_info);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)error_info);
			throw;
		}
	}

	// Token: 0x06000097 RID: 151 RVA: 0x000126B4 File Offset: 0x00011AB4
	internal unsafe static void {dtor}(LastErrorInfo<LastErrorType>* A_0)
	{
		*A_0 = ref <Module>.??_7?$LastErrorInfo@ULastErrorType@@@@6B@;
		try
		{
			<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 48L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)(A_0 + (byte*)8L));
			throw;
		}
		LastErrorType* ptr = A_0 + 8L;
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
			throw;
		}
	}

	// Token: 0x06000098 RID: 152 RVA: 0x00014E28 File Offset: 0x00014228
	internal unsafe static LastErrorInfo<LastErrorType>* {ctor}(LastErrorInfo<LastErrorType>* A_0)
	{
		*A_0 = ref <Module>.??_7?$LastErrorInfo@ULastErrorType@@@@6B@;
		LastErrorInfo<LastErrorType>* ptr = A_0 + 8L;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ptr, ref <Module>.??_C@_11LOCGONAA@@);
		try
		{
			*(ptr + 32L) = 0;
			*(ptr + 36L) = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), ptr);
			throw;
		}
		try
		{
			<Module>.InitializeCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 48L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)(A_0 + (byte*)8L));
			throw;
		}
		return A_0;
	}

	// Token: 0x06000099 RID: 153 RVA: 0x0000F734 File Offset: 0x0000EB34
	internal unsafe static shared_ptr<MemoryFile>* =(shared_ptr<MemoryFile>* A_0, shared_ptr<MemoryFile>* _Right)
	{
		shared_ptr<MemoryFile> shared_ptr<MemoryFile> = *_Right;
		*((ref shared_ptr<MemoryFile>) + 8) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
		try
		{
			MemoryFile* ptr = shared_ptr<MemoryFile>;
			shared_ptr<MemoryFile> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<MemoryFile>) + 8);
			*((ref shared_ptr<MemoryFile>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(&shared_ptr<MemoryFile>));
			throw;
		}
		if (*((ref shared_ptr<MemoryFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<MemoryFile>) + 8));
		}
		return A_0;
	}

	// Token: 0x0600009A RID: 154 RVA: 0x0000F7BC File Offset: 0x0000EBBC
	internal unsafe static shared_ptr<MemoryFile>* =(shared_ptr<MemoryFile>* A_0, shared_ptr<MemoryFile>* _Right)
	{
		ulong num = (ulong)(*(_Right + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		shared_ptr<MemoryFile> shared_ptr<MemoryFile> = *_Right;
		*((ref shared_ptr<MemoryFile>) + 8) = *(_Right + 8L);
		try
		{
			MemoryFile* ptr = shared_ptr<MemoryFile>;
			shared_ptr<MemoryFile> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<MemoryFile>) + 8);
			*((ref shared_ptr<MemoryFile>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)(&shared_ptr<MemoryFile>));
			throw;
		}
		if (*((ref shared_ptr<MemoryFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<MemoryFile>) + 8));
		}
		return A_0;
	}

	// Token: 0x0600009B RID: 155 RVA: 0x0000D020 File Offset: 0x0000C420
	internal unsafe static void {dtor}(shared_ptr<MemoryFile>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x0600009C RID: 156 RVA: 0x0000F84C File Offset: 0x0000EC4C
	internal unsafe static shared_ptr<LocalFile>* =(shared_ptr<LocalFile>* A_0, shared_ptr<LocalFile>* _Right)
	{
		shared_ptr<LocalFile> shared_ptr<LocalFile> = *_Right;
		*((ref shared_ptr<LocalFile>) + 8) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
		try
		{
			LocalFile* ptr = shared_ptr<LocalFile>;
			shared_ptr<LocalFile> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<LocalFile>) + 8);
			*((ref shared_ptr<LocalFile>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
			throw;
		}
		if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
		}
		return A_0;
	}

	// Token: 0x0600009D RID: 157 RVA: 0x0000F8D4 File Offset: 0x0000ECD4
	internal unsafe static shared_ptr<LocalFile>* =(shared_ptr<LocalFile>* A_0, shared_ptr<LocalFile>* _Right)
	{
		ulong num = (ulong)(*(_Right + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		shared_ptr<LocalFile> shared_ptr<LocalFile> = *_Right;
		*((ref shared_ptr<LocalFile>) + 8) = *(_Right + 8L);
		try
		{
			LocalFile* ptr = shared_ptr<LocalFile>;
			shared_ptr<LocalFile> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<LocalFile>) + 8);
			*((ref shared_ptr<LocalFile>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)(&shared_ptr<LocalFile>));
			throw;
		}
		if (*((ref shared_ptr<LocalFile>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<LocalFile>) + 8));
		}
		return A_0;
	}

	// Token: 0x0600009E RID: 158 RVA: 0x0000D020 File Offset: 0x0000C420
	internal unsafe static void {dtor}(shared_ptr<LocalFile>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x0600009F RID: 159 RVA: 0x0000F964 File Offset: 0x0000ED64
	internal unsafe static void push_back(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0, DownloadSpeed.DOWNLOAD_INFO* _Val)
	{
		ulong num = (ulong)(*(A_0 + 32L));
		if (((num + (ulong)(*(A_0 + 24L))) & 1UL) == 0UL && *(A_0 + 16L) <= (long)(num + 2UL >> 1))
		{
			<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>._Growmap(A_0, 1UL);
		}
		*(A_0 + 24L) = *(A_0 + 24L) & (*(A_0 + 16L) * 2L - 1L);
		ulong num2 = (ulong)(*(A_0 + 24L) + *(A_0 + 32L));
		long num3 = ((*(A_0 + 16L) - 1L) & (long)(num2 >> 1)) * 8L;
		if (*(num3 + *(A_0 + 8L)) == 0L)
		{
			DownloadSpeed.DOWNLOAD_INFO* ptr = <Module>.std.allocator<DownloadSpeed::DOWNLOAD_INFO>.allocate(A_0, 2L);
			*(num3 + *(A_0 + 8L)) = ptr;
		}
		cpblk(*(num3 + *(A_0 + 8L)) + (long)((num2 & 1UL) * 8UL), _Val, 8);
		*(A_0 + 32L) = *(A_0 + 32L) + 1L;
	}

	// Token: 0x060000A0 RID: 160 RVA: 0x0000E688 File Offset: 0x0000DA88
	internal unsafe static void pop_front(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		*(A_0 + 32L) = *(A_0 + 32L) + -1L;
		if (*(A_0 + 32L) == 0L)
		{
			*(A_0 + 24L) = 0L;
		}
		else
		{
			*(A_0 + 24L) = *(A_0 + 24L) + 1L;
		}
	}

	// Token: 0x060000A1 RID: 161 RVA: 0x0000FA18 File Offset: 0x0000EE18
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO* front(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		uint num = 0U;
		DownloadSpeed.DOWNLOAD_INFO* ptr;
		try
		{
			ulong num2 = (ulong)(*(A_0 + 24L));
			_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020> deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020> = 0L;
			*((ref deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>) + 8) = 0L;
			try
			{
				*((ref deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>) + 16) = (long)num2;
				deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020> = *A_0;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._Iterator_base12.{dtor}), (void*)(&deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>));
				throw;
			}
			num = 1U;
			ptr = <Module>.std._Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>.*(ref deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>);
			num = 1U & 4294967294U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020> deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>;
				<Module>.___CxxCallUnwindDtor(ldftn(std._Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>.{dtor}), (void*)(&deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>_u0020>_u0020>));
			}
			throw;
		}
		return ptr;
	}

	// Token: 0x060000A2 RID: 162 RVA: 0x0000FAB4 File Offset: 0x0000EEB4
	internal unsafe static void {dtor}(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		try
		{
			<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>._Free_proxy(A_0);
	}

	// Token: 0x060000A3 RID: 163 RVA: 0x0000D03C File Offset: 0x0000C43C
	internal unsafe static int compare(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Off, ulong _N0, char* _Ptr)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		if (num < _Off)
		{
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>._Xran();
		}
		char* ptr = _Ptr;
		if (*_Ptr != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		ulong num2 = ptr - _Ptr >> 1;
		ulong num3 = _N0;
		ulong num4 = num - _Off;
		ulong num5 = (ulong)(*(ref num4 < _N0 ? ref num4 : ref num3));
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		return <Module>.std._Traits_compare<struct\u0020std::char_traits<wchar_t>\u0020>(_Off * 2L / sizeof(char) + ptr2, num5, _Ptr, num2);
	}

	// Token: 0x060000A4 RID: 164 RVA: 0x00012734 File Offset: 0x00011B34
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* substr(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1, ulong _Off, ulong _Count)
	{
		uint num = 0U;
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
			try
			{
				ptr = A_1 + 16L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr = 0L;
				ptr2 = A_1 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr2 = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)A_1);
				throw;
			}
			try
			{
				*(long*)ptr = 0L;
				*(long*)ptr2 = 7L;
				*(short*)A_1 = 0;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_1, A_0, _Off, _Count);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
				throw;
			}
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x060000A5 RID: 165 RVA: 0x0000D0B0 File Offset: 0x0000C4B0
	internal unsafe static ulong find_last_of(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, [MarshalAs(UnmanagedType.U2)] char _Ch, ulong _Off)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return <Module>.std._Traits_rfind_ch<struct\u0020std::char_traits<wchar_t>\u0020>(ptr, num, _Off, _Ch);
	}

	// Token: 0x060000A6 RID: 166 RVA: 0x0000D0E4 File Offset: 0x0000C4E4
	internal unsafe static ulong find(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, ulong _Off)
	{
		ulong num = (ulong)(*(_Right + 16L));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		ulong num2 = (ulong)(*(A_0 + 16L));
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		return <Module>.std._Traits_find<struct\u0020std::char_traits<wchar_t>\u0020>(ptr2, num2, _Off, ptr, num);
	}

	// Token: 0x060000A7 RID: 167 RVA: 0x0000E6CC File Offset: 0x0000DACC
	internal unsafe static void reserve(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Newcap)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		if (num <= _Newcap)
		{
			ulong num2 = (ulong)(*(A_0 + 24L));
			if (num2 != _Newcap)
			{
				if (num2 < _Newcap)
				{
					ulong num3 = num;
					<lambda_2b6d0663084f1b41c20caedb04b12c52> <lambda_2b6d0663084f1b41c20caedb04b12c52>;
					initblk(ref <lambda_2b6d0663084f1b41c20caedb04b12c52>, 0, 1L);
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_2b6d0663084f1b41c20caedb04b12c52>\u0020>(A_0, _Newcap - num3, <lambda_2b6d0663084f1b41c20caedb04b12c52>);
					*(A_0 + 16L) = num3;
				}
				else if (8L > _Newcap && ((8UL <= num2) ? 1 : 0) != 0)
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Become_small(A_0);
				}
			}
		}
	}

	// Token: 0x060000A8 RID: 168 RVA: 0x0000D138 File Offset: 0x0000C538
	internal unsafe static char* data(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060000A9 RID: 169 RVA: 0x0000D15C File Offset: 0x0000C55C
	internal unsafe static char* c_str(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060000AA RID: 170 RVA: 0x0000FAF8 File Offset: 0x0000EEF8
	internal unsafe static char* back(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(A_0, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>);
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
		cpblk(ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2, ptr, 8);
		string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2 -= 2L;
		return string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
	}

	// Token: 0x060000AB RID: 171 RVA: 0x0000D180 File Offset: 0x0000C580
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* end(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(long*)A_1 = *(A_0 + 16L) * 2L / 2L + ptr;
		return A_1;
	}

	// Token: 0x060000AC RID: 172 RVA: 0x0000E730 File Offset: 0x0000DB30
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Count, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			ulong num3 = num + _Count;
			*(A_0 + 16L) = num3;
			char* ptr = A_0;
			if (((8UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			ulong num4 = _Count;
			char* ptr2 = num * 2L / 2 + ptr;
			if (0L < _Count)
			{
				do
				{
					*ptr2 = _Ch;
					ptr2 += 2L / 2L;
					num4 -= 1UL;
				}
				while (num4 > 0UL);
			}
			(num3 * 2L / 2)[ptr] = '\0';
			return A_0;
		}
		<lambda_76dcdb8c0bec046e8a043f4783eee8ee> <lambda_76dcdb8c0bec046e8a043f4783eee8ee>;
		initblk(ref <lambda_76dcdb8c0bec046e8a043f4783eee8ee>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_76dcdb8c0bec046e8a043f4783eee8ee>,unsigned\u0020__int64,wchar_t>(A_0, _Count, <lambda_76dcdb8c0bec046e8a043f4783eee8ee>, _Count, _Ch);
	}

	// Token: 0x060000AD RID: 173 RVA: 0x0000FB20 File Offset: 0x0000EF20
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* =(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		if (A_0 != _Right)
		{
			ulong num = (ulong)(*(_Right + 16L));
			char* ptr = _Right;
			if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
			{
				ptr = *_Right;
			}
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, ptr, num);
		}
		return A_0;
	}

	// Token: 0x060000AE RID: 174 RVA: 0x0000FB58 File Offset: 0x0000EF58
	internal unsafe static void {dtor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x060000AF RID: 175 RVA: 0x0000E7B8 File Offset: 0x0000DBB8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* =(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		if (A_0 != _Right)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
			integral_constant<bool,1> integral_constant<bool,1>;
			initblk(ref integral_constant<bool,1>, 0, 1L);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Assign_rv_contents(A_0, _Right, integral_constant<bool,1>);
		}
		return A_0;
	}

	// Token: 0x060000B0 RID: 176 RVA: 0x0000FB98 File Offset: 0x0000EF98
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			cpblk(A_0, _Right, 32);
			*(_Right + 16L) = 0L;
			*(_Right + 24L) = 7L;
			*_Right = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000B1 RID: 177 RVA: 0x000127F8 File Offset: 0x00011BF8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
			char* ptr3 = _Ptr;
			if (*_Ptr != 0)
			{
				do
				{
					ptr3 += 2L;
				}
				while (*ptr3 != 0);
			}
			long num = ptr3 - _Ptr >> 1;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Ptr, num);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000B2 RID: 178 RVA: 0x0000FC28 File Offset: 0x0000F028
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000B3 RID: 179 RVA: 0x0000FCA8 File Offset: 0x0000F0A8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_0, _Right);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000B4 RID: 180 RVA: 0x0000D1B4 File Offset: 0x0000C5B4
	internal unsafe static int compare(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr)
	{
		sbyte* ptr = _Ptr;
		if (*_Ptr != 0)
		{
			do
			{
				ptr += 1L;
			}
			while (*ptr != 0);
		}
		long num = ptr - _Ptr;
		ulong num2 = (ulong)(*(A_0 + 16L));
		sbyte* ptr2 = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		return <Module>.std._Traits_compare<struct\u0020std::char_traits<char>\u0020>(ptr2, num2, _Ptr, num);
	}

	// Token: 0x060000B5 RID: 181 RVA: 0x0001289C File Offset: 0x00011C9C
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* substr(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_1, ulong _Off, ulong _Count)
	{
		uint num = 0U;
		try
		{
			basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr;
			basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr2;
			try
			{
				ptr = A_1 + 16L / (long)sizeof(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>);
				*(long*)ptr = 0L;
				ptr2 = A_1 + 24L / (long)sizeof(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>);
				*(long*)ptr2 = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), (void*)A_1);
				throw;
			}
			try
			{
				*(long*)ptr = 0L;
				*(long*)ptr2 = 15L;
				*(byte*)A_1 = 0;
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(A_1, A_0, _Off, _Count);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)A_1);
				throw;
			}
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x060000B6 RID: 182 RVA: 0x0000D1FC File Offset: 0x0000C5FC
	internal unsafe static ulong find(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr, ulong _Off)
	{
		sbyte* ptr = _Ptr;
		if (*_Ptr != 0)
		{
			do
			{
				ptr += 1L;
			}
			while (*ptr != 0);
		}
		long num = ptr - _Ptr;
		ulong num2 = (ulong)(*(A_0 + 16L));
		sbyte* ptr2 = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		return <Module>.std._Traits_find<struct\u0020std::char_traits<char>\u0020>(ptr2, num2, _Off, _Ptr, num);
	}

	// Token: 0x060000B7 RID: 183 RVA: 0x0000E7E8 File Offset: 0x0000DBE8
	internal unsafe static void reserve(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Newcap)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		if (num <= _Newcap)
		{
			ulong num2 = (ulong)(*(A_0 + 24L));
			if (num2 != _Newcap)
			{
				if (num2 < _Newcap)
				{
					ulong num3 = num;
					<lambda_25f5346b87de700b649286b586e55410> <lambda_25f5346b87de700b649286b586e55410>;
					initblk(ref <lambda_25f5346b87de700b649286b586e55410>, 0, 1L);
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_grow_by<class\u0020<lambda_25f5346b87de700b649286b586e55410>\u0020>(A_0, _Newcap - num3, <lambda_25f5346b87de700b649286b586e55410>);
					*(A_0 + 16L) = num3;
				}
				else if (16L > _Newcap && ((16UL <= num2) ? 1 : 0) != 0)
				{
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Become_small(A_0);
				}
			}
		}
	}

	// Token: 0x060000B8 RID: 184 RVA: 0x0000D244 File Offset: 0x0000C644
	internal unsafe static sbyte* c_str(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		sbyte* ptr = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060000B9 RID: 185 RVA: 0x0000E850 File Offset: 0x0000DC50
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* append(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Count, sbyte _Ch)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			*(A_0 + 16L) = num + _Count;
			sbyte* ptr = A_0;
			if (((16UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			long num3 = ptr + num / sizeof(sbyte);
			initblk(num3, _Ch, _Count);
			*(num3 + _Count) = 0;
			return A_0;
		}
		<lambda_59d344839e59d86dc9255728ed6d9dcb> <lambda_59d344839e59d86dc9255728ed6d9dcb>;
		initblk(ref <lambda_59d344839e59d86dc9255728ed6d9dcb>, 0, 1L);
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_grow_by<class\u0020<lambda_59d344839e59d86dc9255728ed6d9dcb>,unsigned\u0020__int64,char>(A_0, _Count, <lambda_59d344839e59d86dc9255728ed6d9dcb>, _Count, _Ch);
	}

	// Token: 0x060000BA RID: 186 RVA: 0x0000E8BC File Offset: 0x0000DCBC
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* append(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr, ulong _Count)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			*(A_0 + 16L) = num + _Count;
			sbyte* ptr = A_0;
			if (((16UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			long num3 = ptr + num / sizeof(sbyte);
			<Module>.memmove(num3, _Ptr, _Count);
			*(num3 + _Count) = 0;
			return A_0;
		}
		<lambda_f1129f3d98befd92b6d0e63ffb90e238> <lambda_f1129f3d98befd92b6d0e63ffb90e238>;
		initblk(ref <lambda_f1129f3d98befd92b6d0e63ffb90e238>, 0, 1L);
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_grow_by<class\u0020<lambda_f1129f3d98befd92b6d0e63ffb90e238>,char\u0020const\u0020*,unsigned\u0020__int64>(A_0, _Count, <lambda_f1129f3d98befd92b6d0e63ffb90e238>, _Ptr, _Count);
	}

	// Token: 0x060000BB RID: 187 RVA: 0x0000FD20 File Offset: 0x0000F120
	internal unsafe static void {dtor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x060000BC RID: 188 RVA: 0x0000E928 File Offset: 0x0000DD28
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* =(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right)
	{
		if (A_0 != _Right)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(A_0);
			integral_constant<bool,1> integral_constant<bool,1>;
			initblk(ref integral_constant<bool,1>, 0, 1L);
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Assign_rv_contents(A_0, _Right, integral_constant<bool,1>);
		}
		return A_0;
	}

	// Token: 0x060000BD RID: 189 RVA: 0x0000FD60 File Offset: 0x0000F160
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* {ctor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			cpblk(A_0, _Right, 32);
			*(_Right + 16L) = 0L;
			*(_Right + 24L) = 15L;
			*_Right = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000BE RID: 190 RVA: 0x00012960 File Offset: 0x00011D60
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* {ctor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr)
	{
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr;
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 15L;
			*A_0 = 0;
			sbyte* ptr3 = _Ptr;
			if (*_Ptr != 0)
			{
				do
				{
					ptr3 += 1L;
				}
				while (*ptr3 != 0);
			}
			long num = ptr3 - _Ptr;
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(A_0, _Ptr, num);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000BF RID: 191 RVA: 0x0000FDF0 File Offset: 0x0000F1F0
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* {ctor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr;
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 15L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000C0 RID: 192 RVA: 0x0000FE74 File Offset: 0x0000F274
	internal unsafe static void {dtor}(basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 - 152L;
		*(A_0 + (long)(*(*ptr + 4L)) - 152L) = ref <Module>.??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
		long num = (long)(*(*ptr + 4L));
		*(A_0 + num - 156L) = (int)(num - 152L);
		try
		{
			basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 - 128L;
			*ptr2 = ref <Module>.??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
			try
			{
				<Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy(ptr2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), ptr2);
				throw;
			}
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), (void*)(A_0 - 152L + (byte*)32L));
			throw;
		}
		<Module>.std.basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(A_0 - 120L);
	}

	// Token: 0x060000C1 RID: 193 RVA: 0x0000FF40 File Offset: 0x0000F340
	internal unsafe static basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, int _Mode, int A_2)
	{
		uint num = 0U;
		if (A_2 != 0)
		{
			*A_0 = ref <Module>.??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@;
			*(A_0 + 16L) = ref <Module>.??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@;
			<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{ctor}(A_0 + 152L);
			try
			{
				num = 1U;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)152L));
				}
				throw;
			}
		}
		try
		{
			basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 24L;
			<Module>.std.basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>.{ctor}(A_0, ptr, 0);
			try
			{
				*((long)(*(*A_0 + 4L)) + A_0) = ref <Module>.??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
				long num2 = (long)(*(*A_0 + 4L));
				*(A_0 + num2 - 4L) = (int)(num2 - 152L);
				basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = ptr;
				<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{ctor}(ptr2);
				try
				{
					*ptr2 = ref <Module>.??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
					*(ptr2 + 104L) = 0L;
					*(ptr2 + 112L) = <Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Getstate(_Mode);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), ptr2);
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)152L));
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x060000C2 RID: 194 RVA: 0x0001CE68 File Offset: 0x0001C268
	internal unsafe static fpos<_Mbstatet>* seekpos(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, fpos<_Mbstatet>* A_1, fpos<_Mbstatet> _Pos, int _Mode)
	{
		long num = *((ref _Pos) + 8) + _Pos;
		char* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
		char* ptr2 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0);
		if (ptr2 != null && *(A_0 + 104L) < ptr2)
		{
			*(A_0 + 104L) = ptr2;
		}
		char* ptr3 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
		ulong num2 = (ulong)(*(A_0 + 104L));
		if (num > num2 - ptr3 >> 1)
		{
			*(long*)A_1 = -1L;
			*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
			initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
			return A_1;
		}
		if (num != null && (((_Mode & 1) != 0 && ptr == null) || ((_Mode & 2) != 0 && ptr2 == null)))
		{
			*(long*)A_1 = -1L;
			*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
			initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
			return A_1;
		}
		char* ptr4 = num * 2L + ptr3;
		if ((_Mode & 1) != 0 && ptr != null)
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, ptr3, ptr4, num2);
		}
		if ((_Mode & 2) != 0 && ptr2 != null)
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setp(A_0, ptr3, ptr4, <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.epptr(A_0));
		}
		*(long*)A_1 = num;
		*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
		initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
		return A_1;
	}

	// Token: 0x060000C3 RID: 195 RVA: 0x0001CD0C File Offset: 0x0001C10C
	internal unsafe static fpos<_Mbstatet>* seekoff(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, fpos<_Mbstatet>* A_1, long _Off, int _Way, int _Mode)
	{
		char* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
		char* ptr2 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0);
		if (ptr2 != null && *(A_0 + 104L) < ptr2)
		{
			*(A_0 + 104L) = ptr2;
		}
		char* ptr3 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
		ulong num = (ulong)(*(A_0 + 104L));
		long num2 = num - ptr3 >> 1;
		long num3;
		if (_Way != 0)
		{
			if (_Way != 1)
			{
				if (_Way == 2)
				{
					num3 = num2;
					goto IL_9B;
				}
			}
			else if ((_Mode & 3) != 3)
			{
				if ((_Mode & 1) != 0)
				{
					if (ptr != null || ptr3 == null)
					{
						num3 = ptr - ptr3 >> 1;
						goto IL_9B;
					}
				}
				else if ((_Mode & 2) != 0 && (ptr2 != null || ptr3 == null))
				{
					num3 = ptr2 - ptr3 >> 1;
					goto IL_9B;
				}
			}
			*(long*)A_1 = -1L;
			*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
			initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
			return A_1;
		}
		num3 = 0L;
		IL_9B:
		long num4 = num3 + _Off;
		if (num4 > num2)
		{
			*(long*)A_1 = -1L;
			*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
			initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
			return A_1;
		}
		_Off = num4;
		if (_Off != 0L && (((_Mode & 1) != 0 && ptr == null) || ((_Mode & 2) != 0 && ptr2 == null)))
		{
			*(long*)A_1 = -1L;
			*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
			initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
			return A_1;
		}
		char* ptr4 = _Off * 2L + ptr3;
		if ((_Mode & 1) != 0 && ptr != null)
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, ptr3, ptr4, num);
		}
		if ((_Mode & 2) != 0 && ptr2 != null)
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setp(A_0, ptr3, ptr4, <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.epptr(A_0));
		}
		*(long*)A_1 = _Off;
		*(long*)(A_1 + 8L / (long)sizeof(fpos<_Mbstatet>)) = 0L;
		initblk(A_1 + 16L / (long)sizeof(fpos<_Mbstatet>), 0, 8L);
		return A_1;
	}

	// Token: 0x060000C4 RID: 196 RVA: 0x0001CC80 File Offset: 0x0001C080
	internal unsafe static ushort underflow(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
		if (ptr == null)
		{
			return 65535;
		}
		if (ptr < <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.egptr(A_0))
		{
			return *ptr;
		}
		char* ptr2 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0);
		if (ptr2 == null || (*(A_0 + 112L) & 4) != 0)
		{
			return 65535;
		}
		basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 104L;
		char** ptr4 = ptr3;
		char* ptr5 = *(ref *ptr4 < ptr2 ? ref ptr2 : ptr4);
		if (ptr5 == ptr)
		{
			return 65535;
		}
		*ptr3 = ptr5;
		char* ptr6 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
		char* ptr7 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, ptr7, ptr6, ptr5);
		return *<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
	}

	// Token: 0x060000C5 RID: 197 RVA: 0x0001CC10 File Offset: 0x0001C010
	internal unsafe static ushort pbackfail(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ushort _Meta)
	{
		char* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0);
		if (ptr != null && ptr != <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0) && (((65535 == _Meta) ? 1 : 0) != 0 || ((_Meta == *(ptr - 2L)) ? 1 : 0) != 0 || (*(A_0 + 112L) & 2) == 0))
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gbump(A_0, -1);
			if (((65535 == _Meta) ? 1 : 0) == 0)
			{
				*<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0) = (short)_Meta;
			}
			return (_Meta != ushort.MaxValue) ? _Meta : 0;
		}
		return 65535;
	}

	// Token: 0x060000C6 RID: 198 RVA: 0x0001CAA4 File Offset: 0x0001BEA4
	internal unsafe static ushort overflow(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ushort _Meta)
	{
		if ((*(A_0 + 112L) & 2) != 0)
		{
			return 65535;
		}
		if (((65535 == _Meta) ? 1 : 0) != 0)
		{
			return (_Meta != ushort.MaxValue) ? _Meta : 0;
		}
		char* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0);
		char* ptr2 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.epptr(A_0);
		if (ptr != null && ptr < ptr2)
		{
			*<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>._Pninc(A_0) = (short)_Meta;
			*(A_0 + 104L) = ptr + 2L;
			return _Meta;
		}
		ulong num = 0UL;
		char* ptr3 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
		ulong num2;
		if (ptr != null)
		{
			num = ptr2 - ptr3 >> 1;
			if (num >= 32UL)
			{
				if (num < 1073741823UL)
				{
					num2 = num << (int)1L;
					goto IL_9F;
				}
				if (num < 2147483647UL)
				{
					num2 = 2147483647UL;
					goto IL_9F;
				}
				return 65535;
			}
		}
		num2 = 32UL;
		IL_9F:
		char* ptr4 = <Module>.std.allocator<wchar_t>.allocate(A_0 + 116L, num2);
		ulong num3 = num * 2UL;
		cpblk(ptr4, ptr3, num3);
		char* ptr5 = num3 + ptr4;
		*(A_0 + 104L) = ptr5 + 2L;
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setp(A_0, ptr4, ptr5, num2 * 2UL + ptr4 / 2);
		if ((*(A_0 + 112L) & 4) != 0)
		{
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, ptr4, null, ptr4);
		}
		else
		{
			long num4 = *(A_0 + 104L);
			char* ptr6 = (<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0) - ptr3 >> 1) * 2L + ptr4;
			<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, ptr4, ptr6, num4);
		}
		if ((*(A_0 + 112L) & 1) != 0)
		{
			ulong num5 = num3;
			void* ptr7 = ptr3;
			if (num5 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr7, ref num5);
			}
			<Module>.delete(ptr7, num5);
		}
		*(A_0 + 112L) = *(A_0 + 112L) | 1;
		*<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>._Pninc(A_0) = (short)_Meta;
		return _Meta;
	}

	// Token: 0x060000C7 RID: 199 RVA: 0x0000E958 File Offset: 0x0000DD58
	internal unsafe static void {dtor}(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		*A_0 = ref <Module>.??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
		try
		{
			<Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(A_0);
	}

	// Token: 0x060000C8 RID: 200 RVA: 0x00010098 File Offset: 0x0000F498
	internal unsafe static void {dtor}(_List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0)
	{
		<Module>.std._List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>.{dtor}(A_0);
	}

	// Token: 0x060000C9 RID: 201 RVA: 0x0001D63C File Offset: 0x0001CA3C
	internal unsafe static void* __vecDelDtor(LastErrorInfo<LastErrorType>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			LastErrorInfo<LastErrorType>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 88UL, (ulong)(*ptr), ldftn(LastErrorInfo<LastErrorType>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				LastErrorInfo<LastErrorType>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 88L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7?$LastErrorInfo@ULastErrorType@@@@6B@;
		try
		{
			<Module>.DeleteCriticalSection(A_0 / sizeof(_RTL_CRITICAL_SECTION) + 48L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(LastErrorType.{dtor}), (void*)(A_0 + (byte*)8L));
			throw;
		}
		LastErrorType* ptr3 = A_0 + 8L;
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr3);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
			throw;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 88UL);
		}
		return A_0;
	}

	// Token: 0x060000CA RID: 202 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x060000CB RID: 203 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x060000CC RID: 204 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x060000CD RID: 205 RVA: 0x0001D4AC File Offset: 0x0001C8AC
	internal unsafe static void* __vecDelDtor(basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 - 160L;
			<Module>.__ehvec_dtor(A_0 - 152L, 248UL, (ulong)(*ptr), ldftn(std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.__vbaseDtor));
			if ((A_0 & 1U) != 0U)
			{
				basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 248L + 8L));
			}
			return ptr;
		}
		basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 - 152L;
		basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = ptr3 + 152L;
		<Module>.std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}(ptr4);
		<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(ptr4);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(ptr3, 248UL);
		}
		return ptr3;
	}

	// Token: 0x060000CE RID: 206 RVA: 0x0001CA18 File Offset: 0x0001BE18
	internal unsafe static void* __vecDelDtor(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 120UL, (ulong)(*ptr), ldftn(std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 120L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;
		try
		{
			<Module>.std.basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 120UL);
		}
		return A_0;
	}

	// Token: 0x060000CF RID: 207 RVA: 0x0000E9A4 File Offset: 0x0000DDA4
	internal unsafe static void {dtor}(_List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>* A_0)
	{
		<Module>.delete(*A_0, 120UL);
	}

	// Token: 0x060000D0 RID: 208 RVA: 0x00016C50 File Offset: 0x00016050
	internal unsafe static void _Freenode(_List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Pnode)
	{
		<Module>.FileInfoList.FILE_INFO.{dtor}(_Pnode + 16L / (long)sizeof(_List_node<FileInfoList::FILE_INFO,void\u0020*>));
		<Module>.delete((void*)_Pnode, 120UL);
	}

	// Token: 0x060000D1 RID: 209 RVA: 0x0000ACC8 File Offset: 0x0000A0C8
	internal unsafe static void {dtor}(LastErrorInfo<LastErrorType>.Lock* A_0)
	{
		<Module>.LeaveCriticalSection(*A_0);
	}

	// Token: 0x060000D2 RID: 210 RVA: 0x0000E9C0 File Offset: 0x0000DDC0
	internal unsafe static void {dtor}(_Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>* A_0)
	{
		<Module>.std._Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>._Free_proxy(A_0);
	}

	// Token: 0x060000D3 RID: 211 RVA: 0x0000E9D4 File Offset: 0x0000DDD4
	internal unsafe static void _Tidy(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* ptr = A_0 + 32L;
		while (((*ptr == 0L) ? 1 : 0) == 0)
		{
			<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>.pop_back(A_0);
		}
		ulong num = (ulong)(*(A_0 + 16L));
		if (0UL < num)
		{
			deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* ptr2 = A_0 + 8L;
			do
			{
				num -= 1UL;
				ulong num2 = (ulong)(*(num * 8UL + (ulong)(*ptr2)));
				if (num2 != 0UL)
				{
					<Module>.delete(num2, 16UL);
				}
			}
			while (num > 0UL);
		}
		long num3 = *(A_0 + 8L);
		if (num3 != 0L)
		{
			ulong num4 = (ulong)(*(A_0 + 16L) * 8L);
			void* ptr3 = num3;
			if (num4 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num4);
			}
			<Module>.delete(ptr3, num4);
		}
		*(A_0 + 16L) = 0L;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x060000D4 RID: 212 RVA: 0x0000EA70 File Offset: 0x0000DE70
	internal unsafe static void _Growmap(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0, ulong _Count)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		ulong num2 = ((0UL < num) ? num : 1UL);
		while (num2 - num < _Count || num2 < 8UL)
		{
			if (1152921504606846975UL - num2 < num2)
			{
				<Module>.std.deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>._Xlen(A_0);
				return;
			}
			num2 *= 2UL;
		}
		_Count = num2 - num;
		ulong num3 = (ulong)(*(A_0 + 24L)) >> 1;
		allocator<DownloadSpeed::DOWNLOAD_INFO\u0020*> allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>;
		DownloadSpeed.DOWNLOAD_INFO** ptr = <Module>.std.allocator<DownloadSpeed::DOWNLOAD_INFO\u0020*>.allocate(ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>, num + _Count);
		long num4 = *(A_0 + 8L);
		long num5 = *(A_0 + 16L) * 8L + num4;
		long num6 = (long)(num3 * 8UL);
		DownloadSpeed.DOWNLOAD_INFO** ptr2 = <Module>.std._Uninitialized_copy<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(num6 + num4, num5, num6 / (long)sizeof(DownloadSpeed.DOWNLOAD_INFO*) + ptr, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
		if (num3 <= _Count)
		{
			long num7 = *(A_0 + 8L);
			long num8 = num6 + num7;
			ptr2 = <Module>.std._Uninitialized_copy<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(num7, num8, ptr2, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
			<Module>.std._Uninitialized_value_construct_n<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,unsigned\u0020__int64,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(ptr2, _Count - num3, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
			<Module>.std._Uninitialized_value_construct_n<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,unsigned\u0020__int64,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(ptr, num3, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
		}
		else
		{
			long num9 = (long)(_Count * 8UL);
			long num10 = *(A_0 + 8L);
			<Module>.std._Uninitialized_copy<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(num10, num9 + num10, ptr2, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
			long num7 = *(A_0 + 8L);
			long num11 = num6 + num7;
			ptr2 = <Module>.std._Uninitialized_copy<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(num9 + num7, num11, ptr, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
			<Module>.std._Uninitialized_value_construct_n<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,unsigned\u0020__int64,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(ptr2, _Count, ref allocator<DownloadSpeed::DOWNLOAD_INFO_u0020*>);
		}
		long num12 = *(A_0 + 8L);
		if (num12 != 0L)
		{
			ulong num13 = (ulong)(*(A_0 + 16L) * 8L);
			void* ptr3 = num12;
			if (num13 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num13);
			}
			<Module>.delete(ptr3, num13);
		}
		*(A_0 + 8L) = ptr;
		*(A_0 + 16L) = *(A_0 + 16L) + (long)_Count;
	}

	// Token: 0x060000D5 RID: 213 RVA: 0x0000D26C File Offset: 0x0000C66C
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO* allocate(allocator<DownloadSpeed::DOWNLOAD_INFO>* A_0, ulong _Count)
	{
		ulong num = _Count * 8L;
		if (2305843009213693951L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x060000D6 RID: 214 RVA: 0x00009E68 File Offset: 0x00009268
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<wchar_t>\u0020>._Bxty* A_0)
	{
	}

	// Token: 0x060000D7 RID: 215 RVA: 0x0000C3A4 File Offset: 0x0000B7A4
	internal unsafe static void {dtor}(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry* A_0)
	{
		try
		{
			if (<Module>.std.uncaught_exception() == null)
			{
				<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Osfx(*A_0);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}), A_0);
			throw;
		}
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}(A_0);
	}

	// Token: 0x060000D8 RID: 216 RVA: 0x0000C3F4 File Offset: 0x0000B7F4
	internal unsafe static basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry* {ctor}(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry* A_0, basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Ostr)
	{
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{ctor}(A_0, _Ostr);
		try
		{
			if (<Module>.std.ios_base.good((long)(*(*_Ostr + 4L)) + _Ostr) != null && <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.tie((long)(*(*_Ostr + 4L)) + _Ostr) != null && <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.tie((long)(*(*_Ostr + 4L)) + _Ostr) != _Ostr)
			{
				<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.flush(<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.tie((long)(*(*_Ostr + 4L)) + _Ostr));
			}
			*(A_0 + 8L) = <Module>.std.ios_base.good((long)(*(*_Ostr + 4L)) + _Ostr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000D9 RID: 217 RVA: 0x00009E68 File Offset: 0x00009268
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<char>\u0020>._Bxty* A_0)
	{
	}

	// Token: 0x060000DA RID: 218 RVA: 0x0000D2B8 File Offset: 0x0000C6B8
	internal unsafe static void _Tidy_deallocate(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (((8UL <= num) ? 1 : 0) != 0)
		{
			ulong num2 = (num + 1UL) * 2UL;
			void* ptr = *A_0;
			if (num2 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num2);
			}
			<Module>.delete(ptr, num2);
		}
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 7L;
		*A_0 = 0;
	}

	// Token: 0x060000DB RID: 219 RVA: 0x0000C490 File Offset: 0x0000B890
	internal unsafe static void _Tidy_init(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 7L;
		*A_0 = 0;
	}

	// Token: 0x060000DC RID: 220 RVA: 0x0000D310 File Offset: 0x0000C710
	internal unsafe static void _Become_small(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = *A_0;
		cpblk(A_0, ptr, (*(A_0 + 16L) + 1L) * 2L);
		ulong num = (ulong)((*(A_0 + 24L) + 1L) * 2L);
		void* ptr2 = ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr2, ref num);
		}
		<Module>.delete(ptr2, num);
		*(A_0 + 24L) = 7L;
	}

	// Token: 0x060000DD RID: 221 RVA: 0x0000EBCC File Offset: 0x0000DFCC
	internal unsafe static void push_back(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (num < num2)
		{
			*(A_0 + 16L) = num + 1L;
			char* ptr = A_0;
			if (((8UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			char* ptr2 = num * 2L / 2 + ptr;
			*ptr2 = _Ch;
			ptr2[2L / 2L] = '\0';
		}
		else
		{
			<lambda_94b5dcf1ef2e5769bf4885c9dfc60389> <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>;
			initblk(ref <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>, 0, 1L);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>,wchar_t>(A_0, 1L, <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>, _Ch);
		}
	}

	// Token: 0x060000DE RID: 222 RVA: 0x0000EC34 File Offset: 0x0000E034
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* assign(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr, ulong _Count)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (_Count <= num)
		{
			char* ptr = A_0;
			if (((8UL <= num) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			*(A_0 + 16L) = _Count;
			ulong num2 = _Count * 2L;
			<Module>.memmove((void*)ptr, _Ptr, num2);
			(num2 / 2UL)[ptr] = '\0';
			return A_0;
		}
		<lambda_d4301fda4684ac16da26da6c6383f5f5> <lambda_d4301fda4684ac16da26da6c6383f5f5>;
		initblk(ref <lambda_d4301fda4684ac16da26da6c6383f5f5>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_for<class\u0020<lambda_d4301fda4684ac16da26da6c6383f5f5>,wchar_t\u0020const\u0020*>(A_0, _Count, <lambda_d4301fda4684ac16da26da6c6383f5f5>, _Ptr);
	}

	// Token: 0x060000DF RID: 223 RVA: 0x0000EC94 File Offset: 0x0000E094
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr, ulong _Count)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			ulong num3 = num + _Count;
			*(A_0 + 16L) = num3;
			char* ptr = A_0;
			if (((8UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			<Module>.memmove((void*)(num * 2L / 2 + ptr), _Ptr, _Count * 2L);
			(num3 * 2L / 2)[ptr] = '\0';
			return A_0;
		}
		<lambda_3ca51f66a9d03df3cf21518bbff746cd> <lambda_3ca51f66a9d03df3cf21518bbff746cd>;
		initblk(ref <lambda_3ca51f66a9d03df3cf21518bbff746cd>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_3ca51f66a9d03df3cf21518bbff746cd>,wchar_t\u0020const\u0020*,unsigned\u0020__int64>(A_0, _Count, <lambda_3ca51f66a9d03df3cf21518bbff746cd>, _Ptr, _Count);
	}

	// Token: 0x060000E0 RID: 224 RVA: 0x0000ED08 File Offset: 0x0000E108
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = (ulong)(*(_Right + 16L));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, ptr, num);
	}

	// Token: 0x060000E1 RID: 225 RVA: 0x0000ED3C File Offset: 0x0000E13C
	internal unsafe static void _Construct_lv_contents(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = *(_Right + 16L);
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		if (num < 8L)
		{
			cpblk(A_0, ptr, 16L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = 7L;
		}
		else
		{
			ulong num2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0);
			ulong num3 = num | 7L;
			ulong num4 = num3;
			ulong num5 = *(ref num2 < num3 ? ref num2 : ref num4);
			char* ptr2 = <Module>.std.allocator<wchar_t>.allocate(A_0, num5 + 1L);
			*A_0 = ptr2;
			cpblk(ptr2, ptr, (num + 1L) * 2L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = num5;
		}
	}

	// Token: 0x060000E2 RID: 226 RVA: 0x0000C4B0 File Offset: 0x0000B8B0
	internal unsafe static void _Assign_rv_contents(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, integral_constant<bool,1> __unnamed001)
	{
		cpblk(A_0, _Right, 32);
		*(_Right + 16L) = 0L;
		*(_Right + 24L) = 7L;
		*_Right = 0;
	}

	// Token: 0x060000E3 RID: 227 RVA: 0x000100AC File Offset: 0x0000F4AC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, ulong _Roff, ulong _Count, allocator<wchar_t>* _Al)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Right, _Roff, _Count);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060000E4 RID: 228 RVA: 0x0000D364 File Offset: 0x0000C764
	internal unsafe static void _Tidy_deallocate(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (((16UL <= num) ? 1 : 0) != 0)
		{
			ulong num2 = num + 1UL;
			void* ptr = *A_0;
			if (num2 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num2);
			}
			<Module>.delete(ptr, num2);
		}
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 15L;
		*A_0 = 0;
	}

	// Token: 0x060000E5 RID: 229 RVA: 0x0000C4DC File Offset: 0x0000B8DC
	internal unsafe static void _Tidy_init(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 15L;
		*A_0 = 0;
	}

	// Token: 0x060000E6 RID: 230 RVA: 0x0000C500 File Offset: 0x0000B900
	internal unsafe static void _Eos(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Newsize)
	{
		sbyte* ptr = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(A_0 + 16L) = _Newsize;
		*(byte*)(ptr + _Newsize / sizeof(sbyte)) = 0;
	}

	// Token: 0x060000E7 RID: 231 RVA: 0x0000D3BC File Offset: 0x0000C7BC
	internal unsafe static void _Become_small(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		sbyte* ptr = *A_0;
		cpblk(A_0, ptr, *(A_0 + 16L) + 1L);
		ulong num = (ulong)(*(A_0 + 24L) + 1L);
		void* ptr2 = ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr2, ref num);
		}
		<Module>.delete(ptr2, num);
		*(A_0 + 24L) = 15L;
	}

	// Token: 0x060000E8 RID: 232 RVA: 0x0000C530 File Offset: 0x0000B930
	internal unsafe static ulong max_size(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		return long.MaxValue;
	}

	// Token: 0x060000E9 RID: 233 RVA: 0x0000EDD0 File Offset: 0x0000E1D0
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* assign(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr, ulong _Count)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (_Count <= num)
		{
			sbyte* ptr = A_0;
			if (((16UL <= num) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			*(A_0 + 16L) = _Count;
			<Module>.memmove((void*)ptr, _Ptr, _Count);
			*(byte*)(ptr + _Count / sizeof(sbyte)) = 0;
			return A_0;
		}
		<lambda_61f19ca81ede490286327871d07716e6> <lambda_61f19ca81ede490286327871d07716e6>;
		initblk(ref <lambda_61f19ca81ede490286327871d07716e6>, 0, 1L);
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_for<class\u0020<lambda_61f19ca81ede490286327871d07716e6>,char\u0020const\u0020*>(A_0, _Count, <lambda_61f19ca81ede490286327871d07716e6>, _Ptr);
	}

	// Token: 0x060000EA RID: 234 RVA: 0x0000EE2C File Offset: 0x0000E22C
	internal unsafe static void _Construct_lv_contents(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right)
	{
		ulong num = *(_Right + 16L);
		sbyte* ptr = _Right;
		if (((16L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		if (num < 16L)
		{
			cpblk(A_0, ptr, 16L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = 15L;
		}
		else
		{
			ulong num2 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0);
			ulong num3 = num | 15L;
			ulong num4 = num3;
			ulong num5 = *(ref num2 < num3 ? ref num2 : ref num4);
			ulong num6 = num5 + 1L;
			void* ptr2;
			if (num6 >= 4096L)
			{
				ptr2 = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num6);
			}
			else if (num6 != null)
			{
				ptr2 = <Module>.@new(num6);
			}
			else
			{
				ptr2 = null;
			}
			*A_0 = ptr2;
			cpblk(ptr2, ptr, num + 1L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = num5;
		}
	}

	// Token: 0x060000EB RID: 235 RVA: 0x0000C548 File Offset: 0x0000B948
	internal unsafe static void _Assign_rv_contents(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right, integral_constant<bool,1> __unnamed001)
	{
		cpblk(A_0, _Right, 32);
		*(_Right + 16L) = 0L;
		*(_Right + 24L) = 15L;
		*_Right = 0;
	}

	// Token: 0x060000EC RID: 236 RVA: 0x0000D40C File Offset: 0x0000C80C
	internal unsafe static void _Tidy(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		if ((*(A_0 + 112L) & 1) != 0)
		{
			ulong num = (((<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0) == null) ? <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.egptr(A_0) : <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.epptr(A_0)) - <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0) >> 1) * 2L;
			void* ptr = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
			if (num >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
			}
			<Module>.delete(ptr, num);
		}
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setg(A_0, null, null, null);
		<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.setp(A_0, null, null);
		*(A_0 + 104L) = 0L;
		*(A_0 + 112L) = *(A_0 + 112L) & -2;
	}

	// Token: 0x060000ED RID: 237 RVA: 0x00010138 File Offset: 0x0000F538
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* str(basic_stringbuf<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1)
	{
		try
		{
			uint num = 0U;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
			try
			{
				ptr = A_1 + 16L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr = 0L;
				ptr2 = A_1 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>);
				*(long*)ptr2 = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)A_1);
				throw;
			}
			try
			{
				*(long*)ptr = 0L;
				*(long*)ptr2 = 7L;
				*(short*)A_1 = 0;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
				throw;
			}
			num = 1U;
			if ((*(A_0 + 112L) & 2) == 0 && <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0) != null)
			{
				char* ptr3 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pbase(A_0);
				char* ptr4 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.pptr(A_0);
				char** ptr5 = A_0 + 104L;
				char** ptr6 = (ptr4 < *ptr5 ? ptr5 : ref ptr4);
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_1, ptr3, *(long*)ptr6 - ptr3 >> 1);
			}
			else if ((*(A_0 + 112L) & 4) == 0 && <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.gptr(A_0) != null)
			{
				char* ptr7 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.eback(A_0);
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_1, ptr7, <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.egptr(A_0) - ptr7 >> 1);
			}
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x060000EE RID: 238 RVA: 0x0000D494 File Offset: 0x0000C894
	internal unsafe static char* allocate(allocator<wchar_t>* A_0, ulong _Count)
	{
		ulong num = _Count * 2L;
		if (9223372036854775807L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x060000EF RID: 239 RVA: 0x0000C574 File Offset: 0x0000B974
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* ++(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		long num = *A_0;
		long num2 = *(num + 16L);
		if (*(num2 + 25L) != 0)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(num + 8L);
			if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
			{
				while (*A_0 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)))
				{
					*A_0 = ptr;
					ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
					{
						break;
					}
				}
			}
			*A_0 = ptr;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = num2;
			long num3 = *(long*)ptr2;
			if (*(num3 + 25L) == 0)
			{
				do
				{
					ptr2 = num3;
					num3 = *(long*)ptr2;
				}
				while (*(num3 + 25L) == 0);
			}
			*A_0 = ptr2;
		}
		return A_0;
	}

	// Token: 0x060000F0 RID: 240 RVA: 0x0000C5E4 File Offset: 0x0000B9E4
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* ++(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* A_0)
	{
		long num = *A_0;
		long num2 = *(num + 16L);
		if (*(num2 + 25L) != 0)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(num + 8L);
			if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
			{
				while (*A_0 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)))
				{
					*A_0 = ptr;
					ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
					{
						break;
					}
				}
			}
			*A_0 = ptr;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = num2;
			long num3 = *(long*)ptr2;
			if (*(num3 + 25L) == 0)
			{
				do
				{
					ptr2 = num3;
					num3 = *(long*)ptr2;
				}
				while (*(num3 + 25L) == 0);
			}
			*A_0 = ptr2;
		}
		return A_0;
	}

	// Token: 0x060000F1 RID: 241 RVA: 0x0000C654 File Offset: 0x0000BA54
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO* *(_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>* A_0)
	{
		ulong num = (ulong)(*A_0);
		_Container_base12* ptr;
		if (num == 0UL)
		{
			ptr = null;
		}
		else
		{
			ptr = *num;
		}
		ulong num2 = (ulong)(*(A_0 + 16L));
		return (num2 & 1UL) * 8UL + (ulong)(*(((num2 >> 1) & (ulong)(*(long*)(ptr + 16L / (long)sizeof(_Container_base12)) - 1L)) * 8UL + (ulong)(*(long*)(ptr + 8L / (long)sizeof(_Container_base12)))));
	}

	// Token: 0x060000F2 RID: 242 RVA: 0x0000D26C File Offset: 0x0000C66C
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO** allocate(allocator<DownloadSpeed::DOWNLOAD_INFO\u0020*>* A_0, ulong _Count)
	{
		ulong num = _Count * 8L;
		if (2305843009213693951L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x060000F3 RID: 243 RVA: 0x0000D4E0 File Offset: 0x0000C8E0
	internal unsafe static void _Free_proxy(_Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>* A_0)
	{
		<Module>.delete(*A_0, 16UL);
		*A_0 = 0L;
	}

	// Token: 0x060000F4 RID: 244 RVA: 0x0000EEE0 File Offset: 0x0000E2E0
	internal unsafe static void _Alloc_proxy(_Deque_alloc<std::_Deque_base_types<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>\u0020>* A_0)
	{
		allocator<std::_Container_proxy> allocator<std::_Container_proxy>;
		_Container_proxy* ptr = <Module>.std.allocator<std::_Container_proxy>.allocate(ref allocator<std::_Container_proxy>, 1L);
		*A_0 = ptr;
		_Container_proxy container_proxy = 0L;
		*((ref container_proxy) + 8) = 0L;
		cpblk(ptr, ref container_proxy, 16);
		*(*A_0) = A_0;
	}

	// Token: 0x060000F5 RID: 245 RVA: 0x0000ACDC File Offset: 0x0000A0DC
	internal unsafe static void _Xlen(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@));
	}

	// Token: 0x060000F6 RID: 246 RVA: 0x0000D500 File Offset: 0x0000C900
	internal unsafe static void pop_back(deque<DownloadSpeed::DOWNLOAD_INFO,std::allocator<DownloadSpeed::DOWNLOAD_INFO>\u0020>* A_0)
	{
		*(A_0 + 32L) = *(A_0 + 32L) + -1L;
		if (*(A_0 + 32L) == 0L)
		{
			*(A_0 + 24L) = 0L;
		}
	}

	// Token: 0x060000F7 RID: 247 RVA: 0x0000ACF4 File Offset: 0x0000A0F4
	internal unsafe static void _Xran()
	{
		<Module>.std._Xout_of_range((sbyte*)(&<Module>.??_C@_0BI@CFPLBAOH@invalid?5string?5position@));
	}

	// Token: 0x060000F8 RID: 248 RVA: 0x0000AD0C File Offset: 0x0000A10C
	internal unsafe static void {dtor}(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base* A_0)
	{
		long num = *A_0;
		if (<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*num + 4L)) + num) != null)
		{
			num = *A_0;
			basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*num + 4L)) + num);
			calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr, *(*ptr + 16L));
		}
	}

	// Token: 0x060000F9 RID: 249 RVA: 0x0000AD4C File Offset: 0x0000A14C
	internal unsafe static basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base* {ctor}(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base* A_0, basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Ostr)
	{
		*A_0 = _Ostr;
		if (<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr) != null)
		{
			long num = *A_0;
			basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*num + 4L)) + num);
			calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr, *(*ptr + 8L));
		}
		return A_0;
	}

	// Token: 0x060000FA RID: 250 RVA: 0x0000C698 File Offset: 0x0000BA98
	internal unsafe static ulong max_size(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		return 9223372036854775806L;
	}

	// Token: 0x060000FB RID: 251 RVA: 0x0000EF14 File Offset: 0x0000E314
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* assign(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, ulong _Roff, ulong _Count)
	{
		ulong num = (ulong)(*(_Right + 16L));
		if (num < _Roff)
		{
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>._Xran();
		}
		ulong num2 = _Count;
		ulong num3 = num - _Roff;
		_Count = (ulong)(*(ref num3 < _Count ? ref num3 : ref num2));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Roff * 2L / sizeof(char) + ptr, _Count);
	}

	// Token: 0x060000FC RID: 252 RVA: 0x0000EF68 File Offset: 0x0000E368
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* assign(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right, ulong _Roff, ulong _Count)
	{
		ulong num = (ulong)(*(_Right + 16L));
		if (num < _Roff)
		{
			<Module>.std._String_val<std::_Simple_types<char>\u0020>._Xran();
		}
		ulong num2 = _Count;
		ulong num3 = num - _Roff;
		_Count = (ulong)(*(ref num3 < _Count ? ref num3 : ref num2));
		sbyte* ptr = _Right;
		if (((16L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.assign(A_0, ptr + _Roff / sizeof(sbyte), _Count);
	}

	// Token: 0x060000FD RID: 253 RVA: 0x0000AD8C File Offset: 0x0000A18C
	internal static int _Getstate(int _Mode)
	{
		int num = 0;
		num = (((_Mode & 1) == 0) ? 4 : num);
		if ((_Mode & 2) == 0)
		{
			num |= 2;
		}
		if ((_Mode & 8) != 0)
		{
			num |= 8;
		}
		if ((_Mode & 4) != 0)
		{
			num |= 16;
		}
		return num;
	}

	// Token: 0x060000FE RID: 254 RVA: 0x0000ADC4 File Offset: 0x0000A1C4
	internal unsafe static _List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode, _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000FF RID: 255 RVA: 0x0000ADC4 File Offset: 0x0000A1C4
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000100 RID: 256 RVA: 0x0000ADC4 File Offset: 0x0000A1C4
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000101 RID: 257 RVA: 0x0000ADC4 File Offset: 0x0000A1C4
	internal unsafe static _List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0>* {ctor}(_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0>* A_0, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Pnode, _List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000102 RID: 258 RVA: 0x0000D534 File Offset: 0x0000C934
	internal unsafe static _Container_proxy* allocate(allocator<std::_Container_proxy>* A_0, ulong _Count)
	{
		ulong num = _Count * 16L;
		if (1152921504606846975L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x06000103 RID: 259 RVA: 0x0000EFBC File Offset: 0x0000E3BC
	internal unsafe static _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Buynode0(_List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>* A_0, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Next, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Prev)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr = <Module>.std.allocator<std::_List_node<FileInfoList::FILE_INFO,void\u0020*>\u0020>.allocate(A_0, 1L);
		if (_Next == null)
		{
			_Next = ptr;
			_Prev = ptr;
		}
		uint exceptionCode;
		try
		{
			*(long*)ptr = _Next;
			_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_List_node<FileInfoList::FILE_INFO,void\u0020*>);
			*(long*)ptr2 = _Prev;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_List_node<FileInfoList::FILE_INFO,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000104 RID: 260 RVA: 0x0000ACF4 File Offset: 0x0000A0F4
	internal unsafe static void _Xran()
	{
		<Module>.std._Xout_of_range((sbyte*)(&<Module>.??_C@_0BI@CFPLBAOH@invalid?5string?5position@));
	}

	// Token: 0x06000105 RID: 261 RVA: 0x0000D584 File Offset: 0x0000C984
	internal unsafe static _List_node<FileInfoList::FILE_INFO,void\u0020*>* allocate(allocator<std::_List_node<FileInfoList::FILE_INFO,void\u0020*>\u0020>* A_0, ulong _Count)
	{
		ulong num = _Count * 120L;
		if (153722867280912930L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x06000106 RID: 262 RVA: 0x0000C6B0 File Offset: 0x0000BAB0
	internal unsafe static void deallocate(allocator<std::_List_node<FileInfoList::FILE_INFO,void\u0020*>\u0020>* A_0, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 120L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000107 RID: 263 RVA: 0x0000F0A4 File Offset: 0x0000E4A4
	internal unsafe static shared_ptr<LocalFile>* make_shared<class\u0020LocalFile,wchar_t\u0020const\u0020*\u0020&>(shared_ptr<LocalFile>* A_0, char** <_Args_0>)
	{
		try
		{
			uint num = 0U;
			_Ref_count_obj<LocalFile>* ptr = <Module>.@new(632UL);
			_Ref_count_obj<LocalFile>* ptr2;
			try
			{
				if (ptr != null)
				{
					ptr2 = <Module>.std._Ref_count_obj<LocalFile>.{ctor}<wchar_t\u0020const\u0020*\u0020&>(ptr, <_Args_0>);
				}
				else
				{
					ptr2 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 632UL);
				throw;
			}
			initblk(A_0, 0, 16L);
			*(long*)A_0 = 0L;
			shared_ptr<LocalFile>* ptr3 = A_0 + 8L / (long)sizeof(shared_ptr<LocalFile>);
			*(long*)ptr3 = 0L;
			num = 1U;
			*(long*)A_0 = ptr2 + 16L / (long)sizeof(_Ref_count_obj<LocalFile>);
			*(long*)ptr3 = ptr2;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<LocalFile>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000108 RID: 264 RVA: 0x0000F150 File Offset: 0x0000E550
	internal unsafe static shared_ptr<MemoryFile>* make_shared<class\u0020MemoryFile>(shared_ptr<MemoryFile>* A_0)
	{
		try
		{
			uint num = 0U;
			_Ref_count_obj<MemoryFile>* ptr = <Module>.@new(96UL);
			_Ref_count_obj<MemoryFile>* ptr2;
			try
			{
				if (ptr != null)
				{
					ptr2 = <Module>.std._Ref_count_obj<MemoryFile>.{ctor}<>(ptr);
				}
				else
				{
					ptr2 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 96UL);
				throw;
			}
			initblk(A_0, 0, 16L);
			*(long*)A_0 = 0L;
			shared_ptr<MemoryFile>* ptr3 = A_0 + 8L / (long)sizeof(shared_ptr<MemoryFile>);
			*(long*)ptr3 = 0L;
			num = 1U;
			*(long*)A_0 = ptr2 + 16L / (long)sizeof(_Ref_count_obj<MemoryFile>);
			*(long*)ptr3 = ptr2;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<MemoryFile>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000109 RID: 265 RVA: 0x00010268 File Offset: 0x0000F668
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, char* _Right)
	{
		try
		{
			uint num = 0U;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0);
			num = 1U;
			ulong num2 = (ulong)(*(_Left + 16L));
			char* ptr = _Right;
			if (*_Right != 0)
			{
				do
				{
					ptr += 2L;
				}
				while (*ptr != 0);
			}
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.reserve(A_0, (ptr - _Right >> 1) + num2);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, _Left);
			char* ptr2 = _Right;
			if (*_Right != 0)
			{
				do
				{
					ptr2 += 2L;
				}
				while (*ptr2 != 0);
			}
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, _Right, ptr2 - _Right >> 1);
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010A RID: 266 RVA: 0x00010310 File Offset: 0x0000F710
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, char* _Right)
	{
		uint num = 0U;
		char* ptr = _Right;
		if (*_Right != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		long num2 = ptr - _Right >> 1;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(_Left, _Right, num2);
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0, ptr2);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010B RID: 267 RVA: 0x00010388 File Offset: 0x0000F788
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		uint num = 0U;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(_Left, _Right);
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0, ptr);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010C RID: 268 RVA: 0x0000F1F8 File Offset: 0x0000E5F8
	internal unsafe static shared_ptr<IniParser>* make_shared<class\u0020IniParser,enum\u0020std::byte\u0020const\u0020*\u0020&,unsigned\u0020int\u0020&>(shared_ptr<IniParser>* A_0, @byte** <_Args_0>, uint* <_Args_1>)
	{
		try
		{
			uint num = 0U;
			_Ref_count_obj<IniParser>* ptr = <Module>.@new(32UL);
			_Ref_count_obj<IniParser>* ptr3;
			try
			{
				if (ptr != null)
				{
					*(int*)(ptr + 8L / (long)sizeof(_Ref_count_obj<IniParser>)) = 1;
					*(int*)(ptr + 12L / (long)sizeof(_Ref_count_obj<IniParser>)) = 1;
					try
					{
						*(long*)ptr = ref <Module>.??_7?$_Ref_count_obj@VIniParser@@@std@@6B@;
						IniParser* ptr2 = ptr + 16L / (long)sizeof(_Ref_count_obj<IniParser>);
						uint num2 = (uint)(*<_Args_1>);
						long num3 = *<_Args_0>;
						<Module>.IniParser.{ctor}(ptr2, num3, num2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), (void*)ptr);
						throw;
					}
					ptr3 = ptr;
				}
				else
				{
					ptr3 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 32UL);
				throw;
			}
			initblk(A_0, 0, 16L);
			*(long*)A_0 = 0L;
			shared_ptr<IniParser>* ptr4 = A_0 + 8L / (long)sizeof(shared_ptr<IniParser>);
			*(long*)ptr4 = 0L;
			num = 1U;
			*(long*)A_0 = ptr3 + 16L / (long)sizeof(_Ref_count_obj<IniParser>);
			*(long*)ptr4 = ptr3;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010D RID: 269 RVA: 0x000103E4 File Offset: 0x0000F7E4
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, [MarshalAs(UnmanagedType.U2)] char _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		try
		{
			uint num = 0U;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0);
			num = 1U;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.reserve(A_0, *(_Right + 16L) + 1L);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.push_back(A_0, _Left);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, _Right);
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010E RID: 270 RVA: 0x00010454 File Offset: 0x0000F854
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* UnescapeString<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* src)
	{
		try
		{
			uint num = 0U;
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(A_0);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(A_0);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_0);
				throw;
			}
			num = 1U;
			char* ptr = src;
			if (((8L <= *(src + 24L)) ? 1 : 0) != 0)
			{
				ptr = *src;
			}
			char* ptr2 = ptr;
			for (;;)
			{
				_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
				_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(src, &string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>);
				if (((((ptr2 == *ptr3) ? 1 : 0) == 0) ? 1 : 0) == 0)
				{
					break;
				}
				ushort num2 = *(ushort*)ptr2;
				if (num2 == 92)
				{
					ptr2 += 2L / (long)sizeof(char);
					_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
					_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(src, &string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2);
					if (((ptr2 == *(long*)ptr4) ? 1 : 0) != 0)
					{
						break;
					}
					num2 = *(ushort*)ptr2;
					switch (num2)
					{
					case 97:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 7);
						goto IL_14D;
					case 98:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 8);
						goto IL_14D;
					case 102:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 12);
						goto IL_14D;
					case 110:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 10);
						goto IL_14D;
					case 114:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 13);
						goto IL_14D;
					case 116:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 9);
						goto IL_14D;
					case 118:
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, 11);
						goto IL_14D;
					}
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, num2);
				}
				else
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, 1L, num2);
				}
				IL_14D:
				ptr2 += 2L / (long)sizeof(char);
			}
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x0600010F RID: 271 RVA: 0x00012A00 File Offset: 0x00011E00
	internal unsafe static basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>\u0020>(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Ostr, sbyte* _Val)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		int num2 = 0;
		sbyte* ptr = _Val;
		if (*(sbyte*)_Val != 0)
		{
			do
			{
				ptr += 1L / (long)sizeof(sbyte);
			}
			while (*(sbyte*)ptr != 0);
		}
		long num3 = (long)(ptr - _Val);
		long num4;
		if (<Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) > 0L && <Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) > num3)
		{
			num4 = <Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) - num3;
		}
		else
		{
			num4 = 0L;
		}
		long num5 = num4;
		basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry sentry;
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry.{ctor}(ref sentry, _Ostr);
		try
		{
			if (*((ref sentry) + 8) != 0)
			{
				uint exceptionCode;
				try
				{
					locale locale;
					locale* ptr2 = <Module>.std.ios_base.getloc((long)(*(*_Ostr + 4L)) + _Ostr, &locale);
					ctype<wchar_t>* ptr3;
					try
					{
						ptr3 = <Module>.std.use_facet<class\u0020std::ctype<wchar_t>\u0020>(ptr2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.locale.{dtor}), (void*)(&locale));
						throw;
					}
					<Module>.std.locale.{dtor}(ref locale);
					if ((<Module>.std.ios_base.flags((long)(*(*_Ostr + 4L)) + _Ostr) & 448) != 64)
					{
						while (0L < num5)
						{
							basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr4 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr);
							ushort num6 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.fill((long)(*(*_Ostr + 4L)) + _Ostr);
							ushort num7 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputc(ptr4, (char)num6);
							if (((65535 == num7) ? 1 : 0) != 0)
							{
								num2 |= 4;
								break;
							}
							num5 -= 1L;
						}
					}
					while (num2 == 0)
					{
						if (0L >= num3)
						{
							while (0L < num5)
							{
								basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr5 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr);
								ushort num8 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.fill((long)(*(*_Ostr + 4L)) + _Ostr);
								ushort num9 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputc(ptr5, (char)num8);
								if (((65535 == num9) ? 1 : 0) != 0)
								{
									num2 |= 4;
									break;
								}
								num5 -= 1L;
							}
							break;
						}
						basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr6 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr);
						ushort num10 = <Module>.std.ctype<wchar_t>.widen(ptr3, *(sbyte*)_Val);
						ushort num11 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputc(ptr6, (char)num10);
						num2 = ((((65535 == num11) ? 1 : 0) != 0) ? 4 : num2);
						num3 -= 1L;
						_Val += 1L / (long)sizeof(sbyte);
					}
					<Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr, 0L);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					exceptionCode = (uint)Marshal.GetExceptionCode();
					endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
				})
				{
					uint num12 = 0U;
					<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
					try
					{
						try
						{
							<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.setstate((long)(*(*_Ostr + 4L)) + _Ostr, 4, true);
							goto IL_222;
						}
						catch when (delegate
						{
							// Failed to create a 'catch-when' expression
							num12 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
							endfilter(num12 != 0U);
						})
						{
						}
						if (num12 != 0U)
						{
							throw;
						}
					}
					finally
					{
						<Module>.__CxxUnregisterExceptionObject(num, (int)num12);
					}
				}
			}
			else
			{
				num2 = 4;
			}
			IL_222:
			<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.setstate((long)(*(*_Ostr + 4L)) + _Ostr, num2, false);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry.{dtor}), (void*)(&sentry));
			throw;
		}
		try
		{
			if (<Module>.std.uncaught_exception() == null)
			{
				<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Osfx(sentry);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}), (void*)(&sentry));
			throw;
		}
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}(ref sentry);
		return _Ostr;
	}

	// Token: 0x06000110 RID: 272 RVA: 0x0000ADD8 File Offset: 0x0000A1D8
	internal unsafe static void LOG_MSG<wchar_t\u0020const\u0020*>(char* <args_0>)
	{
		if (<Module>.?use_log@LogMsg@@2_NA)
		{
			<Module>.LogMsg.Write(<args_0>, __arglist());
		}
	}

	// Token: 0x06000111 RID: 273 RVA: 0x0000D5D4 File Offset: 0x0000C9D4
	internal unsafe static basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* operator<<<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Ostr, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Str)
	{
		ulong num = (ulong)(*(_Str + 16L));
		char* ptr = _Str;
		if (((8L <= *(_Str + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Str;
		}
		return <Module>.std._Insert_string<wchar_t,struct\u0020std::char_traits<wchar_t>,unsigned\u0020__int64>(_Ostr, ptr, num);
	}

	// Token: 0x06000112 RID: 274 RVA: 0x0000ADF4 File Offset: 0x0000A1F4
	internal unsafe static void LOG_MSG<wchar_t\u0020const\u0020*,wchar_t\u0020const\u0020*>(char* <args_0>, char* <args_1>)
	{
		if (<Module>.?use_log@LogMsg@@2_NA)
		{
			<Module>.LogMsg.Write(<args_0>, __arglist((ushort*)<args_1>));
		}
	}

	// Token: 0x06000113 RID: 275 RVA: 0x00014EBC File Offset: 0x000142BC
	internal unsafe static void _Insert<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0> _Where, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* <_Val_0>)
	{
		long num = _Where + 8L;
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr = *num;
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr2 = <Module>.std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>._Buynode<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(A_0, _Where, ptr, <_Val_0>);
		ulong num2 = (ulong)(*(A_0 + 8L));
		if (384307168202282324UL - num2 < 1UL)
		{
			<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@));
		}
		*(A_0 + 8L) = (long)(num2 + 1UL);
		*num = ptr2;
		*ptr = ptr2;
	}

	// Token: 0x06000114 RID: 276 RVA: 0x00016C78 File Offset: 0x00016078
	internal unsafe static void _Insert<struct\u0020FileInfoList::FILE_INFO\u0020const\u0020&>(list<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0, _List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<FileInfoList::FILE_INFO>\u0020>,std::_Iterator_base0> _Where, FileInfoList.FILE_INFO* <_Val_0>)
	{
		long num = _Where + 8L;
		_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr = *num;
		_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr2 = <Module>.std._List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>._Buynode<struct\u0020FileInfoList::FILE_INFO\u0020const\u0020&>(A_0, _Where, ptr, <_Val_0>);
		ulong num2 = (ulong)(*(A_0 + 8L));
		if (153722867280912929UL - num2 < 1UL)
		{
			<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@));
		}
		*(A_0 + 8L) = (long)(num2 + 1UL);
		*num = ptr2;
		*ptr = ptr2;
	}

	// Token: 0x06000115 RID: 277 RVA: 0x0000AE10 File Offset: 0x0000A210
	internal unsafe static void _Copy_construct_from<class\u0020MemoryFile>(_Ptr_base<MemoryFile>* A_0, shared_ptr<MemoryFile>* _Other)
	{
		ulong num = (ulong)(*(_Other + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		*A_0 = *_Other;
		*(A_0 + 8L) = *(_Other + 8L);
	}

	// Token: 0x06000116 RID: 278 RVA: 0x0000AE10 File Offset: 0x0000A210
	internal unsafe static void _Copy_construct_from<class\u0020LocalFile>(_Ptr_base<LocalFile>* A_0, shared_ptr<LocalFile>* _Other)
	{
		ulong num = (ulong)(*(_Other + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		*A_0 = *_Other;
		*(A_0 + 8L) = *(_Other + 8L);
	}

	// Token: 0x06000117 RID: 279 RVA: 0x0000C6E0 File Offset: 0x0000BAE0
	internal unsafe static int _Traits_compare<struct\u0020std::char_traits<wchar_t>\u0020>(char* _Left, ulong _Left_size, char* _Right, ulong _Right_size)
	{
		ulong num = (ulong)(*(ref _Right_size < _Left_size ? ref _Right_size : ref _Left_size));
		char* ptr = _Right;
		int num2 = 0;
		if (num != 0UL)
		{
			ushort num3 = *_Left;
			ushort num4 = *_Right;
			if (num3 >= num4)
			{
				long num5 = _Left - _Right;
				while (num3 <= num4)
				{
					if (num == 1UL)
					{
						goto IL_57;
					}
					num -= 1UL;
					ptr += 2L;
					num3 = *(num5 + ptr);
					num4 = *ptr;
					if (num3 < num4)
					{
						goto IL_4F;
					}
				}
				num2 = 1;
				goto IL_57;
			}
			IL_4F:
			num2 = -1;
		}
		IL_57:
		int num6 = num2;
		if (num6 != null)
		{
			return num6;
		}
		if (_Left_size < _Right_size)
		{
			return -1;
		}
		return _Left_size > _Right_size;
	}

	// Token: 0x06000118 RID: 280 RVA: 0x0000AE40 File Offset: 0x0000A240
	internal unsafe static ulong _Traits_rfind_ch<struct\u0020std::char_traits<wchar_t>\u0020>(char* _Haystack, ulong _Hay_size, ulong _Start_at, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		if (_Hay_size != null)
		{
			ulong num = _Hay_size - 1L;
			ulong num2 = num;
			char* ptr = *(ref num < _Start_at ? ref num2 : ref _Start_at) * 2L + _Haystack;
			while (((*(ushort*)ptr == _Ch) ? 1 : 0) == 0)
			{
				if (ptr == _Haystack)
				{
					goto IL_34;
				}
				ptr -= 2L / (long)sizeof(char);
			}
			return ptr - _Haystack / sizeof(char) >> 1;
		}
		IL_34:
		return -1L;
	}

	// Token: 0x06000119 RID: 281 RVA: 0x0000C75C File Offset: 0x0000BB5C
	internal unsafe static ulong _Traits_find<struct\u0020std::char_traits<wchar_t>\u0020>(char* _Haystack, ulong _Hay_size, ulong _Start_at, char* _Needle, ulong _Needle_size)
	{
		if (_Needle_size <= _Hay_size)
		{
			ulong num = _Hay_size - _Needle_size;
			if (_Start_at <= num)
			{
				if (_Needle_size == null)
				{
					return _Start_at;
				}
				char* ptr = (num + 1L) * 2L + _Haystack;
				char* ptr2 = _Start_at * 2L + _Haystack;
				ushort num2 = *_Needle;
				short num3 = (short)num2;
				for (;;)
				{
					ulong num4 = ptr - ptr2 >> 1;
					char* ptr3 = ptr2;
					char* ptr4 = null;
					if (num4 != 0UL)
					{
						if (*(short*)ptr2 != num3)
						{
							while (num4 != 1UL)
							{
								num4 -= 1UL;
								ptr3 += 2L / (long)sizeof(char);
								if (*(short*)ptr3 == num3)
								{
									goto IL_72;
								}
							}
							goto IL_76;
						}
						IL_72:
						ptr4 = ptr3;
					}
					IL_76:
					ptr2 = ptr4;
					if (ptr2 == null)
					{
						break;
					}
					ulong num5 = _Needle_size;
					char* ptr5 = _Needle;
					ushort num6 = *(ushort*)ptr2;
					ushort num7 = num2;
					if (num6 >= num7)
					{
						long num8 = ptr2 - _Needle / sizeof(char);
						while (num6 <= num7)
						{
							if (num5 == 1L)
							{
								goto IL_D1;
							}
							num5 -= 1L;
							ptr5 += 2L;
							num6 = *(num8 + ptr5);
							num7 = *ptr5;
							if (num6 < num7)
							{
								break;
							}
						}
					}
					ptr2 += 2L / (long)sizeof(char);
				}
				return -1L;
				IL_D1:
				return ptr2 - _Haystack / sizeof(char) >> 1;
			}
		}
		return -1L;
	}

	// Token: 0x0600011A RID: 282 RVA: 0x0000D608 File Offset: 0x0000CA08
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_2b6d0663084f1b41c20caedb04b12c52>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_2b6d0663084f1b41c20caedb04b12c52> _Fn)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			cpblk(ptr, ptr2, (num + 1L) * 2L);
			ulong num5 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num5 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num5);
			}
			<Module>.delete(ptr3, num5);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, (num + 1L) * 2L);
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x0600011B RID: 283 RVA: 0x0000D6B4 File Offset: 0x0000CAB4
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_76dcdb8c0bec046e8a043f4783eee8ee>,unsigned\u0020__int64,wchar_t>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_76dcdb8c0bec046e8a043f4783eee8ee> _Fn, ulong <_Args_0>, [MarshalAs(UnmanagedType.U2)] char <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			ulong num5 = num * 2L;
			cpblk(ptr, ptr2, num5);
			ulong num6 = <_Args_0>;
			char* ptr3 = num5 + ptr;
			if (0UL < <_Args_0>)
			{
				do
				{
					*ptr3 = <_Args_1>;
					ptr3 += 2L / 2L;
					num6 -= 1UL;
				}
				while (num6 > 0UL);
			}
			*((num + <_Args_0>) * 2L + ptr) = 0;
			ulong num7 = (num3 + 1L) * 2L;
			void* ptr4 = ptr2;
			if (num7 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr4, ref num7);
			}
			<Module>.delete(ptr4, num7);
			*A_0 = ptr;
		}
		else
		{
			ulong num5 = num * 2L;
			cpblk(ptr, A_0, num5);
			ulong num8 = <_Args_0>;
			char* ptr5 = num5 + ptr;
			if (0UL < <_Args_0>)
			{
				do
				{
					*ptr5 = <_Args_1>;
					ptr5 += 2L / 2L;
					num8 -= 1UL;
				}
				while (num8 > 0UL);
			}
			*((num + <_Args_0>) * 2L + ptr) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x0600011C RID: 284 RVA: 0x0000D7C0 File Offset: 0x0000CBC0
	internal unsafe static _String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* {ctor}<class\u0020std::allocator<wchar_t>,void>(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0, allocator<wchar_t>* _Al)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600011D RID: 285 RVA: 0x0000AE8C File Offset: 0x0000A28C
	internal unsafe static int _Traits_compare<struct\u0020std::char_traits<char>\u0020>(sbyte* _Left, ulong _Left_size, sbyte* _Right, ulong _Right_size)
	{
		ulong num = (ulong)(*(ref _Right_size < _Left_size ? ref _Right_size : ref _Left_size));
		sbyte* ptr = _Right;
		int num2 = 0;
		if (num != 0UL)
		{
			byte b = *_Left;
			byte b2 = *_Right;
			if (b >= b2)
			{
				long num3 = _Left - _Right;
				while (b <= b2)
				{
					if (num == 1UL)
					{
						goto IL_4B;
					}
					num -= 1UL;
					ptr += 1L;
					b = *(num3 + ptr);
					b2 = *ptr;
					if (b < b2)
					{
						goto IL_43;
					}
				}
				num2 = 1;
				goto IL_4B;
			}
			IL_43:
			num2 = -1;
		}
		IL_4B:
		int num4 = num2;
		if (num4 != null)
		{
			return num4;
		}
		if (_Left_size < _Right_size)
		{
			return -1;
		}
		return _Left_size > _Right_size;
	}

	// Token: 0x0600011E RID: 286 RVA: 0x0000AEFC File Offset: 0x0000A2FC
	internal unsafe static ulong _Traits_find<struct\u0020std::char_traits<char>\u0020>(sbyte* _Haystack, ulong _Hay_size, ulong _Start_at, sbyte* _Needle, ulong _Needle_size)
	{
		if (_Needle_size > _Hay_size || _Start_at > _Hay_size - _Needle_size)
		{
			return -1L;
		}
		if (_Needle_size == null)
		{
			return _Start_at;
		}
		sbyte* ptr = _Hay_size + (_Haystack - _Needle_size) + 1L;
		sbyte* ptr2 = _Haystack + _Start_at;
		sbyte b = (sbyte)(*_Needle);
		for (;;)
		{
			ulong num = ptr - ptr2;
			int num2 = (int)b;
			sbyte* ptr3 = ptr2;
			sbyte* ptr4 = null;
			if (num != 0UL)
			{
				sbyte b2 = (sbyte)num2;
				if (*(sbyte*)ptr2 != b2)
				{
					while (num != 1UL)
					{
						num -= 1UL;
						ptr3 += 1L / (long)sizeof(sbyte);
						if (*(sbyte*)ptr3 == b2)
						{
							goto IL_66;
						}
					}
					goto IL_6A;
				}
				IL_66:
				ptr4 = ptr3;
			}
			IL_6A:
			ptr2 = ptr4;
			if (ptr2 == null)
			{
				break;
			}
			ulong num3 = _Needle_size;
			sbyte* ptr5 = _Needle;
			byte b3 = *(byte*)ptr2;
			byte b4 = (byte)b;
			if (b3 >= b4)
			{
				long num4 = ptr2 - _Needle / sizeof(sbyte);
				while (b3 <= b4)
				{
					if (num3 == 1L)
					{
						goto IL_BC;
					}
					num3 -= 1L;
					ptr5 += 1L;
					b3 = *(num4 + ptr5);
					b4 = *ptr5;
					if (b3 < b4)
					{
						break;
					}
				}
			}
			ptr2 += 1L / (long)sizeof(sbyte);
		}
		return -1L;
		IL_BC:
		return ptr2 - _Haystack / sizeof(sbyte);
	}

	// Token: 0x0600011F RID: 287 RVA: 0x0000D80C File Offset: 0x0000CC0C
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_grow_by<class\u0020<lambda_25f5346b87de700b649286b586e55410>\u0020>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Size_increase, <lambda_25f5346b87de700b649286b586e55410> _Fn)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, num2);
		ulong num5 = num4 + 1L;
		void* ptr;
		if (num5 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num5);
		}
		else if (num5 != null)
		{
			ptr = <Module>.@new(num5);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (16L <= num3)
		{
			sbyte* ptr2 = *A_0;
			cpblk(ptr, ptr2, num + 1L);
			ulong num6 = num3 + 1L;
			void* ptr3 = ptr2;
			if (num6 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num6);
			}
			<Module>.delete(ptr3, num6);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, num + 1L);
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x06000120 RID: 288 RVA: 0x0000D8D0 File Offset: 0x0000CCD0
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_grow_by<class\u0020<lambda_59d344839e59d86dc9255728ed6d9dcb>,unsigned\u0020__int64,char>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Size_increase, <lambda_59d344839e59d86dc9255728ed6d9dcb> _Fn, ulong <_Args_0>, sbyte <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, num2);
		ulong num5 = num4 + 1L;
		void* ptr;
		if (num5 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num5);
		}
		else if (num5 != null)
		{
			ptr = <Module>.@new(num5);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (16L <= num3)
		{
			sbyte* ptr2 = *A_0;
			cpblk(ptr, ptr2, num);
			long num6 = (byte*)ptr + num;
			initblk(num6, <_Args_1>, <_Args_0>);
			*(num6 + (long)<_Args_0>) = 0;
			ulong num7 = num3 + 1L;
			void* ptr3 = ptr2;
			if (num7 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num7);
			}
			<Module>.delete(ptr3, num7);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, num);
			long num6 = (byte*)ptr + num;
			initblk(num6, <_Args_1>, <_Args_0>);
			*(num6 + (long)<_Args_0>) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x06000121 RID: 289 RVA: 0x0000D9B4 File Offset: 0x0000CDB4
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_grow_by<class\u0020<lambda_f1129f3d98befd92b6d0e63ffb90e238>,char\u0020const\u0020*,unsigned\u0020__int64>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Size_increase, <lambda_f1129f3d98befd92b6d0e63ffb90e238> _Fn, sbyte* <_Args_0>, ulong <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, num2);
		ulong num5 = num4 + 1L;
		void* ptr;
		if (num5 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num5);
		}
		else if (num5 != null)
		{
			ptr = <Module>.@new(num5);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (16L <= num3)
		{
			sbyte* ptr2 = *A_0;
			cpblk(ptr, ptr2, num);
			long num6 = (byte*)ptr + num;
			cpblk(num6, <_Args_0>, <_Args_1>);
			*(num6 + (long)<_Args_1>) = 0;
			ulong num7 = num3 + 1L;
			void* ptr3 = ptr2;
			if (num7 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num7);
			}
			<Module>.delete(ptr3, num7);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, num);
			long num6 = (byte*)ptr + num;
			cpblk(num6, <_Args_0>, <_Args_1>);
			*(num6 + (long)<_Args_1>) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x06000122 RID: 290 RVA: 0x0001060C File Offset: 0x0000FA0C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				if (<Module>.IniParser.ci_comp.()(A_0, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), _Keyval) != null)
				{
					ptr2 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				}
				else
				{
					ptr = ptr2;
					ptr2 = *(long*)ptr2;
				}
			}
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0);
		}
		return ptr;
	}

	// Token: 0x06000123 RID: 291 RVA: 0x00010650 File Offset: 0x0000FA50
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			do
			{
				if (<Module>.IniParser.ci_comp.()(A_0, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t), _Keyval) != null)
				{
					ptr2 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				}
				else
				{
					ptr = ptr2;
					ptr2 = *(long*)ptr2;
				}
			}
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0);
		}
		return ptr;
	}

	// Token: 0x06000124 RID: 292 RVA: 0x0000DA98 File Offset: 0x0000CE98
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO** _Uninitialized_copy<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(DownloadSpeed.DOWNLOAD_INFO** _First, DownloadSpeed.DOWNLOAD_INFO** _Last, DownloadSpeed.DOWNLOAD_INFO** _Dest, allocator<DownloadSpeed::DOWNLOAD_INFO\u0020*>* _Al)
	{
		DownloadSpeed.DOWNLOAD_INFO** ptr = _First;
		DownloadSpeed.DOWNLOAD_INFO** ptr2 = _Dest;
		_Really_trivial_ptr_iterator_tag really_trivial_ptr_iterator_tag2;
		_Really_trivial_ptr_iterator_tag really_trivial_ptr_iterator_tag = *<Module>.std._Ptr_copy_cat<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>(&really_trivial_ptr_iterator_tag2, ref ptr, ref ptr2);
		ulong num = _Last - _First;
		<Module>.memmove((void*)_Dest, _First, num);
		return num / sizeof(DownloadSpeed.DOWNLOAD_INFO*) + _Dest;
	}

	// Token: 0x06000125 RID: 293 RVA: 0x0000DACC File Offset: 0x0000CECC
	internal unsafe static DownloadSpeed.DOWNLOAD_INFO** _Uninitialized_value_construct_n<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*\u0020*,unsigned\u0020__int64,class\u0020std::allocator<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>\u0020>(DownloadSpeed.DOWNLOAD_INFO** _First, ulong _Count, allocator<DownloadSpeed::DOWNLOAD_INFO\u0020*>* _Al)
	{
		DownloadSpeed.DOWNLOAD_INFO** ptr = _Count * 8UL / (ulong)sizeof(DownloadSpeed.DOWNLOAD_INFO*) + _First;
		initblk(_First, 0, ptr - _First);
		return ptr;
	}

	// Token: 0x06000126 RID: 294 RVA: 0x00010694 File Offset: 0x0000FA94
	internal unsafe static ctype<wchar_t>* use_facet<class\u0020std::ctype<wchar_t>\u0020>(locale* _Loc)
	{
		_Lockit lockit;
		<Module>.std._Lockit.{ctor}(ref lockit, 0);
		locale.facet* ptr2;
		try
		{
			locale.facet* ptr = <Module>.?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PEBVfacet@locale@2@EB;
			ulong num = <Module>.std.locale.id.._K(<Module>.__imp_?id@?$ctype@_W@std@@2V0locale@2@A);
			ptr2 = <Module>.std.locale._Getfacet(_Loc, num);
			if (ptr2 == null)
			{
				if (ptr != null)
				{
					ptr2 = ptr;
				}
				else
				{
					if (<Module>.std.ctype<wchar_t>._Getcat(&ptr, _Loc) == -1L)
					{
						bad_cast bad_cast;
						<Module>.std.bad_cast.{ctor}(ref bad_cast);
						<Module>._CxxThrowException((void*)(&bad_cast), (_s__ThrowInfo*)(&<Module>._TI2?AVbad_cast@std@@));
					}
					locale.facet* ptr3 = (locale.facet*)ptr;
					unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>\u0020> unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>_u0020> = ptr;
					try
					{
						<Module>.std._Facet_Register_m((_Facet_base*)ptr3);
						locale.facet* ptr4 = ptr3;
						calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr4, *(*(long*)ptr4 + 8L));
						<Module>.?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PEBVfacet@locale@2@EB = ptr;
						ptr2 = ptr;
						unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>_u0020> = 0L;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>\u0020>.{dtor}), (void*)(&unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>_u0020>));
						throw;
					}
					<Module>.std.unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>\u0020>.{dtor}(ref unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>_u0020>);
				}
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Lockit.{dtor}), (void*)(&lockit));
			throw;
		}
		<Module>.std._Lockit.{dtor}(ref lockit);
		return ptr2;
	}

	// Token: 0x06000127 RID: 295 RVA: 0x0000DAEC File Offset: 0x0000CEEC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>,wchar_t>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_94b5dcf1ef2e5769bf4885c9dfc60389> _Fn, [MarshalAs(UnmanagedType.U2)] char <_Args_0>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			ulong num5 = num * 2L;
			cpblk(ptr, ptr2, num5);
			*(num5 + ptr) = (short)<_Args_0>;
			*(num5 + ptr + 2L) = 0;
			ulong num6 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num6 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num6);
			}
			<Module>.delete(ptr3, num6);
			*A_0 = ptr;
		}
		else
		{
			ulong num5 = num * 2L;
			cpblk(ptr, A_0, num5);
			*(num5 + ptr) = (short)<_Args_0>;
			*(num5 + ptr + 2L) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x06000128 RID: 296 RVA: 0x0000DBB4 File Offset: 0x0000CFB4
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_for<class\u0020<lambda_d4301fda4684ac16da26da6c6383f5f5>,wchar_t\u0020const\u0020*>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _New_size, <lambda_d4301fda4684ac16da26da6c6383f5f5> _Fn, char* <_Args_0>)
	{
		if (_New_size > <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0))
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num = *(A_0 + 24L);
		ulong num2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, _New_size);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num2 + 1L);
		*(A_0 + 16L) = _New_size;
		*(A_0 + 24L) = num2;
		ulong num3 = _New_size * 2L;
		cpblk(ptr, <_Args_0>, num3);
		*(num3 + ptr) = 0;
		if (8L <= num)
		{
			ulong num4 = (num + 1L) * 2L;
			void* ptr2 = *A_0;
			if (num4 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr2, ref num4);
			}
			<Module>.delete(ptr2, num4);
			*A_0 = ptr;
		}
		else
		{
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x06000129 RID: 297 RVA: 0x0000DC40 File Offset: 0x0000D040
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_3ca51f66a9d03df3cf21518bbff746cd>,wchar_t\u0020const\u0020*,unsigned\u0020__int64>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_3ca51f66a9d03df3cf21518bbff746cd> _Fn, char* <_Args_0>, ulong <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			ulong num5 = num * 2L;
			cpblk(ptr, ptr2, num5);
			cpblk(num5 + ptr, <_Args_0>, <_Args_1> * 2UL);
			*((num + <_Args_1>) * 2L + ptr) = 0;
			ulong num6 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num6 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num6);
			}
			<Module>.delete(ptr3, num6);
			*A_0 = ptr;
		}
		else
		{
			ulong num5 = num * 2L;
			cpblk(ptr, A_0, num5);
			cpblk(num5 + ptr, <_Args_0>, <_Args_1> * 2UL);
			*((num + <_Args_1>) * 2L + ptr) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x0600012A RID: 298 RVA: 0x0000D7C0 File Offset: 0x0000CBC0
	internal unsafe static _String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* {ctor}<class\u0020std::allocator<wchar_t>\u0020const\u0020&,void>(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0, allocator<wchar_t>* _Al)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600012B RID: 299 RVA: 0x0000DD20 File Offset: 0x0000D120
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_for<class\u0020<lambda_61f19ca81ede490286327871d07716e6>,char\u0020const\u0020*>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _New_size, <lambda_61f19ca81ede490286327871d07716e6> _Fn, sbyte* <_Args_0>)
	{
		if (_New_size > <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0))
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num = *(A_0 + 24L);
		ulong num2 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, _New_size);
		ulong num3 = num2 + 1L;
		void* ptr;
		if (num3 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num3);
		}
		else if (num3 != null)
		{
			ptr = <Module>.@new(num3);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = _New_size;
		*(A_0 + 24L) = num2;
		cpblk(ptr, <_Args_0>, _New_size);
		((byte*)ptr)[_New_size] = 0;
		if (16L <= num)
		{
			ulong num4 = num + 1L;
			void* ptr2 = *A_0;
			if (num4 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr2, ref num4);
			}
			<Module>.delete(ptr2, num4);
			*A_0 = ptr;
		}
		else
		{
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x0600012C RID: 300 RVA: 0x0000DDC0 File Offset: 0x0000D1C0
	internal unsafe static _String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* {ctor}<class\u0020std::allocator<char>\u0020const\u0020&,void>(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0, allocator<char>* _Al)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600012D RID: 301 RVA: 0x0001C3B0 File Offset: 0x0001B7B0
	internal unsafe static void _Delete_this(_Ref_count_obj<IniParser>* A_0)
	{
		if (A_0 != null)
		{
			long num = *(*A_0 + 16L);
			void* ptr = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), A_0, 1U, num);
		}
	}

	// Token: 0x0600012E RID: 302 RVA: 0x0001C424 File Offset: 0x0001B824
	internal unsafe static void _Destroy(_Ref_count_obj<IniParser>* A_0)
	{
		_Ref_count_obj<IniParser>* ptr = A_0 + 16L;
		_Ref_count_obj<IniParser>* ptr2 = ptr;
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), ptr2);
			throw;
		}
		_Ref_count_obj<IniParser>* ptr3 = ptr;
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(ptr3, *ptr3);
	}

	// Token: 0x0600012F RID: 303 RVA: 0x0001C3B0 File Offset: 0x0001B7B0
	internal unsafe static void _Delete_this(_Ref_count_obj<MemoryFile>* A_0)
	{
		if (A_0 != null)
		{
			long num = *(*A_0 + 16L);
			void* ptr = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), A_0, 1U, num);
		}
	}

	// Token: 0x06000130 RID: 304 RVA: 0x0001C390 File Offset: 0x0001B790
	internal unsafe static void _Destroy(_Ref_count_obj<MemoryFile>* A_0)
	{
		_Ref_count_obj<MemoryFile>* ptr = A_0 + 16L;
		long num = *(*ptr);
		void* ptr2 = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), ptr, 0U, num);
	}

	// Token: 0x06000131 RID: 305 RVA: 0x0001C3B0 File Offset: 0x0001B7B0
	internal unsafe static void _Delete_this(_Ref_count_obj<LocalFile>* A_0)
	{
		if (A_0 != null)
		{
			long num = *(*A_0 + 16L);
			void* ptr = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), A_0, 1U, num);
		}
	}

	// Token: 0x06000132 RID: 306 RVA: 0x0001D418 File Offset: 0x0001C818
	internal unsafe static void _Destroy(_Ref_count_obj<LocalFile>* A_0)
	{
		_Ref_count_obj<LocalFile>* ptr = A_0 + 16L;
		long num = *(*ptr);
		void* ptr2 = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), ptr, 0U, num);
	}

	// Token: 0x06000133 RID: 307 RVA: 0x0000F2EC File Offset: 0x0000E6EC
	internal unsafe static void {dtor}(unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base>\u0020>* A_0)
	{
		long num = *A_0;
		if (num != 0L)
		{
			_Facet_base* ptr = num;
			long num2 = *(*(long*)ptr);
			void* ptr2 = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), ptr, 1U, num2);
		}
	}

	// Token: 0x06000134 RID: 308 RVA: 0x0000C84C File Offset: 0x0000BC4C
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* {ctor}(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000135 RID: 309 RVA: 0x0000C898 File Offset: 0x0000BC98
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* {ctor}(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000136 RID: 310 RVA: 0x0000AFD4 File Offset: 0x0000A3D4
	internal unsafe static void _Xlen()
	{
		<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BA@JFNIOLAK@string?5too?5long@));
	}

	// Token: 0x06000137 RID: 311 RVA: 0x0000C8E4 File Offset: 0x0000BCE4
	internal unsafe static ulong _Calculate_growth(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Requested)
	{
		ulong num = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0);
		ulong num2 = _Requested | 7L;
		if (num2 > num)
		{
			return num;
		}
		ulong num3 = *(A_0 + 24L);
		ulong num4 = num3 >> 1;
		if (num3 > num - num4)
		{
			return num;
		}
		ulong num5 = num4 + num3;
		ulong num6 = num5;
		return *(ref num2 < num5 ? ref num6 : ref num2);
	}

	// Token: 0x06000138 RID: 312 RVA: 0x0000C92C File Offset: 0x0000BD2C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Equal(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr)
	{
		char* ptr = _Ptr;
		short num = *_Ptr;
		if (num != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		long num2 = ptr - _Ptr >> 1;
		ulong num3 = (ulong)(*(A_0 + 16L));
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		int num8;
		if (num3 == (ulong)num2)
		{
			ulong num4 = num3;
			char* ptr3 = _Ptr;
			if (num3 != 0UL)
			{
				ushort num5 = *(ushort*)ptr2;
				ushort num6 = (ushort)num;
				if (num5 >= num6)
				{
					long num7 = ptr2 - _Ptr / sizeof(char);
					while (num5 <= num6)
					{
						if (num4 == 1UL)
						{
							goto IL_8F;
						}
						num4 -= 1UL;
						ptr3 += 2L;
						num5 = *(num7 + ptr3);
						num6 = *ptr3;
						if (num5 < num6)
						{
							break;
						}
					}
					goto IL_94;
				}
				goto IL_94;
			}
			IL_8F:
			num8 = 1;
			goto IL_97;
		}
		IL_94:
		num8 = 0;
		IL_97:
		return (byte)num8;
	}

	// Token: 0x06000139 RID: 313 RVA: 0x0000C9D4 File Offset: 0x0000BDD4
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Equal(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = (ulong)(*(_Right + 16L));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		ulong num2 = (ulong)(*(A_0 + 16L));
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		int num7;
		if (num2 == num)
		{
			ulong num3 = num2;
			char* ptr3 = ptr;
			if (num2 != 0UL)
			{
				ushort num4 = *(ushort*)ptr2;
				ushort num5 = *(ushort*)ptr;
				if (num4 >= num5)
				{
					long num6 = (long)(ptr2 - ptr);
					while (num4 <= num5)
					{
						if (num3 == 1UL)
						{
							goto IL_90;
						}
						num3 -= 1UL;
						ptr3 += 2L / (long)sizeof(char);
						num4 = *(ushort*)(num6 / (long)sizeof(char) + ptr3);
						num5 = *(ushort*)ptr3;
						if (num4 < num5)
						{
							break;
						}
					}
					goto IL_95;
				}
				goto IL_95;
			}
			IL_90:
			num7 = 1;
			goto IL_98;
		}
		IL_95:
		num7 = 0;
		IL_98:
		return (byte)num7;
	}

	// Token: 0x0600013A RID: 314 RVA: 0x0000CA7C File Offset: 0x0000BE7C
	internal unsafe static _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* end(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(long*)A_1 = *(A_0 + 16L) * 2L / (long)sizeof(char) + ptr;
		return A_1;
	}

	// Token: 0x0600013B RID: 315 RVA: 0x0000AFD4 File Offset: 0x0000A3D4
	internal unsafe static void _Xlen()
	{
		<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BA@JFNIOLAK@string?5too?5long@));
	}

	// Token: 0x0600013C RID: 316 RVA: 0x0000CAB0 File Offset: 0x0000BEB0
	internal unsafe static ulong _Calculate_growth(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Requested)
	{
		ulong num = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0);
		ulong num2 = _Requested | 15L;
		if (num2 > num)
		{
			return num;
		}
		ulong num3 = *(A_0 + 24L);
		ulong num4 = num3 >> 1;
		if (num3 > num - num4)
		{
			return num;
		}
		ulong num5 = num4 + num3;
		ulong num6 = num5;
		return *(ref num2 < num5 ? ref num6 : ref num2);
	}

	// Token: 0x0600013D RID: 317 RVA: 0x0001C474 File Offset: 0x0001B874
	internal unsafe static void _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
	}

	// Token: 0x0600013E RID: 318 RVA: 0x0001C48C File Offset: 0x0001B88C
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		long num = *A_0;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = num;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = *num;
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
	}

	// Token: 0x0600013F RID: 319 RVA: 0x0001C4B0 File Offset: 0x0001B8B0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _First, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Last)
	{
		long num = *A_0;
		if (((_First == *num) ? 1 : 0) != 0 && ((_Last == num) ? 1 : 0) != 0)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
			*(long*)A_1 = *(*A_0);
			return A_1;
		}
		while (((((_First == _Last) ? 1 : 0) == 0) ? 1 : 0) != 0)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _First;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref _First);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
		}
		*(long*)A_1 = _First;
		return A_1;
	}

	// Token: 0x06000140 RID: 320 RVA: 0x0001C8C8 File Offset: 0x0001BCC8
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		long num = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = num;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, *(num + 8L));
		*(*A_0 + 8L) = ptr;
		*(*A_0) = ptr;
		*(*A_0 + 16L) = ptr;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x06000141 RID: 321 RVA: 0x0001C50C File Offset: 0x0001B90C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Where)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = <Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, _Where);
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, ptr);
		*(long*)A_1 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st;
		return A_1;
	}

	// Token: 0x06000142 RID: 322 RVA: 0x0001C544 File Offset: 0x0001B944
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Extract(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Where)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref _Where);
		long num = *(long*)ptr;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr4;
		long num4;
		if (*(num + 25L) != 0)
		{
			ptr2 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		}
		else if (*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 25L) != 0)
		{
			ptr2 = num;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = _Where;
			long num2 = _Where + 16L;
			long num3 = num2;
			ptr2 = *num2;
			if (_Where != ptr)
			{
				*(num + 8L) = _Where;
				*(long*)ptr3 = *(long*)ptr;
				if (ptr3 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)))
				{
					ptr4 = ptr3;
				}
				else
				{
					ptr4 = *(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
					{
						*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr4;
					}
					*(long*)ptr4 = ptr2;
					*num3 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L) = ptr3;
				}
				num4 = *A_0 + 8L;
				if (*num4 == ptr)
				{
					*num4 = ptr3;
				}
				else
				{
					long num5 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*num5 == ptr)
					{
						*num5 = ptr3;
					}
					else
					{
						*(num5 + 16L) = ptr3;
					}
				}
				*(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				sbyte b = *(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)));
				*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = b;
				goto IL_1C3;
			}
		}
		ptr4 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr4;
		}
		num4 = *A_0 + 8L;
		if (*num4 == ptr)
		{
			*num4 = ptr2;
		}
		else if (*(long*)ptr4 == ptr)
		{
			*(long*)ptr4 = ptr2;
		}
		else
		{
			*(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr2;
		}
		long num6 = *A_0;
		if (*num6 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr5;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
			{
				ptr5 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr6 = ptr2;
				long num7 = *(long*)ptr2;
				if (*(num7 + 25L) == 0)
				{
					long num8 = num7;
					do
					{
						ptr6 = num8;
						num8 = *(long*)ptr6;
					}
					while (*(num8 + 25L) == 0);
				}
				ptr5 = ptr6;
			}
			*num6 = ptr5;
		}
		long num9 = *A_0 + 16L;
		if (*num9 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr7;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
			{
				ptr7 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr8 = ptr2;
				long num10 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				if (*(num10 + 25L) == 0)
				{
					long num11 = num10;
					do
					{
						ptr8 = num11;
						num11 = *(long*)(ptr8 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					}
					while (*(num11 + 25L) == 0);
				}
				ptr7 = ptr8;
			}
			*num9 = ptr7;
		}
		IL_1C3:
		if (*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 1)
		{
			if (ptr2 != *(*A_0 + 8L))
			{
				while (*(sbyte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 1)
				{
					ulong num12 = (ulong)(*(long*)ptr4);
					if (ptr2 == num12)
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
							ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)ptr3 + 24L) != 1 || *(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) != 1)
							{
								if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) == 1)
								{
									*(*(long*)ptr3 + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr3);
									ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr9 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)ptr9);
								*(byte*)ptr9 = 1;
								*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							ptr2 = ptr4;
						}
					}
					else
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = num12;
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
							ptr3 = *(long*)ptr4;
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) != 1 || *(*(long*)ptr3 + 24L) != 1)
							{
								if (*(*(long*)ptr3 + 24L) == 1)
								{
									*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr3);
									ptr3 = *(long*)ptr4;
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr10 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)ptr10);
								*(byte*)ptr10 = 1;
								*(*(long*)ptr3 + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							ptr2 = ptr4;
						}
					}
					ptr4 = *(long*)(ptr4 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (ptr2 == *(*A_0 + 8L))
					{
						break;
					}
				}
			}
			*(byte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
		}
		ulong num13 = (ulong)(*(A_0 + 8L));
		if (0UL < num13)
		{
			*(A_0 + 8L) = (long)(num13 - 1UL);
		}
		return ptr;
	}

	// Token: 0x06000143 RID: 323 RVA: 0x0001C900 File Offset: 0x0001BD00
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Rootnode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = _Rootnode;
		if (*(sbyte*)(_Rootnode + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			do
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)));
				ptr = *(long*)ptr;
				<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(_Rootnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, _Rootnode);
				_Rootnode = ptr;
			}
			while (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0);
		}
	}

	// Token: 0x06000144 RID: 324 RVA: 0x0000AFEC File Offset: 0x0000A3EC
	internal unsafe static void _Rrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(long*)_Wherenode;
		*(long*)_Wherenode = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			if (_Wherenode == *(num3 + 16L))
			{
				*(num3 + 16L) = ptr;
			}
			else
			{
				*num3 = ptr;
			}
		}
		*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr;
	}

	// Token: 0x06000145 RID: 325 RVA: 0x0000B05C File Offset: 0x0000A45C
	internal unsafe static void _Lrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)ptr;
		long num = *(long*)ptr;
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			if (_Wherenode == *num3)
			{
				*num3 = ptr;
			}
			else
			{
				*(num3 + 16L) = ptr;
			}
		}
		*(long*)ptr = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr;
	}

	// Token: 0x06000146 RID: 326 RVA: 0x0000DE0C File Offset: 0x0000D20C
	internal unsafe static _Ref_count_obj<LocalFile>* {ctor}<wchar_t\u0020const\u0020*\u0020&>(_Ref_count_obj<LocalFile>* A_0, char** <_Args_0>)
	{
		*(A_0 + 8L) = 1;
		*(A_0 + 12L) = 1;
		try
		{
			*A_0 = ref <Module>.??_7?$_Ref_count_obj@VLocalFile@@@std@@6B@;
			LocalFile* ptr = A_0 / sizeof(LocalFile) + 16L;
			char* ptr2 = *<_Args_0>;
			<Module>.DownloadFile.{ctor}(ptr);
			try
			{
				*(long*)ptr = ref <Module>.??_7LocalFile@@6B@;
				<Module>.LocalFile.Init(ptr, ptr2);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(DownloadFile.{dtor}), (void*)ptr);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000147 RID: 327 RVA: 0x0000B0C4 File Offset: 0x0000A4C4
	internal unsafe static _Ref_count_obj<MemoryFile>* {ctor}<>(_Ref_count_obj<MemoryFile>* A_0)
	{
		*(A_0 + 8L) = 1;
		*(A_0 + 12L) = 1;
		try
		{
			*A_0 = ref <Module>.??_7?$_Ref_count_obj@VMemoryFile@@@std@@6B@;
			MemoryFile* ptr = A_0 / sizeof(MemoryFile) + 16L;
			<Module>.DownloadFile.{ctor}(ptr);
			try
			{
				*(long*)ptr = ref <Module>.??_7MemoryFile@@6B@;
				*(long*)(ptr + 72L / (long)sizeof(MemoryFile)) = 0L;
				*(int*)(ptr + 8L / (long)sizeof(MemoryFile)) = 1;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(DownloadFile.{dtor}), (void*)ptr);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000148 RID: 328 RVA: 0x0000CAF8 File Offset: 0x0000BEF8
	internal unsafe static basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Insert_string<wchar_t,struct\u0020std::char_traits<wchar_t>,unsigned\u0020__int64>(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* _Ostr, char* _Data, ulong _Size)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		int num2 = 0;
		ulong num3;
		if (<Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) > 0L && <Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) > _Size)
		{
			num3 = <Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr) - _Size;
		}
		else
		{
			num3 = 0UL;
		}
		ulong num4 = num3;
		basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry sentry;
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry.{ctor}(ref sentry, _Ostr);
		try
		{
			if (*((ref sentry) + 8) != 0)
			{
				uint exceptionCode;
				try
				{
					if ((<Module>.std.ios_base.flags((long)(*(*_Ostr + 4L)) + _Ostr) & 448) == 64)
					{
						goto IL_C7;
					}
					while (0UL < num4)
					{
						basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr);
						ushort num5 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.fill((long)(*(*_Ostr + 4L)) + _Ostr);
						ushort num6 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputc(ptr, (char)num5);
						if (((65535 == num6) ? 1 : 0) != 0)
						{
							num2 |= 4;
							break;
						}
						num4 -= 1UL;
					}
					if (num2 == 0)
					{
						goto IL_C7;
					}
					IL_E3:
					while (0UL < num4)
					{
						basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* ptr2 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr);
						ushort num7 = <Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.fill((long)(*(*_Ostr + 4L)) + _Ostr);
						ushort num8 = <Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputc(ptr2, (char)num7);
						if (((65535 == num8) ? 1 : 0) != 0)
						{
							num2 |= 4;
							break;
						}
						num4 -= 1UL;
					}
					goto IL_12F;
					IL_C7:
					if (<Module>.std.basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>.sputn(<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.rdbuf((long)(*(*_Ostr + 4L)) + _Ostr), _Data, _Size) == _Size)
					{
						goto IL_E3;
					}
					num2 = 4;
					IL_12F:
					<Module>.std.ios_base.width((long)(*(*_Ostr + 4L)) + _Ostr, 0L);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					exceptionCode = (uint)Marshal.GetExceptionCode();
					endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
				})
				{
					uint num9 = 0U;
					<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
					try
					{
						try
						{
							<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.setstate((long)(*(*_Ostr + 4L)) + _Ostr, 4, true);
							goto IL_1A1;
						}
						catch when (delegate
						{
							// Failed to create a 'catch-when' expression
							num9 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
							endfilter(num9 != 0U);
						})
						{
						}
						if (num9 != 0U)
						{
							throw;
						}
					}
					finally
					{
						<Module>.__CxxUnregisterExceptionObject(num, (int)num9);
					}
				}
			}
			else
			{
				num2 = 4;
			}
			IL_1A1:
			<Module>.std.basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>.setstate((long)(*(*_Ostr + 4L)) + _Ostr, num2, false);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>.sentry.{dtor}), (void*)(&sentry));
			throw;
		}
		try
		{
			if (<Module>.std.uncaught_exception() == null)
			{
				<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Osfx(sentry);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}), (void*)(&sentry));
			throw;
		}
		<Module>.std.basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>._Sentry_base.{dtor}(ref sentry);
		return _Ostr;
	}

	// Token: 0x06000149 RID: 329 RVA: 0x00019160 File Offset: 0x00018560
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa* map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u…(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u…* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Keyval);
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ptr, A_0);
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == *A_0) ? 1 : 0) == 0)
		{
			long num = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
			if (<Module>.IniParser.ci_comp.()(A_0, _Keyval, num) == null)
			{
				cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa)) = 0;
				return A_1;
			}
		}
		tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&> = _Keyval;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		tuple<> tuple<>;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_(A_0, ref <Module>.std.piecewise_construct, ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, ref tuple<>);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t), ptr2);
		cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, 8);
		*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa)) = 1;
		return A_1;
	}

	// Token: 0x0600014A RID: 330 RVA: 0x000187AC File Offset: 0x00017BAC
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>* _Try_emplace<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ptr, A_0);
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0)
		{
			long num = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
			if (<Module>.IniParser.ci_comp.()(A_0, _Keyval, num) == null)
			{
				cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>)) = 0;
				return A_1;
			}
		}
		tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&> = _Keyval;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		tuple<> tuple<>;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::(A_0, ref <Module>.std.piecewise_construct, ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, ref tuple<>);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), ptr2);
		cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, 8);
		*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
		return A_1;
	}

	// Token: 0x0600014B RID: 331 RVA: 0x00012D10 File Offset: 0x00012110
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Buynode<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(_List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Next, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Prev, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* <_Val_0>)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr = <Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>._Buynode0(A_0, _Next, _Prev);
		uint exceptionCode;
		try
		{
			_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr2 = ptr + 16L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>);
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = (basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*)ptr2;
			try
			{
				*(long*)(ptr2 + 16L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>)) = 0L;
				*(long*)(ptr2 + 24L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>)) = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), (void*)ptr3);
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ptr2, <_Val_0>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)ptr3);
				throw;
			}
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x0600014C RID: 332 RVA: 0x00014F10 File Offset: 0x00014310
	internal unsafe static _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Buynode<struct\u0020FileInfoList::FILE_INFO\u0020const\u0020&>(_List_buy<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>* A_0, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Next, _List_node<FileInfoList::FILE_INFO,void\u0020*>* _Prev, FileInfoList.FILE_INFO* <_Val_0>)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr = <Module>.std._List_alloc<std::_List_base_types<FileInfoList::FILE_INFO,std::allocator<FileInfoList::FILE_INFO>\u0020>\u0020>._Buynode0(A_0, _Next, _Prev);
		uint exceptionCode;
		try
		{
			_List_node<FileInfoList::FILE_INFO,void\u0020*>* ptr2 = ptr + 16L / (long)sizeof(_List_node<FileInfoList::FILE_INFO,void\u0020*>);
			<Module>.FileInfoList.FILE_INFO.{ctor}(ptr2, <_Val_0>);
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_List_node<FileInfoList::FILE_INFO,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x0600014D RID: 333 RVA: 0x0000CD6C File Offset: 0x0000C16C
	internal unsafe static _Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* {ctor}<class\u0020std::allocator<wchar_t>\u0020>(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0, _One_then_variadic_args_t __unnamed000, allocator<wchar_t>* _Val1)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600014E RID: 334 RVA: 0x0000B15C File Offset: 0x0000A55C
	internal unsafe static _Really_trivial_ptr_iterator_tag* _Ptr_copy_cat<struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*,struct\u0020DownloadSpeed::DOWNLOAD_INFO\u0020*>(_Really_trivial_ptr_iterator_tag* A_0, DownloadSpeed.DOWNLOAD_INFO*** A_0, DownloadSpeed.DOWNLOAD_INFO*** A_1)
	{
		initblk(A_0, 0, 1L);
		return A_0;
	}

	// Token: 0x0600014F RID: 335 RVA: 0x0000B174 File Offset: 0x0000A574
	internal unsafe static void* _Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(ulong _Bytes)
	{
		ulong num = _Bytes + 39L;
		num = ((num <= _Bytes) ? ulong.MaxValue : num);
		ulong num2 = <Module>.@new(num);
		if (num2 != null)
		{
			void* ptr = (num2 + 39L) & -32L;
			*(ptr - 8L) = num2;
			return ptr;
		}
		<Module>._invalid_parameter_noinfo_noreturn();
		return 0L;
	}

	// Token: 0x06000150 RID: 336 RVA: 0x0000CDB8 File Offset: 0x0000C1B8
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::list14e08e29(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* _Al, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 80UL);
	}

	// Token: 0x06000151 RID: 337 RVA: 0x0001D438 File Offset: 0x0001C838
	internal unsafe static void* __vecDelDtor(_Ref_count_obj<LocalFile>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_Ref_count_obj<LocalFile>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 632UL, (ulong)(*ptr), ldftn(std._Ref_count_obj<LocalFile>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_Ref_count_obj<LocalFile>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 632L + 8L));
			}
			return ptr;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 632UL);
		}
		return A_0;
	}

	// Token: 0x06000152 RID: 338 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_Ref_count_obj<LocalFile>* A_0)
	{
	}

	// Token: 0x06000153 RID: 339 RVA: 0x0001C3D4 File Offset: 0x0001B7D4
	internal unsafe static void* __vecDelDtor(_Ref_count_obj<MemoryFile>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_Ref_count_obj<MemoryFile>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 96UL, (ulong)(*ptr), ldftn(std._Ref_count_obj<MemoryFile>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_Ref_count_obj<MemoryFile>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 96L + 8L));
			}
			return ptr;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 96UL);
		}
		return A_0;
	}

	// Token: 0x06000154 RID: 340 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_Ref_count_obj<MemoryFile>* A_0)
	{
	}

	// Token: 0x06000155 RID: 341 RVA: 0x0001C944 File Offset: 0x0001BD44
	internal unsafe static void* __vecDelDtor(_Ref_count_obj<IniParser>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_Ref_count_obj<IniParser>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 32UL, (ulong)(*ptr), ldftn(std._Ref_count_obj<IniParser>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_Ref_count_obj<IniParser>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 32L + 8L));
			}
			return ptr;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 32UL);
		}
		return A_0;
	}

	// Token: 0x06000156 RID: 342 RVA: 0x0000C394 File Offset: 0x0000B794
	internal unsafe static void {dtor}(_Ref_count_obj<IniParser>* A_0)
	{
	}

	// Token: 0x06000157 RID: 343 RVA: 0x000188B0 File Offset: 0x00017CB0
	internal unsafe static void {dtor}(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* A_0)
	{
		try
		{
			map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = A_0 + 32L;
			try
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::), ptr);
				throw;
			}
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = *ptr;
			<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(ptr, ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000158 RID: 344 RVA: 0x0000B1C8 File Offset: 0x0000A5C8
	internal unsafe static void deallocate(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 48L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000159 RID: 345 RVA: 0x0000DEA0 File Offset: 0x0000D2A0
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Buynode0(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Next, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Prev)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr = <Module>.std.allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>.allocate(A_0, 1L);
		if (_Next == null)
		{
			_Next = ptr;
			_Prev = ptr;
		}
		uint exceptionCode;
		try
		{
			*(long*)ptr = _Next;
			_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>);
			*(long*)ptr2 = _Prev;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x0600015A RID: 346 RVA: 0x0000CDD4 File Offset: 0x0000C1D4
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* allocate(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* A_0, ulong _Count)
	{
		ulong num = _Count * 48L;
		if (384307168202282325L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x0600015B RID: 347 RVA: 0x0000F310 File Offset: 0x0000E710
	internal unsafe static void {dtor}(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, *A_0);
	}

	// Token: 0x0600015C RID: 348 RVA: 0x0001888C File Offset: 0x00017C8C
	internal unsafe static void _Tidy(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		long num = *A_0;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = num;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2 = *num;
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
	}

	// Token: 0x0600015D RID: 349 RVA: 0x00018830 File Offset: 0x00017C30
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _First, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Last)
	{
		long num = *A_0;
		if (((_First == *num) ? 1 : 0) != 0 && ((_Last == num) ? 1 : 0) != 0)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0);
			*(long*)A_1 = *(*A_0);
			return A_1;
		}
		while (((((_First == _Last) ? 1 : 0) == 0) ? 1 : 0) != 0)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _First;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _First);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
		}
		*(long*)A_1 = _First;
		return A_1;
	}

	// Token: 0x0600015E RID: 350 RVA: 0x00018774 File Offset: 0x00017B74
	internal unsafe static void clear(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		long num = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = num;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, *(num + 8L));
		*(*A_0 + 8L) = ptr;
		*(*A_0) = ptr;
		*(*A_0 + 16L) = ptr;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x0600015F RID: 351 RVA: 0x0001844C File Offset: 0x0001784C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Extract(A_0, _Where);
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, ptr);
		*(long*)A_1 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		return A_1;
	}

	// Token: 0x06000160 RID: 352 RVA: 0x0000DF88 File Offset: 0x0000D388
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Extract(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _Where);
		long num = *(long*)ptr;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr4;
		long num4;
		if (*(num + 25L) != 0)
		{
			ptr2 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		}
		else if (*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 25L) != 0)
		{
			ptr2 = num;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = _Where;
			long num2 = _Where + 16L;
			long num3 = num2;
			ptr2 = *num2;
			if (_Where != ptr)
			{
				*(num + 8L) = _Where;
				*(long*)ptr3 = *(long*)ptr;
				if (ptr3 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)))
				{
					ptr4 = ptr3;
				}
				else
				{
					ptr4 = *(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
					{
						*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr4;
					}
					*(long*)ptr4 = ptr2;
					*num3 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L) = ptr3;
				}
				num4 = *A_0 + 8L;
				if (*num4 == ptr)
				{
					*num4 = ptr3;
				}
				else
				{
					long num5 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*num5 == ptr)
					{
						*num5 = ptr3;
					}
					else
					{
						*(num5 + 16L) = ptr3;
					}
				}
				*(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				sbyte b = *(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)));
				*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = b;
				goto IL_1C3;
			}
		}
		ptr4 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr4;
		}
		num4 = *A_0 + 8L;
		if (*num4 == ptr)
		{
			*num4 = ptr2;
		}
		else if (*(long*)ptr4 == ptr)
		{
			*(long*)ptr4 = ptr2;
		}
		else
		{
			*(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr2;
		}
		long num6 = *A_0;
		if (*num6 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr5;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
			{
				ptr5 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr6 = ptr2;
				long num7 = *(long*)ptr2;
				if (*(num7 + 25L) == 0)
				{
					long num8 = num7;
					do
					{
						ptr6 = num8;
						num8 = *(long*)ptr6;
					}
					while (*(num8 + 25L) == 0);
				}
				ptr5 = ptr6;
			}
			*num6 = ptr5;
		}
		long num9 = *A_0 + 16L;
		if (*num9 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr7;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
			{
				ptr7 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr8 = ptr2;
				long num10 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				if (*(num10 + 25L) == 0)
				{
					long num11 = num10;
					do
					{
						ptr8 = num11;
						num11 = *(long*)(ptr8 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					}
					while (*(num11 + 25L) == 0);
				}
				ptr7 = ptr8;
			}
			*num9 = ptr7;
		}
		IL_1C3:
		if (*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 1)
		{
			if (ptr2 != *(*A_0 + 8L))
			{
				while (*(sbyte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 1)
				{
					ulong num12 = (ulong)(*(long*)ptr4);
					if (ptr2 == num12)
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
							ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)ptr3 + 24L) != 1 || *(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) != 1)
							{
								if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) == 1)
								{
									*(*(long*)ptr3 + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr3);
									ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr9 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr9);
								*(byte*)ptr9 = 1;
								*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					else
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = num12;
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
							ptr3 = *(long*)ptr4;
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) != 1 || *(*(long*)ptr3 + 24L) != 1)
							{
								if (*(*(long*)ptr3 + 24L) == 1)
								{
									*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr3);
									ptr3 = *(long*)ptr4;
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr10 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr10);
								*(byte*)ptr10 = 1;
								*(*(long*)ptr3 + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					ptr4 = *(long*)(ptr4 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (ptr2 == *(*A_0 + 8L))
					{
						break;
					}
				}
			}
			*(byte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
		}
		ulong num13 = (ulong)(*(A_0 + 8L));
		if (0UL < num13)
		{
			*(A_0 + 8L) = (long)(num13 - 1UL);
		}
		return ptr;
	}

	// Token: 0x06000161 RID: 353 RVA: 0x00018484 File Offset: 0x00017884
	internal unsafe static void _Erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Rootnode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = _Rootnode;
		if (*(sbyte*)(_Rootnode + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)));
				ptr = *(long*)ptr;
				<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.__delDtor(_Rootnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), 0U);
				<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, _Rootnode);
				_Rootnode = ptr;
			}
			while (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0);
		}
	}

	// Token: 0x06000162 RID: 354 RVA: 0x0000B1F8 File Offset: 0x0000A5F8
	internal unsafe static void _Rrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(long*)_Wherenode;
		*(long*)_Wherenode = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			if (_Wherenode == *(num3 + 16L))
			{
				*(num3 + 16L) = ptr;
			}
			else
			{
				*num3 = ptr;
			}
		}
		*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x06000163 RID: 355 RVA: 0x0000B268 File Offset: 0x0000A668
	internal unsafe static void _Lrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)ptr;
		long num = *(long*)ptr;
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			if (_Wherenode == *num3)
			{
				*num3 = ptr;
			}
			else
			{
				*(num3 + 16L) = ptr;
			}
		}
		*(long*)ptr = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x06000164 RID: 356 RVA: 0x0000CDB8 File Offset: 0x0000C1B8
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u00…(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* _Al, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 80UL);
	}

	// Token: 0x06000165 RID: 357 RVA: 0x00010784 File Offset: 0x0000FB84
	internal unsafe static FileInfoList.FILE_INFO* {ctor}(FileInfoList.FILE_INFO* A_0, FileInfoList.FILE_INFO* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Construct_lv_contents(A_0, A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			FileInfoList.FILE_INFO* ptr = A_0 + 32L;
			try
			{
				*(ptr + 16L) = 0L;
				*(ptr + 24L) = 0L;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), ptr);
				throw;
			}
			try
			{
				<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Construct_lv_contents(ptr, A_0 + 32L);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			try
			{
				FileInfoList.FILE_INFO* ptr2 = A_0 + 64L;
				try
				{
					*(ptr2 + 16L) = 0L;
					*(ptr2 + 24L) = 0L;
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), ptr2);
					throw;
				}
				try
				{
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Construct_lv_contents(ptr2, A_0 + 64L);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), ptr2);
					throw;
				}
				try
				{
					*(A_0 + 96L) = *(A_0 + 96L);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)64L));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(A_0 + (byte*)32L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000166 RID: 358 RVA: 0x0001797C File Offset: 0x00016D7C
	internal unsafe static void* __delDtor(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, uint A_0)
	{
		try
		{
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr = A_0 + 32L;
			try
			{
				<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 48UL);
		}
		return A_0;
	}

	// Token: 0x06000167 RID: 359 RVA: 0x00017808 File Offset: 0x00016C08
	internal unsafe static void {dtor}(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		try
		{
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr = A_0 + 32L;
			try
			{
				<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000168 RID: 360 RVA: 0x00010968 File Offset: 0x0000FD68
	internal unsafe static void {dtor}(_List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(A_0);
	}

	// Token: 0x06000169 RID: 361 RVA: 0x0000F328 File Offset: 0x0000E728
	internal unsafe static void {dtor}(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.delete(*A_0, 48UL);
	}

	// Token: 0x0600016A RID: 362 RVA: 0x00016CCC File Offset: 0x000160CC
	internal unsafe static void clear(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		long num = *A_0;
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr = *num;
		long num2 = num;
		*num2 = num2;
		long num3 = *A_0;
		*(num3 + 8L) = num3;
		*(A_0 + 8L) = 0L;
		if (ptr != *A_0)
		{
			_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr2;
			do
			{
				ptr2 = *(long*)ptr;
				<Module>.std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>._Freenode(A_0, ptr);
				ptr = ptr2;
			}
			while (ptr2 != *A_0);
		}
	}

	// Token: 0x0600016B RID: 363 RVA: 0x00014FF4 File Offset: 0x000143F4
	internal unsafe static void _Freenode(_List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = _Pnode + 16L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>);
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
			throw;
		}
		<Module>.delete((void*)_Pnode, 48UL);
	}

	// Token: 0x0600016C RID: 364 RVA: 0x00018EB4 File Offset: 0x000182B4
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Where, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = 0L;
		bool flag = false;
		uint exceptionCode;
		try
		{
			if (*(A_0 + 8L) == 0L)
			{
				long num2 = *A_0;
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, true, num2, _Val, _Newnode);
				return A_1;
			}
			long num3 = *(*A_0);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num3, A_0);
			if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) != 0)
			{
				long num4 = _Where + 32L;
				if (<Module>.IniParser.ci_comp.()(A_0, _Val, num4) != null)
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, true, _Where, _Val, _Newnode);
					return A_1;
				}
			}
			else
			{
				long num5 = *A_0;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num5, A_0);
				if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) != 0)
				{
					long num6 = *(*A_0 + 16L) + 32L;
					if (<Module>.IniParser.ci_comp.()(A_0, num6, _Val) != null)
					{
						long num7 = *(*A_0 + 16L);
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, false, num7, _Val, _Newnode);
						return A_1;
					}
				}
				else
				{
					long num8 = _Where + 32L;
					long num9 = num8;
					if (<Module>.IniParser.ci_comp.()(A_0, _Val, num9) != null)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
						long num10 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st + 32L;
						if (<Module>.IniParser.ci_comp.()(A_0, num10, _Val) != null)
						{
							if (*(*(tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st + 16L) + 25L) != 0)
							{
								<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, false, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st, _Val, _Newnode);
								return A_1;
							}
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, true, _Where, _Val, _Newnode);
							return A_1;
						}
					}
					long num11 = num8;
					if (<Module>.IniParser.ci_comp.()(A_0, num11, _Val) != null)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
						long num12 = *A_0;
						_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num12, A_0);
						if (((tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) == 0)
						{
							long num13 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st + 32L;
							if (<Module>.IniParser.ci_comp.()(A_0, _Val, num13) == null)
							{
								goto IL_1D9;
							}
						}
						if (*(*(_Where + 16L) + 25L) != 0)
						{
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, false, _Where, _Val, _Newnode);
							return A_1;
						}
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, A_1, true, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st, _Val, _Newnode);
						return A_1;
					}
				}
			}
			IL_1D9:;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num14 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num14 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num14 != 0U);
				})
				{
				}
				if (num14 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num14);
			}
		}
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pa;
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pa, flag, _Val, _Newnode);
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600016D RID: 365 RVA: 0x00018A20 File Offset: 0x00017E20
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0, piecewise_construct_t* <_Val_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Val_1>, tuple<>* <_Val_2>)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_(A_0);
		*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
		*(byte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
			<Module>.std._Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<(A_0, ptr2, <_Val_0>, <_Val_1>, <_Val_2>);
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_(A_0, ptr);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x0600016E RID: 366 RVA: 0x000184C8 File Offset: 0x000178C8
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Insert_hint<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020&,struct\u0020std::_Tree_node<struc8(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Where, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
		bool flag = false;
		uint exceptionCode;
		try
		{
			if (*(A_0 + 8L) == 0L)
			{
				long num2 = *A_0;
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, true, num2, _Val, _Newnode);
				return A_1;
			}
			long num3 = *(*A_0);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, num3, A_0);
			if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>) ? 1 : 0) != 0)
			{
				long num4 = _Where + 32L;
				if (<Module>.IniParser.ci_comp.()(A_0, _Val, num4) != null)
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, true, _Where, _Val, _Newnode);
					return A_1;
				}
			}
			else
			{
				long num5 = *A_0;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, num5, A_0);
				if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) != 0)
				{
					long num6 = *(*A_0 + 16L) + 32L;
					if (<Module>.IniParser.ci_comp.()(A_0, num6, _Val) != null)
					{
						long num7 = *(*A_0 + 16L);
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, false, num7, _Val, _Newnode);
						return A_1;
					}
				}
				else
				{
					long num8 = _Where + 32L;
					long num9 = num8;
					if (<Module>.IniParser.ci_comp.()(A_0, _Val, num9) != null)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
						long num10 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
						if (<Module>.IniParser.ci_comp.()(A_0, num10, _Val) != null)
						{
							if (*(*(tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 16L) + 25L) != 0)
							{
								<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, false, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, _Val, _Newnode);
								return A_1;
							}
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, true, _Where, _Val, _Newnode);
							return A_1;
						}
					}
					long num11 = num8;
					if (<Module>.IniParser.ci_comp.()(A_0, num11, _Val) != null)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
						long num12 = *A_0;
						_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3, num12, A_0);
						if (((tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3) ? 1 : 0) == 0)
						{
							long num13 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
							if (<Module>.IniParser.ci_comp.()(A_0, _Val, num13) == null)
							{
								goto IL_1D9;
							}
						}
						if (*(*(_Where + 16L) + 25L) != 0)
						{
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, false, _Where, _Val, _Newnode);
							return A_1;
						}
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, A_1, true, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, _Val, _Newnode);
						return A_1;
					}
				}
			}
			IL_1D9:;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num14 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num14 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num14 != 0U);
				})
				{
				}
				if (num14 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num14);
			}
		}
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool> pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>,bool>;
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>,bool>, flag, _Val, _Newnode);
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600016F RID: 367 RVA: 0x00017F98 File Offset: 0x00017398
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Buynode<struct\u0020std::piecewise_construct_t\u0020const\u0020&,class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>,class\u0020std::tuple<>\u0020>(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0, piecewise_construct_t* <_Val_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Val_1>, tuple<>* <_Val_2>)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::(A_0);
		*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
		*(byte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
			tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>;
			cpblk(ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, <_Val_1>, 8);
			tuple<> tuple<>;
			<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{ctor}<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(ptr2, *<_Val_0>, (tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>*)(&tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>), (tuple<>*)(&tuple<>));
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::(A_0, ptr);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000170 RID: 368 RVA: 0x0000CE24 File Offset: 0x0000C224
	internal unsafe static void _Freenode0(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, _Pnode);
	}

	// Token: 0x06000171 RID: 369 RVA: 0x0000E30C File Offset: 0x0000D70C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Buynode0(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>.allocate(A_0, 1L);
		uint exceptionCode;
		try
		{
			*(long*)ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
			*(long*)ptr2 = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
			*(long*)ptr3 = *A_0;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000172 RID: 370 RVA: 0x0001809C File Offset: 0x0001749C
	internal unsafe static void _Destroy_if_node(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Newnode)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.__delDtor(_Newnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), 0U);
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, _Newnode);
	}

	// Token: 0x06000173 RID: 371 RVA: 0x0000CE38 File Offset: 0x0000C238
	internal unsafe static void _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, _Pnode);
	}

	// Token: 0x06000174 RID: 372 RVA: 0x0000E3FC File Offset: 0x0000D7FC
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = <Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::(A_0, 1L);
		uint exceptionCode;
		try
		{
			*(long*)ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
			*(long*)ptr2 = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
			*(long*)ptr3 = *A_0;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000175 RID: 373 RVA: 0x00018B04 File Offset: 0x00017F04
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Newnode)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(_Newnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, _Newnode);
	}

	// Token: 0x06000176 RID: 374 RVA: 0x0000B2D0 File Offset: 0x0000A6D0
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* --(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		long num = *A_0;
		if (*(num + 25L) != 0)
		{
			*A_0 = *(num + 16L);
		}
		else
		{
			long num2 = *num;
			if (*(num2 + 25L) != 0)
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(num + 8L);
				if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
				{
					while (*A_0 == *(long*)ptr)
					{
						*A_0 = ptr;
						ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
						if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
						{
							break;
						}
					}
				}
				if (*(*A_0 + 25L) == 0)
				{
					*A_0 = ptr;
				}
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = num2;
				long num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				if (*(num3 + 25L) == 0)
				{
					do
					{
						ptr2 = num3;
						num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					}
					while (*(num3 + 25L) == 0);
				}
				*A_0 = ptr2;
			}
		}
		return A_0;
	}

	// Token: 0x06000177 RID: 375 RVA: 0x0000CE4C File Offset: 0x0000C24C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* allocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* A_0, ulong _Count)
	{
		ulong num = _Count * 80L;
		if (230584300921369395L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x06000178 RID: 376 RVA: 0x0000B35C File Offset: 0x0000A75C
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000179 RID: 377 RVA: 0x0000B38C File Offset: 0x0000A78C
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* --(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* A_0)
	{
		long num = *A_0;
		if (*(num + 25L) != 0)
		{
			*A_0 = *(num + 16L);
		}
		else
		{
			long num2 = *num;
			if (*(num2 + 25L) != 0)
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(num + 8L);
				if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
				{
					while (*A_0 == *(long*)ptr)
					{
						*A_0 = ptr;
						ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
						if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
						{
							break;
						}
					}
				}
				if (*(*A_0 + 25L) == 0)
				{
					*A_0 = ptr;
				}
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = num2;
				long num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				if (*(num3 + 25L) == 0)
				{
					do
					{
						ptr2 = num3;
						num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					}
					while (*(num3 + 25L) == 0);
				}
				*A_0 = ptr2;
			}
		}
		return A_0;
	}

	// Token: 0x0600017A RID: 378 RVA: 0x0000CE4C File Offset: 0x0000C24C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* allocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* A_0, ulong _Count)
	{
		ulong num = _Count * 80L;
		if (230584300921369395L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x0600017B RID: 379 RVA: 0x0000B35C File Offset: 0x0000A75C
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x0600017C RID: 380 RVA: 0x00018B24 File Offset: 0x00017F24
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, [MarshalAs(UnmanagedType.U1)] bool _Addleft, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Wherenode, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Node)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (230584300921369394UL <= num)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Node);
			<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@));
		}
		*(A_0 + 8L) = (long)(num + 1UL);
		*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = _Wherenode;
		ulong num2 = (ulong)(*A_0);
		if (_Wherenode == num2)
		{
			*(num2 + 8UL) = _Node;
			*(*A_0) = _Node;
			*(*A_0 + 16L) = _Node;
		}
		else if (_Addleft)
		{
			*(long*)_Wherenode = _Node;
			num2 = (ulong)(*A_0);
			if (_Wherenode == *num2)
			{
				*num2 = _Node;
			}
		}
		else
		{
			*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = _Node;
			long num3 = *A_0 + 16L;
			if (_Wherenode == *num3)
			{
				*num3 = _Node;
			}
		}
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = _Node;
		if (*(*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) == 0)
		{
			do
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
				long num4 = *(long*)ptr2;
				long num5 = *(num4 + 8L);
				ulong num6 = (ulong)(*num5);
				if (num4 == (long)num6)
				{
					_Wherenode = *(num5 + 16L);
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *(num4 + 16L))
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L));
					}
				}
				else
				{
					_Wherenode = num6;
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *num4)
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L));
					}
				}
			}
			while (*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) == 0);
		}
		*(*(*A_0 + 8L) + 24L) = 1;
		*(long*)A_1 = _Node;
		return A_1;
	}

	// Token: 0x0600017D RID: 381 RVA: 0x00018CDC File Offset: 0x000180DC
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa* A_1, [MarshalAs(UnmanagedType.U1)] bool _Leftish, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			bool flag = true;
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
			{
				ptr = ptr2;
				if (_Leftish)
				{
					_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
					flag = ((<Module>.IniParser.ci_comp.()(A_0, ptr3, _Val) == 0) ? 1 : 0) != 0;
				}
				else
				{
					_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr4 = ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
					flag = <Module>.IniParser.ci_comp.()(A_0, _Val, ptr4) != null;
				}
				ptr2 = ((!flag) ? (*(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t))) : (*(long*)ptr2));
			}
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = 0L;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ptr, A_0);
			if (flag)
			{
				long num2 = *(*A_0);
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, num2, A_0);
				if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) != 0)
				{
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* ptr5 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, true, ptr, _Val, _Newnode);
					cpblk(A_1, ptr5, 8);
					*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa)) = 1;
					return A_1;
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas);
			}
			long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
			if (<Module>.IniParser.ci_comp.()(A_0, num3, _Val) != null)
			{
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* ptr6 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, flag, ptr, _Val, _Newnode);
				cpblk(A_1, ptr6, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa)) = 1;
				return A_1;
			}
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Newnode);
			cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, 8);
			*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pa)) = 0;
			return A_1;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num4 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num4 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num4 != 0U);
				})
				{
				}
				if (num4 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num4);
			}
		}
		return 0L;
	}

	// Token: 0x0600017E RID: 382 RVA: 0x00018954 File Offset: 0x00017D54
	internal unsafe static void construct<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std:71718477(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* __unnamed000, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Ptr, piecewise_construct_t* <_Args_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Args_1>, tuple<>* <_Args_2>)
	{
		tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>;
		cpblk(ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, <_Args_1>, 8);
		piecewise_construct_t piecewise_construct_t = *<_Args_0>;
		try
		{
			*(_Ptr + 16L) = 0L;
			*(_Ptr + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), _Ptr);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(_Ptr, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), _Ptr);
			throw;
		}
		try
		{
			map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = _Ptr + 32L;
			*ptr = 0L;
			*(ptr + 8L) = 0L;
			map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr2 = ptr;
			*ptr2 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::(ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), _Ptr);
			throw;
		}
	}

	// Token: 0x0600017F RID: 383 RVA: 0x000180BC File Offset: 0x000174BC
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020&,struct\u0020std::_Tree_node<struct\u…(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, [MarshalAs(UnmanagedType.U1)] bool _Addleft, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Wherenode, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Node)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (230584300921369394UL <= num)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Node);
			<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@));
		}
		*(A_0 + 8L) = (long)(num + 1UL);
		*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = _Wherenode;
		ulong num2 = (ulong)(*A_0);
		if (_Wherenode == num2)
		{
			*(num2 + 8UL) = _Node;
			*(*A_0) = _Node;
			*(*A_0 + 16L) = _Node;
		}
		else if (_Addleft)
		{
			*(long*)_Wherenode = _Node;
			num2 = (ulong)(*A_0);
			if (_Wherenode == *num2)
			{
				*num2 = _Node;
			}
		}
		else
		{
			*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = _Node;
			long num3 = *A_0 + 16L;
			if (_Wherenode == *num3)
			{
				*num3 = _Node;
			}
		}
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = _Node;
		if (*(*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) == 0)
		{
			do
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
				long num4 = *(long*)ptr2;
				long num5 = *(num4 + 8L);
				ulong num6 = (ulong)(*num5);
				if (num4 == (long)num6)
				{
					_Wherenode = *(num5 + 16L);
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *(num4 + 16L))
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L));
					}
				}
				else
				{
					_Wherenode = num6;
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *num4)
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L));
					}
				}
			}
			while (*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) == 0);
		}
		*(*(*A_0 + 8L) + 24L) = 1;
		*(long*)A_1 = _Node;
		return A_1;
	}

	// Token: 0x06000180 RID: 384 RVA: 0x00018274 File Offset: 0x00017674
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>* _Insert_nohint<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020&,struct\u0020std::_Tree_node<str9(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>* A_1, [MarshalAs(UnmanagedType.U1)] bool _Leftish, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			bool flag = true;
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
			{
				ptr = ptr2;
				if (_Leftish)
				{
					_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
					flag = ((<Module>.IniParser.ci_comp.()(A_0, ptr3, _Val) == 0) ? 1 : 0) != 0;
				}
				else
				{
					_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr4 = ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
					flag = <Module>.IniParser.ci_comp.()(A_0, _Val, ptr4) != null;
				}
				ptr2 = ((!flag) ? (*(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>))) : (*(long*)ptr2));
			}
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = 0L;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ptr, A_0);
			if (flag)
			{
				long num2 = *(*A_0);
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, num2, A_0);
				if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) != 0)
				{
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3;
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr5 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3, true, ptr, _Val, _Newnode);
					cpblk(A_1, ptr5, 8);
					*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
					return A_1;
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
			}
			long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
			if (<Module>.IniParser.ci_comp.()(A_0, num3, _Val) != null)
			{
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>4;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr6 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>4, flag, ptr, _Val, _Newnode);
				cpblk(A_1, ptr6, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
				return A_1;
			}
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Newnode);
			cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, 8);
			*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,bool>)) = 0;
			return A_1;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num4 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num4 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num4 != 0U);
				})
				{
				}
				if (num4 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num4);
			}
		}
		return 0L;
	}

	// Token: 0x06000181 RID: 385 RVA: 0x000178A8 File Offset: 0x00016CA8
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* {ctor}<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, piecewise_construct_t __unnamed000, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Val1, tuple<>* _Val2)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = *(long*)_Val1;
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_0, ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr2 = A_0 + 32L;
			*ptr2 = 0L;
			*(ptr2 + 8L) = 0L;
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr3 = ptr2;
			*ptr3 = <Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>._Buynode0(ptr3, null, null);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000182 RID: 386 RVA: 0x0000CEB0 File Offset: 0x0000C2B0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Buyheadnode(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>.allocate(A_0, 1L);
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = ptr;
			*(long*)ptr2 = ptr2;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** ptr3 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
			*ptr3 = ptr;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** ptr4 = ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
			*ptr4 = ptr;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
		*(byte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
		return ptr;
	}

	// Token: 0x06000183 RID: 387 RVA: 0x0001D490 File Offset: 0x0001C890
	internal unsafe static void* ??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$F$4PPPPPPPM@A@EAAPEAXI@Z(basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint A_0)
	{
		basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0;
		A_0 = ptr - (long)(*(ptr + -4));
		jmp(std.basic_stringstream<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.__vecDelDtor());
	}

	// Token: 0x06000184 RID: 388 RVA: 0x0001E9D0 File Offset: 0x0001DDD0
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[HandleProcessCorruptedStateExceptions]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void ___CxxCallUnwindDtor(method pDtor, void* pThis)
	{
		try
		{
			calli(System.Void(System.Void*), pThis, pDtor);
		}
		catch when (endfilter(<Module>.__FrameUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x06000185 RID: 389 RVA: 0x000010F8 File Offset: 0x000004F8
	internal static void ??__E?A0x8579fbf1@_Fac_tidy_reg@std@@YMXXZ()
	{
		<Module>._atexit_m(ldftn(?A0x8579fbf1.??__F?A0x8579fbf1@_Fac_tidy_reg@std@@YMXXZ));
	}

	// Token: 0x06000186 RID: 390 RVA: 0x001094F8 File Offset: 0x001088F8
	internal unsafe static void ??__F?A0x8579fbf1@_Fac_tidy_reg@std@@YMXXZ()
	{
		if (<Module>.std.?A0x8579fbf1._Fac_head != null)
		{
			do
			{
				_Fac_node* ptr = <Module>.std.?A0x8579fbf1._Fac_head;
				<Module>.std.?A0x8579fbf1._Fac_head = *(long*)<Module>.std.?A0x8579fbf1._Fac_head;
				long num = *(long*)(ptr + 8L / (long)sizeof(_Fac_node));
				_Facet_base* ptr2 = calli(std._Facet_base* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), (IntPtr)num, *(*num + 16L));
				if (ptr2 != null)
				{
					long num2 = *(*(long*)ptr2);
					void* ptr3 = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), ptr2, 1U, num2);
				}
				<Module>.delete((void*)ptr, 16UL);
			}
			while (<Module>.std.?A0x8579fbf1._Fac_head != null);
		}
	}

	// Token: 0x06000187 RID: 391 RVA: 0x0001EA14 File Offset: 0x0001DE14
	internal unsafe static void _Facet_Register_m(_Facet_base* _This)
	{
		_Fac_node* ptr = <Module>.@new(16UL);
		_Fac_node* ptr2;
		try
		{
			if (ptr != null)
			{
				*(long*)ptr = <Module>.std.?A0x8579fbf1._Fac_head;
				*(long*)(ptr + 8L / (long)sizeof(_Fac_node)) = _This;
				ptr2 = ptr;
			}
			else
			{
				ptr2 = null;
			}
		}
		catch
		{
			<Module>.delete((void*)ptr, 16UL);
			throw;
		}
		<Module>.std.?A0x8579fbf1._Fac_head = ptr2;
	}

	// Token: 0x06000188 RID: 392 RVA: 0x0001EAE8 File Offset: 0x0001DEE8
	[HandleProcessCorruptedStateExceptions]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	internal unsafe static void __ehvec_dtor(void* ptr, ulong size, ulong count, method destructor)
	{
		bool flag = false;
		ptr = (void*)(size * count + (byte*)ptr);
		try
		{
			for (;;)
			{
				long num = (long)count;
				count -= 1UL;
				if (num == 0L)
				{
					break;
				}
				ptr = (void*)((byte*)ptr - size);
				calli(System.Void(System.Void*), ptr, destructor);
			}
			flag = true;
		}
		finally
		{
			if (!flag)
			{
				<Module>.__ArrayUnwind(ptr, size, count, destructor);
			}
		}
	}

	// Token: 0x06000189 RID: 393 RVA: 0x0001EA70 File Offset: 0x0001DE70
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static int ArrayUnwindFilter(_EXCEPTION_POINTERS* pExPtrs)
	{
		if (*(*(long*)pExPtrs) != -529697949)
		{
			return 0;
		}
		<Module>.terminate();
		return 0;
	}

	// Token: 0x0600018A RID: 394 RVA: 0x0001EA90 File Offset: 0x0001DE90
	[HandleProcessCorruptedStateExceptions]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	internal unsafe static void __ArrayUnwind(void* ptr, ulong size, ulong count, method destructor)
	{
		try
		{
			for (ulong num = 0UL; num != count; num += 1UL)
			{
				ptr = (void*)((byte*)ptr - size);
				calli(System.Void(System.Void*), ptr, destructor);
			}
		}
		catch when (endfilter(<Module>.?A0x94e83ccb.ArrayUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x0600018B RID: 395 RVA: 0x0001F2E0 File Offset: 0x0001E6E0
	internal static void <CrtImplementationDetails>.ThrowNestedModuleLoadException(Exception innerException, Exception nestedException)
	{
		throw new ModuleLoadExceptionHandlerException("A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n", innerException, nestedException);
	}

	// Token: 0x0600018C RID: 396 RVA: 0x0001ECBC File Offset: 0x0001E0BC
	internal static void <CrtImplementationDetails>.ThrowModuleLoadException(string errorMessage)
	{
		throw new ModuleLoadException(errorMessage);
	}

	// Token: 0x0600018D RID: 397 RVA: 0x0001ECD0 File Offset: 0x0001E0D0
	internal static void <CrtImplementationDetails>.ThrowModuleLoadException(string errorMessage, Exception innerException)
	{
		throw new ModuleLoadException(errorMessage, innerException);
	}

	// Token: 0x0600018E RID: 398 RVA: 0x0001EDEC File Offset: 0x0001E1EC
	internal static void <CrtImplementationDetails>.RegisterModuleUninitializer(EventHandler handler)
	{
		ModuleUninitializer._ModuleUninitializer.AddHandler(handler);
	}

	// Token: 0x0600018F RID: 399 RVA: 0x0001EE04 File Offset: 0x0001E204
	[SecuritySafeCritical]
	internal unsafe static Guid <CrtImplementationDetails>.FromGUID(_GUID* guid)
	{
		Guid guid2 = new Guid((uint)(*guid), *(guid + 4L), *(guid + 6L), *(guid + 8L), *(guid + 9L), *(guid + 10L), *(guid + 11L), *(guid + 12L), *(guid + 13L), *(guid + 14L), *(guid + 15L));
		return guid2;
	}

	// Token: 0x06000190 RID: 400 RVA: 0x0001EE54 File Offset: 0x0001E254
	[SecurityCritical]
	internal unsafe static int __get_default_appdomain(IUnknown** ppUnk)
	{
		ICorRuntimeHost* ptr = null;
		int num;
		try
		{
			Guid guid = <Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e);
			ptr = (ICorRuntimeHost*)RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(<Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e), guid).ToPointer();
			goto IL_36;
		}
		catch (Exception ex)
		{
			num = Marshal.GetHRForException(ex);
		}
		if (num < 0)
		{
			return num;
		}
		IL_36:
		long num2 = *(*(long*)ptr + 104L);
		num = calli(System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,IUnknown**), ptr, ppUnk, num2);
		ICorRuntimeHost* ptr2 = ptr;
		uint num3 = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr2, *(*(long*)ptr2 + 16L));
		return num;
	}

	// Token: 0x06000191 RID: 401 RVA: 0x0001EED4 File Offset: 0x0001E2D4
	internal unsafe static void __release_appdomain(IUnknown* ppUnk)
	{
		uint num = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ppUnk, *(*(long*)ppUnk + 16L));
	}

	// Token: 0x06000192 RID: 402 RVA: 0x0001EEF0 File Offset: 0x0001E2F0
	[SecurityCritical]
	internal unsafe static AppDomain <CrtImplementationDetails>.GetDefaultDomain()
	{
		IUnknown* ptr = null;
		int num = <Module>.__get_default_appdomain(&ptr);
		if (num >= 0)
		{
			try
			{
				IntPtr intPtr = new IntPtr((void*)ptr);
				return (AppDomain)Marshal.GetObjectForIUnknown(intPtr);
			}
			finally
			{
				<Module>.__release_appdomain(ptr);
			}
		}
		Marshal.ThrowExceptionForHR(num);
		return null;
	}

	// Token: 0x06000193 RID: 403 RVA: 0x0001EF50 File Offset: 0x0001E350
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.DoCallBackInDefaultDomain(method function, void* cookie)
	{
		Guid guid = <Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02);
		ICLRRuntimeHost* ptr = (ICLRRuntimeHost*)RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(<Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02), guid).ToPointer();
		try
		{
			AppDomain appDomain = <Module>.<CrtImplementationDetails>.GetDefaultDomain();
			long num = *(*(long*)ptr + 64L);
			int num2 = calli(System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong),System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl) (System.Void*),System.Void*), ptr, appDomain.Id, function, cookie, num);
			if (num2 < 0)
			{
				Marshal.ThrowExceptionForHR(num2);
			}
		}
		finally
		{
			ICLRRuntimeHost* ptr2 = ptr;
			uint num3 = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr2, *(*(long*)ptr2 + 16L));
		}
	}

	// Token: 0x06000194 RID: 404 RVA: 0x0001EFDC File Offset: 0x0001E3DC
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __scrt_is_safe_for_managed_code()
	{
		return (<Module>.__scrt_native_dllmain_reason <= 1U) ? 0 : 1;
	}

	// Token: 0x06000195 RID: 405 RVA: 0x0001F010 File Offset: 0x0001E410
	[SecuritySafeCritical]
	internal unsafe static int <CrtImplementationDetails>.DefaultDomain.DoNothing(void* cookie)
	{
		GC.KeepAlive(int.MaxValue);
		return 0;
	}

	// Token: 0x06000196 RID: 406 RVA: 0x0001F030 File Offset: 0x0001E430
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool <CrtImplementationDetails>.DefaultDomain.HasPerProcess()
	{
		if (<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)2)
		{
			void** ptr = (void**)(&<Module>.__xc_mp_a);
			if ((ref <Module>.__xc_mp_a) < (ref <Module>.__xc_mp_z))
			{
				while (*(long*)ptr == 0L)
				{
					ptr += 8L / (long)sizeof(void*);
					if (ptr >= (void**)(&<Module>.__xc_mp_z))
					{
						goto IL_35;
					}
				}
				<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_35:
			<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)0;
			return 0;
		}
		return (<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)(-1)) ? 1 : 0;
	}

	// Token: 0x06000197 RID: 407 RVA: 0x0001F084 File Offset: 0x0001E484
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool <CrtImplementationDetails>.DefaultDomain.HasNative()
	{
		if (<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)2)
		{
			void** ptr = (void**)(&<Module>.__xi_a);
			if ((ref <Module>.__xi_a) < (ref <Module>.__xi_z))
			{
				while (*(long*)ptr == 0L)
				{
					ptr += 8L / (long)sizeof(void*);
					if (ptr >= (void**)(&<Module>.__xi_z))
					{
						goto IL_35;
					}
				}
				<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_35:
			void** ptr2 = (void**)(&<Module>.__xc_a);
			if ((ref <Module>.__xc_a) < (ref <Module>.__xc_z))
			{
				while (*(long*)ptr2 == 0L)
				{
					ptr2 += 8L / (long)sizeof(void*);
					if (ptr2 >= (void**)(&<Module>.__xc_z))
					{
						goto IL_62;
					}
				}
				<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_62:
			<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)0;
			return 0;
		}
		return (<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)(-1)) ? 1 : 0;
	}

	// Token: 0x06000198 RID: 408 RVA: 0x0001F104 File Offset: 0x0001E504
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.DefaultDomain.NeedsInitialization()
	{
		int num;
		if ((<Module>.<CrtImplementationDetails>.DefaultDomain.HasPerProcess() != null && !<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA) || (<Module>.<CrtImplementationDetails>.DefaultDomain.HasNative() != null && !<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA && <Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)0))
		{
			num = 1;
		}
		else
		{
			num = 0;
		}
		return (byte)num;
	}

	// Token: 0x06000199 RID: 409 RVA: 0x0001F13C File Offset: 0x0001E53C
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.DefaultDomain.NeedsUninitialization()
	{
		return <Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;
	}

	// Token: 0x0600019A RID: 410 RVA: 0x0001F150 File Offset: 0x0001E550
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.DefaultDomain.Initialize()
	{
		<Module>.<CrtImplementationDetails>.DoCallBackInDefaultDomain(<Module>.__unep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z, null);
	}

	// Token: 0x0600019B RID: 411 RVA: 0x00001114 File Offset: 0x00000514
	internal static void ??__E?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA@@YMXXZ()
	{
		<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 0;
	}

	// Token: 0x0600019C RID: 412 RVA: 0x00001128 File Offset: 0x00000528
	internal static void ??__E?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA@@YMXXZ()
	{
		<Module>.?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 0;
	}

	// Token: 0x0600019D RID: 413 RVA: 0x0000113C File Offset: 0x0000053C
	internal static void ??__E?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA@@YMXXZ()
	{
		<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA = false;
	}

	// Token: 0x0600019E RID: 414 RVA: 0x00001150 File Offset: 0x00000550
	internal static void ??__E?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x0600019F RID: 415 RVA: 0x00001164 File Offset: 0x00000564
	internal static void ??__E?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x060001A0 RID: 416 RVA: 0x00001178 File Offset: 0x00000578
	internal static void ??__E?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x060001A1 RID: 417 RVA: 0x0000118C File Offset: 0x0000058C
	internal static void ??__E?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x060001A2 RID: 418 RVA: 0x0001F334 File Offset: 0x0001E734
	[SecuritySafeCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeVtables(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during vtable initialization.\n");
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initterm_m((method*)(&<Module>.__xi_vt_a), (method*)(&<Module>.__xi_vt_z));
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
	}

	// Token: 0x060001A3 RID: 419 RVA: 0x0001F368 File Offset: 0x0001E768
	[SecuritySafeCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeDefaultAppDomain(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load while attempting to initialize the default appdomain.\n");
		<Module>.<CrtImplementationDetails>.DefaultDomain.Initialize();
	}

	// Token: 0x060001A4 RID: 420 RVA: 0x0001F388 File Offset: 0x0001E788
	[SecuritySafeCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeNative(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during native initialization.\n");
		<Module>.__security_init_cookie();
		<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
		if (<Module>.__scrt_is_safe_for_managed_code() == null)
		{
			<Module>.abort();
		}
		if (<Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)1)
		{
			<Module>.abort();
		}
		if (<Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)0)
		{
			<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)1;
			if (<Module>._initterm_e((method*)(&<Module>.__xi_a), (method*)(&<Module>.__xi_z)) != 0)
			{
				<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0));
			}
			<Module>._initterm((method*)(&<Module>.__xc_a), (method*)(&<Module>.__xc_z));
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)2;
			<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
			<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
		}
	}

	// Token: 0x060001A5 RID: 421 RVA: 0x0001F418 File Offset: 0x0001E818
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializePerProcess(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during process initialization.\n");
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initatexit_m();
		<Module>._initterm_m((method*)(&<Module>.__xc_mp_a), (method*)(&<Module>.__xc_mp_z));
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
		<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
	}

	// Token: 0x060001A6 RID: 422 RVA: 0x0001F458 File Offset: 0x0001E858
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializePerAppDomain(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during appdomain initialization.\n");
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initatexit_app_domain();
		<Module>._initterm_m((method*)(&<Module>.__xc_ma_a), (method*)(&<Module>.__xc_ma_z));
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
	}

	// Token: 0x060001A7 RID: 423 RVA: 0x0001F494 File Offset: 0x0001E894
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeUninitializer(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during registration for the unload events.\n");
		<Module>.<CrtImplementationDetails>.RegisterModuleUninitializer(new EventHandler(<Module>.<CrtImplementationDetails>.LanguageSupport.DomainUnload));
	}

	// Token: 0x060001A8 RID: 424 RVA: 0x0001F4C0 File Offset: 0x0001E8C0
	[DebuggerStepThrough]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport._Initialize(LanguageSupport* A_0)
	{
		<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA = AppDomain.CurrentDomain.IsDefaultAppDomain();
		<Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA = <Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA || <Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;
		void* ptr = <Module>._getFiberPtrId();
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		RuntimeHelpers.PrepareConstrainedRegions();
		try
		{
			while (num2 == 0)
			{
				try
				{
				}
				finally
				{
					void* ptr2 = Interlocked.CompareExchange(ref <Module>.__scrt_native_startup_lock, ptr, 0L);
					if (ptr2 == null)
					{
						num2 = 1;
					}
					else if (ptr2 == ptr)
					{
						num = 1;
						num2 = 1;
					}
				}
				if (num2 == 0)
				{
					<Module>.Sleep(1000);
				}
			}
			<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeVtables(A_0);
			if (<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeNative(A_0);
				<Module>.<CrtImplementationDetails>.LanguageSupport.InitializePerProcess(A_0);
			}
			else
			{
				num3 = ((<Module>.<CrtImplementationDetails>.DefaultDomain.NeedsInitialization() != 0) ? 1 : num3);
			}
		}
		finally
		{
			if (num == 0)
			{
				Interlocked.Exchange(ref <Module>.__scrt_native_startup_lock, 0L);
			}
		}
		if (num3 != 0)
		{
			<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeDefaultAppDomain(A_0);
		}
		<Module>.<CrtImplementationDetails>.LanguageSupport.InitializePerAppDomain(A_0);
		<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 1;
		<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeUninitializer(A_0);
	}

	// Token: 0x060001A9 RID: 425 RVA: 0x0001F16C File Offset: 0x0001E56C
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain()
	{
		<Module>._app_exit_callback();
	}

	// Token: 0x060001AA RID: 426 RVA: 0x0001F180 File Offset: 0x0001E580
	[SecurityCritical]
	internal unsafe static int <CrtImplementationDetails>.LanguageSupport._UninitializeDefaultDomain(void* cookie)
	{
		<Module>._exit_callback();
		<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		if (<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA)
		{
			<Module>._cexit();
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)0;
			<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		}
		<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		return 0;
	}

	// Token: 0x060001AB RID: 427 RVA: 0x0001F1B8 File Offset: 0x0001E5B8
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain()
	{
		if (<Module>.<CrtImplementationDetails>.DefaultDomain.NeedsUninitialization() != null)
		{
			if (AppDomain.CurrentDomain.IsDefaultAppDomain())
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport._UninitializeDefaultDomain(null);
			}
			else
			{
				<Module>.<CrtImplementationDetails>.DoCallBackInDefaultDomain(<Module>.__unep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z, null);
			}
		}
	}

	// Token: 0x060001AC RID: 428 RVA: 0x0001F1F0 File Offset: 0x0001E5F0
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[PrePrepareMethod]
	internal static void <CrtImplementationDetails>.LanguageSupport.DomainUnload(object A_0, EventArgs A_1)
	{
		if (<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA != 0 && Interlocked.Exchange(ref <Module>.?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA, 1) == 0)
		{
			byte b = ((Interlocked.Decrement(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA) == 0) ? 1 : 0);
			<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain();
			if (b != 0)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain();
			}
		}
	}

	// Token: 0x060001AD RID: 429 RVA: 0x0001F5C4 File Offset: 0x0001E9C4
	[DebuggerStepThrough]
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.Cleanup(LanguageSupport* A_0, Exception innerException)
	{
		try
		{
			bool flag = ((Interlocked.Decrement(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA) == 0) ? 1 : 0) != 0;
			<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain();
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain();
			}
		}
		catch (Exception ex)
		{
			<Module>.<CrtImplementationDetails>.ThrowNestedModuleLoadException(innerException, ex);
		}
		catch (object obj)
		{
			<Module>.<CrtImplementationDetails>.ThrowNestedModuleLoadException(innerException, null);
		}
	}

	// Token: 0x060001AE RID: 430 RVA: 0x0001F638 File Offset: 0x0001EA38
	[SecurityCritical]
	internal unsafe static LanguageSupport* <CrtImplementationDetails>.LanguageSupport.{ctor}(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.{ctor}(A_0);
		return A_0;
	}

	// Token: 0x060001AF RID: 431 RVA: 0x0001F650 File Offset: 0x0001EA50
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.{dtor}(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.{dtor}(A_0);
	}

	// Token: 0x060001B0 RID: 432 RVA: 0x0001F664 File Offset: 0x0001EA64
	[SecurityCritical]
	[DebuggerStepThrough]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.Initialize(LanguageSupport* A_0)
	{
		bool flag = false;
		RuntimeHelpers.PrepareConstrainedRegions();
		try
		{
			<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load.\n");
			RuntimeHelpers.PrepareConstrainedRegions();
			try
			{
			}
			finally
			{
				Interlocked.Increment(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA);
				flag = true;
			}
			<Module>.<CrtImplementationDetails>.LanguageSupport._Initialize(A_0);
		}
		catch (Exception ex)
		{
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.Cleanup(A_0, ex);
			}
			<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0), ex);
		}
		catch (object obj)
		{
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.Cleanup(A_0, null);
			}
			<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0), null);
		}
	}

	// Token: 0x060001B1 RID: 433 RVA: 0x0001F720 File Offset: 0x0001EB20
	[SecurityCritical]
	[DebuggerStepThrough]
	static unsafe <Module>()
	{
		LanguageSupport languageSupport;
		<Module>.<CrtImplementationDetails>.LanguageSupport.{ctor}(ref languageSupport);
		try
		{
			<Module>.<CrtImplementationDetails>.LanguageSupport.Initialize(ref languageSupport);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(<CrtImplementationDetails>.LanguageSupport.{dtor}), (void*)(&languageSupport));
			throw;
		}
		<Module>.<CrtImplementationDetails>.LanguageSupport.{dtor}(ref languageSupport);
	}

	// Token: 0x060001B2 RID: 434 RVA: 0x0001F22C File Offset: 0x0001E62C
	[SecuritySafeCritical]
	internal unsafe static string PE$AAVString@System@@(gcroot<System::String\u0020^>* A_0)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		return ((GCHandle)intPtr).Target;
	}

	// Token: 0x060001B3 RID: 435 RVA: 0x0001F250 File Offset: 0x0001E650
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static gcroot<System::String\u0020^>* =(gcroot<System::String\u0020^>* A_0, string t)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		((GCHandle)intPtr).Target = t;
		return A_0;
	}

	// Token: 0x060001B4 RID: 436 RVA: 0x0001F278 File Offset: 0x0001E678
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void {dtor}(gcroot<System::String\u0020^>* A_0)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		((GCHandle)intPtr).Free();
		*A_0 = 0L;
	}

	// Token: 0x060001B5 RID: 437 RVA: 0x0001F2A0 File Offset: 0x0001E6A0
	[SecuritySafeCritical]
	[DebuggerStepThrough]
	internal unsafe static gcroot<System::String\u0020^>* {ctor}(gcroot<System::String\u0020^>* A_0)
	{
		*A_0 = ((IntPtr)GCHandle.Alloc(null)).ToPointer();
		return A_0;
	}

	// Token: 0x060001B6 RID: 438 RVA: 0x0001F794 File Offset: 0x0001EB94
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static ValueType <CrtImplementationDetails>.AtExitLock._handle()
	{
		if (<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA != null)
		{
			IntPtr intPtr = new IntPtr(<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA);
			return GCHandle.FromIntPtr(intPtr);
		}
		return null;
	}

	// Token: 0x060001B7 RID: 439 RVA: 0x0001FC64 File Offset: 0x0001F064
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Construct(object value)
	{
		<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = null;
		<Module>.<CrtImplementationDetails>.AtExitLock._lock_Set(value);
	}

	// Token: 0x060001B8 RID: 440 RVA: 0x0001F7C4 File Offset: 0x0001EBC4
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Set(object value)
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType == null)
		{
			valueType = GCHandle.Alloc(value);
			<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = GCHandle.ToIntPtr((GCHandle)valueType).ToPointer();
		}
		else
		{
			((GCHandle)valueType).Target = value;
		}
	}

	// Token: 0x060001B9 RID: 441 RVA: 0x0001F814 File Offset: 0x0001EC14
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static object <CrtImplementationDetails>.AtExitLock._lock_Get()
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType != null)
		{
			return ((GCHandle)valueType).Target;
		}
		return null;
	}

	// Token: 0x060001BA RID: 442 RVA: 0x0001F838 File Offset: 0x0001EC38
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Destruct()
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType != null)
		{
			((GCHandle)valueType).Free();
			<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = null;
		}
	}

	// Token: 0x060001BB RID: 443 RVA: 0x0001F860 File Offset: 0x0001EC60
	[SecurityCritical]
	[DebuggerStepThrough]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.AtExitLock.IsInitialized()
	{
		return (<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get() != null) ? 1 : 0;
	}

	// Token: 0x060001BC RID: 444 RVA: 0x0001FC80 File Offset: 0x0001F080
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.AddRef()
	{
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() == null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock._lock_Construct(new object());
			<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA = 0;
		}
		<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA++;
	}

	// Token: 0x060001BD RID: 445 RVA: 0x0001F87C File Offset: 0x0001EC7C
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.RemoveRef()
	{
		<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA += -1;
		if (<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA == 0)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock._lock_Destruct();
		}
	}

	// Token: 0x060001BE RID: 446 RVA: 0x0001F8A4 File Offset: 0x0001ECA4
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.Enter()
	{
		Monitor.Enter(<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get());
	}

	// Token: 0x060001BF RID: 447 RVA: 0x0001F8BC File Offset: 0x0001ECBC
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static void <CrtImplementationDetails>.AtExitLock.Exit()
	{
		Monitor.Exit(<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get());
	}

	// Token: 0x060001C0 RID: 448 RVA: 0x0001F8D4 File Offset: 0x0001ECD4
	[DebuggerStepThrough]
	[SecurityCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __global_lock()
	{
		bool flag = false;
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() != null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock.Enter();
			flag = true;
		}
		return flag;
	}

	// Token: 0x060001C1 RID: 449 RVA: 0x0001F8F4 File Offset: 0x0001ECF4
	[SecurityCritical]
	[DebuggerStepThrough]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __global_unlock()
	{
		bool flag = false;
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() != null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock.Exit();
			flag = true;
		}
		return flag;
	}

	// Token: 0x060001C2 RID: 450 RVA: 0x0001FCB0 File Offset: 0x0001F0B0
	[SecurityCritical]
	[DebuggerStepThrough]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __alloc_global_lock()
	{
		<Module>.<CrtImplementationDetails>.AtExitLock.AddRef();
		return <Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized();
	}

	// Token: 0x060001C3 RID: 451 RVA: 0x0001F914 File Offset: 0x0001ED14
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void __dealloc_global_lock()
	{
		<Module>.<CrtImplementationDetails>.AtExitLock.RemoveRef();
	}

	// Token: 0x060001C4 RID: 452 RVA: 0x0001F928 File Offset: 0x0001ED28
	[SecurityCritical]
	internal unsafe static int _atexit_helper(method func, ulong* __pexit_list_size, method** __ponexitend_e, method** __ponexitbegin_e)
	{
		method system.Void_u0020() = 0L;
		if (func == null)
		{
			return -1;
		}
		if (<Module>.?A0x5f1aee9f.__global_lock() == 1)
		{
			try
			{
				method* ptr = (method*)<Module>.DecodePointer(*(long*)__ponexitbegin_e);
				method* ptr2 = (method*)<Module>.DecodePointer(*(long*)__ponexitend_e);
				long num = (long)(ptr2 - ptr);
				if (*__pexit_list_size - 1UL < (ulong)num >> 3)
				{
					try
					{
						ulong num2 = *__pexit_list_size * 8UL;
						ulong num3 = ((num2 < 4096UL) ? num2 : 4096UL);
						IntPtr intPtr = new IntPtr((int)(num2 + num3));
						IntPtr intPtr2 = new IntPtr((void*)ptr);
						IntPtr intPtr3 = Marshal.ReAllocHGlobal(intPtr2, intPtr);
						ptr2 = (method*)((byte*)intPtr3.ToPointer() + num);
						ptr = (method*)intPtr3.ToPointer();
						ulong num4 = *__pexit_list_size;
						ulong num5 = ((512UL < num4) ? 512UL : num4);
						*__pexit_list_size = num4 + num5;
					}
					catch (OutOfMemoryException)
					{
						IntPtr intPtr4 = new IntPtr((int)(*__pexit_list_size * 8UL + 12UL));
						IntPtr intPtr5 = new IntPtr((void*)ptr);
						IntPtr intPtr6 = Marshal.ReAllocHGlobal(intPtr5, intPtr4);
						ptr2 = (intPtr6.ToPointer() - ptr) / (IntPtr)sizeof(method) + ptr2;
						ptr = (method*)intPtr6.ToPointer();
						*__pexit_list_size += 4UL;
					}
				}
				*(long*)ptr2 = func;
				ptr2 += 8L / (long)sizeof(method);
				system.Void_u0020() = func;
				*(long*)__ponexitbegin_e = <Module>.EncodePointer((void*)ptr);
				*(long*)__ponexitend_e = <Module>.EncodePointer((void*)ptr2);
			}
			catch (OutOfMemoryException)
			{
			}
			finally
			{
				<Module>.?A0x5f1aee9f.__global_unlock();
			}
			if (system.Void_u0020() != null)
			{
				return 0;
			}
		}
		return -1;
	}

	// Token: 0x060001C5 RID: 453 RVA: 0x0001FAA0 File Offset: 0x0001EEA0
	[SecurityCritical]
	internal unsafe static void _exit_callback()
	{
		if (<Module>.?A0x5f1aee9f.__exit_list_size != 0UL)
		{
			method* ptr = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitbegin_m);
			method* ptr2 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitend_m);
			if (ptr != -1L && ptr != null && ptr2 != null)
			{
				method* ptr3 = ptr;
				method* ptr4 = ptr2;
				for (;;)
				{
					ptr2 -= 8L / (long)sizeof(method);
					if (ptr2 < ptr)
					{
						break;
					}
					if (*(long*)ptr2 != <Module>.EncodePointer(null))
					{
						void* ptr5 = <Module>.DecodePointer(*(long*)ptr2);
						*(long*)ptr2 = <Module>.EncodePointer(null);
						calli(System.Void(), ptr5);
						method* ptr6 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitbegin_m);
						method* ptr7 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitend_m);
						if (ptr3 != ptr6 || ptr4 != ptr7)
						{
							ptr3 = ptr6;
							ptr = ptr6;
							ptr4 = ptr7;
							ptr2 = ptr7;
						}
					}
				}
				IntPtr intPtr = new IntPtr((void*)ptr);
				Marshal.FreeHGlobal(intPtr);
			}
			<Module>.?A0x5f1aee9f.__dealloc_global_lock();
		}
	}

	// Token: 0x060001C6 RID: 454 RVA: 0x0001FCC8 File Offset: 0x0001F0C8
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static int _initatexit_m()
	{
		int num = 0;
		if (<Module>.?A0x5f1aee9f.__alloc_global_lock() == 1)
		{
			<Module>.?A0x5f1aee9f.__onexitbegin_m = (method*)<Module>.EncodePointer(Marshal.AllocHGlobal(256).ToPointer());
			<Module>.?A0x5f1aee9f.__onexitend_m = <Module>.?A0x5f1aee9f.__onexitbegin_m;
			<Module>.?A0x5f1aee9f.__exit_list_size = 32UL;
			num = 1;
		}
		return num;
	}

	// Token: 0x060001C7 RID: 455 RVA: 0x0001FB50 File Offset: 0x0001EF50
	[SecurityCritical]
	internal unsafe static int _atexit_m(method func)
	{
		return <Module>._atexit_helper(<Module>.EncodePointer(func), &<Module>.?A0x5f1aee9f.__exit_list_size, &<Module>.?A0x5f1aee9f.__onexitend_m, &<Module>.?A0x5f1aee9f.__onexitbegin_m);
	}

	// Token: 0x060001C8 RID: 456 RVA: 0x0001FD10 File Offset: 0x0001F110
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static int _initatexit_app_domain()
	{
		if (<Module>.?A0x5f1aee9f.__alloc_global_lock() == 1)
		{
			<Module>.__onexitbegin_app_domain = (method*)<Module>.EncodePointer(Marshal.AllocHGlobal(256).ToPointer());
			<Module>.__onexitend_app_domain = <Module>.__onexitbegin_app_domain;
			<Module>.__exit_list_size_app_domain = 32UL;
		}
		return 1;
	}

	// Token: 0x060001C9 RID: 457 RVA: 0x0001FB78 File Offset: 0x0001EF78
	[SecurityCritical]
	[HandleProcessCorruptedStateExceptions]
	internal unsafe static void _app_exit_callback()
	{
		if (<Module>.__exit_list_size_app_domain != 0UL)
		{
			method* ptr = (method*)<Module>.DecodePointer((void*)<Module>.__onexitbegin_app_domain);
			method* ptr2 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitend_app_domain);
			try
			{
				if (ptr != -1L && ptr != null && ptr2 != null)
				{
					method* ptr3 = ptr;
					method* ptr4 = ptr2;
					for (;;)
					{
						do
						{
							ptr2 -= 8L / (long)sizeof(method);
						}
						while (ptr2 >= ptr && *(long*)ptr2 == <Module>.EncodePointer(null));
						if (ptr2 < ptr)
						{
							break;
						}
						method system.Void_u0020() = <Module>.DecodePointer(*(long*)ptr2);
						*(long*)ptr2 = <Module>.EncodePointer(null);
						calli(System.Void(), system.Void_u0020());
						method* ptr5 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitbegin_app_domain);
						method* ptr6 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitend_app_domain);
						if (ptr3 != ptr5 || ptr4 != ptr6)
						{
							ptr3 = ptr5;
							ptr = ptr5;
							ptr4 = ptr6;
							ptr2 = ptr6;
						}
					}
				}
			}
			finally
			{
				IntPtr intPtr = new IntPtr((void*)ptr);
				Marshal.FreeHGlobal(intPtr);
				<Module>.?A0x5f1aee9f.__dealloc_global_lock();
			}
		}
	}

	// Token: 0x060001CA RID: 458
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[SuppressUnmanagedCodeSecurity]
	[DllImport("KERNEL32.dll")]
	public unsafe static extern void* DecodePointer(void* _Ptr);

	// Token: 0x060001CB RID: 459
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SuppressUnmanagedCodeSecurity]
	[DllImport("KERNEL32.dll")]
	public unsafe static extern void* EncodePointer(void* _Ptr);

	// Token: 0x060001CC RID: 460 RVA: 0x0001FD54 File Offset: 0x0001F154
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static int _initterm_e(method* pfbegin, method* pfend)
	{
		int num = 0;
		if (pfbegin < pfend)
		{
			while (num == 0)
			{
				ulong num2 = (ulong)(*(long*)pfbegin);
				if (num2 != 0UL)
				{
					num = calli(System.Int32 modopt(System.Runtime.CompilerServices.CallConvCdecl)(), num2);
				}
				pfbegin += 8L / (long)sizeof(method);
				if (pfbegin >= pfend)
				{
					break;
				}
			}
		}
		return num;
	}

	// Token: 0x060001CD RID: 461 RVA: 0x0001FD84 File Offset: 0x0001F184
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void _initterm(method* pfbegin, method* pfend)
	{
		if (pfbegin < pfend)
		{
			do
			{
				ulong num = (ulong)(*(long*)pfbegin);
				if (num != 0UL)
				{
					calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(), num);
				}
				pfbegin += 8L / (long)sizeof(method);
			}
			while (pfbegin < pfend);
		}
	}

	// Token: 0x060001CE RID: 462 RVA: 0x0001FDAC File Offset: 0x0001F1AC
	[DebuggerStepThrough]
	internal static ModuleHandle <CrtImplementationDetails>.ThisModule.Handle()
	{
		return typeof(ThisModule).Module.ModuleHandle;
	}

	// Token: 0x060001CF RID: 463 RVA: 0x0001FDFC File Offset: 0x0001F1FC
	[SecurityCritical]
	[DebuggerStepThrough]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void _initterm_m(method* pfbegin, method* pfend)
	{
		if (pfbegin < pfend)
		{
			do
			{
				ulong num = (ulong)(*(long*)pfbegin);
				if (num != 0UL)
				{
					void* ptr = calli(System.Void modopt(System.Runtime.CompilerServices.IsConst)*(), <Module>.<CrtImplementationDetails>.ThisModule.ResolveMethod<void\u0020const\u0020*\u0020__clrcall(void)>(num));
				}
				pfbegin += 8L / (long)sizeof(method);
			}
			while (pfbegin < pfend);
		}
	}

	// Token: 0x060001D0 RID: 464 RVA: 0x0001FDD0 File Offset: 0x0001F1D0
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static method <CrtImplementationDetails>.ThisModule.ResolveMethod<void\u0020const\u0020*\u0020__clrcall(void)>(method methodToken)
	{
		return <Module>.<CrtImplementationDetails>.ThisModule.Handle().ResolveMethodHandle(methodToken).GetFunctionPointer()
			.ToPointer();
	}

	// Token: 0x060001D1 RID: 465 RVA: 0x0001DD68 File Offset: 0x0001D168
	[SuppressUnmanagedCodeSecurity]
	[STAThread]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal static extern uint wWinMainCRTStartup();

	// Token: 0x060001D2 RID: 466 RVA: 0x0001C9A0 File Offset: 0x0001BDA0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int printf(sbyte*, __arglist);

	// Token: 0x060001D3 RID: 467 RVA: 0x0001C210 File Offset: 0x0001B610
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _snprintf_s(sbyte*, ulong, ulong, sbyte*, __arglist);

	// Token: 0x060001D4 RID: 468 RVA: 0x0001D9CA File Offset: 0x0001CDCA
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern ulong _K(locale.id*);

	// Token: 0x060001D5 RID: 469 RVA: 0x00020169 File Offset: 0x0001F569
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	[return: MarshalAs(UnmanagedType.U2)]
	internal unsafe static extern char widen(ctype<wchar_t>*, sbyte);

	// Token: 0x060001D6 RID: 470 RVA: 0x00020163 File Offset: 0x0001F563
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern ulong _Getcat(locale.facet**, locale*);

	// Token: 0x060001D7 RID: 471 RVA: 0x0001DA0C File Offset: 0x0001CE0C
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static extern bool good(ios_base*);

	// Token: 0x060001D8 RID: 472 RVA: 0x0001D9F4 File Offset: 0x0001CDF4
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int flags(ios_base*);

	// Token: 0x060001D9 RID: 473 RVA: 0x0001D9FA File Offset: 0x0001CDFA
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern long width(ios_base*);

	// Token: 0x060001DA RID: 474 RVA: 0x0001DA00 File Offset: 0x0001CE00
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern long width(ios_base*, long);

	// Token: 0x060001DB RID: 475 RVA: 0x0001D9D0 File Offset: 0x0001CDD0
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern locale* getloc(ios_base*, locale*);

	// Token: 0x060001DC RID: 476 RVA: 0x000200D3 File Offset: 0x0001F4D3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static extern bool is_locked(locker*);

	// Token: 0x060001DD RID: 477 RVA: 0x0002013F File Offset: 0x0001F53F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001DE RID: 478 RVA: 0x00020175 File Offset: 0x0001F575
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* <<(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>*, ulong);

	// Token: 0x060001DF RID: 479 RVA: 0x0002017B File Offset: 0x0001F57B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* <<(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>*, long);

	// Token: 0x060001E0 RID: 480 RVA: 0x0002016F File Offset: 0x0001F56F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* <<(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>*, int);

	// Token: 0x060001E1 RID: 481 RVA: 0x000200FD File Offset: 0x0001F4FD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001E2 RID: 482 RVA: 0x0002014B File Offset: 0x0001F54B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001E3 RID: 483 RVA: 0x00020151 File Offset: 0x0001F551
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>* {ctor}(basic_iostream<wchar_t,std::char_traits<wchar_t>\u0020>*, basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, int);

	// Token: 0x060001E4 RID: 484 RVA: 0x00020181 File Offset: 0x0001F581
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* _Pninc(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001E5 RID: 485 RVA: 0x00020187 File Offset: 0x0001F587
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void setp(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, char*, char*, char*);

	// Token: 0x060001E6 RID: 486 RVA: 0x00020121 File Offset: 0x0001F521
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* epptr(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001E7 RID: 487 RVA: 0x00020133 File Offset: 0x0001F533
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void setg(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, char*, char*, char*);

	// Token: 0x060001E8 RID: 488 RVA: 0x0002018D File Offset: 0x0001F58D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void gbump(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, int);

	// Token: 0x060001E9 RID: 489 RVA: 0x00020127 File Offset: 0x0001F527
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* egptr(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001EA RID: 490 RVA: 0x0002011B File Offset: 0x0001F51B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* pptr(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001EB RID: 491 RVA: 0x0002015D File Offset: 0x0001F55D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* gptr(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001EC RID: 492 RVA: 0x0002012D File Offset: 0x0001F52D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* eback(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001ED RID: 493 RVA: 0x00020145 File Offset: 0x0001F545
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>* {ctor}(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001EE RID: 494 RVA: 0x00020103 File Offset: 0x0001F503
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	[return: MarshalAs(UnmanagedType.U2)]
	internal unsafe static extern char fill(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001EF RID: 495 RVA: 0x000200DF File Offset: 0x0001F4DF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* rdbuf(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F0 RID: 496 RVA: 0x00020115 File Offset: 0x0001F515
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void setstate(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*, int, [MarshalAs(UnmanagedType.U1)] bool);

	// Token: 0x060001F1 RID: 497 RVA: 0x000200F1 File Offset: 0x0001F4F1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* flush(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F2 RID: 498 RVA: 0x000200E5 File Offset: 0x0001F4E5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _Osfx(basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F3 RID: 499 RVA: 0x00020139 File Offset: 0x0001F539
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void setp(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, char*, char*);

	// Token: 0x060001F4 RID: 500 RVA: 0x00020157 File Offset: 0x0001F557
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* pbase(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F5 RID: 501 RVA: 0x000200F7 File Offset: 0x0001F4F7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>* {ctor}(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F6 RID: 502 RVA: 0x000200EB File Offset: 0x0001F4EB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_ostream<wchar_t,std::char_traits<wchar_t>\u0020>* tie(basic_ios<wchar_t,std::char_traits<wchar_t>\u0020>*);

	// Token: 0x060001F7 RID: 503 RVA: 0x00020109 File Offset: 0x0001F509
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern ushort sputc(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, [MarshalAs(UnmanagedType.U2)] char);

	// Token: 0x060001F8 RID: 504 RVA: 0x0001D700 File Offset: 0x0001CB00
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int swprintf_s<260>($ArrayType$$$BY0BAE@_W*, char*, __arglist);

	// Token: 0x060001F9 RID: 505 RVA: 0x0001D880 File Offset: 0x0001CC80
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int sprintf_s<1024>($ArrayType$$$BY0EAA@D*, sbyte*, __arglist);

	// Token: 0x060001FA RID: 506 RVA: 0x0001D820 File Offset: 0x0001CC20
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int swprintf_s<32>($ArrayType$$$BY0CA@_W*, char*, __arglist);

	// Token: 0x060001FB RID: 507 RVA: 0x0001D760 File Offset: 0x0001CB60
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int swprintf_s<1024>($ArrayType$$$BY0EAA@_W*, char*, __arglist);

	// Token: 0x060001FC RID: 508 RVA: 0x0001D5E0 File Offset: 0x0001C9E0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int swprintf_s<8>($ArrayType$$$BY07_W*, char*, __arglist);

	// Token: 0x060001FD RID: 509 RVA: 0x0002010F File Offset: 0x0001F50F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern long sputn(basic_streambuf<wchar_t,std::char_traits<wchar_t>\u0020>*, char*, long);

	// Token: 0x060001FE RID: 510 RVA: 0x00020055 File Offset: 0x0001F455
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int FlushFileBuffers(void*);

	// Token: 0x060001FF RID: 511 RVA: 0x0001FF0D File Offset: 0x0001F30D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* malloc(ulong);

	// Token: 0x06000200 RID: 512 RVA: 0x00022A20 File Offset: 0x00021E20
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern CURLcode curl_easy_setopt(void*, CURLoption, __arglist);

	// Token: 0x06000201 RID: 513 RVA: 0x000201B0 File Offset: 0x0001F5B0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern CURLcode curl_easy_getinfo(void*, CURLINFO, __arglist);

	// Token: 0x06000202 RID: 514 RVA: 0x0001FE7D File Offset: 0x0001F27D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void _invalid_parameter_noinfo_noreturn();

	// Token: 0x06000203 RID: 515 RVA: 0x00108CC1 File Offset: 0x001080C1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* wcsrchr(char*, [MarshalAs(UnmanagedType.U2)] char);

	// Token: 0x06000204 RID: 516 RVA: 0x00020007 File Offset: 0x0001F407
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern uint GetTickCount();

	// Token: 0x06000205 RID: 517 RVA: 0x000201A0 File Offset: 0x0001F5A0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void curl_easy_cleanup(void*);

	// Token: 0x06000206 RID: 518 RVA: 0x00001300 File Offset: 0x00000700
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void Write(char*, __arglist);

	// Token: 0x06000207 RID: 519 RVA: 0x000012D0 File Offset: 0x000006D0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void SetOutputFile(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*);

	// Token: 0x06000208 RID: 520 RVA: 0x00108D39 File Offset: 0x00108139
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _wtol(char*);

	// Token: 0x06000209 RID: 521 RVA: 0x00020061 File Offset: 0x0001F461
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* MapViewOfFile(void*, uint, uint, uint, ulong);

	// Token: 0x0600020A RID: 522 RVA: 0x0002005B File Offset: 0x0001F45B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* CreateFileMappingW(void*, _SECURITY_ATTRIBUTES*, uint, uint, uint, char*);

	// Token: 0x0600020B RID: 523 RVA: 0x000059D0 File Offset: 0x00004DD0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void ConvertPathToUrl(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*);

	// Token: 0x0600020C RID: 524 RVA: 0x000200B5 File Offset: 0x0001F4B5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void destroy_all();

	// Token: 0x0600020D RID: 525 RVA: 0x000200BB File Offset: 0x0001F4BB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern scoped_shm_reader* reader(scoped_shm_reader*);

	// Token: 0x0600020E RID: 526 RVA: 0x000200C7 File Offset: 0x0001F4C7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(scoped_shm_reader*);

	// Token: 0x0600020F RID: 527 RVA: 0x000200C1 File Offset: 0x0001F4C1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern HWND__* read_window_handle(scoped_shm_reader*);

	// Token: 0x06000210 RID: 528 RVA: 0x000200D9 File Offset: 0x0001F4D9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(locker*);

	// Token: 0x06000211 RID: 529 RVA: 0x000200CD File Offset: 0x0001F4CD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern locker* lc_lc_locker(locker*);

	// Token: 0x06000212 RID: 530 RVA: 0x00020073 File Offset: 0x0001F473
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int IsWindowVisible(HWND__*);

	// Token: 0x06000213 RID: 531 RVA: 0x0002008B File Offset: 0x0001F48B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int MessageBoxW(HWND__*, char*, char*, uint);

	// Token: 0x06000214 RID: 532 RVA: 0x00108D3F File Offset: 0x0010813F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int atol(sbyte*);

	// Token: 0x06000215 RID: 533 RVA: 0x00020091 File Offset: 0x0001F491
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CryptAcquireContextW(ulong*, char*, char*, uint, uint);

	// Token: 0x06000216 RID: 534 RVA: 0x0001FF6B File Offset: 0x0001F36B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int WideCharToMultiByte(uint, uint, char*, int, sbyte*, int, sbyte*, int*);

	// Token: 0x06000217 RID: 535 RVA: 0x0001FE35 File Offset: 0x0001F235
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void __std_terminate();

	// Token: 0x06000218 RID: 536 RVA: 0x0001FF43 File Offset: 0x0001F343
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern HINSTANCE__* GetModuleHandleW(char*);

	// Token: 0x06000219 RID: 537 RVA: 0x0002001F File Offset: 0x0001F41F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CreateProcessW(char*, char*, _SECURITY_ATTRIBUTES*, _SECURITY_ATTRIBUTES*, int, uint, void*, char*, _STARTUPINFOW*, _PROCESS_INFORMATION*);

	// Token: 0x0600021A RID: 538 RVA: 0x00008130 File Offset: 0x00007530
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern IniParser* {ctor}(IniParser*, @byte*, uint);

	// Token: 0x0600021B RID: 539 RVA: 0x00020025 File Offset: 0x0001F425
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void ExitProcess(uint);

	// Token: 0x0600021C RID: 540 RVA: 0x0001FFAD File Offset: 0x0001F3AD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void DeleteCriticalSection(_RTL_CRITICAL_SECTION*);

	// Token: 0x0600021D RID: 541 RVA: 0x0001FF2B File Offset: 0x0001F32B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void free(void*);

	// Token: 0x0600021E RID: 542 RVA: 0x0001FFE3 File Offset: 0x0001F3E3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint GetFileSize(void*, uint*);

	// Token: 0x0600021F RID: 543 RVA: 0x00108CCD File Offset: 0x001080CD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern int __CxxQueryExceptionSize();

	// Token: 0x06000220 RID: 544 RVA: 0x00108D4B File Offset: 0x0010814B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _time32(int*);

	// Token: 0x06000221 RID: 545 RVA: 0x0002003D File Offset: 0x0001F43D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern method GetProcAddress(HINSTANCE__*, sbyte*);

	// Token: 0x06000222 RID: 546 RVA: 0x0001FE53 File Offset: 0x0001F253
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _CxxThrowException(void*, _s__ThrowInfo*);

	// Token: 0x06000223 RID: 547 RVA: 0x00020031 File Offset: 0x0001F431
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int SetCurrentDirectoryW(char*);

	// Token: 0x06000224 RID: 548 RVA: 0x0001FF54 File Offset: 0x0001F354
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* new[](ulong);

	// Token: 0x06000225 RID: 549 RVA: 0x00069110 File Offset: 0x00068510
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void RSA_free(rsa_st*);

	// Token: 0x06000226 RID: 550 RVA: 0x00020079 File Offset: 0x0001F479
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int ShowWindow(HWND__*, int);

	// Token: 0x06000227 RID: 551 RVA: 0x0001FFC5 File Offset: 0x0001F3C5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern HRSRC__* FindResourceW(HINSTANCE__*, char*, char*);

	// Token: 0x06000228 RID: 552 RVA: 0x0001FFD1 File Offset: 0x0001F3D1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* LoadResource(HINSTANCE__*, HRSRC__*);

	// Token: 0x06000229 RID: 553 RVA: 0x00020037 File Offset: 0x0001F437
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern HINSTANCE__* LoadLibraryW(char*);

	// Token: 0x0600022A RID: 554 RVA: 0x00108CDF File Offset: 0x001080DF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxDetectRethrow(void*);

	// Token: 0x0600022B RID: 555 RVA: 0x000201E0 File Offset: 0x0001F5E0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* curl_easy_init();

	// Token: 0x0600022C RID: 556 RVA: 0x0006895F File Offset: 0x00067D5F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int PathAppendW(char*, char*);

	// Token: 0x0600022D RID: 557 RVA: 0x00108CE5 File Offset: 0x001080E5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __CxxUnregisterExceptionObject(void*, int);

	// Token: 0x0600022E RID: 558 RVA: 0x00020001 File Offset: 0x0001F401
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CloseHandle(void*);

	// Token: 0x0600022F RID: 559 RVA: 0x00007590 File Offset: 0x00006990
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void LzmaDec_Free(CLzmaDec*, ISzAlloc*);

	// Token: 0x06000230 RID: 560 RVA: 0x00108D15 File Offset: 0x00108115
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int* _errno();

	// Token: 0x06000231 RID: 561 RVA: 0x0001FFEF File Offset: 0x0001F3EF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int DeleteFileW(char*);

	// Token: 0x06000232 RID: 562 RVA: 0x00108CD3 File Offset: 0x001080D3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxExceptionFilter(void*, void*, int, void*);

	// Token: 0x06000233 RID: 563 RVA: 0x00007470 File Offset: 0x00006870
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int LzmaDec_DecodeToBuf(CLzmaDec*, byte*, ulong*, byte*, ulong*, ELzmaFinishMode, ELzmaStatus*);

	// Token: 0x06000234 RID: 564 RVA: 0x0001FFD7 File Offset: 0x0001F3D7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* LockResource(void*);

	// Token: 0x06000235 RID: 565 RVA: 0x00020230 File Offset: 0x0001F630
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal static extern void curl_global_cleanup();

	// Token: 0x06000236 RID: 566 RVA: 0x0001FF31 File Offset: 0x0001F331
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void OutputDebugStringW(char*);

	// Token: 0x06000237 RID: 567 RVA: 0x0001FFDD File Offset: 0x0001F3DD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int GetFileAttributesExW(char*, _GET_FILEEX_INFO_LEVELS, void*);

	// Token: 0x06000238 RID: 568 RVA: 0x00020280 File Offset: 0x0001F680
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal static extern CURLcode curl_global_init(int);

	// Token: 0x06000239 RID: 569 RVA: 0x00068C50 File Offset: 0x00068050
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int RSA_verify(int, byte*, uint, byte*, uint, rsa_st*);

	// Token: 0x0600023A RID: 570 RVA: 0x0001FF7D File Offset: 0x0001F37D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern uint GetLastError();

	// Token: 0x0600023B RID: 571 RVA: 0x0002000D File Offset: 0x0001F40D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void Sleep(uint);

	// Token: 0x0600023C RID: 572 RVA: 0x0001DD7C File Offset: 0x0001D17C
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete(void*, ulong);

	// Token: 0x0600023D RID: 573 RVA: 0x00020220 File Offset: 0x0001F620
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern CURLcode curl_easy_perform(void*);

	// Token: 0x0600023E RID: 574 RVA: 0x00020013 File Offset: 0x0001F413
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* CreateEventW(_SECURITY_ATTRIBUTES*, int, int, char*);

	// Token: 0x0600023F RID: 575 RVA: 0x0001FFE9 File Offset: 0x0001F3E9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int SetFileAttributesW(char*, uint);

	// Token: 0x06000240 RID: 576 RVA: 0x00108D1B File Offset: 0x0010811B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void _invalid_parameter_noinfo();

	// Token: 0x06000241 RID: 577 RVA: 0x00005550 File Offset: 0x00004950
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* AnsiToUtf16(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>*, uint);

	// Token: 0x06000242 RID: 578 RVA: 0x000075D0 File Offset: 0x000069D0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int LzmaDec_Allocate(CLzmaDec*, byte*, uint, ISzAlloc*);

	// Token: 0x06000243 RID: 579 RVA: 0x00020097 File Offset: 0x0001F497
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CryptCreateHash(ulong, uint, ulong, uint, ulong*);

	// Token: 0x06000244 RID: 580 RVA: 0x00020043 File Offset: 0x0001F443
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int UnmapViewOfFile(void*);

	// Token: 0x06000245 RID: 581 RVA: 0x0001FE41 File Offset: 0x0001F241
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __std_exception_copy(__std_exception_data*, __std_exception_data*);

	// Token: 0x06000246 RID: 582 RVA: 0x000200A9 File Offset: 0x0001F4A9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CryptHashData(ulong, byte*, uint, uint);

	// Token: 0x06000247 RID: 583 RVA: 0x00108D27 File Offset: 0x00108127
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int wcscpy_s(char*, ulong, char*);

	// Token: 0x06000248 RID: 584 RVA: 0x0002006D File Offset: 0x0001F46D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern int EnumWindows(method, long);

	// Token: 0x06000249 RID: 585 RVA: 0x0001FF71 File Offset: 0x0001F371
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint GetFileAttributesW(char*);

	// Token: 0x0600024A RID: 586 RVA: 0x00108D21 File Offset: 0x00108121
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* realloc(void*, ulong);

	// Token: 0x0600024B RID: 587 RVA: 0x0001FFFB File Offset: 0x0001F3FB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* CreateFileW(char*, uint, uint, _SECURITY_ATTRIBUTES*, uint, uint, void*);

	// Token: 0x0600024C RID: 588 RVA: 0x0001FFBF File Offset: 0x0001F3BF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint WaitForSingleObject(void*, uint);

	// Token: 0x0600024D RID: 589 RVA: 0x0001FFA1 File Offset: 0x0001F3A1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int FindClose(void*);

	// Token: 0x0600024E RID: 590 RVA: 0x0002009D File Offset: 0x0001F49D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern int CryptDestroyHash(ulong);

	// Token: 0x0600024F RID: 591 RVA: 0x00108D33 File Offset: 0x00108133
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _wtoi(char*);

	// Token: 0x06000250 RID: 592 RVA: 0x00020067 File Offset: 0x0001F467
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int wsprintfW(char*, char*, __arglist);

	// Token: 0x06000251 RID: 593 RVA: 0x00108D45 File Offset: 0x00108145
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern ulong _beginthreadex(void*, uint, method, void*, uint, uint*);

	// Token: 0x06000252 RID: 594 RVA: 0x0001D910 File Offset: 0x0001CD10
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _Xlength_error(sbyte*);

	// Token: 0x06000253 RID: 595 RVA: 0x0001D9EE File Offset: 0x0001CDEE
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _Xout_of_range(sbyte*);

	// Token: 0x06000254 RID: 596 RVA: 0x0001DA06 File Offset: 0x0001CE06
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static extern bool uncaught_exception();

	// Token: 0x06000255 RID: 597 RVA: 0x0001D9C4 File Offset: 0x0001CDC4
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern locale._Locimp* _Getgloballocale();

	// Token: 0x06000256 RID: 598 RVA: 0x0001D9BE File Offset: 0x0001CDBE
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern _Lockit* {ctor}(_Lockit*, int);

	// Token: 0x06000257 RID: 599 RVA: 0x0001D9B8 File Offset: 0x0001CDB8
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void {dtor}(_Lockit*);

	// Token: 0x06000258 RID: 600 RVA: 0x0002004F File Offset: 0x0001F44F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int SetEndOfFile(void*);

	// Token: 0x06000259 RID: 601 RVA: 0x00020049 File Offset: 0x0001F449
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint SetFilePointer(void*, int, int*, uint);

	// Token: 0x0600025A RID: 602 RVA: 0x0001FFA7 File Offset: 0x0001F3A7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void InitializeCriticalSection(_RTL_CRITICAL_SECTION*);

	// Token: 0x0600025B RID: 603 RVA: 0x0001FFB9 File Offset: 0x0001F3B9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void LeaveCriticalSection(_RTL_CRITICAL_SECTION*);

	// Token: 0x0600025C RID: 604 RVA: 0x0001DD84 File Offset: 0x0001D184
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* @new(ulong);

	// Token: 0x0600025D RID: 605 RVA: 0x00108D2D File Offset: 0x0010812D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _wcsicmp(char*, char*);

	// Token: 0x0600025E RID: 606 RVA: 0x0001FF37 File Offset: 0x0001F337
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint GetModuleFileNameW(HINSTANCE__*, char*, uint);

	// Token: 0x0600025F RID: 607 RVA: 0x00005800 File Offset: 0x00004C00
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* LoadStringFromResource(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*, int, HINSTANCE__*);

	// Token: 0x06000260 RID: 608 RVA: 0x0001FF8F File Offset: 0x0001F38F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int RemoveDirectoryW(char*);

	// Token: 0x06000261 RID: 609 RVA: 0x0001FFF5 File Offset: 0x0001F3F5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void OutputDebugStringA(sbyte*);

	// Token: 0x06000262 RID: 610 RVA: 0x000200AF File Offset: 0x0001F4AF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CryptGetHashParam(ulong, uint, byte*, uint*, uint);

	// Token: 0x06000263 RID: 611 RVA: 0x00108CD9 File Offset: 0x001080D9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxRegisterExceptionObject(void*, void*);

	// Token: 0x06000264 RID: 612 RVA: 0x0001FF89 File Offset: 0x0001F389
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int WriteFile(void*, void*, uint, uint*, _OVERLAPPED*);

	// Token: 0x06000265 RID: 613 RVA: 0x00068A90 File Offset: 0x00067E90
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern rsa_st* d2i_RSAPublicKey(rsa_st**, byte**, int);

	// Token: 0x06000266 RID: 614 RVA: 0x0001FF9B File Offset: 0x0001F39B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int FindNextFileW(void*, _WIN32_FIND_DATAW*);

	// Token: 0x06000267 RID: 615 RVA: 0x0002002B File Offset: 0x0001F42B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint GetFullPathNameW(char*, uint, char*, char**);

	// Token: 0x06000268 RID: 616 RVA: 0x00020019 File Offset: 0x0001F419
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* GetCommandLineW();

	// Token: 0x06000269 RID: 617 RVA: 0x0001FFB3 File Offset: 0x0001F3B3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void EnterCriticalSection(_RTL_CRITICAL_SECTION*);

	// Token: 0x0600026A RID: 618 RVA: 0x00108CC7 File Offset: 0x001080C7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* memmove(void*, void*, ulong);

	// Token: 0x0600026B RID: 619 RVA: 0x00007150 File Offset: 0x00006550
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void LzmaDec_Init(CLzmaDec*);

	// Token: 0x0600026C RID: 620 RVA: 0x0001FF95 File Offset: 0x0001F395
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* FindFirstFileW(char*, _WIN32_FIND_DATAW*);

	// Token: 0x0600026D RID: 621 RVA: 0x00020085 File Offset: 0x0001F485
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int SetForegroundWindow(HWND__*);

	// Token: 0x0600026E RID: 622 RVA: 0x000056A0 File Offset: 0x00004AA0
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* Utf16ToUtf8(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>*, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*);

	// Token: 0x0600026F RID: 623 RVA: 0x0002007F File Offset: 0x0001F47F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int IsIconic(HWND__*);

	// Token: 0x06000270 RID: 624 RVA: 0x0001FFCB File Offset: 0x0001F3CB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint SizeofResource(HINSTANCE__*, HRSRC__*);

	// Token: 0x06000271 RID: 625 RVA: 0x00108C58 File Offset: 0x00108058
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete[](void*, ulong);

	// Token: 0x06000272 RID: 626 RVA: 0x0001FF4C File Offset: 0x0001F34C
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete[](void*);

	// Token: 0x06000273 RID: 627 RVA: 0x000200A3 File Offset: 0x0001F4A3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern int CryptReleaseContext(ulong, uint);

	// Token: 0x06000274 RID: 628 RVA: 0x0001FE3B File Offset: 0x0001F23B
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __std_exception_destroy(__std_exception_data*);

	// Token: 0x06000275 RID: 629 RVA: 0x0001FF83 File Offset: 0x0001F383
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int ReadFile(void*, void*, uint, uint*, _OVERLAPPED*);

	// Token: 0x06000276 RID: 630 RVA: 0x0001FF77 File Offset: 0x0001F377
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CreateDirectoryW(char*, _SECURITY_ATTRIBUTES*);

	// Token: 0x06000277 RID: 631 RVA: 0x00108CEB File Offset: 0x001080EB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __FrameUnwindFilter(_EXCEPTION_POINTERS*);

	// Token: 0x06000278 RID: 632 RVA: 0x0001FF25 File Offset: 0x0001F325
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void terminate();

	// Token: 0x06000279 RID: 633 RVA: 0x0001F000 File Offset: 0x0001E400
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* _getFiberPtrId();

	// Token: 0x0600027A RID: 634 RVA: 0x0001FEE3 File Offset: 0x0001F2E3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void _cexit();

	// Token: 0x0600027B RID: 635 RVA: 0x00108D51 File Offset: 0x00108151
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void abort();

	// Token: 0x0600027C RID: 636 RVA: 0x0001E320 File Offset: 0x0001D720
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal static extern void __security_init_cookie();

	// Token: 0x04000001 RID: 1 RVA: 0x0010BE90 File Offset: 0x00109C90
	internal static $ArrayType$$$BY0N@$$CB_W ??_C@_1BK@MGCNFMKP@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?4?$AAi?$AAn?$AAi@;

	// Token: 0x04000002 RID: 2 RVA: 0x0010BF00 File Offset: 0x00109D00
	internal static $ArrayType$$$BY08$$CB_W ??_C@_1BC@KGMHLFHD@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr@;

	// Token: 0x04000003 RID: 3 RVA: 0x0010BF18 File Offset: 0x00109D18
	internal static $ArrayType$$$BY09$$CB_W ??_C@_1BE@PEHMGMOH@?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe@;

	// Token: 0x04000004 RID: 4 RVA: 0x0010BF30 File Offset: 0x00109D30
	internal static $ArrayType$$$BY09$$CB_W ??_C@_1BE@EHJBLODE@?$AAi?$AAn?$AAf?$AAo?$AA_?$AAf?$AAi?$AAl?$AAe@;

	// Token: 0x04000005 RID: 5 RVA: 0x0010BF48 File Offset: 0x00109D48
	internal static $ArrayType$$$BY0BA@$$CB_W ??_C@_1CA@EDFECBEI@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA_?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe@;

	// Token: 0x04000006 RID: 6 RVA: 0x0010BF68 File Offset: 0x00109D68
	internal static $ArrayType$$$BY0N@$$CB_W ??_C@_1BK@CLBAMJDO@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AAr?$AA_?$AAf?$AAi?$AAl?$AAe@;

	// Token: 0x04000007 RID: 7 RVA: 0x0010BF88 File Offset: 0x00109D88
	internal static $ArrayType$$$BY0L@$$CB_W ??_C@_1BG@JLHGJLOE@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAu?$AAr?$AAl@;

	// Token: 0x04000008 RID: 8 RVA: 0x0010BFA0 File Offset: 0x00109DA0
	internal static $ArrayType$$$BY0BB@$$CB_W ??_C@_1CC@HPPLJKMN@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAm?$AAa?$AAx?$AA_?$AAr?$AAe?$AAt?$AAr@;

	// Token: 0x04000009 RID: 9 RVA: 0x0010BFC8 File Offset: 0x00109DC8
	internal static $ArrayType$$$BY0BF@$$CB_W ??_C@_1CK@IFKKHFBP@?$AAu?$AAp?$AAd?$AAa?$AAt?$AAe?$AA_?$AAr?$AAe?$AAt?$AAr?$AAy?$AA_?$AAw?$AAa@;

	// Token: 0x0400000A RID: 10 RVA: 0x0010BFF8 File Offset: 0x00109DF8
	internal static $ArrayType$$$BY05$$CB_W ??_C@_1M@KBCLFMHN@?$AAv?$AAa?$AAl?$AAu?$AAe@;

	// Token: 0x0400000B RID: 11 RVA: 0x00164F70 File Offset: 0x00162D70
	internal static $ArrayType$$$BY0BC@$$CBD ??_C@_0BC@EOODALEL@Unknown?5exception@;

	// Token: 0x0400000C RID: 12 RVA: 0x00164F50 File Offset: 0x00162D50
	internal static $ArrayType$$$BY08$$CBD ??_C@_08EPJLHIJG@bad?5cast@;

	// Token: 0x0400000D RID: 13 RVA: 0x0010C008 File Offset: 0x00109E08
	internal static $ArrayType$$$BY06$$CB_W ??_C@_1O@NOAPAMN@?$AA?$CF?$AAs?$AA?2?$AA?$CK?$AA?4?$AA?$CK@;

	// Token: 0x0400000E RID: 14 RVA: 0x00164D8C File Offset: 0x00162B8C
	internal static $ArrayType$$$BY00$$CB_W ??_C@_11LOCGONAA@@;

	// Token: 0x0400000F RID: 15 RVA: 0x0010C208 File Offset: 0x0010A008
	internal static $ArrayType$$$BY0BM@$$CBD ??_C@_0BM@HNCPBHPF@FlushFileBuffers?5error?5?3?5?$CFd@;

	// Token: 0x04000010 RID: 16 RVA: 0x0010C0B0 File Offset: 0x00109EB0
	internal static $ArrayType$$$BY07$$CBD ??_C@_07FGAOOBMN@http?3?1?1@;

	// Token: 0x04000011 RID: 17 RVA: 0x0010C0B8 File Offset: 0x00109EB8
	internal static $ArrayType$$$BY08$$CBD ??_C@_08MFLLBFBE@https?3?1?1@;

	// Token: 0x04000012 RID: 18 RVA: 0x00164F84 File Offset: 0x00162D84
	internal static $ArrayType$$$BY06$$CBD ??_C@_06EPABMEI@?$CF?$CF?$CF02X@;

	// Token: 0x04000013 RID: 19 RVA: 0x0010C040 File Offset: 0x00109E40
	internal static $ArrayType$$$BY0BF@$$CBD ??_C@_0BF@FJMPBGJJ@extract?5?$CFlld?5?1?5?$CFlld?6@;

	// Token: 0x04000014 RID: 20 RVA: 0x0010C090 File Offset: 0x00109E90
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13FPGAJAPJ@?$AA?2@;

	// Token: 0x04000015 RID: 21 RVA: 0x0010C134 File Offset: 0x00109F34
	internal static $ArrayType$$$BY02$$CBD ??_C@_02PCIJFNDE@?$AN?6@;

	// Token: 0x04000016 RID: 22 RVA: 0x0010C130 File Offset: 0x00109F30
	internal static $ArrayType$$$BY01$$CBD ??_C@_01GPOEFGEJ@?7@;

	// Token: 0x04000017 RID: 23 RVA: 0x0010C060 File Offset: 0x00109E60
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13MCLHKIEA@?$AA?$FL@;

	// Token: 0x04000018 RID: 24 RVA: 0x0010C068 File Offset: 0x00109E68
	internal static $ArrayType$$$BY03$$CB_W ??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6@;

	// Token: 0x04000019 RID: 25 RVA: 0x0010C070 File Offset: 0x00109E70
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13NMPKAAJP@?$AA?$DN@;

	// Token: 0x0400001A RID: 26 RVA: 0x0010C074 File Offset: 0x00109E74
	internal static $ArrayType$$$BY02$$CB_W ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@;

	// Token: 0x0400001B RID: 27 RVA: 0x0010C0C8 File Offset: 0x00109EC8
	internal static $ArrayType$$$BY07$$CB_W ??_C@_1BA@GBHGOCBB@?$AAh?$AAt?$AAt?$AAp?$AA?3?$AA?1?$AA?1@;

	// Token: 0x0400001C RID: 28 RVA: 0x0010C0D8 File Offset: 0x00109ED8
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13CGOKJPIL@?$AA?1@;

	// Token: 0x0400001D RID: 29 RVA: 0x0010C098 File Offset: 0x00109E98
	internal static $ArrayType$$$BY03$$CB_W ??_C@_17PFPODFCN@?$AA_?$AA?$CF?$AAd@;

	// Token: 0x0400001E RID: 30 RVA: 0x0010C140 File Offset: 0x00109F40
	internal static $ArrayType$$$BY07$$CB_W ??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@;

	// Token: 0x0400001F RID: 31 RVA: 0x0010C150 File Offset: 0x00109F50
	internal static $ArrayType$$$BY08$$CB_W ??_C@_1BC@EIHMOPKK@?$AA?$DP?$AAt?$AAi?$AAm?$AAe?$AA?$DN?$AA?$CF?$AAd@;

	// Token: 0x04000020 RID: 32 RVA: 0x0010C100 File Offset: 0x00109F00
	internal static $ArrayType$$$BY0O@$$CB_W ??_C@_1BM@JDLOOPKC@?$AAr?$AAe?$AAt?$AAr?$AAy?$AA?5?$AA?$CF?$AAd?$AA?5?$AA?3?$AA?5?$AA?$CF?$AAs@;

	// Token: 0x04000021 RID: 33 RVA: 0x0010C11C File Offset: 0x00109F1C
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13NEIAEHFG@?$AA?$CC@;

	// Token: 0x04000022 RID: 34 RVA: 0x0010C120 File Offset: 0x00109F20
	internal static $ArrayType$$$BY03$$CB_W ??_C@_17CMBJCHDO@?$AA?$CC?$AA?5?$AA?$CC@;

	// Token: 0x04000023 RID: 35 RVA: 0x0010C128 File Offset: 0x00109F28
	internal static $ArrayType$$$BY02$$CB_W ??_C@_15KEGLFFFP@?$AA?$CC?$AA?5@;

	// Token: 0x04000024 RID: 36 RVA: 0x0010C0E0 File Offset: 0x00109EE0
	internal static $ArrayType$$$BY04$$CB_W ??_C@_19OEJGHIEG@?$AAn?$AAo?$AAn?$AAe@;

	// Token: 0x04000025 RID: 37 RVA: 0x0010C0FC File Offset: 0x00109EFC
	internal static $ArrayType$$$BY01$$CBD ??_C@_01LBDDMOBJ@?$FN@;

	// Token: 0x04000026 RID: 38 RVA: 0x0010C0F0 File Offset: 0x00109EF0
	internal static $ArrayType$$$BY02$$CBD ??_C@_02DNJFBPJB@?$FN?$FL@;

	// Token: 0x04000027 RID: 39 RVA: 0x0010C0F4 File Offset: 0x00109EF4
	internal static $ArrayType$$$BY04$$CBD ??_C@_04HIBGFPH@NULL@;

	// Token: 0x04000028 RID: 40 RVA: 0x0010C0EC File Offset: 0x00109EEC
	internal static $ArrayType$$$BY01$$CBD ??_C@_01OHGJGJJP@?$FL@;

	// Token: 0x04000029 RID: 41 RVA: 0x00164D90 File Offset: 0x00162B90
	internal static $ArrayType$$$BY04$$CB_W ??_C@_19JFPGGDCL@?$AA?4?$AAl?$AAo?$AAg@;

	// Token: 0x0400002A RID: 42 RVA: 0x0010C168 File Offset: 0x00109F68
	internal static $ArrayType$$$BY0DE@$$CBD ??_C@_0DE@GJLFGEBG@Launcher?5exited?5because?5another@;

	// Token: 0x0400002B RID: 43 RVA: 0x0010C1A0 File Offset: 0x00109FA0
	internal static $ArrayType$$$BY0CB@$$CB_W ??_C@_1EC@LEIBIDFF@?$AAc?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AAw?$AAo?$AAr?$AAk?$AAi?$AAn?$AAg@;

	// Token: 0x0400002C RID: 44 RVA: 0x0010C1E8 File Offset: 0x00109FE8
	internal static $ArrayType$$$BY0L@$$CB_W ??_C@_1BG@LGFFKPND@?$AAK?$AAE?$AAY?$AA_?$AAB?$AAI?$AAN?$AAA?$AAR?$AAY@;

	// Token: 0x0400002D RID: 45 RVA: 0x0010C200 File Offset: 0x0010A000
	internal static $ArrayType$$$BY05$$CBD ??_C@_05JIOJAJDK@lmRun@;

	// Token: 0x0400002E RID: 46 RVA: 0x0010C018 File Offset: 0x00109E18
	internal static $ArrayType$$$BY0BC@$$CBD ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long@;

	// Token: 0x0400002F RID: 47 RVA: 0x00164E08 File Offset: 0x00162C08
	internal static $ArrayType$$$BY0BI@$$CBD ??_C@_0BI@CFPLBAOH@invalid?5string?5position@;

	// Token: 0x04000030 RID: 48 RVA: 0x00164DB8 File Offset: 0x00162BB8
	internal static $ArrayType$$$BY0BB@$$CBD ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long@;

	// Token: 0x04000031 RID: 49 RVA: 0x00164F60 File Offset: 0x00162D60
	internal static $ArrayType$$$BY0BA@$$CBD ??_C@_0BA@JFNIOLAK@string?5too?5long@;

	// Token: 0x04000032 RID: 50 RVA: 0x00164FA8 File Offset: 0x00162DA8
	internal static $ArrayType$$$BY0BE@$$CBD ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@;

	// Token: 0x04000033 RID: 51 RVA: 0x0018F0F8 File Offset: 0x0018CEF8
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$LastErrorInfo@ULastErrorType@@@@6B@;

	// Token: 0x04000034 RID: 52 RVA: 0x001A2088 File Offset: 0x0019F488
	internal static $ArrayType$$$BY08Q6AXXZ ??_7MemoryFile@@6B@;

	// Token: 0x04000035 RID: 53 RVA: 0x0018EB40 File Offset: 0x0018C940
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000036 RID: 54 RVA: 0x0018EBC0 File Offset: 0x0018C9C0
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;

	// Token: 0x04000037 RID: 55 RVA: 0x0018FAA0 File Offset: 0x0018D8A0
	internal static _s__RTTICompleteObjectLocator2 ??_R4exception@std@@6B@;

	// Token: 0x04000038 RID: 56 RVA: 0x001AAEC0 File Offset: 0x001A82C0
	internal static $_TypeDescriptor$_extraBytes_72 ??_R0?AV?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8;

	// Token: 0x04000039 RID: 57 RVA: 0x0010C080 File Offset: 0x00109E80
	internal static $ArrayType$$$BY01$$CBH ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_istream@_WU?$char_traits@_W@std@@@1@@;

	// Token: 0x0400003A RID: 58 RVA: 0x001A2000 File Offset: 0x0019F400
	internal unsafe static void* g_logfile;

	// Token: 0x0400003B RID: 59 RVA: 0x001A2270 File Offset: 0x0019F670
	internal static $ArrayType$$$BY01Q6AXXZ ??_7?$LastErrorInfo@ULastErrorType@@@@6B@;

	// Token: 0x0400003C RID: 60 RVA: 0x001AB6A0 File Offset: 0x001A8AA0
	internal unsafe static HINSTANCE__* g_launcher_module;

	// Token: 0x0400003D RID: 61 RVA: 0x0018F008 File Offset: 0x0018CE08
	internal static _s__RTTICompleteObjectLocator2 ??_R4DownloadSpeed@@6B@;

	// Token: 0x0400003E RID: 62 RVA: 0x0018E960 File Offset: 0x0018C760
	internal static _s__RTTIClassHierarchyDescriptor ??_R3FileHash@@8;

	// Token: 0x0400003F RID: 63 RVA: 0x0018EC40 File Offset: 0x0018CA40
	internal static _s__RTTICompleteObjectLocator2 ??_R4LocalFile@@6B@;

	// Token: 0x04000040 RID: 64 RVA: 0x0018E880 File Offset: 0x0018C680
	internal static _s__RTTICompleteObjectLocator2 ??_R4DownloadFile@@6B@;

	// Token: 0x04000041 RID: 65 RVA: 0x0018EFE0 File Offset: 0x0018CDE0
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2DownloadSpeed@@8;

	// Token: 0x04000042 RID: 66 RVA: 0x0018EF78 File Offset: 0x0018CD78
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x04000043 RID: 67 RVA: 0x0018E978 File Offset: 0x0018C778
	internal static _s__RTTICompleteObjectLocator2 ??_R4FileHash@@6B@;

	// Token: 0x04000044 RID: 68 RVA: 0x0018EAF0 File Offset: 0x0018C8F0
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$_Ref_count_obj@VIniParser@@@std@@6B@;

	// Token: 0x04000045 RID: 69 RVA: 0x0018F080 File Offset: 0x0018CE80
	internal static _s__RTTICompleteObjectLocator2 ??_R4FileDownloader@@6B@;

	// Token: 0x04000046 RID: 70 RVA: 0x0018F518 File Offset: 0x0018D318
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@_Ref_count_base@std@@8;

	// Token: 0x04000047 RID: 71 RVA: 0x0018F9D0 File Offset: 0x0018D7D0
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@bad_cast@std@@8;

	// Token: 0x04000048 RID: 72 RVA: 0x001AB170 File Offset: 0x001A8570
	internal static $_TypeDescriptor$_extraBytes_21 ??_R0?AVFileDownloader@@@8;

	// Token: 0x04000049 RID: 73 RVA: 0x0018EE28 File Offset: 0x0018CC28
	internal static $_s__RTTIBaseClassArray$_extraBytes_32 ??_R2?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x0400004A RID: 74 RVA: 0x001AB498 File Offset: 0x001A8898
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVios_base@std@@@8;

	// Token: 0x0400004B RID: 75 RVA: 0x0018EEE0 File Offset: 0x0018CCE0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x0400004C RID: 76 RVA: 0x0018E9A0 File Offset: 0x0018C7A0
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@FileCompress@@8;

	// Token: 0x0400004D RID: 77 RVA: 0x0018F148 File Offset: 0x0018CF48
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2FileInfoList@@8;

	// Token: 0x0400004E RID: 78 RVA: 0x0018E9F0 File Offset: 0x0018C7F0
	internal static _s__RTTICompleteObjectLocator2 ??_R4FileCompress@@6B@;

	// Token: 0x0400004F RID: 79 RVA: 0x0018F658 File Offset: 0x0018D458
	internal static _s__RTTIBaseClassDescriptor ??_R17A@3EA@?$_Iosb@H@std@@8;

	// Token: 0x04000050 RID: 80 RVA: 0x0018EF20 File Offset: 0x0018CD20
	internal static $_s__RTTIBaseClassArray$_extraBytes_80 ??_R2?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x04000051 RID: 81 RVA: 0x0018FA50 File Offset: 0x0018D850
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@exception@std@@8;

	// Token: 0x04000052 RID: 82 RVA: 0x0018EB18 File Offset: 0x0018C918
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x04000053 RID: 83 RVA: 0x0018ECE8 File Offset: 0x0018CAE8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x04000054 RID: 84 RVA: 0x0018EA58 File Offset: 0x0018C858
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Ref_count_obj@VMemoryFile@@@std@@8;

	// Token: 0x04000055 RID: 85 RVA: 0x0018E8A8 File Offset: 0x0018C6A8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@MemoryFile@@8;

	// Token: 0x04000056 RID: 86 RVA: 0x0018EE90 File Offset: 0x0018CC90
	internal static $_s__RTTIBaseClassArray$_extraBytes_72 ??_R2?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000057 RID: 87 RVA: 0x0018E8D0 File Offset: 0x0018C6D0
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2MemoryFile@@8;

	// Token: 0x04000058 RID: 88 RVA: 0x0018EDD8 File Offset: 0x0018CBD8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_istream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000059 RID: 89 RVA: 0x0018E9D8 File Offset: 0x0018C7D8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3FileCompress@@8;

	// Token: 0x0400005A RID: 90 RVA: 0x001AB4C0 File Offset: 0x001A88C0
	internal static $_TypeDescriptor$_extraBytes_20 ??_R0?AV?$_Iosb@H@std@@@8;

	// Token: 0x0400005B RID: 91 RVA: 0x0018F170 File Offset: 0x0018CF70
	internal static _s__RTTICompleteObjectLocator2 ??_R4FileInfoList@@6B@;

	// Token: 0x0400005C RID: 92 RVA: 0x0018EA18 File Offset: 0x0018C818
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Ref_count_obj@VMemoryFile@@@std@@8;

	// Token: 0x0400005D RID: 93 RVA: 0x0010BEB0 File Offset: 0x00109CB0
	internal unsafe static char* file_name;

	// Token: 0x0400005E RID: 94 RVA: 0x0010BEB8 File Offset: 0x00109CB8
	internal unsafe static char* launcher;

	// Token: 0x0400005F RID: 95 RVA: 0x0010BEC0 File Offset: 0x00109CC0
	internal unsafe static char* signature;

	// Token: 0x04000060 RID: 96 RVA: 0x0010BEE8 File Offset: 0x00109CE8
	internal unsafe static char* update_max_retry;

	// Token: 0x04000061 RID: 97 RVA: 0x0010BEE0 File Offset: 0x00109CE0
	internal unsafe static char* update_url;

	// Token: 0x04000062 RID: 98 RVA: 0x0010BED0 File Offset: 0x00109CD0
	internal unsafe static char* launcher_module;

	// Token: 0x04000063 RID: 99 RVA: 0x0010BEF0 File Offset: 0x00109CF0
	internal unsafe static char* update_retry_wait_ms;

	// Token: 0x04000064 RID: 100 RVA: 0x0010BEC8 File Offset: 0x00109CC8
	internal unsafe static char* info_file;

	// Token: 0x04000065 RID: 101 RVA: 0x0010BED8 File Offset: 0x00109CD8
	internal unsafe static char* updater_file;

	// Token: 0x04000066 RID: 102 RVA: 0x0010BEF8 File Offset: 0x00109CF8
	internal unsafe static char* value;

	// Token: 0x04000067 RID: 103 RVA: 0x001AB148 File Offset: 0x001A8548
	internal static $_TypeDescriptor$_extraBytes_20 ??_R0?AVDownloadSpeed@@@8;

	// Token: 0x04000068 RID: 104 RVA: 0x0018EF90 File Offset: 0x0018CD90
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;

	// Token: 0x04000069 RID: 105 RVA: 0x001AB1F8 File Offset: 0x001A85F8
	internal static $_TypeDescriptor$_extraBytes_28 ??_R0?AVwinapi_call_error@ipc@@@8;

	// Token: 0x0400006A RID: 106 RVA: 0x0018F0E0 File Offset: 0x0018CEE0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$LastErrorInfo@ULastErrorType@@@@8;

	// Token: 0x0400006B RID: 107 RVA: 0x0018F9F8 File Offset: 0x0018D7F8
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2bad_cast@std@@8;

	// Token: 0x0400006C RID: 108 RVA: 0x0018FA78 File Offset: 0x0018D878
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2exception@std@@8;

	// Token: 0x0400006D RID: 109 RVA: 0x001A2028 File Offset: 0x0019F428
	internal static $ArrayType$$$BY02Q6AXXZ ??_7bad_cast@std@@6B@;

	// Token: 0x0400006E RID: 110 RVA: 0x001A2128 File Offset: 0x0019F528
	internal static $ArrayType$$$BY04Q6AXXZ ??_7?$_Ref_count_obj@VIniParser@@@std@@6B@;

	// Token: 0x0400006F RID: 111 RVA: 0x001ABF80 File Offset: 0x00000000
	internal static bool ?use_log@LogMsg@@2_NA;

	// Token: 0x04000070 RID: 112 RVA: 0x0018EC68 File Offset: 0x0018CA68
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Ref_count_obj@VLocalFile@@@std@@8;

	// Token: 0x04000071 RID: 113 RVA: 0x001AAE88 File Offset: 0x001A8288
	internal static $_TypeDescriptor$_extraBytes_40 ??_R0?AV?$_Ref_count_obj@VIniParser@@@std@@@8;

	// Token: 0x04000072 RID: 114 RVA: 0x001AAF88 File Offset: 0x001A8388
	internal static $_TypeDescriptor$_extraBytes_40 ??_R0?AV?$_Ref_count_obj@VLocalFile@@@std@@@8;

	// Token: 0x04000073 RID: 115 RVA: 0x001AB1D0 File Offset: 0x001A85D0
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVFileInfoList@@@8;

	// Token: 0x04000074 RID: 116 RVA: 0x001AADD8 File Offset: 0x001A81D8
	internal static $_TypeDescriptor$_extraBytes_17 ??_R0?AVMemoryFile@@@8;

	// Token: 0x04000075 RID: 117 RVA: 0x001A2280 File Offset: 0x0019F680
	internal static $ArrayType$$$BY01Q6AXXZ ??_7FileInfoList@@6B@;

	// Token: 0x04000076 RID: 118 RVA: 0x001AB020 File Offset: 0x001A8420
	internal static $_TypeDescriptor$_extraBytes_53 ??_R0?AV?$basic_iostream@_WU?$char_traits@_W@std@@@std@@@8;

	// Token: 0x04000077 RID: 119 RVA: 0x0018ECC0 File Offset: 0x0018CAC0
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$_Ref_count_obj@VLocalFile@@@std@@6B@;

	// Token: 0x04000078 RID: 120 RVA: 0x0018ED38 File Offset: 0x0018CB38
	internal static $_s__RTTIBaseClassArray$_extraBytes_24 ??_R2?$basic_ios@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000079 RID: 121 RVA: 0x0018E8E8 File Offset: 0x0018C6E8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3MemoryFile@@8;

	// Token: 0x0400007A RID: 122 RVA: 0x0018E900 File Offset: 0x0018C700
	internal static _s__RTTICompleteObjectLocator2 ??_R4MemoryFile@@6B@;

	// Token: 0x0400007B RID: 123 RVA: 0x001AB638 File Offset: 0x001A8A38
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVbad_cast@std@@@8;

	// Token: 0x0400007C RID: 124 RVA: 0x0018EC90 File Offset: 0x0018CA90
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$_Ref_count_obj@VLocalFile@@@std@@8;

	// Token: 0x0400007D RID: 125 RVA: 0x0019D798 File Offset: 0x0019B598
	internal static $_s__CatchableTypeArray$_extraBytes_16 _CTA2?AVbad_cast@std@@;

	// Token: 0x0400007E RID: 126 RVA: 0x0018EBA8 File Offset: 0x0018C9A8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x0400007F RID: 127 RVA: 0x0018EEF8 File Offset: 0x0018CCF8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_iostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000080 RID: 128 RVA: 0x0018E928 File Offset: 0x0018C728
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@FileHash@@8;

	// Token: 0x04000081 RID: 129 RVA: 0x0018F158 File Offset: 0x0018CF58
	internal static _s__RTTIClassHierarchyDescriptor ??_R3FileInfoList@@8;

	// Token: 0x04000082 RID: 130 RVA: 0x001A2260 File Offset: 0x0019F660
	internal static $ArrayType$$$BY01Q6AXXZ ??_7FileDownloader@@6B@;

	// Token: 0x04000083 RID: 131 RVA: 0x0018E830 File Offset: 0x0018C630
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@DownloadFile@@8;

	// Token: 0x04000084 RID: 132 RVA: 0x001A2010 File Offset: 0x0019F410
	internal static $ArrayType$$$BY02Q6AXXZ ??_7exception@std@@6B@;

	// Token: 0x04000085 RID: 133 RVA: 0x0019D7B0 File Offset: 0x0019B5B0
	internal static _s__ThrowInfo _TI2?AVbad_cast@std@@;

	// Token: 0x04000086 RID: 134 RVA: 0x001AAFC0 File Offset: 0x001A83C0
	internal static $_TypeDescriptor$_extraBytes_75 ??_R0?AV?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@8;

	// Token: 0x04000087 RID: 135 RVA: 0x0018ED58 File Offset: 0x0018CB58
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_ios@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000088 RID: 136 RVA: 0x001AAF68 File Offset: 0x001A8368
	internal static $_TypeDescriptor$_extraBytes_16 ??_R0?AVLocalFile@@@8;

	// Token: 0x04000089 RID: 137 RVA: 0x0018EAC0 File Offset: 0x0018C8C0
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x0400008A RID: 138 RVA: 0x0018F748 File Offset: 0x0018D548
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@ios_base@std@@8;

	// Token: 0x0400008B RID: 139 RVA: 0x001AB100 File Offset: 0x001A8500
	internal static $_TypeDescriptor$_extraBytes_52 ??_R0?AV?$basic_ostream@_WU?$char_traits@_W@std@@@std@@@8;

	// Token: 0x0400008C RID: 140 RVA: 0x0018FA88 File Offset: 0x0018D888
	internal static _s__RTTIClassHierarchyDescriptor ??_R3exception@std@@8;

	// Token: 0x0400008D RID: 141 RVA: 0x001A20D0 File Offset: 0x0019F4D0
	internal static $ArrayType$$$BY01Q6AXXZ ??_7FileHash@@6B@;

	// Token: 0x0400008E RID: 142 RVA: 0x0018F120 File Offset: 0x0018CF20
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@FileInfoList@@8;

	// Token: 0x0400008F RID: 143 RVA: 0x0018EB90 File Offset: 0x0018C990
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@8;

	// Token: 0x04000090 RID: 144 RVA: 0x0018EAD8 File Offset: 0x0018C8D8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x04000091 RID: 145 RVA: 0x0018EC10 File Offset: 0x0018CA10
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2LocalFile@@8;

	// Token: 0x04000092 RID: 146 RVA: 0x001A2040 File Offset: 0x0019F440
	internal static $ArrayType$$$BY08Q6AXXZ ??_7DownloadFile@@6B@;

	// Token: 0x04000093 RID: 147 RVA: 0x0018ECA8 File Offset: 0x0018CAA8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Ref_count_obj@VLocalFile@@@std@@8;

	// Token: 0x04000094 RID: 148 RVA: 0x0018E858 File Offset: 0x0018C658
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2DownloadFile@@8;

	// Token: 0x04000095 RID: 149 RVA: 0x0018F770 File Offset: 0x0018D570
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Iosb@H@std@@8;

	// Token: 0x04000096 RID: 150 RVA: 0x0018EB68 File Offset: 0x0018C968
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000097 RID: 151 RVA: 0x0018EDC0 File Offset: 0x0018CBC0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_istream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x04000098 RID: 152 RVA: 0x001AAE20 File Offset: 0x001A8220
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVFileCompress@@@8;

	// Token: 0x04000099 RID: 153 RVA: 0x001AB0C0 File Offset: 0x001A84C0
	internal static $_TypeDescriptor$_extraBytes_48 ??_R0?AV?$basic_ios@_WU?$char_traits@_W@std@@@std@@@8;

	// Token: 0x0400009A RID: 154 RVA: 0x0018EE68 File Offset: 0x0018CC68
	internal static _s__RTTIBaseClassDescriptor ??_R1BA@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x0400009B RID: 155 RVA: 0x0018E950 File Offset: 0x0018C750
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2FileHash@@8;

	// Token: 0x0400009C RID: 156 RVA: 0x0010C088 File Offset: 0x00109E88
	internal static $ArrayType$$$BY01$$CBH ??_8?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@7B?$basic_ostream@_WU?$char_traits@_W@std@@@1@@;

	// Token: 0x0400009D RID: 157 RVA: 0x0018ED98 File Offset: 0x0018CB98
	internal static $_s__RTTIBaseClassArray$_extraBytes_32 ??_R2?$basic_istream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x0400009E RID: 158 RVA: 0x001ABF88 File Offset: 0x00000000
	internal unsafe static locale.facet* ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PEBVfacet@locale@2@EB;

	// Token: 0x0400009F RID: 159 RVA: 0x00164DD8 File Offset: 0x00162BD8
	internal static piecewise_construct_t piecewise_construct;

	// Token: 0x040000A0 RID: 160 RVA: 0x0018FA10 File Offset: 0x0018D810
	internal static _s__RTTIClassHierarchyDescriptor ??_R3bad_cast@std@@8;

	// Token: 0x040000A1 RID: 161 RVA: 0x0018F068 File Offset: 0x0018CE68
	internal static _s__RTTIClassHierarchyDescriptor ??_R3FileDownloader@@8;

	// Token: 0x040000A2 RID: 162 RVA: 0x0018FA28 File Offset: 0x0018D828
	internal static _s__RTTICompleteObjectLocator2 ??_R4bad_cast@std@@6B@;

	// Token: 0x040000A3 RID: 163 RVA: 0x001A2100 File Offset: 0x0019F500
	internal static $ArrayType$$$BY04Q6AXXZ ??_7?$_Ref_count_obj@VMemoryFile@@@std@@6B@;

	// Token: 0x040000A4 RID: 164 RVA: 0x0018EFB8 File Offset: 0x0018CDB8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@DownloadSpeed@@8;

	// Token: 0x040000A5 RID: 165 RVA: 0x001AB2A0 File Offset: 0x001A86A0
	internal static $_TypeDescriptor$_extraBytes_26 ??_R0?AV_Ref_count_base@std@@@8;

	// Token: 0x040000A6 RID: 166 RVA: 0x001A2150 File Offset: 0x0019F550
	internal static $ArrayType$$$BY0BA@Q6AXXZ ??_7?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;

	// Token: 0x040000A7 RID: 167 RVA: 0x001A2218 File Offset: 0x0019F618
	internal static $ArrayType$$$BY04Q6AXXZ ??_7?$_Ref_count_obj@VLocalFile@@@std@@6B@;

	// Token: 0x040000A8 RID: 168 RVA: 0x0018F030 File Offset: 0x0018CE30
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@FileDownloader@@8;

	// Token: 0x040000A9 RID: 169 RVA: 0x0018F0A8 File Offset: 0x0018CEA8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$LastErrorInfo@ULastErrorType@@@@8;

	// Token: 0x040000AA RID: 170 RVA: 0x0018EA70 File Offset: 0x0018C870
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$_Ref_count_obj@VMemoryFile@@@std@@6B@;

	// Token: 0x040000AB RID: 171 RVA: 0x001AAE00 File Offset: 0x001A8200
	internal static $_TypeDescriptor$_extraBytes_15 ??_R0?AVFileHash@@@8;

	// Token: 0x040000AC RID: 172 RVA: 0x0018F500 File Offset: 0x0018D300
	internal static _s__RTTIClassHierarchyDescriptor ??_R3_Ref_count_base@std@@8;

	// Token: 0x040000AD RID: 173 RVA: 0x001AAE48 File Offset: 0x001A8248
	internal static $_TypeDescriptor$_extraBytes_41 ??_R0?AV?$_Ref_count_obj@VMemoryFile@@@std@@@8;

	// Token: 0x040000AE RID: 174 RVA: 0x001A20E0 File Offset: 0x0019F4E0
	internal static $ArrayType$$$BY01Q6AXXZ ??_7FileCompress@@6B@;

	// Token: 0x040000AF RID: 175 RVA: 0x0018EE00 File Offset: 0x0018CC00
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x040000B0 RID: 176 RVA: 0x0018EFF0 File Offset: 0x0018CDF0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3DownloadSpeed@@8;

	// Token: 0x040000B1 RID: 177 RVA: 0x0018F0D0 File Offset: 0x0018CED0
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2?$LastErrorInfo@ULastErrorType@@@@8;

	// Token: 0x040000B2 RID: 178 RVA: 0x0018EA98 File Offset: 0x0018C898
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x040000B3 RID: 179 RVA: 0x0018F4A0 File Offset: 0x0018D2A0
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2ios_base@std@@8;

	// Token: 0x040000B4 RID: 180 RVA: 0x0018F4F0 File Offset: 0x0018D2F0
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2_Ref_count_base@std@@8;

	// Token: 0x040000B5 RID: 181 RVA: 0x001A2250 File Offset: 0x0019F650
	internal static $ArrayType$$$BY01Q6AXXZ ??_7DownloadSpeed@@6B@;

	// Token: 0x040000B6 RID: 182 RVA: 0x0018EB50 File Offset: 0x0018C950
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x040000B7 RID: 183 RVA: 0x0018ED70 File Offset: 0x0018CB70
	internal static _s__RTTIBaseClassDescriptor ??_R1A@A@3FA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x040000B8 RID: 184 RVA: 0x001AB070 File Offset: 0x001A8470
	internal static $_TypeDescriptor$_extraBytes_52 ??_R0?AV?$basic_istream@_WU?$char_traits@_W@std@@@std@@@8;

	// Token: 0x040000B9 RID: 185 RVA: 0x0018F878 File Offset: 0x0018D678
	internal static _s__RTTIClassHierarchyDescriptor ??_R3ios_base@std@@8;

	// Token: 0x040000BA RID: 186 RVA: 0x0018EA40 File Offset: 0x0018C840
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$_Ref_count_obj@VMemoryFile@@@std@@8;

	// Token: 0x040000BB RID: 187 RVA: 0x0018ED10 File Offset: 0x0018CB10
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$basic_ios@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x040000BC RID: 188 RVA: 0x0018F058 File Offset: 0x0018CE58
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2FileDownloader@@8;

	// Token: 0x040000BD RID: 189 RVA: 0x0018F4B8 File Offset: 0x0018D2B8
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2?$_Iosb@H@std@@8;

	// Token: 0x040000BE RID: 190 RVA: 0x001AAF20 File Offset: 0x001A8320
	internal static $_TypeDescriptor$_extraBytes_54 ??_R0?AV?$basic_streambuf@_WU?$char_traits@_W@std@@@std@@@8;

	// Token: 0x040000BF RID: 191 RVA: 0x0018EBE8 File Offset: 0x0018C9E8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@LocalFile@@8;

	// Token: 0x040000C0 RID: 192 RVA: 0x0018F680 File Offset: 0x0018D480
	internal static _s__RTTIBaseClassDescriptor ??_R1A@A@3EA@ios_base@std@@8;

	// Token: 0x040000C1 RID: 193 RVA: 0x001AB198 File Offset: 0x001A8598
	internal static $_TypeDescriptor$_extraBytes_39 ??_R0?AV?$LastErrorInfo@ULastErrorType@@@@@8;

	// Token: 0x040000C2 RID: 194 RVA: 0x001A21D0 File Offset: 0x0019F5D0
	internal static $ArrayType$$$BY08Q6AXXZ ??_7LocalFile@@6B@;

	// Token: 0x040000C3 RID: 195 RVA: 0x0018F890 File Offset: 0x0018D690
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Iosb@H@std@@8;

	// Token: 0x040000C4 RID: 196 RVA: 0x001AB660 File Offset: 0x001A8A60
	internal static $_TypeDescriptor$_extraBytes_20 ??_R0?AVexception@std@@@8;

	// Token: 0x040000C5 RID: 197 RVA: 0x0018F720 File Offset: 0x0018D520
	internal static _s__RTTIBaseClassDescriptor ??_R17?0A@EA@?$_Iosb@H@std@@8;

	// Token: 0x040000C6 RID: 198 RVA: 0x0018EE50 File Offset: 0x0018CC50
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$basic_ostream@_WU?$char_traits@_W@std@@@std@@8;

	// Token: 0x040000C7 RID: 199 RVA: 0x0018EC28 File Offset: 0x0018CA28
	internal static _s__RTTIClassHierarchyDescriptor ??_R3LocalFile@@8;

	// Token: 0x040000C8 RID: 200 RVA: 0x0018E868 File Offset: 0x0018C668
	internal static _s__RTTIClassHierarchyDescriptor ??_R3DownloadFile@@8;

	// Token: 0x040000C9 RID: 201 RVA: 0x001A2240 File Offset: 0x0019F640
	internal static $ArrayType$$$BY01Q6AXXZ ??_7?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@6B@;

	// Token: 0x040000CA RID: 202 RVA: 0x001AADB0 File Offset: 0x001A81B0
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVDownloadFile@@@8;

	// Token: 0x040000CB RID: 203 RVA: 0x0018E9C8 File Offset: 0x0018C7C8
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2FileCompress@@8;

	// Token: 0x040000CC RID: 204 RVA: 0x001A2298 File Offset: 0x0019F698
	public static method __m2mep@??_Eexception@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000CD RID: 205 RVA: 0x001A22A8 File Offset: 0x0019F6A8
	public static method __m2mep@??_Ebad_cast@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000CE RID: 206 RVA: 0x001A22B8 File Offset: 0x0019F6B8
	public static method __m2mep@??_EDownloadFile@@$$FUEAAPEAXI@Z;

	// Token: 0x040000CF RID: 207 RVA: 0x001A2468 File Offset: 0x0019F868
	public static method __m2mep@?GetDstFilePath@LocalFile@@$$FUEAAXPEA_WH@Z;

	// Token: 0x040000D0 RID: 208 RVA: 0x001A2478 File Offset: 0x0019F878
	public static method __m2mep@?ResetFilePointer@LocalFile@@$$FUEAA_NXZ;

	// Token: 0x040000D1 RID: 209 RVA: 0x001A2488 File Offset: 0x0019F888
	public static method __m2mep@?WriteFileData@LocalFile@@$$FUEAA_NPEBW4byte@std@@I@Z;

	// Token: 0x040000D2 RID: 210 RVA: 0x001A2498 File Offset: 0x0019F898
	public static method __m2mep@?FlushFileData@LocalFile@@$$FUEAA_NXZ;

	// Token: 0x040000D3 RID: 211 RVA: 0x001A24A8 File Offset: 0x0019F8A8
	public static method __m2mep@?GetFileBuffer@LocalFile@@$$FUEAAPEAW4byte@std@@XZ;

	// Token: 0x040000D4 RID: 212 RVA: 0x001A24B8 File Offset: 0x0019F8B8
	public static method __m2mep@?Close@LocalFile@@$$FUEAAXXZ;

	// Token: 0x040000D5 RID: 213 RVA: 0x001A24C8 File Offset: 0x0019F8C8
	public static method __m2mep@?SetFullSize@LocalFile@@$$FMEAA_N_J@Z;

	// Token: 0x040000D6 RID: 214 RVA: 0x001A2458 File Offset: 0x0019F858
	public static method __m2mep@??_ELocalFile@@$$FUEAAPEAXI@Z;

	// Token: 0x040000D7 RID: 215 RVA: 0x001A22D8 File Offset: 0x0019F6D8
	public static method __m2mep@?GetDstFilePath@MemoryFile@@$$FUEAAXPEA_WH@Z;

	// Token: 0x040000D8 RID: 216 RVA: 0x001A22E8 File Offset: 0x0019F6E8
	public static method __m2mep@?ResetFilePointer@MemoryFile@@$$FUEAA_NXZ;

	// Token: 0x040000D9 RID: 217 RVA: 0x001A22F8 File Offset: 0x0019F6F8
	public static method __m2mep@?WriteFileData@MemoryFile@@$$FUEAA_NPEBW4byte@std@@I@Z;

	// Token: 0x040000DA RID: 218 RVA: 0x001A2308 File Offset: 0x0019F708
	public static method __m2mep@?FlushFileData@MemoryFile@@$$FUEAA_NXZ;

	// Token: 0x040000DB RID: 219 RVA: 0x001A2318 File Offset: 0x0019F718
	public static method __m2mep@?GetFileBuffer@MemoryFile@@$$FUEAAPEAW4byte@std@@XZ;

	// Token: 0x040000DC RID: 220 RVA: 0x001A2328 File Offset: 0x0019F728
	public static method __m2mep@?Close@MemoryFile@@$$FUEAAXXZ;

	// Token: 0x040000DD RID: 221 RVA: 0x001A2338 File Offset: 0x0019F738
	public static method __m2mep@?SetFullSize@MemoryFile@@$$FMEAA_N_J@Z;

	// Token: 0x040000DE RID: 222 RVA: 0x001A22C8 File Offset: 0x0019F6C8
	public static method __m2mep@??_EMemoryFile@@$$FUEAAPEAXI@Z;

	// Token: 0x040000DF RID: 223 RVA: 0x001A2518 File Offset: 0x0019F918
	public static method __m2mep@??_EDownloadSpeed@@$$FUEAAPEAXI@Z;

	// Token: 0x040000E0 RID: 224 RVA: 0x001A2348 File Offset: 0x0019F748
	public static method __m2mep@?ProgressFunction@FileDownloader@@$$FCAHPEAXNNNN@Z;

	// Token: 0x040000E1 RID: 225 RVA: 0x001A2538 File Offset: 0x0019F938
	public static method __m2mep@?WriteFunction@FileDownloader@@$$FCA_KPEAX_K10@Z;

	// Token: 0x040000E2 RID: 226 RVA: 0x001A2528 File Offset: 0x0019F928
	public static method __m2mep@??_EFileDownloader@@$$FUEAAPEAXI@Z;

	// Token: 0x040000E3 RID: 227 RVA: 0x001A2358 File Offset: 0x0019F758
	public static method __m2mep@??_EFileHash@@$$FUEAAPEAXI@Z;

	// Token: 0x040000E4 RID: 228 RVA: 0x001A2378 File Offset: 0x0019F778
	public static method __m2mep@?SzAlloc@FileCompress@@$$FSAPEAXPEAX_K@Z;

	// Token: 0x040000E5 RID: 229 RVA: 0x001A2388 File Offset: 0x0019F788
	public static method __m2mep@?SzFree@FileCompress@@$$FSAXPEAX0@Z;

	// Token: 0x040000E6 RID: 230 RVA: 0x001A2368 File Offset: 0x0019F768
	public static method __m2mep@??_EFileCompress@@$$FUEAAPEAXI@Z;

	// Token: 0x040000E7 RID: 231 RVA: 0x001A2558 File Offset: 0x0019F958
	public static method __m2mep@??_EFileInfoList@@$$FUEAAPEAXI@Z;

	// Token: 0x040000E8 RID: 232 RVA: 0x001A2568 File Offset: 0x0019F968
	public static method __m2mep@?ThreadProc@LauncherupdateInfo@@$$FCAIPEAX@Z;

	// Token: 0x040000E9 RID: 233 RVA: 0x001A20E8 File Offset: 0x0019F4E8
	public static method __m2mep@?FindLauncherWindow@@$$FYAHPEAUHWND__@@_J@Z;

	// Token: 0x040000EA RID: 234 RVA: 0x001A2288 File Offset: 0x0019F688
	public static method __m2mep@?wWinMain@@$$J0YAHPEAUHINSTANCE__@@0PEA_WH@Z;

	// Token: 0x040000EB RID: 235 RVA: 0x001A2448 File Offset: 0x0019F848
	public static method __m2mep@?seekpos@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FMEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z;

	// Token: 0x040000EC RID: 236 RVA: 0x001A2438 File Offset: 0x0019F838
	public static method __m2mep@?seekoff@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FMEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z;

	// Token: 0x040000ED RID: 237 RVA: 0x001A2428 File Offset: 0x0019F828
	public static method __m2mep@?underflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FMEAAGXZ;

	// Token: 0x040000EE RID: 238 RVA: 0x001A2418 File Offset: 0x0019F818
	public static method __m2mep@?pbackfail@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FMEAAGG@Z;

	// Token: 0x040000EF RID: 239 RVA: 0x001A2408 File Offset: 0x0019F808
	public static method __m2mep@?overflow@?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FMEAAGG@Z;

	// Token: 0x040000F0 RID: 240 RVA: 0x001A2548 File Offset: 0x0019F948
	public static method __m2mep@??_E?$LastErrorInfo@ULastErrorType@@@@$$FUEAAPEAXI@Z;

	// Token: 0x040000F1 RID: 241 RVA: 0x001A23F8 File Offset: 0x0019F7F8
	public static method __m2mep@??_E?$basic_stringbuf@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000F2 RID: 242 RVA: 0x001A23D8 File Offset: 0x0019F7D8
	public static method __m2mep@?_Delete_this@?$_Ref_count_obj@VIniParser@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F3 RID: 243 RVA: 0x001A23C8 File Offset: 0x0019F7C8
	public static method __m2mep@?_Destroy@?$_Ref_count_obj@VIniParser@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F4 RID: 244 RVA: 0x001A23A8 File Offset: 0x0019F7A8
	public static method __m2mep@?_Delete_this@?$_Ref_count_obj@VMemoryFile@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F5 RID: 245 RVA: 0x001A2398 File Offset: 0x0019F798
	public static method __m2mep@?_Destroy@?$_Ref_count_obj@VMemoryFile@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F6 RID: 246 RVA: 0x001A24E8 File Offset: 0x0019F8E8
	public static method __m2mep@?_Delete_this@?$_Ref_count_obj@VLocalFile@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F7 RID: 247 RVA: 0x001A24D8 File Offset: 0x0019F8D8
	public static method __m2mep@?_Destroy@?$_Ref_count_obj@VLocalFile@@@std@@$$FEEAAXXZ;

	// Token: 0x040000F8 RID: 248 RVA: 0x001A24F8 File Offset: 0x0019F8F8
	public static method __m2mep@??_E?$_Ref_count_obj@VLocalFile@@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000F9 RID: 249 RVA: 0x001A23B8 File Offset: 0x0019F7B8
	public static method __m2mep@??_E?$_Ref_count_obj@VMemoryFile@@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000FA RID: 250 RVA: 0x001A23E8 File Offset: 0x0019F7E8
	public static method __m2mep@??_E?$_Ref_count_obj@VIniParser@@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040000FB RID: 251 RVA: 0x001A2508 File Offset: 0x0019F908
	public static method __m2mep@??_E?$basic_stringstream@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$F$4PPPPPPPM@A@EAAPEAXI@Z;

	// Token: 0x040000FC RID: 252 RVA: 0x0010C0A0 File Offset: 0x00109EA0
	public unsafe static int** __unep@?ProgressFunction@FileDownloader@@$$FCAHPEAXNNNN@Z;

	// Token: 0x040000FD RID: 253 RVA: 0x0010C030 File Offset: 0x00109E30
	public unsafe static int** __unep@?SzAlloc@FileCompress@@$$FSAPEAXPEAX_K@Z;

	// Token: 0x040000FE RID: 254 RVA: 0x0010C038 File Offset: 0x00109E38
	public unsafe static int** __unep@?SzFree@FileCompress@@$$FSAXPEAX0@Z;

	// Token: 0x040000FF RID: 255 RVA: 0x0010C058 File Offset: 0x00109E58
	public unsafe static int** __unep@?FindLauncherWindow@@$$FYAHPEAUHWND__@@_J@Z;

	// Token: 0x04000100 RID: 256 RVA: 0x0010C0A8 File Offset: 0x00109EA8
	public unsafe static int** __unep@?WriteFunction@FileDownloader@@$$FCA_KPEAX_K10@Z;

	// Token: 0x04000101 RID: 257 RVA: 0x0010C138 File Offset: 0x00109F38
	public unsafe static int** __unep@?ThreadProc@LauncherupdateInfo@@$$FCAIPEAX@Z;

	// Token: 0x04000102 RID: 258 RVA: 0x001AC5A4 File Offset: 0x00000000
	internal static _Fac_tidy_reg_t _Fac_tidy_reg;

	// Token: 0x04000103 RID: 259 RVA: 0x0010BE70 File Offset: 0x00109C70
	internal static method _Fac_tidy_reg$initializer$;

	// Token: 0x04000104 RID: 260 RVA: 0x001AC598 File Offset: 0x00000000
	internal unsafe static _Fac_node* _Fac_head;

	// Token: 0x04000105 RID: 261 RVA: 0x0010C2D8 File Offset: 0x0010A0D8
	internal static __s_GUID _GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e;

	// Token: 0x04000106 RID: 262 RVA: 0x0010C2C8 File Offset: 0x0010A0C8
	internal static __s_GUID _GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e;

	// Token: 0x04000107 RID: 263
	[FixedAddressValueType]
	internal static int ?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA;

	// Token: 0x04000108 RID: 264 RVA: 0x0010BE30 File Offset: 0x00109C30
	internal static method ?Uninitialized$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x04000109 RID: 265
	[FixedAddressValueType]
	internal static Progress ?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x0400010A RID: 266 RVA: 0x0010BE48 File Offset: 0x00109C48
	internal static method ?InitializedNative$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400010B RID: 267 RVA: 0x0010C2E8 File Offset: 0x0010A0E8
	internal static __s_GUID _GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02;

	// Token: 0x0400010C RID: 268 RVA: 0x0010C2F8 File Offset: 0x0010A0F8
	internal static __s_GUID _GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02;

	// Token: 0x0400010D RID: 269
	[FixedAddressValueType]
	internal static Progress ?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x0400010E RID: 270 RVA: 0x001AC5A8 File Offset: 0x00000000
	internal static bool ?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x0400010F RID: 271 RVA: 0x001A25B4 File Offset: 0x0019F9B4
	internal static TriBool ?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A;

	// Token: 0x04000110 RID: 272 RVA: 0x001AC5AB File Offset: 0x00000000
	internal static bool ?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x04000111 RID: 273 RVA: 0x001AC5AC File Offset: 0x00000000
	internal static int ?Count@AllDomains@<CrtImplementationDetails>@@2HA;

	// Token: 0x04000112 RID: 274
	[FixedAddressValueType]
	internal static int ?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA;

	// Token: 0x04000113 RID: 275 RVA: 0x001AC5AA File Offset: 0x00000000
	internal static bool ?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x04000114 RID: 276
	[FixedAddressValueType]
	internal static bool ?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA;

	// Token: 0x04000115 RID: 277
	[FixedAddressValueType]
	internal static Progress ?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x04000116 RID: 278 RVA: 0x001AC5A9 File Offset: 0x00000000
	internal static bool ?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x04000117 RID: 279
	[FixedAddressValueType]
	internal static Progress ?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x04000118 RID: 280 RVA: 0x001A25B0 File Offset: 0x0019F9B0
	internal static TriBool ?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A;

	// Token: 0x04000119 RID: 281 RVA: 0x0010BE78 File Offset: 0x00109C78
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_mp_z;

	// Token: 0x0400011A RID: 282 RVA: 0x0010BE88 File Offset: 0x00109C88
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xi_vt_z;

	// Token: 0x0400011B RID: 283 RVA: 0x0010BE50 File Offset: 0x00109C50
	internal static method ?InitializedPerProcess$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400011C RID: 284 RVA: 0x0010BE20 File Offset: 0x00109C20
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_ma_a;

	// Token: 0x0400011D RID: 285 RVA: 0x0010BE60 File Offset: 0x00109C60
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_ma_z;

	// Token: 0x0400011E RID: 286 RVA: 0x0010BE58 File Offset: 0x00109C58
	internal static method ?InitializedPerAppDomain$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400011F RID: 287 RVA: 0x0010BE80 File Offset: 0x00109C80
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xi_vt_a;

	// Token: 0x04000120 RID: 288 RVA: 0x0010BE28 File Offset: 0x00109C28
	internal static method ?Initialized$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x04000121 RID: 289 RVA: 0x0010BE68 File Offset: 0x00109C68
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_mp_a;

	// Token: 0x04000122 RID: 290 RVA: 0x0010BE40 File Offset: 0x00109C40
	internal static method ?InitializedVtables$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x04000123 RID: 291 RVA: 0x0010BE38 File Offset: 0x00109C38
	internal static method ?IsDefaultDomain$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x04000124 RID: 292 RVA: 0x001A25B8 File Offset: 0x0019F9B8
	public static method __m2mep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000125 RID: 293 RVA: 0x001A25C8 File Offset: 0x0019F9C8
	public static method __m2mep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000126 RID: 294 RVA: 0x0010C308 File Offset: 0x0010A108
	public unsafe static int** __unep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000127 RID: 295 RVA: 0x0010C310 File Offset: 0x0010A110
	public unsafe static int** __unep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000128 RID: 296 RVA: 0x001AC718 File Offset: 0x00000000
	internal unsafe static method* __onexitbegin_m;

	// Token: 0x04000129 RID: 297 RVA: 0x001AC710 File Offset: 0x00000000
	internal static ulong __exit_list_size;

	// Token: 0x0400012A RID: 298
	[FixedAddressValueType]
	internal unsafe static method* __onexitend_app_domain;

	// Token: 0x0400012B RID: 299
	[FixedAddressValueType]
	internal unsafe static void* ?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA;

	// Token: 0x0400012C RID: 300
	[FixedAddressValueType]
	internal static int ?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA;

	// Token: 0x0400012D RID: 301 RVA: 0x001AC720 File Offset: 0x00000000
	internal unsafe static method* __onexitend_m;

	// Token: 0x0400012E RID: 302
	[FixedAddressValueType]
	internal static ulong __exit_list_size_app_domain;

	// Token: 0x0400012F RID: 303
	[FixedAddressValueType]
	internal unsafe static method* __onexitbegin_app_domain;

	// Token: 0x04000130 RID: 304 RVA: 0x0010C258 File Offset: 0x0010A058
	internal static $ArrayType$$$BY01Q6AXXZ ??_7type_info@@6B@;

	// Token: 0x04000131 RID: 305 RVA: 0x0010B670 File Offset: 0x00109470
	internal unsafe static locale.id* __imp_?id@?$ctype@_W@std@@2V0locale@2@A;

	// Token: 0x04000132 RID: 306 RVA: 0x0010BDF8 File Offset: 0x00109BF8
	internal static $ArrayType$$$BY0A@P6AHXZ __xi_z;

	// Token: 0x04000133 RID: 307 RVA: 0x001ABFA0 File Offset: 0x00000000
	internal static __scrt_native_startup_state __scrt_current_native_startup_state;

	// Token: 0x04000134 RID: 308 RVA: 0x001ABFA8 File Offset: 0x00000000
	internal unsafe static void* __scrt_native_startup_lock;

	// Token: 0x04000135 RID: 309 RVA: 0x0010BDA8 File Offset: 0x00109BA8
	internal static $ArrayType$$$BY0A@P6AXXZ __xc_a;

	// Token: 0x04000136 RID: 310 RVA: 0x0010BDE0 File Offset: 0x00109BE0
	internal static $ArrayType$$$BY0A@P6AHXZ __xi_a;

	// Token: 0x04000137 RID: 311 RVA: 0x001A2590 File Offset: 0x0019F990
	internal static uint __scrt_native_dllmain_reason;

	// Token: 0x04000138 RID: 312 RVA: 0x0010BDD8 File Offset: 0x00109BD8
	internal static $ArrayType$$$BY0A@P6AXXZ __xc_z;
}
