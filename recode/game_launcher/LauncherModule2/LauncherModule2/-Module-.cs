using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.ConstrainedExecution;
using System.Runtime.ExceptionServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;
using <CppImplementationDetails>;
using <CrtImplementationDetails>;
using LauncherModel;
using LauncherView;
using msclr.interop.details;
using std;
using std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z.__l2;
using std.?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_KD@Z.__l2;
using std.?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2;
using std.?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z.__l2;
using std.?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@_K0_W@Z.__l2;
using std.?push_back@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX_W@Z.__l2;

// Token: 0x02000001 RID: 1
internal class <Module>
{
	// Token: 0x06000001 RID: 1 RVA: 0x0001387C File Offset: 0x00012C7C
	internal unsafe static shared_ptr<IniParser>* LoadIniData(shared_ptr<IniParser>* A_0, @byte* ini_buffer, uint buffer_size)
	{
		uint num = 0U;
		<Module>.std.make_shared<class\u0020IniParser,enum\u0020std::byte\u0020const\u0020*\u0020&,unsigned\u0020int\u0020&>(A_0, ref ini_buffer, ref buffer_size);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x06000002 RID: 2 RVA: 0x00012F9C File Offset: 0x0001239C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ()(IniParser.ci_comp* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* s1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* s2)
	{
		char* ptr = s2;
		if (((8L <= *(s2 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *s2;
		}
		char* ptr2 = s1;
		if (((8L <= *(s1 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *s1;
		}
		return <Module>._wcsicmp(ptr2, ptr) < 0;
	}

	// Token: 0x06000003 RID: 3 RVA: 0x00015AF4 File Offset: 0x00014EF4
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetValueStringW(IniParser* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1, char* section_name, char* key_name, char* default_value)
	{
		uint num = 0U;
		if (((*(A_0 + 8L) == 0L) ? 1 : 0) != 0)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
			try
			{
				num = 1U;
				return A_1;
			}
			catch
			{
				if ((num & 1U) != 0U)
				{
					num &= 4294967294U;
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
				}
				throw;
			}
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, section_name);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		try
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			try
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
				throw;
			}
			long num2 = *A_0;
			if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == num2) ? 1 : 0) != 0)
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
				num = 1U;
				ptr = A_1;
			}
			else
			{
				long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
				if (((*(num3 + 40L) == 0L) ? 1 : 0) != 0)
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
					num = 1U;
					ptr = A_1;
				}
				else
				{
					pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr2 = num3 + 32L;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, key_name);
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
					try
					{
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr2, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					long num4 = *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L + 32L);
					if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == num4) ? 1 : 0) != 0)
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, default_value);
						num = 1U;
						ptr = A_1;
					}
					else
					{
						long num5 = *(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L + 32L)) + 16L;
						_One_then_variadic_args_t one_then_variadic_args_t;
						allocator<wchar_t> allocator<wchar_t>;
						<Module>.std._Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>.{ctor}<class\u0020std::allocator<wchar_t>\u0020>(A_1, one_then_variadic_args_t, ref allocator<wchar_t>);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_1, num5);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
							throw;
						}
						num = 1U;
						ptr = A_1;
					}
				}
			}
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return ptr;
	}

	// Token: 0x06000004 RID: 4 RVA: 0x00015D24 File Offset: 0x00015124
	internal unsafe static int GetValueIntW(IniParser* A_0, char* section_name, char* key_name, int default_value)
	{
		if (((*(A_0 + 8L) == 0L) ? 1 : 0) != 0)
		{
			return default_value;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, section_name);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		long num = *A_0;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == num) ? 1 : 0) != 0)
		{
			return default_value;
		}
		long num2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
		if (((*(num2 + 40L) == 0L) ? 1 : 0) != 0)
		{
			return default_value;
		}
		pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = num2 + 32L;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, key_name);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L)) ? 1 : 0) != 0)
		{
			return default_value;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = *(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L)) + 16L;
		char* ptr3 = ptr2;
		if (((8L <= *(ptr2 + 24L)) ? 1 : 0) != 0)
		{
			ptr3 = *ptr2;
		}
		return <Module>._wtoi(ptr3);
	}

	// Token: 0x06000005 RID: 5 RVA: 0x00015E84 File Offset: 0x00015284
	internal unsafe static map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* FindSection(IniParser* A_0, char* section_name)
	{
		if (((*(A_0 + 8L) == 0L) ? 1 : 0) != 0)
		{
			return 0L;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, section_name);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == *A_0) ? 1 : 0) != 0)
		{
			return 0L;
		}
		return tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
	}

	// Token: 0x06000006 RID: 6 RVA: 0x00014330 File Offset: 0x00013730
	internal unsafe static void GetIniBuffer(IniParser* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ini_buffer)
	{
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, 1L, -1);
		<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, 1L, -2);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *(*A_0), A_0);
		for (;;)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, *A_0, A_0);
			if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas) ? 1 : 0) == 0) ? 1 : 0) == 0)
			{
				break;
			}
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_13MCLHKIEA@?$AA?$FL@, 2L);
			ulong num = (ulong)(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 48L) * 2L);
			pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L;
			char* ptr2 = ptr;
			if (((8L <= *(ptr + 24L)) ? 1 : 0) != 0)
			{
				ptr2 = *ptr;
			}
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr2, num);
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6@, 6L);
			_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, *(*ptr3), ptr3);
			for (;;)
			{
				_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr4 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 64L;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, *ptr4, ptr4);
				if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) == 0)
				{
					break;
				}
				long num2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L;
				_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
				<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>, *(*num2), num2);
				for (;;)
				{
					long num3 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 64L;
					_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2;
					<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2, *num3, num3);
					if (((((list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> == list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) == 0)
					{
						break;
					}
					ulong num4 = (ulong)(*(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 48L) * 2L);
					pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr5 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L;
					char* ptr6 = ptr5;
					if (((8L <= *(ptr5 + 24L)) ? 1 : 0) != 0)
					{
						ptr6 = *ptr5;
					}
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr6, num4);
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_13NMPKAAJP@?$AA?$DN@, 2L);
					ulong num5 = (ulong)(*(list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 32L) * 2L);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
					char* ptr8 = ptr7;
					if (((8L <= *(ptr7 + 24L)) ? 1 : 0) != 0)
					{
						ptr8 = *ptr7;
					}
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ptr8, num5);
					<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.append(ini_buffer, ref <Module>.??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@, 4L);
					list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> = *list_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
			}
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas);
		}
	}

	// Token: 0x06000007 RID: 7 RVA: 0x00010244 File Offset: 0x0000F644
	internal unsafe static LauncherApp* {ctor}(LauncherApp* A_0)
	{
		return A_0;
	}

	// Token: 0x06000008 RID: 8 RVA: 0x000138D0 File Offset: 0x00012CD0
	internal unsafe static LauncherModel.IniModuleSection marshal_as<class\u0020LauncherModel::IniModuleSection\u0020^,class\u0020IniModuleSection>(global::IniModuleSection* from)
	{
		return new LauncherModel.IniModuleSection
		{
			WindowTitle = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from),
			WindowWidth = *(from + 32L),
			WindowHeight = *(from + 36L),
			CefLocale = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 40L),
			CefAcceptLanguage = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 72L),
			CefUseCache = (*(from + 104L) != 0),
			CefCacheDir = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 112L),
			GameStarterExecutableName = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 176L),
			GameExecutableName = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 208L),
			GameExecuteArguments = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 240L),
			LauncherAgentName = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 272L),
			UrlLogin = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 304L),
			UrlLogout = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 336L),
			UrlMain = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 368L),
			UrlSessionValidator = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 400L),
			UrlPatchSource = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 432L),
			QA_ID = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 464L),
			QA_PW = <Module>.msclr.interop.marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(from + 496L),
			ForceDisplayWindowTitle = (*(from + 528L) != 0)
		};
	}

	// Token: 0x06000009 RID: 9 RVA: 0x00017788 File Offset: 0x00016B88
	internal unsafe static ModuleManager* GetInstance()
	{
		if (null == <Module>.?m_instance@ModuleManager@@0PEAV1@EA)
		{
			ModuleManager* ptr = <Module>.@new(16UL);
			ModuleManager* ptr3;
			try
			{
				if (ptr != null)
				{
					*(long*)ptr = 0L;
					*(long*)(ptr + 8L / (long)sizeof(ModuleManager)) = 0L;
					ModuleManager* ptr2 = ptr;
					*(long*)ptr2 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(ptr2);
					ptr3 = ptr;
				}
				else
				{
					ptr3 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 16UL);
				throw;
			}
			<Module>.?m_instance@ModuleManager@@0PEAV1@EA = ptr3;
		}
		return <Module>.?m_instance@ModuleManager@@0PEAV1@EA;
	}

	// Token: 0x0600000A RID: 10 RVA: 0x000177F8 File Offset: 0x00016BF8
	internal unsafe static void Clear()
	{
		if (<Module>.?m_instance@ModuleManager@@0PEAV1@EA != null)
		{
			void* ptr = (void*)<Module>.?m_instance@ModuleManager@@0PEAV1@EA;
			<Module>.ModuleManager.{dtor}(<Module>.?m_instance@ModuleManager@@0PEAV1@EA);
			<Module>.delete(ptr, 16UL);
			<Module>.?m_instance@ModuleManager@@0PEAV1@EA = null;
		}
	}

	// Token: 0x0600000B RID: 11 RVA: 0x00017080 File Offset: 0x00016480
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool LoadModules(ModuleManager* A_0, IniParser* launcher_ini, App view)
	{
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020> basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>;
		<Module>.std._String_val<std::_Simple_types<char>\u0020>.{ctor}(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_init(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
			throw;
		}
		bool flag2;
		try
		{
			<Module>.IniParser.GetIniBuffer(launcher_ini, ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
			map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = <Module>.IniParser.FindSection(launcher_ini, (char*)(&<Module>.??_C@_1BI@GPBGKNOG@?$AAU?$AAS?$AAE?$AA_?$AAM?$AAO?$AAD?$AAU?$AAL?$AAE?$AAS@));
			if (null != ptr)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ref <Module>.??_C@_1BK@MPFOAOEG@?$AAl?$AAo?$AAa?$AAd?$AA_?$AAl?$AAi?$AAb?$AAr?$AAa?$AAr?$AAy@);
				_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr, &tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				long num = *(long*)ptr;
				_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, num, (_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>*)ptr);
				if (((tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0)
				{
					App.AddWebBrowserCreateCallbackFn addWebBrowserCreateCallbackFn = new App.AddWebBrowserCreateCallbackFn(view.AddWebBrowserCreateCallback);
					pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr2 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L + 32L;
					long num2 = *(*ptr2);
					_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
					<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>, num2, ptr2);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
					shared_ptr<ModuleManager::MODULE_INFO> shared_ptr<ModuleManager::MODULE_INFO>;
					for (;;)
					{
						pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ptr3 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L + 32L;
						long num3 = *ptr3;
						_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020> list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2;
						<Module>.std._List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2, num3, ptr3);
						if (((((list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> == list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) == 0) ? 1 : 0) != 0)
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
							char* ptr5 = ptr4;
							if (((8L <= *(ptr4 + 24L)) ? 1 : 0) != 0)
							{
								ptr5 = *ptr4;
							}
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr5);
							try
							{
								<Module>.ModuleManager.GetModuleObjectName(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
								throw;
							}
							try
							{
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
									throw;
								}
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
								ref long ptr6 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.find(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2;
								_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ptr7 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.end(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2);
								if (((((ptr6 == *(long*)ptr7) ? 1 : 0) == 0) ? 1 : 0) == 0)
								{
									goto IL_1A9;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
								throw;
							}
							goto IL_18C;
							IL_2E9:
							list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> = *list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>;
							continue;
							IL_18C:
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
								throw;
							}
							goto IL_2E9;
							IL_1A9:
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
								char* ptr9 = ptr8;
								if (((8L <= *(ptr8 + 24L)) ? 1 : 0) != 0)
								{
									ptr9 = *ptr8;
								}
								HINSTANCE__* ptr10 = <Module>.LoadLibraryW(ptr9);
								if (null == ptr10)
								{
									goto IL_3A6;
								}
								method procAddress = <Module>.GetProcAddress(ptr10, (sbyte*)(&<Module>.??_C@_0N@DAFEMANB@mfModuleInit@));
								method procAddress2 = <Module>.GetProcAddress(ptr10, (sbyte*)(&<Module>.??_C@_0O@GHINADND@mfModuleClear@));
								if (0L == procAddress)
								{
									goto IL_360;
								}
								if (0L == procAddress2)
								{
									goto IL_360;
								}
								<Module>.std.make_shared<struct\u0020ModuleManager::MODULE_INFO>(&shared_ptr<ModuleManager::MODULE_INFO>);
								try
								{
									*shared_ptr<ModuleManager::MODULE_INFO> = ptr10;
									*(shared_ptr<ModuleManager::MODULE_INFO> + 8L) = procAddress2;
									pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool> pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>;
									<Module>.std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Try_emplace<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
									<Module>.std.shared_ptr<ModuleManager::MODULE_INFO>.=(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool> + 32L + 32L, ref shared_ptr<ModuleManager::MODULE_INFO>);
									method system.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)_u0020modopt(System.Runtime.CompilerServices.CallConvCdecl)_u0020(System.SByte_u0020modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte)_u0020modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn_u0020^>_u0020modreq(System.Runtime.CompilerServices.IsCopyConstructed)*,System.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)) = procAddress;
									bool flag = <Module>.?use_log@LogMsg@@2_NA;
									gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^> gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn_u0020^> = ((IntPtr)GCHandle.Alloc(addWebBrowserCreateCallbackFn)).ToPointer();
									ulong num4;
									sbyte* ptr11;
									try
									{
										num4 = (ulong)(*((ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>) + 16));
										ptr11 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.c_str(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>.{dtor}), (void*)(&gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn_u0020^>));
										throw;
									}
									if (0 == calli(System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.SByte modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte) modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn ^> modreq(System.Runtime.CompilerServices.IsCopyConstructed)*,System.Byte modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)), ptr11, num4, (gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>*)(&gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn_u0020^>), flag, system.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride)_u0020modopt(System.Runtime.CompilerServices.CallConvCdecl)_u0020(System.SByte_u0020modopt(System.Runtime.CompilerServices.IsSignUnspecifiedByte)_u0020modopt(System.Runtime.CompilerServices.IsConst)*,System.UInt64,gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn_u0020^>_u0020modreq(System.Runtime.CompilerServices.IsCopyConstructed)*,System.Byte_u0020modopt(System.Runtime.CompilerServices.CompilerMarshalOverride))))
									{
										break;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<ModuleManager::MODULE_INFO>.{dtor}), (void*)(&shared_ptr<ModuleManager::MODULE_INFO>));
									throw;
								}
								if (*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8) != 0L)
								{
									<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8));
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
								throw;
							}
							goto IL_2E9;
						}
						goto IL_3D4;
					}
					try
					{
						try
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
							char* ptr13 = ptr12;
							if (((8L <= *(ptr12 + 24L)) ? 1 : 0) != 0)
							{
								ptr13 = *ptr12;
							}
							if (<Module>.?use_log@LogMsg@@2_NA)
							{
								<Module>.LogMsg.Write((char*)(&<Module>.??_C@_1DE@NCBBBJGA@?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi@), __arglist((ushort*)ptr13));
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<ModuleManager::MODULE_INFO>.{dtor}), (void*)(&shared_ptr<ModuleManager::MODULE_INFO>));
							throw;
						}
						if (*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8) == 0L)
						{
							goto IL_3A6;
						}
						<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8));
						goto IL_3A6;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					IL_360:
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr14 = list_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020> + 16L;
						char* ptr15 = ptr14;
						if (((8L <= *(ptr14 + 24L)) ? 1 : 0) != 0)
						{
							ptr15 = *ptr14;
						}
						if (<Module>.?use_log@LogMsg@@2_NA)
						{
							<Module>.LogMsg.Write((char*)(&<Module>.??_C@_1DO@FDOECBL@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?5@), __arglist((ushort*)ptr15));
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					IL_3A6:
					try
					{
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
						throw;
					}
					flag2 = false;
					goto IL_3D7;
					IL_3D4:
					flag2 = true;
					goto IL_3D7;
				}
			}
			flag2 = true;
			IL_3D7:;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(ref basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), (void*)(&basic_string<char,std::char_traits<char>,std::allocator<char>_u0020>));
			throw;
		}
		return flag2;
	}

	// Token: 0x0600000C RID: 12 RVA: 0x0001768C File Offset: 0x00016A8C
	internal unsafe static void {dtor}(ModuleManager* A_0)
	{
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** ptr = *A_0;
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = *ptr;
			for (;;)
			{
				long num = *A_0;
				if (((((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> == num) ? 1 : 0) == 0) ? 1 : 0) == 0)
				{
					break;
				}
				long num2 = *(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 64L);
				if (((0L != num2) ? 1 : 0) != 0)
				{
					ulong num3 = (ulong)(*(num2 + 8L));
					if (num3 != 0UL)
					{
						calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(), num3);
					}
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, *A_0);
	}

	// Token: 0x0600000D RID: 13 RVA: 0x00015F24 File Offset: 0x00015324
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* GetModuleObjectName(ModuleManager* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* module_file_name)
	{
		try
		{
			uint num = 0U;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_1, ref <Module>.??_C@_13ENNFDPBH@?$AA_@);
			num = 1U;
			char* ptr = module_file_name;
			if (((8L <= *(module_file_name + 24L)) ? 1 : 0) != 0)
			{
				ptr = *module_file_name;
			}
			char* ptr2 = <Module>.wcsrchr(ptr, '\\');
			if (ptr2 != null)
			{
				ptr2 += 2L / (long)sizeof(char);
			}
			else
			{
				char* ptr3 = module_file_name;
				if (((8L <= *(module_file_name + 24L)) ? 1 : 0) != 0)
				{
					ptr3 = *module_file_name;
				}
				ptr2 = ptr3;
			}
			char* ptr4 = module_file_name;
			if (((8L <= *(module_file_name + 24L)) ? 1 : 0) != 0)
			{
				ptr4 = *module_file_name;
			}
			char* ptr5 = <Module>.wcsrchr(ptr4, '.');
			if (ptr5 != null)
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
				<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				try
				{
					*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 16) = 0L;
					*((ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>) + 24) = 7L;
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020> = 0;
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ptr2, ptr5 - ptr2 >> 1);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					try
					{
						char* ptr6 = ref <Module>.??_C@_13ENNFDPBH@?$AA_@;
						do
						{
							ptr6 += 2L;
						}
						while (*ptr6 != 0);
						long num2 = ptr6 - (ref <Module>.??_C@_13ENNFDPBH@?$AA_@) >> 1;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ref <Module>.??_C@_13ENNFDPBH@?$AA_@, num2);
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, ptr7);
						num = 3U;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_1, ptr8);
						num = 3U & 4294967293U;
					}
					catch
					{
						if ((num & 2U) != 0U)
						{
							num &= 4294967293U;
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						}
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
			}
			else
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, ptr2);
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
					try
					{
						char* ptr10 = ref <Module>.??_C@_13ENNFDPBH@?$AA_@;
						do
						{
							ptr10 += 2L;
						}
						while (*ptr10 != 0);
						long num3 = ptr10 - (ref <Module>.??_C@_13ENNFDPBH@?$AA_@) >> 1;
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr11 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(ptr9, ref <Module>.??_C@_13ENNFDPBH@?$AA_@, num3);
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, ptr11);
						num = 5U;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_1, ptr12);
						num = 5U & 4294967291U;
					}
					catch
					{
						if ((num & 4U) != 0U)
						{
							num &= 4294967291U;
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
						}
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
					throw;
				}
			}
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x0600000E RID: 14 RVA: 0x00017740 File Offset: 0x00016B40
	internal unsafe static ModuleManager* {ctor}(ModuleManager* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		*A_0 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(A_0);
		return A_0;
	}

	// Token: 0x0600000F RID: 15 RVA: 0x00017764 File Offset: 0x00016B64
	internal unsafe static void* __delDtor(ModuleManager* A_0, uint A_0)
	{
		<Module>.ModuleManager.{dtor}(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 16UL);
		}
		return A_0;
	}

	// Token: 0x06000010 RID: 16 RVA: 0x00017644 File Offset: 0x00016A44
	internal unsafe static void {dtor}(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, *A_0);
	}

	// Token: 0x06000011 RID: 17 RVA: 0x000182D0 File Offset: 0x000176D0
	internal unsafe static int lmRun(HINSTANCE__* hInstance, sbyte* ini_buffer, ulong ini_buffer_size, [MarshalAs(UnmanagedType.U1)] bool enable_log)
	{
		<Module>.CoInitialize(null);
		<Module>.g_hInstance = hInstance;
		shared_ptr<IniParser> shared_ptr<IniParser>;
		<Module>.IniParser.LoadIniData(&shared_ptr<IniParser>, (@byte*)ini_buffer, (uint)ini_buffer_size);
		int num;
		try
		{
			<Module>.?use_log@LogMsg@@2_NA = enable_log;
			if (enable_log)
			{
				<Module>.LogMsg.Write((char*)(&<Module>.??_C@_1CE@BAACFLMB@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?5?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt@), __arglist());
			}
			unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020> unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>;
			<Module>.std.make_unique<class\u0020LauncherApp,0>((unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>*)(&unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>));
			try
			{
				App app = new App();
				global::IniModuleSection iniModuleSection;
				<Module>.IniModuleSection.{ctor}(ref iniModuleSection);
				try
				{
					try
					{
						if (!<Module>.LauncherApp.LoadResource(unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>, shared_ptr<IniParser>, app, ref iniModuleSection))
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 101, <Module>.g_hInstance);
							try
							{
								char* ptr2 = (char*)ptr;
								if (((8L <= *(long*)(ptr + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
								{
									ptr2 = *(long*)ptr;
								}
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.LoadStringFromResource(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, 103, <Module>.g_hInstance);
								try
								{
									char* ptr4 = (char*)ptr3;
									if (((8L <= *(long*)(ptr3 + 24L / (long)sizeof(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>))) ? 1 : 0) != 0)
									{
										ptr4 = *(long*)ptr3;
									}
									<Module>.MessageBoxW(null, ptr4, ptr2, 0U);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
									throw;
								}
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
								throw;
							}
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
								throw;
							}
							num = 103;
							goto IL_182;
						}
						<Module>.LauncherApp.Run(unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>, app, ref iniModuleSection);
						<Module>.LOG_MSG<wchar_t\u0020const\u0020*>((char*)(&<Module>.??_C@_1DC@JPKBEPJA@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd@));
					}
					finally
					{
						<Module>.ModuleManager.Clear();
						<Module>.CoUninitialize();
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(IniModuleSection.{dtor}), (void*)(&iniModuleSection));
					throw;
				}
				<Module>.IniModuleSection.{dtor}(ref iniModuleSection);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>.{dtor}), (void*)(&unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>));
				throw;
			}
			<Module>.std.unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>.{dtor}(ref unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
			throw;
		}
		if (*((ref shared_ptr<IniParser>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
		}
		return 0;
		IL_182:
		try
		{
			unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020> unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>;
			try
			{
				global::IniModuleSection iniModuleSection;
				<Module>.IniModuleSection.{dtor}(ref iniModuleSection);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>.{dtor}), (void*)(&unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>));
				throw;
			}
			<Module>.std.unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>.{dtor}(ref unique_ptr<LauncherApp,std::default_delete<LauncherApp>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)(&shared_ptr<IniParser>));
			throw;
		}
		if (*((ref shared_ptr<IniParser>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<IniParser>) + 8));
		}
		return num;
	}

	// Token: 0x06000012 RID: 18 RVA: 0x000144FC File Offset: 0x000138FC
	internal unsafe static global::IniModuleSection* {ctor}(global::IniModuleSection* A_0)
	{
		<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(A_0);
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 7L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 40L;
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr);
			try
			{
				*(ptr + 16L) = 0L;
				*(ptr + 24L) = 7L;
				*ptr = 0;
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			try
			{
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 + 72L;
				<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr2);
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr2);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr2);
					throw;
				}
				try
				{
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 112L;
					<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr3);
					try
					{
						*(ptr3 + 16L) = 0L;
						*(ptr3 + 24L) = 7L;
						*ptr3 = 0;
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
						throw;
					}
					try
					{
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = A_0 + 144L;
						<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr4);
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr4);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr4);
							throw;
						}
						try
						{
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = A_0 + 176L;
							<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr5);
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr5);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr5);
								throw;
							}
							try
							{
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = A_0 + 208L;
								<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr6);
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr6);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr6);
									throw;
								}
								try
								{
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = A_0 + 240L;
									<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr7);
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr7);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr7);
										throw;
									}
									try
									{
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = A_0 + 272L;
										<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr8);
										try
										{
											*(ptr8 + 16L) = 0L;
											*(ptr8 + 24L) = 7L;
											*ptr8 = 0;
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr8);
											throw;
										}
										try
										{
											basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = A_0 + 304L;
											<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr9);
											try
											{
												<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr9);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr9);
												throw;
											}
											try
											{
												basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr10 = A_0 + 336L;
												<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr10);
												try
												{
													<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr10);
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr10);
													throw;
												}
												try
												{
													basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr11 = A_0 + 368L;
													<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr11);
													try
													{
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr11);
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr11);
														throw;
													}
													try
													{
														basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = A_0 + 400L;
														<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr12);
														try
														{
															*(ptr12 + 16L) = 0L;
															*(ptr12 + 24L) = 7L;
															*ptr12 = 0;
														}
														catch
														{
															<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr12);
															throw;
														}
														try
														{
															basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr13 = A_0 + 432L;
															<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr13);
															try
															{
																<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr13);
															}
															catch
															{
																<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr13);
																throw;
															}
															try
															{
																basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr14 = A_0 + 464L;
																<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr14);
																try
																{
																	<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr14);
																}
																catch
																{
																	<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr14);
																	throw;
																}
																try
																{
																	basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr15 = A_0 + 496L;
																	<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(ptr15);
																	try
																	{
																		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(ptr15);
																	}
																	catch
																	{
																		<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr15);
																		throw;
																	}
																}
																catch
																{
																	<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)464L));
																	throw;
																}
															}
															catch
															{
																<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)432L));
																throw;
															}
														}
														catch
														{
															<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)400L));
															throw;
														}
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)368L));
														throw;
													}
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)336L));
													throw;
												}
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)304L));
												throw;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)272L));
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)240L));
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)208L));
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)176L));
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)144L));
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)112L));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)72L));
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)40L));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000013 RID: 19 RVA: 0x00014BEC File Offset: 0x00013FEC
	internal unsafe static void {dtor}(global::IniModuleSection* A_0)
	{
		try
		{
			try
			{
				try
				{
					try
					{
						try
						{
							try
							{
								try
								{
									try
									{
										try
										{
											try
											{
												try
												{
													try
													{
														try
														{
															try
															{
																try
																{
																	basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = A_0 + 496L;
																	try
																	{
																		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr);
																	}
																	catch
																	{
																		<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
																		throw;
																	}
																}
																catch
																{
																	<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)464L));
																	throw;
																}
																basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = A_0 + 464L;
																try
																{
																	<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr2);
																}
																catch
																{
																	<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr2);
																	throw;
																}
															}
															catch
															{
																<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)432L));
																throw;
															}
															basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = A_0 + 432L;
															try
															{
																<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr3);
															}
															catch
															{
																<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr3);
																throw;
															}
														}
														catch
														{
															<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)400L));
															throw;
														}
														basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = A_0 + 400L;
														try
														{
															<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr4);
														}
														catch
														{
															<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr4);
															throw;
														}
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)368L));
														throw;
													}
													basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = A_0 + 368L;
													try
													{
														<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr5);
													}
													catch
													{
														<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr5);
														throw;
													}
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)336L));
													throw;
												}
												basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = A_0 + 336L;
												try
												{
													<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr6);
												}
												catch
												{
													<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr6);
													throw;
												}
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)304L));
												throw;
											}
											basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = A_0 + 304L;
											try
											{
												<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr7);
											}
											catch
											{
												<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr7);
												throw;
											}
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)272L));
											throw;
										}
										basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = A_0 + 272L;
										try
										{
											<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr8);
										}
										catch
										{
											<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr8);
											throw;
										}
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)240L));
										throw;
									}
									basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = A_0 + 240L;
									try
									{
										<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr9);
									}
									catch
									{
										<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr9);
										throw;
									}
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)208L));
									throw;
								}
								basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr10 = A_0 + 208L;
								try
								{
									<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr10);
								}
								catch
								{
									<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr10);
									throw;
								}
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)176L));
								throw;
							}
							basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr11 = A_0 + 176L;
							try
							{
								<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr11);
							}
							catch
							{
								<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr11);
								throw;
							}
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)144L));
							throw;
						}
						basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = A_0 + 144L;
						try
						{
							<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr12);
						}
						catch
						{
							<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr12);
							throw;
						}
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)112L));
						throw;
					}
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr13 = A_0 + 112L;
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr13);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr13);
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)72L));
					throw;
				}
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr14 = A_0 + 72L;
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr14);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr14);
					throw;
				}
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(A_0 + (byte*)40L));
				throw;
			}
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr15 = A_0 + 40L;
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr15);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr15);
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000014 RID: 20 RVA: 0x00016254 File Offset: 0x00015654
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ProcessUrl(LauncherApp* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* url)
	{
		try
		{
			uint num = 0U;
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>.{ctor}(A_1);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_init(A_1);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)A_1);
				throw;
			}
			num = 1U;
			_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
			if (((*(url + 16L) == 0L) ? 1 : 0) == 0 && *(*<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.begin(url, &string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>)) == 92)
			{
				$ArrayType$$$BY0BAE@_W $ArrayType$$$BY0BAE@_W;
				cpblk(ref $ArrayType$$$BY0BAE@_W, ref <Module>.??_C@_11LOCGONAA@@, 2);
				initblk((ref $ArrayType$$$BY0BAE@_W) + 2, 0, 518L);
				<Module>.GetModuleFileNameW(null, (char*)(&$ArrayType$$$BY0BAE@_W), 260);
				char* ptr = <Module>.wcsrchr((char*)(&$ArrayType$$$BY0BAE@_W), '\\');
				if (ptr != null)
				{
					*ptr = 0;
				}
				char* ptr2 = ref <Module>.??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@;
				do
				{
					ptr2 += 2L;
				}
				while (*ptr2 != 0);
				long num2 = ptr2 - (ref <Module>.??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@) >> 1;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_1, ref <Module>.??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@, num2);
				basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, ref $ArrayType$$$BY0BAE@_W);
				try
				{
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
					char c = *(*<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.begin(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>));
					if (c != 92 && c != 47)
					{
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr3 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.begin(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2);
						_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
						cpblk(ref string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2, ptr3, 8);
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>3;
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.insert(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>3, string_const_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2, 92);
					}
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>5;
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>4 = *<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>5);
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>7;
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>6 = *<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.begin(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>7);
					char* ptr4 = string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>6;
					if (string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>6 != string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>4)
					{
						do
						{
							if (*ptr4 == '\\')
							{
								*ptr4 = '/';
							}
							ptr4 += 2L / 2L;
						}
						while (ptr4 != string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>4);
					}
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>8;
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr5 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>8);
					_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>9;
					cpblk(ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>9, ptr5, 8);
					string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>9 -= 2L;
					if (*string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>9 != 47)
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.push_back(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, 47);
					}
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_1, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
					basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
					_One_then_variadic_args_t one_then_variadic_args_t;
					allocator<wchar_t> allocator<wchar_t>;
					<Module>.std._Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>.{ctor}<class\u0020std::allocator<wchar_t>\u0020>(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, one_then_variadic_args_t, ref allocator<wchar_t>);
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, url);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>11;
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>10 = *<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>11);
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>13;
						_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>12 = *<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.begin(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>13);
						char* ptr6 = string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>12;
						if (string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>12 != string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>10)
						{
							do
							{
								if (*ptr6 == '\\')
								{
									*ptr6 = '/';
								}
								ptr6 += 2L / 2L;
							}
							while (ptr6 != string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>10);
						}
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_1, ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
					try
					{
						<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
						throw;
					}
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
				try
				{
					<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
				}
				catch
				{
					<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
					throw;
				}
			}
			else
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(A_1, url);
			}
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_1);
			}
			throw;
		}
		return A_1;
	}

	// Token: 0x06000015 RID: 21 RVA: 0x0001782C File Offset: 0x00016C2C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool LoadResource(LauncherApp* A_0, IniParser* launcher_ini, App view, global::IniModuleSection* ini_d)
	{
		if (null == launcher_ini)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BK@BJPLKHOD@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAt?$AAi?$AAt?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d, ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>));
			throw;
		}
		*(ini_d + 32L) = <Module>.IniParser.GetValueIntW(launcher_ini, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BK@PDBBMBD@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh@), 0);
		*(ini_d + 36L) = <Module>.IniParser.GetValueIntW(launcher_ini, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BM@KDFFFNEE@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt@), 0);
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BG@COEEJDOJ@?$AAc?$AAe?$AAf?$AA_?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 40L, ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>2));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr3 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CI@OBJJCAJH@?$AAc?$AAe?$AAf?$AA_?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA_?$AAl?$AAa?$AAn?$AAg@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 72L, ptr3);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>3));
			throw;
		}
		byte b = ((<Module>.IniParser.GetValueIntW(launcher_ini, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BM@FFPALKEM@?$AAc?$AAe?$AAf?$AA_?$AAu?$AAs?$AAe?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@), 0) > 0) ? 1 : 0);
		*(ini_d + 104L) = b;
		if (b != 0)
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr4 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BO@GEPPECKO@?$AAc?$AAe?$AAf?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe?$AA_?$AAp?$AAa?$AAt?$AAh@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 112L, ptr4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>4));
				throw;
			}
			if (((*(ini_d + 128L) == 0L) ? 1 : 0) != 0)
			{
				return false;
			}
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr5 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1DK@LEDGMEFL@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAs?$AAt?$AAa?$AAr?$AAt?$AAe?$AAr?$AA_?$AAe?$AAx@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 176L, ptr5);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>5));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr6 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CK@HOAFIEFH@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAa?$AAb?$AAl?$AAe@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 208L, ptr6);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>6));
			throw;
		}
		if (((*(ini_d + 224L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr7 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CO@LAFLGHFO@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAe?$AA_?$AAa?$AAr@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 240L, ptr7);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>7));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr8 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CI@PAGBDABE@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA_?$AAa?$AAg?$AAe?$AAn?$AAt?$AA_@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 272L, ptr8);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>8));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr9 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BE@BELKDIMO@?$AAu?$AAr?$AAl?$AA_?$AAl?$AAo?$AAg?$AAi?$AAn@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr10 = <Module>.LauncherApp.ProcessUrl(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10, ptr9);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 304L, ptr10);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>10));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>9));
			throw;
		}
		if (((*(ini_d + 320L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr11 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BG@DGFIJKPA@?$AAu?$AAr?$AAl?$AA_?$AAl?$AAo?$AAg?$AAo?$AAu?$AAt@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr12 = <Module>.LauncherApp.ProcessUrl(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12, ptr11);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 336L, ptr12);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>12));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>11));
			throw;
		}
		if (((*(ini_d + 352L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr13 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1BC@MJCNHJFJ@?$AAu?$AAr?$AAl?$AA_?$AAm?$AAa?$AAi?$AAn@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr14 = <Module>.LauncherApp.ProcessUrl(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14, ptr13);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 368L, ptr14);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>14));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>13));
			throw;
		}
		if (((*(ini_d + 384L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr15 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CM@LANEAIAC@?$AAu?$AAr?$AAl?$AA_?$AAs?$AAe?$AAs?$AAs?$AAi?$AAo?$AAn?$AA_?$AAv?$AAa?$AAl@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr16 = <Module>.LauncherApp.ProcessUrl(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16, ptr15);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 400L, ptr16);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>16));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>15));
			throw;
		}
		if (((*(ini_d + 416L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr17 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1CC@FMBCGIBO@?$AAu?$AAr?$AAl?$AA_?$AAp?$AAa?$AAt?$AAc?$AAh?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18;
			basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr18 = <Module>.LauncherApp.ProcessUrl(A_0, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18, ptr17);
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 432L, ptr18);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18));
				throw;
			}
			try
			{
				<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>18));
				throw;
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>17));
			throw;
		}
		if (((*(ini_d + 448L) == 0L) ? 1 : 0) != 0)
		{
			return false;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr19 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1M@BCFJEEOJ@?$AAq?$AAa?$AA_?$AAi?$AAd@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 464L, ptr19);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>19));
			throw;
		}
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020> basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr20 = <Module>.IniParser.GetValueStringW(launcher_ini, &basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1M@HECMOPML@?$AAq?$AAa?$AA_?$AAp?$AAw@), (char*)(&<Module>.??_C@_11LOCGONAA@@));
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.=(ini_d + 496L, ptr20);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ref basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), (void*)(&basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>20));
			throw;
		}
		int num = ((<Module>.IniParser.GetValueIntW(launcher_ini, <Module>.launcher_ini.section.?A0x71850c74.launcher_module, (char*)(&<Module>.??_C@_1DG@KGGNMKAC@?$AAf?$AAo?$AAr?$AAc?$AAe?$AA_?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA_?$AAw@), 0) > 0) ? 1 : 0);
		*(ini_d + 528L) = (byte)num;
		ModuleManager* ptr21 = <Module>.ModuleManager.GetInstance();
		if (null == ptr21)
		{
			if (<Module>.?use_log@LogMsg@@2_NA)
			{
				<Module>.LogMsg.Write((char*)(&<Module>.??_C@_1DK@HAEPPJJL@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAm@), __arglist());
			}
			return false;
		}
		return <Module>.ModuleManager.LoadModules(ptr21, launcher_ini, view);
	}

	// Token: 0x06000016 RID: 22 RVA: 0x00013A24 File Offset: 0x00012E24
	internal unsafe static void Run(LauncherApp* A_0, App view, global::IniModuleSection* ini_d)
	{
		App.StartArgs startArgs = new App.StartArgs();
		SharedDataContainer sharedDataContainer = null;
		try
		{
			sharedDataContainer = new SharedDataContainer();
			startArgs.SharedData = sharedDataContainer;
			LauncherModel.IniModuleSection iniModuleSection = <Module>.msclr.interop.marshal_as<class\u0020LauncherModel::IniModuleSection\u0020^,class\u0020IniModuleSection>(ini_d);
			startArgs.IniModuleSectionData = iniModuleSection;
			sharedDataContainer.GameStarterExecutableName = iniModuleSection.GameStarterExecutableName;
			sharedDataContainer.GameExecutableName = startArgs.IniModuleSectionData.GameExecutableName;
			sharedDataContainer.GameExecuteArguments = startArgs.IniModuleSectionData.GameExecuteArguments;
			sharedDataContainer.LauncherAgentName = startArgs.IniModuleSectionData.LauncherAgentName;
			sharedDataContainer.UrlLogin = startArgs.IniModuleSectionData.UrlLogin;
			sharedDataContainer.UrlLogout = startArgs.IniModuleSectionData.UrlLogout;
			sharedDataContainer.UrlMain = startArgs.IniModuleSectionData.UrlMain;
			sharedDataContainer.UrlSessionValidator = startArgs.IniModuleSectionData.UrlSessionValidator;
			sharedDataContainer.UrlPatchSource = startArgs.IniModuleSectionData.UrlPatchSource;
			sharedDataContainer.QA_ID = startArgs.IniModuleSectionData.QA_ID;
			sharedDataContainer.QA_PW = startArgs.IniModuleSectionData.QA_PW;
			string[] commandLineArgs = Environment.GetCommandLineArgs();
			string text = "-ClientPath=";
			string text2 = "-DisableClientValidation";
			foreach (string text3 in commandLineArgs)
			{
				if (text3.Contains(text))
				{
					sharedDataContainer.InstallPathOverride = text3.Replace(text, string.Empty);
				}
				if (text3.Contains(text2))
				{
					sharedDataContainer.DisableGameClientValidation = true;
				}
			}
			view.Init(startArgs);
			view.Run();
		}
		finally
		{
			if (sharedDataContainer != null)
			{
				((IDisposable)sharedDataContainer).Dispose();
			}
		}
	}

	// Token: 0x06000017 RID: 23 RVA: 0x00012198 File Offset: 0x00011598
	internal unsafe static LauncherApp* ->(unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000018 RID: 24 RVA: 0x000121A8 File Offset: 0x000115A8
	internal unsafe static void {dtor}(unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		long num = *A_0;
		if (num != 0L)
		{
			<Module>.delete(num, 1UL);
		}
	}

	// Token: 0x06000019 RID: 25 RVA: 0x0001144C File Offset: 0x0001084C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool !=(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (((*A_0 == *_Right) ? 1 : 0) == 0) ? 1 : 0;
	}

	// Token: 0x0600001A RID: 26 RVA: 0x00012FE4 File Offset: 0x000123E4
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_0;
	}

	// Token: 0x0600001B RID: 27 RVA: 0x000121C4 File Offset: 0x000115C4
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* ->(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x0600001C RID: 28 RVA: 0x00016560 File Offset: 0x00015960
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* find(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::ch(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ptr;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0 && ((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Keyval, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 32L) < 0) ? 1 : 0) == 0)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2;
		}
		else
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3 = *A_0;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600001D RID: 29 RVA: 0x00013B9C File Offset: 0x00012F9C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* end(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x0600001E RID: 30 RVA: 0x00013BB0 File Offset: 0x00012FB0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* begin(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x0600001F RID: 31 RVA: 0x00016FF4 File Offset: 0x000163F4
	internal unsafe static void {dtor}(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Tidy(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, *A_0);
	}

	// Token: 0x06000020 RID: 32 RVA: 0x0001703C File Offset: 0x0001643C
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* [](map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool> pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>;
		<Module>.std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Try_emplace<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>, _Keyval);
		return pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool> + 64L;
	}

	// Token: 0x06000021 RID: 33 RVA: 0x0001705C File Offset: 0x0001645C
	internal unsafe static map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* {ctor}(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		*A_0 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(A_0);
		return A_0;
	}

	// Token: 0x06000022 RID: 34 RVA: 0x00013BC4 File Offset: 0x00012FC4
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* =(shared_ptr<ModuleManager::MODULE_INFO>* A_0, shared_ptr<ModuleManager::MODULE_INFO>* _Right)
	{
		ulong num = (ulong)(*(_Right + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		shared_ptr<ModuleManager::MODULE_INFO> shared_ptr<ModuleManager::MODULE_INFO> = *_Right;
		*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8) = *(_Right + 8L);
		try
		{
			ModuleManager.MODULE_INFO* ptr = shared_ptr<ModuleManager::MODULE_INFO>;
			shared_ptr<ModuleManager::MODULE_INFO> = *A_0;
			*A_0 = ptr;
			_Ref_count_base* ptr2 = *((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8);
			*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8) = *(A_0 + 8L);
			*(A_0 + 8L) = ptr2;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<ModuleManager::MODULE_INFO>.{dtor}), (void*)(&shared_ptr<ModuleManager::MODULE_INFO>));
			throw;
		}
		if (*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8) != 0L)
		{
			<Module>.std._Ref_count_base._Decref(*((ref shared_ptr<ModuleManager::MODULE_INFO>) + 8));
		}
		return A_0;
	}

	// Token: 0x06000023 RID: 35 RVA: 0x00012FFC File Offset: 0x000123FC
	internal unsafe static void {dtor}(shared_ptr<ModuleManager::MODULE_INFO>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x06000024 RID: 36 RVA: 0x00010254 File Offset: 0x0000F654
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void {dtor}(gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* A_0)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		((GCHandle)intPtr).Free();
		*A_0 = 0L;
	}

	// Token: 0x06000025 RID: 37 RVA: 0x0001027C File Offset: 0x0000F67C
	internal unsafe static gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* {ctor}(gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* A_0, gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* r)
	{
		IntPtr intPtr = new IntPtr(*r);
		*A_0 = ((IntPtr)GCHandle.Alloc(((GCHandle)intPtr).Target)).ToPointer();
		return A_0;
	}

	// Token: 0x06000026 RID: 38 RVA: 0x000102B8 File Offset: 0x0000F6B8
	internal unsafe static gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* {ctor}(gcroot<LauncherView::App::AddWebBrowserCreateCallbackFn\u0020^>* A_0, App.AddWebBrowserCreateCallbackFn t)
	{
		*A_0 = ((IntPtr)GCHandle.Alloc(t)).ToPointer();
		return A_0;
	}

	// Token: 0x06000027 RID: 39 RVA: 0x00011464 File Offset: 0x00010864
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool !=(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (((*A_0 == *_Right) ? 1 : 0) == 0) ? 1 : 0;
	}

	// Token: 0x06000028 RID: 40 RVA: 0x000102DC File Offset: 0x0000F6DC
	internal unsafe static _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ++(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		*A_0 = *(*A_0);
		return A_0;
	}

	// Token: 0x06000029 RID: 41 RVA: 0x000121D8 File Offset: 0x000115D8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ->(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x0600002A RID: 42 RVA: 0x000102F0 File Offset: 0x0000F6F0
	internal unsafe static _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ++(_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		*A_0 = *(*A_0);
		return A_0;
	}

	// Token: 0x0600002B RID: 43 RVA: 0x000121EC File Offset: 0x000115EC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ->(_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x0600002C RID: 44 RVA: 0x0001147C File Offset: 0x0001087C
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* *(_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x0600002D RID: 45 RVA: 0x00011490 File Offset: 0x00010890
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool !=(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (((*A_0 == *_Right) ? 1 : 0) == 0) ? 1 : 0;
	}

	// Token: 0x0600002E RID: 46 RVA: 0x00010304 File Offset: 0x0000F704
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ==(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (*A_0 == *_Right) ? 1 : 0;
	}

	// Token: 0x0600002F RID: 47 RVA: 0x00012200 File Offset: 0x00011600
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ->(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000030 RID: 48 RVA: 0x00013018 File Offset: 0x00012418
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_0;
	}

	// Token: 0x06000031 RID: 49 RVA: 0x00012214 File Offset: 0x00011614
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* ->(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000032 RID: 50 RVA: 0x00015604 File Offset: 0x00014A04
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* find(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr;
		if (((tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0 && <Module>.IniParser.ci_comp.()(A_0, _Keyval, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L) == null)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			ptr = &tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
		}
		else
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 = *A_0;
			ptr = &tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x06000033 RID: 51 RVA: 0x0001564C File Offset: 0x00014A4C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* find(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ptr;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0 && <Module>.IniParser.ci_comp.()(A_0, _Keyval, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> + 32L) == null)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2 = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2;
		}
		else
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3 = *A_0;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>3;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x06000034 RID: 52 RVA: 0x00012228 File Offset: 0x00011628
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool empty(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		return (*(A_0 + 8L) == 0L) ? 1 : 0;
	}

	// Token: 0x06000035 RID: 53 RVA: 0x00013030 File Offset: 0x00012430
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* end(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x06000036 RID: 54 RVA: 0x00013044 File Offset: 0x00012444
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* end(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x06000037 RID: 55 RVA: 0x00013058 File Offset: 0x00012458
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* begin(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x06000038 RID: 56 RVA: 0x00010318 File Offset: 0x0000F718
	internal unsafe static IniParser* get(_Ptr_base<IniParser>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000039 RID: 57 RVA: 0x000114A8 File Offset: 0x000108A8
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool !=(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* _Right)
	{
		return (((*A_0 == *_Right) ? 1 : 0) == 0) ? 1 : 0;
	}

	// Token: 0x0600003A RID: 58 RVA: 0x00010328 File Offset: 0x0000F728
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ==(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* _Right)
	{
		return (*A_0 == *_Right) ? 1 : 0;
	}

	// Token: 0x0600003B RID: 59 RVA: 0x0001306C File Offset: 0x0001246C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* ++(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(A_0);
		return A_0;
	}

	// Token: 0x0600003C RID: 60 RVA: 0x00012240 File Offset: 0x00011640
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ->(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x0600003D RID: 61 RVA: 0x00015694 File Offset: 0x00014A94
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* ptr;
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas == *A_0) ? 1 : 0) == 0 && <Module>.IniParser.ci_comp.()(A_0, _Keyval, tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas + 32L) == null)
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		}
		else
		{
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas = *A_0;
			ptr = &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		}
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x0600003E RID: 62 RVA: 0x00013084 File Offset: 0x00012484
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		return (*(A_0 + 8L) == 0L) ? 1 : 0;
	}

	// Token: 0x0600003F RID: 63 RVA: 0x00013C54 File Offset: 0x00013054
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x06000040 RID: 64 RVA: 0x00013C68 File Offset: 0x00013068
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x06000041 RID: 65 RVA: 0x00013C7C File Offset: 0x0001307C
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* front(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		return *(*A_0) + 16L;
	}

	// Token: 0x06000042 RID: 66 RVA: 0x0001309C File Offset: 0x0001249C
	internal unsafe static _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* end(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x06000043 RID: 67 RVA: 0x000130B0 File Offset: 0x000124B0
	internal unsafe static _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* end(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *A_0;
		return A_1;
	}

	// Token: 0x06000044 RID: 68 RVA: 0x000130C4 File Offset: 0x000124C4
	internal unsafe static _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* begin(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x06000045 RID: 69 RVA: 0x000130D8 File Offset: 0x000124D8
	internal unsafe static _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* begin(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_1)
	{
		*(long*)A_1 = *(*A_0);
		return A_1;
	}

	// Token: 0x06000046 RID: 70 RVA: 0x000130EC File Offset: 0x000124EC
	internal unsafe static void {dtor}(shared_ptr<IniParser>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x06000047 RID: 71 RVA: 0x000114C0 File Offset: 0x000108C0
	internal unsafe static shared_ptr<IniParser>* {ctor}(shared_ptr<IniParser>* A_0, shared_ptr<IniParser>* _Right)
	{
		*A_0 = *_Right;
		*(A_0 + 8L) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000048 RID: 72 RVA: 0x00012254 File Offset: 0x00011654
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool empty(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		return (*(A_0 + 16L) == 0L) ? 1 : 0;
	}

	// Token: 0x06000049 RID: 73 RVA: 0x00013C90 File Offset: 0x00013090
	internal unsafe static char* back(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* ptr = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.end(A_0, &string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>);
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
		cpblk(ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2, ptr, 8);
		string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2 -= 2L;
		return string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>2;
	}

	// Token: 0x0600004A RID: 74 RVA: 0x00013108 File Offset: 0x00012508
	internal unsafe static char* front(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x0600004B RID: 75 RVA: 0x00013CB8 File Offset: 0x000130B8
	internal unsafe static char* front(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x0600004C RID: 76 RVA: 0x0001312C File Offset: 0x0001252C
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* end(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(long*)A_1 = *(A_0 + 16L) * 2L / 2L + ptr;
		return A_1;
	}

	// Token: 0x0600004D RID: 77 RVA: 0x00013160 File Offset: 0x00012560
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* begin(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(long*)A_1 = ptr;
		return A_1;
	}

	// Token: 0x0600004E RID: 78 RVA: 0x000156DC File Offset: 0x00014ADC
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* insert(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1, _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> _Where, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		long num = _Where - ptr >> 1;
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.insert(A_0, num, 1L, _Ch);
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020> = num * 2L / 2 + ptr2;
		cpblk(A_1, ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>, 8);
		return A_1;
	}

	// Token: 0x0600004F RID: 79 RVA: 0x00015738 File Offset: 0x00014B38
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr)
	{
		char* ptr = _Ptr;
		if (*_Ptr != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, _Ptr, ptr - _Ptr >> 1);
	}

	// Token: 0x06000050 RID: 80 RVA: 0x00015768 File Offset: 0x00014B68
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* =(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		if (A_0 != _Right)
		{
			ulong num = (ulong)(*(_Right + 16L));
			char* ptr = _Right;
			if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
			{
				ptr = *_Right;
			}
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, ptr, num);
		}
		return A_0;
	}

	// Token: 0x06000051 RID: 81 RVA: 0x00013CDC File Offset: 0x000130DC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_0, _Right);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000052 RID: 82 RVA: 0x000103AC File Offset: 0x0000F7AC
	internal unsafe static _Ptr_base<IniParser>* {ctor}(_Ptr_base<IniParser>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000053 RID: 83 RVA: 0x000114E8 File Offset: 0x000108E8
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* pointer_to(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val)
	{
		return _Val;
	}

	// Token: 0x06000054 RID: 84 RVA: 0x000114F8 File Offset: 0x000108F8
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* pointer_to(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x06000055 RID: 85 RVA: 0x00011508 File Offset: 0x00010908
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* pointer_to(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x06000056 RID: 86 RVA: 0x00011518 File Offset: 0x00010918
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* pointer_to(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x06000057 RID: 87 RVA: 0x00011528 File Offset: 0x00010928
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* pointer_to(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x06000058 RID: 88 RVA: 0x00011538 File Offset: 0x00010938
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* pointer_to(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x06000059 RID: 89 RVA: 0x00011548 File Offset: 0x00010948
	internal unsafe static LauncherApp** _Myptr(_Unique_ptr_base<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600005A RID: 90 RVA: 0x00011558 File Offset: 0x00010958
	internal unsafe static default_delete<LauncherApp>* get_deleter(_Unique_ptr_base<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600005B RID: 91 RVA: 0x00011568 File Offset: 0x00010968
	internal unsafe static LauncherApp* get(unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x0600005C RID: 92 RVA: 0x000103C8 File Offset: 0x0000F7C8
	internal unsafe static void ()(default_delete<LauncherApp>* A_0, LauncherApp* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 1UL);
	}

	// Token: 0x0600005D RID: 93 RVA: 0x0001226C File Offset: 0x0001166C
	internal unsafe static void _Decref(_Ptr_base<ModuleManager::MODULE_INFO>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x0600005E RID: 94 RVA: 0x000103E0 File Offset: 0x0000F7E0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ==(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (*A_0 == *_Right) ? 1 : 0;
	}

	// Token: 0x0600005F RID: 95 RVA: 0x00012288 File Offset: 0x00011688
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_0;
	}

	// Token: 0x06000060 RID: 96 RVA: 0x00011578 File Offset: 0x00010978
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* *(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000061 RID: 97 RVA: 0x00013188 File Offset: 0x00012588
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* {ctor}(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000062 RID: 98 RVA: 0x000103F4 File Offset: 0x0000F7F4
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Lmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000063 RID: 99 RVA: 0x0001158C File Offset: 0x0001098C
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Get_data(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000064 RID: 100 RVA: 0x0001159C File Offset: 0x0001099C
	internal unsafe static less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Getcomp(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000065 RID: 101 RVA: 0x00013D54 File Offset: 0x00013154
	internal unsafe static void {dtor}(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, *A_0);
	}

	// Token: 0x06000066 RID: 102 RVA: 0x000122A0 File Offset: 0x000116A0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Key(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode)
	{
		return _Pnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
	}

	// Token: 0x06000067 RID: 103 RVA: 0x00016FB8 File Offset: 0x000163B8
	internal unsafe static void _Tidy(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		long num = *A_0;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = num;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2 = *num;
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.erase(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
	}

	// Token: 0x06000068 RID: 104 RVA: 0x000157A0 File Offset: 0x00014BA0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* lower_bound(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		*(long*)A_1 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::ch(A_0, _Keyval);
		return A_1;
	}

	// Token: 0x06000069 RID: 105 RVA: 0x000157B8 File Offset: 0x00014BB8
	internal unsafe static _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* {ctor}(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Parg)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		*A_0 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(A_0);
		return A_0;
	}

	// Token: 0x0600006A RID: 106 RVA: 0x00013D6C File Offset: 0x0001316C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ()(less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		return (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Left, _Right) < 0) ? 1 : 0;
	}

	// Token: 0x0600006B RID: 107 RVA: 0x0001319C File Offset: 0x0001259C
	internal unsafe static void swap(shared_ptr<ModuleManager::MODULE_INFO>* A_0, shared_ptr<ModuleManager::MODULE_INFO>* _Other)
	{
		ModuleManager.MODULE_INFO* ptr = *A_0;
		*A_0 = *_Other;
		*_Other = ptr;
		_Ref_count_base* ptr2 = *(A_0 + 8L);
		*(A_0 + 8L) = *(_Other + 8L);
		*(_Other + 8L) = ptr2;
	}

	// Token: 0x0600006C RID: 108 RVA: 0x000122B4 File Offset: 0x000116B4
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* {ctor}(shared_ptr<ModuleManager::MODULE_INFO>* A_0, shared_ptr<ModuleManager::MODULE_INFO>* _Other)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		ulong num = (ulong)(*(_Other + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		*A_0 = *_Other;
		*(A_0 + 8L) = *(_Other + 8L);
		return A_0;
	}

	// Token: 0x0600006D RID: 109 RVA: 0x00010404 File Offset: 0x0000F804
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool ==(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Right)
	{
		return (*A_0 == *_Right) ? 1 : 0;
	}

	// Token: 0x0600006E RID: 110 RVA: 0x00010418 File Offset: 0x0000F818
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* *(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x0600006F RID: 111 RVA: 0x000122F0 File Offset: 0x000116F0
	internal unsafe static _List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* {ctor}(_List_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode, _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000070 RID: 112 RVA: 0x00012304 File Offset: 0x00011704
	internal unsafe static _List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* {ctor}(_List_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode, _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000071 RID: 113 RVA: 0x00012318 File Offset: 0x00011718
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>** _Myhead(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000072 RID: 114 RVA: 0x00012328 File Offset: 0x00011728
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>** _Myhead(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000073 RID: 115 RVA: 0x000115AC File Offset: 0x000109AC
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Get_data(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000074 RID: 116 RVA: 0x000115BC File Offset: 0x000109BC
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Get_data(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000075 RID: 117 RVA: 0x00012338 File Offset: 0x00011738
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_0;
	}

	// Token: 0x06000076 RID: 118 RVA: 0x00010444 File Offset: 0x0000F844
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* *(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000077 RID: 119 RVA: 0x00012350 File Offset: 0x00011750
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* {ctor}(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000078 RID: 120 RVA: 0x00010458 File Offset: 0x0000F858
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* *(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000079 RID: 121 RVA: 0x00012364 File Offset: 0x00011764
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* {ctor}(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x0600007A RID: 122 RVA: 0x0001046C File Offset: 0x0000F86C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** _Lmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x0600007B RID: 123 RVA: 0x000115CC File Offset: 0x000109CC
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Get_data(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		return A_0;
	}

	// Token: 0x0600007C RID: 124 RVA: 0x000115DC File Offset: 0x000109DC
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Get_data(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		return A_0;
	}

	// Token: 0x0600007D RID: 125 RVA: 0x000115EC File Offset: 0x000109EC
	internal unsafe static IniParser.ci_comp* _Getcomp(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		return A_0;
	}

	// Token: 0x0600007E RID: 126 RVA: 0x000115FC File Offset: 0x000109FC
	internal unsafe static IniParser.ci_comp* _Getcomp(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		return A_0;
	}

	// Token: 0x0600007F RID: 127 RVA: 0x00012378 File Offset: 0x00011778
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Key(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode)
	{
		return _Pnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
	}

	// Token: 0x06000080 RID: 128 RVA: 0x00015210 File Offset: 0x00014610
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* lower_bound(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		*(long*)A_1 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		return A_1;
	}

	// Token: 0x06000081 RID: 129 RVA: 0x00015228 File Offset: 0x00014628
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* lower_bound(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		*(long*)A_1 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, _Keyval);
		return A_1;
	}

	// Token: 0x06000082 RID: 130 RVA: 0x0001160C File Offset: 0x00010A0C
	internal unsafe static ulong size(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		return *(A_0 + 8L);
	}

	// Token: 0x06000083 RID: 131 RVA: 0x0001238C File Offset: 0x0001178C
	internal unsafe static void _Decref(_Ptr_base<IniParser>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (num != 0UL)
		{
			<Module>.std._Ref_count_base._Decref(num);
		}
	}

	// Token: 0x06000084 RID: 132 RVA: 0x000123A8 File Offset: 0x000117A8
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(A_0);
		return A_0;
	}

	// Token: 0x06000085 RID: 133 RVA: 0x00011620 File Offset: 0x00010A20
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* *(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x06000086 RID: 134 RVA: 0x000131CC File Offset: 0x000125CC
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* {ctor}(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x06000087 RID: 135 RVA: 0x0001047C File Offset: 0x0000F87C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** _Lmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000088 RID: 136 RVA: 0x00011634 File Offset: 0x00010A34
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		return A_0;
	}

	// Token: 0x06000089 RID: 137 RVA: 0x00011644 File Offset: 0x00010A44
	internal unsafe static IniParser.ci_comp* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		return A_0;
	}

	// Token: 0x0600008A RID: 138 RVA: 0x000123C0 File Offset: 0x000117C0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode)
	{
		return _Pnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
	}

	// Token: 0x0600008B RID: 139 RVA: 0x00015240 File Offset: 0x00014640
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		*(long*)A_1 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, _Keyval);
		return A_1;
	}

	// Token: 0x0600008C RID: 140 RVA: 0x000123D4 File Offset: 0x000117D4
	internal unsafe static ulong _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		return *(A_0 + 8L);
	}

	// Token: 0x0600008D RID: 141 RVA: 0x00011654 File Offset: 0x00010A54
	internal unsafe static long -(_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* _Right)
	{
		return *A_0 - *_Right >> 1;
	}

	// Token: 0x0600008E RID: 142 RVA: 0x0001048C File Offset: 0x0000F88C
	internal unsafe static char* *(_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x0600008F RID: 143 RVA: 0x000131E0 File Offset: 0x000125E0
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* -(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1, long _Off)
	{
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		cpblk(ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>, A_0, 8);
		string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020> = _Off * -2L + string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		cpblk(A_1, ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>, 8);
		return A_1;
	}

	// Token: 0x06000090 RID: 144 RVA: 0x000123E8 File Offset: 0x000117E8
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* +(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1, long _Off)
	{
		_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		cpblk(ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>, A_0, 8);
		string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020> = _Off * 2L + string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>;
		cpblk(A_1, ref string_iterator<std::_String_val<std::_Simple_types<wchar_t>_u0020>_u0020>, 8);
		return A_1;
	}

	// Token: 0x06000091 RID: 145 RVA: 0x0001049C File Offset: 0x0000F89C
	internal unsafe static char* *(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000092 RID: 146 RVA: 0x00012410 File Offset: 0x00011810
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* {ctor}(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, char* _Parg, _Container_base0* _Pstring)
	{
		*A_0 = _Parg;
		return A_0;
	}

	// Token: 0x06000093 RID: 147 RVA: 0x000104AC File Offset: 0x0000F8AC
	internal unsafe static allocator<wchar_t>* select_on_container_copy_construction(allocator<wchar_t>* A_0, allocator<wchar_t>* _Al)
	{
		return A_0;
	}

	// Token: 0x06000094 RID: 148 RVA: 0x00012424 File Offset: 0x00011824
	internal unsafe static void _Copy_alloc(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0, allocator<wchar_t>* _Al)
	{
	}

	// Token: 0x06000095 RID: 149 RVA: 0x00012434 File Offset: 0x00011834
	internal unsafe static _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* begin(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_1)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		*(long*)A_1 = ptr;
		return A_1;
	}

	// Token: 0x06000096 RID: 150 RVA: 0x0001320C File Offset: 0x0001260C
	internal unsafe static void _Construct_lv_contents(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = *(_Right + 16L);
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		if (num < 8L)
		{
			cpblk(A_0, ptr, 16L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = 7L;
		}
		else
		{
			ulong num2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0);
			ulong num3 = num | 7L;
			ulong num4 = num3;
			ulong num5 = *(ref num2 < num3 ? ref num2 : ref num4);
			char* ptr2 = <Module>.std.allocator<wchar_t>.allocate(A_0, num5 + 1L);
			*A_0 = ptr2;
			cpblk(ptr2, ptr, (num + 1L) * 2L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = num5;
		}
	}

	// Token: 0x06000097 RID: 151 RVA: 0x000104BC File Offset: 0x0000F8BC
	internal unsafe static _Ptr_base<ModuleManager::MODULE_INFO>* {ctor}(_Ptr_base<ModuleManager::MODULE_INFO>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000098 RID: 152 RVA: 0x000104D8 File Offset: 0x0000F8D8
	internal unsafe static LauncherApp** _Get_second(_Compressed_pair<std::default_delete<LauncherApp>,LauncherApp\u0020*,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000099 RID: 153 RVA: 0x000104E8 File Offset: 0x0000F8E8
	internal unsafe static default_delete<LauncherApp>* _Get_first(_Compressed_pair<std::default_delete<LauncherApp>,LauncherApp\u0020*,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600009A RID: 154 RVA: 0x0001245C File Offset: 0x0001185C
	internal unsafe static void _Swap(_Ptr_base<ModuleManager::MODULE_INFO>* A_0, _Ptr_base<ModuleManager::MODULE_INFO>* _Right)
	{
		ModuleManager.MODULE_INFO* ptr = *A_0;
		*A_0 = *_Right;
		*_Right = ptr;
		_Ref_count_base* ptr2 = *(A_0 + 8L);
		*(A_0 + 8L) = *(_Right + 8L);
		*(_Right + 8L) = ptr2;
	}

	// Token: 0x0600009B RID: 155 RVA: 0x000104F8 File Offset: 0x0000F8F8
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* _Get_second(_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* A_0)
	{
		return A_0;
	}

	// Token: 0x0600009C RID: 156 RVA: 0x00010508 File Offset: 0x0000F908
	internal unsafe static less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Get_first(_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* A_0)
	{
		return A_0;
	}

	// Token: 0x0600009D RID: 157 RVA: 0x00010518 File Offset: 0x0000F918
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600009E RID: 158 RVA: 0x00011668 File Offset: 0x00010A68
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* ++(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		long num = *A_0;
		long num2 = *(num + 16L);
		if (*(num2 + 25L) != 0)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *(num + 8L);
			if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
			{
				while (*A_0 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)))
				{
					*A_0 = ptr;
					ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
					{
						break;
					}
				}
			}
			*A_0 = ptr;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = num2;
			long num3 = *(long*)ptr2;
			if (*(num3 + 25L) == 0)
			{
				do
				{
					ptr2 = num3;
					num3 = *(long*)ptr2;
				}
				while (*(num3 + 25L) == 0);
			}
			*A_0 = ptr2;
		}
		return A_0;
	}

	// Token: 0x0600009F RID: 159 RVA: 0x00010528 File Offset: 0x0000F928
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* *(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x060000A0 RID: 160 RVA: 0x0001248C File Offset: 0x0001188C
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* {ctor}(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000A1 RID: 161 RVA: 0x000132A0 File Offset: 0x000126A0
	internal unsafe static void _Freeheadnode(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, _Pnode);
	}

	// Token: 0x060000A2 RID: 162 RVA: 0x00015258 File Offset: 0x00014658
	internal unsafe static _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* {ctor}(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Parg)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		*A_0 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(A_0);
		return A_0;
	}

	// Token: 0x060000A3 RID: 163 RVA: 0x000116D8 File Offset: 0x00010AD8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Kfn(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000A4 RID: 164 RVA: 0x00016ED8 File Offset: 0x000162D8
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _First, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _Last)
	{
		long num = *A_0;
		if (((_First == *num) ? 1 : 0) != 0 && ((_Last == num) ? 1 : 0) != 0)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.clear(A_0);
			*(long*)A_1 = *(*A_0);
			return A_1;
		}
		while (((((_First == _Last) ? 1 : 0) == 0) ? 1 : 0) != 0)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = _First;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _First);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>.erase(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
		}
		*(long*)A_1 = _First;
		return A_1;
	}

	// Token: 0x060000A5 RID: 165 RVA: 0x0001053C File Offset: 0x0000F93C
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>,std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x060000A6 RID: 166 RVA: 0x0001054C File Offset: 0x0000F94C
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>,std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x060000A7 RID: 167 RVA: 0x000116E8 File Offset: 0x00010AE8
	internal unsafe static _List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode, _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000A8 RID: 168 RVA: 0x0001055C File Offset: 0x0000F95C
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_* _Get_second(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::c* A_0)
	{
		return A_0;
	}

	// Token: 0x060000A9 RID: 169 RVA: 0x0001056C File Offset: 0x0000F96C
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_* _Get_second(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::c* A_0)
	{
		return A_0;
	}

	// Token: 0x060000AA RID: 170 RVA: 0x0001057C File Offset: 0x0000F97C
	internal unsafe static IniParser.ci_comp* _Get_first(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::c* A_0)
	{
		return A_0;
	}

	// Token: 0x060000AB RID: 171 RVA: 0x0001058C File Offset: 0x0000F98C
	internal unsafe static IniParser.ci_comp* _Get_first(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::c* A_0)
	{
		return A_0;
	}

	// Token: 0x060000AC RID: 172 RVA: 0x0001059C File Offset: 0x0000F99C
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_* A_0)
	{
		return A_0;
	}

	// Token: 0x060000AD RID: 173 RVA: 0x000105AC File Offset: 0x0000F9AC
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_* A_0)
	{
		return A_0;
	}

	// Token: 0x060000AE RID: 174 RVA: 0x000116FC File Offset: 0x00010AFC
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* ++(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		long num = *A_0;
		long num2 = *(num + 16L);
		if (*(num2 + 25L) != 0)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(num + 8L);
			if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
			{
				while (*A_0 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)))
				{
					*A_0 = ptr;
					ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
					{
						break;
					}
				}
			}
			*A_0 = ptr;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = num2;
			long num3 = *(long*)ptr2;
			if (*(num3 + 25L) == 0)
			{
				do
				{
					ptr2 = num3;
					num3 = *(long*)ptr2;
				}
				while (*(num3 + 25L) == 0);
			}
			*A_0 = ptr2;
		}
		return A_0;
	}

	// Token: 0x060000AF RID: 175 RVA: 0x0001176C File Offset: 0x00010B6C
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000B0 RID: 176 RVA: 0x00011780 File Offset: 0x00010B80
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Kfn(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000B1 RID: 177 RVA: 0x000105BC File Offset: 0x0000F9BC
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st* _Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co* A_0)
	{
		return A_0;
	}

	// Token: 0x060000B2 RID: 178 RVA: 0x000105CC File Offset: 0x0000F9CC
	internal unsafe static IniParser.ci_comp* _Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co* A_0)
	{
		return A_0;
	}

	// Token: 0x060000B3 RID: 179 RVA: 0x000105DC File Offset: 0x0000F9DC
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st* A_0)
	{
		return A_0;
	}

	// Token: 0x060000B4 RID: 180 RVA: 0x00011790 File Offset: 0x00010B90
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* ++(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* A_0)
	{
		long num = *A_0;
		long num2 = *(num + 16L);
		if (*(num2 + 25L) != 0)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(num + 8L);
			if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
			{
				while (*A_0 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)))
				{
					*A_0 = ptr;
					ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
					{
						break;
					}
				}
			}
			*A_0 = ptr;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = num2;
			long num3 = *(long*)ptr2;
			if (*(num3 + 25L) == 0)
			{
				do
				{
					ptr2 = num3;
					num3 = *(long*)ptr2;
				}
				while (*(num3 + 25L) == 0);
			}
			*A_0 = ptr2;
		}
		return A_0;
	}

	// Token: 0x060000B5 RID: 181 RVA: 0x000105EC File Offset: 0x0000F9EC
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* *(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0)
	{
		return *A_0 + 32L;
	}

	// Token: 0x060000B6 RID: 182 RVA: 0x000124A0 File Offset: 0x000118A0
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* {ctor}(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000B7 RID: 183 RVA: 0x00011800 File Offset: 0x00010C00
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		return A_0;
	}

	// Token: 0x060000B8 RID: 184 RVA: 0x00011810 File Offset: 0x00010C10
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val)
	{
		return _Val;
	}

	// Token: 0x060000B9 RID: 185 RVA: 0x00010600 File Offset: 0x0000FA00
	internal unsafe static void _Compat(_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* _Right)
	{
	}

	// Token: 0x060000BA RID: 186 RVA: 0x00011820 File Offset: 0x00010C20
	internal unsafe static _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* {ctor}(_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, char* _Parg, _Container_base0* _Pstring)
	{
		*A_0 = _Parg;
		return A_0;
	}

	// Token: 0x060000BB RID: 187 RVA: 0x000124B4 File Offset: 0x000118B4
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* -=(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, long _Off)
	{
		*A_0 += _Off * -2L;
		return A_0;
	}

	// Token: 0x060000BC RID: 188 RVA: 0x00011834 File Offset: 0x00010C34
	internal unsafe static _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* +=(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, long _Off)
	{
		*A_0 += _Off * 2L;
		return A_0;
	}

	// Token: 0x060000BD RID: 189 RVA: 0x0001184C File Offset: 0x00010C4C
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000BE RID: 190 RVA: 0x000124D4 File Offset: 0x000118D4
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, int A_0)
	{
		cpblk(A_1, A_0, 8);
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_1;
	}

	// Token: 0x060000BF RID: 191 RVA: 0x00010610 File Offset: 0x0000FA10
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Min(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode)
	{
		long num = *(long*)_Pnode;
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)_Pnode;
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x060000C0 RID: 192 RVA: 0x00011860 File Offset: 0x00010C60
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* _Getal(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x060000C1 RID: 193 RVA: 0x00013D84 File Offset: 0x00013184
	internal unsafe static void _Construct(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		*A_0 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buyheadnode(A_0);
	}

	// Token: 0x060000C2 RID: 194 RVA: 0x00016E74 File Offset: 0x00016274
	internal unsafe static void clear(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		long num = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = num;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Erase(A_0, *(num + 8L));
		*(*A_0 + 8L) = ptr;
		*(*A_0) = ptr;
		*(*A_0 + 16L) = ptr;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x060000C3 RID: 195 RVA: 0x00016A4C File Offset: 0x00015E4C
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Extract(A_0, _Where);
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>.__delDtor(ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), 0U);
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, ptr);
		*(long*)A_1 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
		return A_1;
	}

	// Token: 0x060000C4 RID: 196 RVA: 0x00010638 File Offset: 0x0000FA38
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Min(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode)
	{
		long num = *(long*)_Pnode;
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)_Pnode;
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x060000C5 RID: 197 RVA: 0x00010660 File Offset: 0x0000FA60
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st* _Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co* A_0)
	{
		return A_0;
	}

	// Token: 0x060000C6 RID: 198 RVA: 0x00010670 File Offset: 0x0000FA70
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st* A_0)
	{
		return A_0;
	}

	// Token: 0x060000C7 RID: 199 RVA: 0x00011870 File Offset: 0x00010C70
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode, _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Plist)
	{
		*A_0 = _Pnode;
		return A_0;
	}

	// Token: 0x060000C8 RID: 200 RVA: 0x00010680 File Offset: 0x0000FA80
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Min(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode)
	{
		long num = *(long*)_Pnode;
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)_Pnode;
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x060000C9 RID: 201 RVA: 0x000106A8 File Offset: 0x0000FAA8
	internal unsafe static _String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* +=(_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0, long _Off)
	{
		*A_0 += _Off * 2L;
		return A_0;
	}

	// Token: 0x060000CA RID: 202 RVA: 0x000106C0 File Offset: 0x0000FAC0
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* _Get_first(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x060000CB RID: 203 RVA: 0x000124F0 File Offset: 0x000118F0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Extract(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _Where);
		long num = *(long*)ptr;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr4;
		long num4;
		if (*(num + 25L) != 0)
		{
			ptr2 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		}
		else if (*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 25L) != 0)
		{
			ptr2 = num;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr3 = _Where;
			long num2 = _Where + 16L;
			long num3 = num2;
			ptr2 = *num2;
			if (_Where != ptr)
			{
				*(num + 8L) = _Where;
				*(long*)ptr3 = *(long*)ptr;
				if (ptr3 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)))
				{
					ptr4 = ptr3;
				}
				else
				{
					ptr4 = *(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
					{
						*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = ptr4;
					}
					*(long*)ptr4 = ptr2;
					*num3 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 8L) = ptr3;
				}
				num4 = *A_0 + 8L;
				if (*num4 == ptr)
				{
					*num4 = ptr3;
				}
				else
				{
					long num5 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					if (*num5 == ptr)
					{
						*num5 = ptr3;
					}
					else
					{
						*(num5 + 16L) = ptr3;
					}
				}
				*(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
				sbyte b = *(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
				*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)));
				*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = b;
				goto IL_1C3;
			}
		}
		ptr4 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
		{
			*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = ptr4;
		}
		num4 = *A_0 + 8L;
		if (*num4 == ptr)
		{
			*num4 = ptr2;
		}
		else if (*(long*)ptr4 == ptr)
		{
			*(long*)ptr4 = ptr2;
		}
		else
		{
			*(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = ptr2;
		}
		long num6 = *A_0;
		if (*num6 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr5;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
			{
				ptr5 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr6 = ptr2;
				long num7 = *(long*)ptr2;
				if (*(num7 + 25L) == 0)
				{
					long num8 = num7;
					do
					{
						ptr6 = num8;
						num8 = *(long*)ptr6;
					}
					while (*(num8 + 25L) == 0);
				}
				ptr5 = ptr6;
			}
			*num6 = ptr5;
		}
		long num9 = *A_0 + 16L;
		if (*num9 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr7;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
			{
				ptr7 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr8 = ptr2;
				long num10 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
				if (*(num10 + 25L) == 0)
				{
					long num11 = num10;
					do
					{
						ptr8 = num11;
						num11 = *(long*)(ptr8 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					}
					while (*(num11 + 25L) == 0);
				}
				ptr7 = ptr8;
			}
			*num9 = ptr7;
		}
		IL_1C3:
		if (*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 1)
		{
			if (ptr2 != *(*A_0 + 8L))
			{
				while (*(sbyte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 1)
				{
					ulong num12 = (ulong)(*(long*)ptr4);
					if (ptr2 == num12)
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
							ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)ptr3 + 24L) != 1 || *(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) != 1)
							{
								if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) == 1)
								{
									*(*(long*)ptr3 + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr3);
									ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr9 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr9);
								*(byte*)ptr9 = 1;
								*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					else
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr3 = num12;
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
							ptr3 = *(long*)ptr4;
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) != 1 || *(*(long*)ptr3 + 24L) != 1)
							{
								if (*(*(long*)ptr3 + 24L) == 1)
								{
									*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr3);
									ptr3 = *(long*)ptr4;
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr10 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr10);
								*(byte*)ptr10 = 1;
								*(*(long*)ptr3 + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					ptr4 = *(long*)(ptr4 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					if (ptr2 == *(*A_0 + 8L))
					{
						break;
					}
				}
			}
			*(byte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
		}
		ulong num13 = (ulong)(*(A_0 + 8L));
		if (0UL < num13)
		{
			*(A_0 + 8L) = (long)(num13 - 1UL);
		}
		return ptr;
	}

	// Token: 0x060000CC RID: 204 RVA: 0x000106D0 File Offset: 0x0000FAD0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Rmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x060000CD RID: 205 RVA: 0x000106E4 File Offset: 0x0000FAE4
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Root(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 8L;
	}

	// Token: 0x060000CE RID: 206 RVA: 0x000132B4 File Offset: 0x000126B4
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Buyheadnode(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>.allocate(A_0, 1L);
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = ptr;
			*(long*)ptr2 = ptr2;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** ptr3 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
			*ptr3 = ptr;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** ptr4 = ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
			*ptr4 = ptr;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
		*(byte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
		return ptr;
	}

	// Token: 0x060000CF RID: 207 RVA: 0x00016A84 File Offset: 0x00015E84
	internal unsafe static void _Erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Rootnode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = _Rootnode;
		if (*(sbyte*)(_Rootnode + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Erase(A_0, *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)));
				ptr = *(long*)ptr;
				<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>.__delDtor(_Rootnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), 0U);
				<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, _Rootnode);
				_Rootnode = ptr;
			}
			while (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0);
		}
	}

	// Token: 0x060000D0 RID: 208 RVA: 0x000106F8 File Offset: 0x0000FAF8
	internal unsafe static void _Rrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *(long*)_Wherenode;
		*(long*)_Wherenode = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		long num = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
			if (_Wherenode == *(num3 + 16L))
			{
				*(num3 + 16L) = ptr;
			}
			else
			{
				*num3 = ptr;
			}
		}
		*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x060000D1 RID: 209 RVA: 0x00010768 File Offset: 0x0000FB68
	internal unsafe static void _Lrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = *(long*)ptr;
		long num = *(long*)ptr;
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
			if (_Wherenode == *num3)
			{
				*num3 = ptr;
			}
			else
			{
				*(num3 + 16L) = ptr;
			}
		}
		*(long*)ptr = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x060000D2 RID: 210 RVA: 0x000107D0 File Offset: 0x0000FBD0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Max(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode)
	{
		long num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x060000D3 RID: 211 RVA: 0x00012874 File Offset: 0x00011C74
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* allocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* A_0, ulong _Count)
	{
		ulong num = _Count * 80L;
		if (230584300921369395L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x060000D4 RID: 212 RVA: 0x00011884 File Offset: 0x00010C84
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x060000D5 RID: 213 RVA: 0x000133B0 File Offset: 0x000127B0
	internal unsafe static shared_ptr<IniParser>* make_shared<class\u0020IniParser,enum\u0020std::byte\u0020const\u0020*\u0020&,unsigned\u0020int\u0020&>(shared_ptr<IniParser>* A_0, @byte** <_Args_0>, uint* <_Args_1>)
	{
		try
		{
			uint num = 0U;
			_Ref_count_obj<IniParser>* ptr = <Module>.@new(32UL);
			_Ref_count_obj<IniParser>* ptr3;
			try
			{
				if (ptr != null)
				{
					*(int*)(ptr + 8L / (long)sizeof(_Ref_count_obj<IniParser>)) = 1;
					*(int*)(ptr + 12L / (long)sizeof(_Ref_count_obj<IniParser>)) = 1;
					try
					{
						*(long*)ptr = ref <Module>.??_7?$_Ref_count_obj@VIniParser@@@std@@6B@;
						IniParser* ptr2 = ptr + 16L / (long)sizeof(_Ref_count_obj<IniParser>);
						uint num2 = (uint)(*<_Args_1>);
						long num3 = *<_Args_0>;
						<Module>.IniParser.{ctor}(ptr2, num3, num2);
					}
					catch
					{
						<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), (void*)ptr);
						throw;
					}
					ptr3 = ptr;
				}
				else
				{
					ptr3 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 32UL);
				throw;
			}
			*(long*)A_0 = 0L;
			shared_ptr<IniParser>* ptr4 = A_0 + 8L / (long)sizeof(shared_ptr<IniParser>);
			*(long*)ptr4 = 0L;
			num = 1U;
			*(long*)A_0 = ptr3 + 16L / (long)sizeof(_Ref_count_obj<IniParser>);
			*(long*)ptr4 = ptr3;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<IniParser>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x060000D6 RID: 214 RVA: 0x00010800 File Offset: 0x0000FC00
	internal unsafe static void LOG_MSG<wchar_t\u0020const\u0020*,wchar_t\u0020const\u0020*>(char* <args_0>, char* <args_1>)
	{
		if (<Module>.?use_log@LogMsg@@2_NA)
		{
			<Module>.LogMsg.Write(<args_0>, __arglist((ushort*)<args_1>));
		}
	}

	// Token: 0x060000D7 RID: 215 RVA: 0x0001349C File Offset: 0x0001289C
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* make_shared<struct\u0020ModuleManager::MODULE_INFO>(shared_ptr<ModuleManager::MODULE_INFO>* A_0)
	{
		try
		{
			uint num = 0U;
			_Ref_count_obj<ModuleManager::MODULE_INFO>* ptr = <Module>.@new(32UL);
			_Ref_count_obj<ModuleManager::MODULE_INFO>* ptr2;
			try
			{
				if (ptr != null)
				{
					ptr2 = <Module>.std._Ref_count_obj<ModuleManager::MODULE_INFO>.{ctor}<>(ptr);
				}
				else
				{
					ptr2 = null;
				}
			}
			catch
			{
				<Module>.delete((void*)ptr, 32UL);
				throw;
			}
			*(long*)A_0 = 0L;
			shared_ptr<ModuleManager::MODULE_INFO>* ptr3 = A_0 + 8L / (long)sizeof(shared_ptr<ModuleManager::MODULE_INFO>);
			*(long*)ptr3 = 0L;
			num = 1U;
			*(long*)A_0 = ptr2 + 16L / (long)sizeof(_Ref_count_obj<ModuleManager::MODULE_INFO>);
			*(long*)ptr3 = ptr2;
		}
		catch
		{
			uint num;
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.shared_ptr<ModuleManager::MODULE_INFO>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x060000D8 RID: 216 RVA: 0x000118B4 File Offset: 0x00010CB4
	internal unsafe static ModuleManager.MODULE_INFO* operator-><struct\u0020ModuleManager::MODULE_INFO,0>(shared_ptr<ModuleManager::MODULE_INFO>* A_0)
	{
		return *A_0;
	}

	// Token: 0x060000D9 RID: 217 RVA: 0x000118C4 File Offset: 0x00010CC4
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool operator!=<struct\u0020ModuleManager::MODULE_INFO>(void* __unnamed000, shared_ptr<ModuleManager::MODULE_INFO>* _Right)
	{
		return (0L != *_Right) ? 1 : 0;
	}

	// Token: 0x060000DA RID: 218 RVA: 0x000157DC File Offset: 0x00014BDC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* operator+<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, char* _Right)
	{
		uint num = 0U;
		char* ptr = _Right;
		if (*_Right != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		long num2 = ptr - _Right >> 1;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(_Left, _Right, num2);
		<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{ctor}(A_0, ptr2);
		try
		{
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x060000DB RID: 219 RVA: 0x0001081C File Offset: 0x0000FC1C
	internal unsafe static void LOG_MSG<wchar_t\u0020const\u0020*>(char* <args_0>)
	{
		if (<Module>.?use_log@LogMsg@@2_NA)
		{
			<Module>.LogMsg.Write(<args_0>, __arglist());
		}
	}

	// Token: 0x060000DC RID: 220 RVA: 0x00013D9C File Offset: 0x0001319C
	internal unsafe static unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* make_unique<class\u0020LauncherApp,0>(unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0)
	{
		uint num = 0U;
		LauncherApp* ptr = <Module>.@new(1UL);
		try
		{
			LauncherApp* ptr2;
			try
			{
				ptr2 = ptr;
			}
			catch
			{
				<Module>.delete((void*)ptr, 1UL);
				throw;
			}
			*(long*)A_0 = ptr2;
			num = 1U;
		}
		catch
		{
			if ((num & 1U) != 0U)
			{
				num &= 4294967294U;
				<Module>.___CxxCallUnwindDtor(ldftn(std.unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>.{dtor}), (void*)A_0);
			}
			throw;
		}
		return A_0;
	}

	// Token: 0x060000DD RID: 221 RVA: 0x000118EC File Offset: 0x00010CEC
	internal unsafe static void replace<class\u0020std::_String_iterator<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020>,wchar_t>(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> _First, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020> _Last, char* _Oldval, char* _Newval)
	{
		char* ptr = _First;
		if (_First != _Last)
		{
			do
			{
				if (*ptr == (char)(*_Oldval))
				{
					*ptr = (char)(*_Newval);
				}
				ptr += 2L / 2L;
			}
			while (ptr != _Last);
		}
	}

	// Token: 0x060000DE RID: 222 RVA: 0x000118DC File Offset: 0x00010CDC
	internal unsafe static char* _Get_unwrapped<class\u0020std::_String_iterator<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020>,0>(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* _It)
	{
		return *_It;
	}

	// Token: 0x060000DF RID: 223 RVA: 0x00010838 File Offset: 0x0000FC38
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* addressof<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E0 RID: 224 RVA: 0x00016FDC File Offset: 0x000163DC
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* try_emplace<>(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		<Module>.std.map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Try_emplace<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>(A_0, A_1, _Keyval);
		return A_1;
	}

	// Token: 0x060000E1 RID: 225 RVA: 0x00010848 File Offset: 0x0000FC48
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* addressof<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u00…(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E2 RID: 226 RVA: 0x00010858 File Offset: 0x0000FC58
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* addressof<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u00…(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E3 RID: 227 RVA: 0x00010868 File Offset: 0x0000FC68
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* addressof<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u00…(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E4 RID: 228 RVA: 0x00010878 File Offset: 0x0000FC78
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* addressof<class\u0020std::_List_val<struct\u0020std::_List_simple_types<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020const\u0020>(_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E5 RID: 229 RVA: 0x00010888 File Offset: 0x0000FC88
	internal unsafe static _List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* addressof<class\u0020std::_List_val<struct\u0020std::_List_simple_types<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>(_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000E6 RID: 230 RVA: 0x00010898 File Offset: 0x0000FC98
	internal unsafe static shared_ptr<IniParser>* move<class\u0020std::shared_ptr<class\u0020IniParser>\u0020&>(shared_ptr<IniParser>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x060000E7 RID: 231 RVA: 0x000108A8 File Offset: 0x0000FCA8
	internal unsafe static void _Move_construct_from<class\u0020IniParser>(_Ptr_base<IniParser>* A_0, _Ptr_base<IniParser>* _Right)
	{
		*A_0 = *_Right;
		*(A_0 + 8L) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
	}

	// Token: 0x060000E8 RID: 232 RVA: 0x000108D0 File Offset: 0x0000FCD0
	internal unsafe static char* _Refancy<wchar_t\u0020*,0>(char* _Ptr)
	{
		return _Ptr;
	}

	// Token: 0x060000E9 RID: 233 RVA: 0x000108F8 File Offset: 0x0000FCF8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* addressof<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000EA RID: 234 RVA: 0x0001094C File Offset: 0x0000FD4C
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* addressof<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u…(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val)
	{
		return _Val;
	}

	// Token: 0x060000EB RID: 235 RVA: 0x0001095C File Offset: 0x0000FD5C
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* addressof<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000EC RID: 236 RVA: 0x0001096C File Offset: 0x0000FD6C
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* addressof<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020const\u0020>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000ED RID: 237 RVA: 0x0001098C File Offset: 0x0000FD8C
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* addressof<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000EE RID: 238 RVA: 0x0001527C File Offset: 0x0001467C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), _Keyval) < 0) ? 1 : 0) != 0)
				{
					ptr2 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
				}
				else
				{
					ptr = ptr2;
					ptr2 = *(long*)ptr2;
				}
			}
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0);
		}
		return ptr;
	}

	// Token: 0x060000EF RID: 239 RVA: 0x0001353C File Offset: 0x0001293C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool operator<<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		return (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Left, _Right) < 0) ? 1 : 0;
	}

	// Token: 0x060000F0 RID: 240 RVA: 0x0001191C File Offset: 0x00010D1C
	internal unsafe static void _Copy_construct_from<struct\u0020ModuleManager::MODULE_INFO>(_Ptr_base<ModuleManager::MODULE_INFO>* A_0, shared_ptr<ModuleManager::MODULE_INFO>* _Other)
	{
		ulong num = (ulong)(*(_Other + 8L));
		if (num != 0UL)
		{
			Interlocked.Increment(num + 8UL);
		}
		*A_0 = *_Other;
		*(A_0 + 8L) = *(_Other + 8L);
	}

	// Token: 0x060000F1 RID: 241 RVA: 0x00013E18 File Offset: 0x00013218
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				if (<Module>.IniParser.ci_comp.()(A_0, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), _Keyval) != null)
				{
					ptr2 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				}
				else
				{
					ptr = ptr2;
					ptr2 = *(long*)ptr2;
				}
			}
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0);
		}
		return ptr;
	}

	// Token: 0x060000F2 RID: 242 RVA: 0x00013E5C File Offset: 0x0001325C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			do
			{
				if (<Module>.IniParser.ci_comp.()(A_0, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t), _Keyval) != null)
				{
					ptr2 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				}
				else
				{
					ptr = ptr2;
					ptr2 = *(long*)ptr2;
				}
			}
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0);
		}
		return ptr;
	}

	// Token: 0x060000F3 RID: 243 RVA: 0x0001194C File Offset: 0x00010D4C
	internal unsafe static void _Pocca<class\u0020std::allocator<wchar_t>\u0020>(allocator<wchar_t>* _Left, allocator<wchar_t>* _Right)
	{
	}

	// Token: 0x060000F4 RID: 244 RVA: 0x000109AC File Offset: 0x0000FDAC
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* addressof<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020const\u0020>(_String_val<std::_Simple_types<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000F5 RID: 245 RVA: 0x000109BC File Offset: 0x0000FDBC
	internal unsafe static char* _Refancy<wchar_t\u0020const\u0020*,0>(char* _Ptr)
	{
		return _Ptr;
	}

	// Token: 0x060000F6 RID: 246 RVA: 0x0001195C File Offset: 0x00010D5C
	internal unsafe static void swap<struct\u0020ModuleManager::MODULE_INFO\u0020*,void>(ModuleManager.MODULE_INFO** _Left, ModuleManager.MODULE_INFO** _Right)
	{
		ModuleManager.MODULE_INFO* ptr = *_Left;
		*_Left = *_Right;
		*_Right = ptr;
	}

	// Token: 0x060000F7 RID: 247 RVA: 0x00011974 File Offset: 0x00010D74
	internal unsafe static void swap<class\u0020std::_Ref_count_base\u0020*,void>(_Ref_count_base** _Left, _Ref_count_base** _Right)
	{
		_Ref_count_base* ptr = *_Left;
		*_Left = *_Right;
		*_Right = ptr;
	}

	// Token: 0x060000F8 RID: 248 RVA: 0x000128C4 File Offset: 0x00011CC4
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* _Al, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 80UL);
	}

	// Token: 0x060000F9 RID: 249 RVA: 0x000128E0 File Offset: 0x00011CE0
	internal unsafe static _Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* {ctor}<struct\u0020std::less<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020const\u0020&,struct\u0020std::_Zero_then_variadic_args_t>(_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* A_0, _One_then_variadic_args_t __unnamed000, less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Val1, _Zero_then_variadic_args_t* <_Val2_0>)
	{
		_Zero_then_variadic_args_t zero_then_variadic_args_t = *<_Val2_0>;
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x060000FA RID: 250 RVA: 0x00010A34 File Offset: 0x0000FE34
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Kfn<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000FB RID: 251 RVA: 0x00010A44 File Offset: 0x0000FE44
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Kfn<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060000FC RID: 252 RVA: 0x00010A54 File Offset: 0x0000FE54
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Val)
	{
		return _Val;
	}

	// Token: 0x060000FD RID: 253 RVA: 0x000165AC File Offset: 0x000159AC
	internal unsafe static void destroy<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* __unnamed000, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Ptr)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>.__delDtor(_Ptr, 0U);
	}

	// Token: 0x060000FE RID: 254 RVA: 0x0001198C File Offset: 0x00010D8C
	internal unsafe static void swap<char,void>(sbyte* _Left, sbyte* _Right)
	{
		sbyte b = *_Left;
		*_Left = (byte)(*_Right);
		*_Right = b;
	}

	// Token: 0x060000FF RID: 255 RVA: 0x00010A64 File Offset: 0x0000FE64
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** addressof<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020*>(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Val)
	{
		return _Val;
	}

	// Token: 0x06000100 RID: 256 RVA: 0x000119A4 File Offset: 0x00010DA4
	internal unsafe static void construct<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020*,struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020M(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Ptr, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** <_Args_0>)
	{
		*_Ptr = *<_Args_0>;
	}

	// Token: 0x06000101 RID: 257 RVA: 0x00010A74 File Offset: 0x0000FE74
	internal static ulong _Get_size_of_n<80>(ulong _Count)
	{
		ulong num = _Count * 80L;
		return (230584300921369395L < _Count) ? ulong.MaxValue : num;
	}

	// Token: 0x06000102 RID: 258 RVA: 0x00015854 File Offset: 0x00014C54
	internal unsafe static void* __delDtor(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* A_0, uint A_0)
	{
		try
		{
			ulong num = (ulong)(*(A_0 + 32L + 8L));
			if (num != 0UL)
			{
				<Module>.std._Ref_count_base._Decref(num);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 48UL);
		}
		return A_0;
	}

	// Token: 0x06000103 RID: 259 RVA: 0x000152C4 File Offset: 0x000146C4
	internal unsafe static void {dtor}(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* A_0)
	{
		try
		{
			ulong num = (ulong)(*(A_0 + 32L + 8L));
			if (num != 0UL)
			{
				<Module>.std._Ref_count_base._Decref(num);
			}
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000104 RID: 260 RVA: 0x00019A6C File Offset: 0x00018E6C
	internal unsafe static void _Delete_this(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0)
	{
		if (A_0 != null)
		{
			long num = *(*A_0 + 16L);
			void* ptr = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), A_0, 1U, num);
		}
	}

	// Token: 0x06000105 RID: 261 RVA: 0x00019A5C File Offset: 0x00018E5C
	internal unsafe static void _Destroy(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0)
	{
	}

	// Token: 0x06000106 RID: 262 RVA: 0x00010AA4 File Offset: 0x0000FEA4
	internal unsafe static ModuleManager.MODULE_INFO* _Getptr(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0)
	{
		return A_0 + 16L;
	}

	// Token: 0x06000107 RID: 263 RVA: 0x000199C8 File Offset: 0x00018DC8
	internal unsafe static void _Delete_this(_Ref_count_obj<IniParser>* A_0)
	{
		if (A_0 != null)
		{
			long num = *(*A_0 + 16L);
			void* ptr = calli(System.Void* modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32), A_0, 1U, num);
		}
	}

	// Token: 0x06000108 RID: 264 RVA: 0x00018598 File Offset: 0x00017998
	internal unsafe static void _Destroy(_Ref_count_obj<IniParser>* A_0)
	{
		_Ref_count_obj<IniParser>* ptr = A_0 + 16L;
		_Ref_count_obj<IniParser>* ptr2 = ptr;
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), ptr2);
			throw;
		}
		_Ref_count_obj<IniParser>* ptr3 = ptr;
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(ptr3, *ptr3);
	}

	// Token: 0x06000109 RID: 265 RVA: 0x00010AB8 File Offset: 0x0000FEB8
	internal unsafe static IniParser* _Getptr(_Ref_count_obj<IniParser>* A_0)
	{
		return A_0 + 16L;
	}

	// Token: 0x0600010A RID: 266 RVA: 0x00010ACC File Offset: 0x0000FECC
	internal unsafe static ModuleManager.MODULE_INFO* get(_Ptr_base<ModuleManager::MODULE_INFO>* A_0)
	{
		return *A_0;
	}

	// Token: 0x0600010B RID: 267 RVA: 0x000119B8 File Offset: 0x00010DB8
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x0600010C RID: 268 RVA: 0x000119E8 File Offset: 0x00010DE8
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Get_data(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600010D RID: 269 RVA: 0x00013EA0 File Offset: 0x000132A0
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Compare(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		return (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Left, _Right) < 0) ? 1 : 0;
	}

	// Token: 0x0600010E RID: 270 RVA: 0x000119F8 File Offset: 0x00010DF8
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* {ctor}(shared_ptr<ModuleManager::MODULE_INFO>* A_0, shared_ptr<ModuleManager::MODULE_INFO>* _Right)
	{
		*A_0 = *_Right;
		*(A_0 + 8L) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
		return A_0;
	}

	// Token: 0x0600010F RID: 271 RVA: 0x00010ADC File Offset: 0x0000FEDC
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* {ctor}(shared_ptr<ModuleManager::MODULE_INFO>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000110 RID: 272 RVA: 0x00013554 File Offset: 0x00012954
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Compare(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		return <Module>.IniParser.ci_comp.()(A_0, _Left, _Right);
	}

	// Token: 0x06000111 RID: 273 RVA: 0x0001356C File Offset: 0x0001296C
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Left, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		return <Module>.IniParser.ci_comp.()(A_0, _Left, _Right);
	}

	// Token: 0x06000112 RID: 274 RVA: 0x00010AF8 File Offset: 0x0000FEF8
	internal unsafe static shared_ptr<IniParser>* {ctor}(shared_ptr<IniParser>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000113 RID: 275 RVA: 0x00010B24 File Offset: 0x0000FF24
	internal unsafe static char* _Unwrapped(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000114 RID: 276 RVA: 0x00010B14 File Offset: 0x0000FF14
	internal unsafe static char* _Const_cast<wchar_t\u0020const\u0020>(char* _Ptr)
	{
		return _Ptr;
	}

	// Token: 0x06000115 RID: 277 RVA: 0x00012904 File Offset: 0x00011D04
	internal unsafe static int compare(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = (ulong)(*(_Right + 16L));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		ulong num2 = (ulong)(*(A_0 + 16L));
		char* ptr2 = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr2 = *A_0;
		}
		return <Module>.std._Traits_compare<struct\u0020std::char_traits<wchar_t>\u0020>(ptr2, num2, ptr, num);
	}

	// Token: 0x06000116 RID: 278 RVA: 0x000185E8 File Offset: 0x000179E8
	internal unsafe static void* __delDtor(IniParser* A_0, uint A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 16UL);
		}
		return A_0;
	}

	// Token: 0x06000117 RID: 279 RVA: 0x00018640 File Offset: 0x00017A40
	internal unsafe static void {dtor}(IniParser* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
	}

	// Token: 0x06000118 RID: 280 RVA: 0x00018688 File Offset: 0x00017A88
	internal unsafe static void map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u…(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u…* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
	}

	// Token: 0x06000119 RID: 281 RVA: 0x00010B34 File Offset: 0x0000FF34
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* _Get_second(_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* A_0)
	{
		return A_0;
	}

	// Token: 0x0600011A RID: 282 RVA: 0x00010B44 File Offset: 0x0000FF44
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* _Get_second(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600011B RID: 283 RVA: 0x00011A20 File Offset: 0x00010E20
	internal unsafe static less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Getcomp(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600011C RID: 284 RVA: 0x000197A0 File Offset: 0x00018BA0
	internal unsafe static ulong* _Mysize(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0 + 8L;
	}

	// Token: 0x0600011D RID: 285 RVA: 0x00011A30 File Offset: 0x00010E30
	internal unsafe static IniParser.ci_comp* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		return A_0;
	}

	// Token: 0x0600011E RID: 286 RVA: 0x000186D0 File Offset: 0x00017AD0
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
	}

	// Token: 0x0600011F RID: 287 RVA: 0x00010B54 File Offset: 0x0000FF54
	internal unsafe static less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Get_first(_Compressed_pair<std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_* A_0)
	{
		return A_0;
	}

	// Token: 0x06000120 RID: 288 RVA: 0x00010B64 File Offset: 0x0000FF64
	internal unsafe static IniParser.ci_comp* _Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co(_Compressed_pair<IniParser::ci_comp,std::_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_co* A_0)
	{
		return A_0;
	}

	// Token: 0x06000121 RID: 289 RVA: 0x00018718 File Offset: 0x00017B18
	internal unsafe static void _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, *A_0);
	}

	// Token: 0x06000122 RID: 290 RVA: 0x000187D0 File Offset: 0x00017BD0
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		long num = *A_0;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = num;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = *num;
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
	}

	// Token: 0x06000123 RID: 291 RVA: 0x00018730 File Offset: 0x00017B30
	internal unsafe static void _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, _Pnode);
	}

	// Token: 0x06000124 RID: 292 RVA: 0x000187F4 File Offset: 0x00017BF4
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _First, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Last)
	{
		long num = *A_0;
		if (((_First == *num) ? 1 : 0) != 0 && ((_Last == num) ? 1 : 0) != 0)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0);
			*(long*)A_1 = *(*A_0);
			return A_1;
		}
		while (((((_First == _Last) ? 1 : 0) == 0) ? 1 : 0) != 0)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _First;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref _First);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas;
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<std::bas, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
		}
		*(long*)A_1 = _First;
		return A_1;
	}

	// Token: 0x06000125 RID: 293 RVA: 0x000199AC File Offset: 0x00018DAC
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s* A_1, int A_0)
	{
		cpblk(A_1, A_0, 8);
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(A_0);
		return A_1;
	}

	// Token: 0x06000126 RID: 294 RVA: 0x00018744 File Offset: 0x00017B44
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* _Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,s* A_0)
	{
		return A_0;
	}

	// Token: 0x06000127 RID: 295 RVA: 0x00019930 File Offset: 0x00018D30
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0)
	{
		long num = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = num;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, *(num + 8L));
		*(*A_0 + 8L) = ptr;
		*(*A_0) = ptr;
		*(*A_0 + 16L) = ptr;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x06000128 RID: 296 RVA: 0x00018850 File Offset: 0x00017C50
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::ba* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Where)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st);
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = <Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, _Where);
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, ptr);
		*(long*)A_1 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>,IniParser::ci_comp,std::allocator<std::pair<st;
		return A_1;
	}

	// Token: 0x06000129 RID: 297 RVA: 0x00018754 File Offset: 0x00017B54
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_st* A_0)
	{
		return A_0;
	}

	// Token: 0x0600012A RID: 298 RVA: 0x00018888 File Offset: 0x00017C88
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Extract(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<s _Where)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocat(ref _Where);
		long num = *(long*)ptr;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr2;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr4;
		long num4;
		if (*(num + 25L) != 0)
		{
			ptr2 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		}
		else if (*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 25L) != 0)
		{
			ptr2 = num;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = _Where;
			long num2 = _Where + 16L;
			long num3 = num2;
			ptr2 = *num2;
			if (_Where != ptr)
			{
				*(num + 8L) = _Where;
				*(long*)ptr3 = *(long*)ptr;
				if (ptr3 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)))
				{
					ptr4 = ptr3;
				}
				else
				{
					ptr4 = *(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
					{
						*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr4;
					}
					*(long*)ptr4 = ptr2;
					*num3 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 8L) = ptr3;
				}
				num4 = *A_0 + 8L;
				if (*num4 == ptr)
				{
					*num4 = ptr3;
				}
				else
				{
					long num5 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (*num5 == ptr)
					{
						*num5 = ptr3;
					}
					else
					{
						*(num5 + 16L) = ptr3;
					}
				}
				*(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				sbyte b = *(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)));
				*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = b;
				goto IL_1C3;
			}
		}
		ptr4 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr4;
		}
		num4 = *A_0 + 8L;
		if (*num4 == ptr)
		{
			*num4 = ptr2;
		}
		else if (*(long*)ptr4 == ptr)
		{
			*(long*)ptr4 = ptr2;
		}
		else
		{
			*(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr2;
		}
		long num6 = *A_0;
		if (*num6 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr5;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
			{
				ptr5 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr6 = ptr2;
				long num7 = *(long*)ptr2;
				if (*(num7 + 25L) == 0)
				{
					long num8 = num7;
					do
					{
						ptr6 = num8;
						num8 = *(long*)ptr6;
					}
					while (*(num8 + 25L) == 0);
				}
				ptr5 = ptr6;
			}
			*num6 = ptr5;
		}
		long num9 = *A_0 + 16L;
		if (*num9 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr7;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
			{
				ptr7 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr8 = ptr2;
				long num10 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				if (*(num10 + 25L) == 0)
				{
					long num11 = num10;
					do
					{
						ptr8 = num11;
						num11 = *(long*)(ptr8 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					}
					while (*(num11 + 25L) == 0);
				}
				ptr7 = ptr8;
			}
			*num9 = ptr7;
		}
		IL_1C3:
		if (*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 1)
		{
			if (ptr2 != *(*A_0 + 8L))
			{
				while (*(sbyte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 1)
				{
					ulong num12 = (ulong)(*(long*)ptr4);
					if (ptr2 == num12)
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
							ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)ptr3 + 24L) != 1 || *(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) != 1)
							{
								if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) == 1)
								{
									*(*(long*)ptr3 + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr3);
									ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr9 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)ptr9);
								*(byte*)ptr9 = 1;
								*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							ptr2 = ptr4;
						}
					}
					else
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr3 = num12;
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
							ptr3 = *(long*)ptr4;
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) != 1 || *(*(long*)ptr3 + 24L) != 1)
							{
								if (*(*(long*)ptr3 + 24L) == 1)
								{
									*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr3);
									ptr3 = *(long*)ptr4;
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr10 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = (byte)(*(sbyte*)ptr10);
								*(byte*)ptr10 = 1;
								*(*(long*)ptr3 + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 0;
							ptr2 = ptr4;
						}
					}
					ptr4 = *(long*)(ptr4 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
					if (ptr2 == *(*A_0 + 8L))
					{
						break;
					}
				}
			}
			*(byte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = 1;
		}
		ulong num13 = (ulong)(*(A_0 + 8L));
		if (0UL < num13)
		{
			*(A_0 + 8L) = (long)(num13 - 1UL);
		}
		return ptr;
	}

	// Token: 0x0600012B RID: 299 RVA: 0x00018C50 File Offset: 0x00018050
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** _Rmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x0600012C RID: 300 RVA: 0x00018C3C File Offset: 0x0001803C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** _Root(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0)
	{
		return *A_0 + 8L;
	}

	// Token: 0x0600012D RID: 301 RVA: 0x00019968 File Offset: 0x00018D68
	internal unsafe static void _Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocat* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Rootnode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = _Rootnode;
		if (*(sbyte*)(_Rootnode + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0)
		{
			do
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::all(A_0, *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)));
				ptr = *(long*)ptr;
				<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(_Rootnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
				<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wch(A_0, _Rootnode);
				_Rootnode = ptr;
			}
			while (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) == 0);
		}
	}

	// Token: 0x0600012E RID: 302 RVA: 0x00018CCC File Offset: 0x000180CC
	internal unsafe static void _Rrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(long*)_Wherenode;
		*(long*)_Wherenode = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			if (_Wherenode == *(num3 + 16L))
			{
				*(num3 + 16L) = ptr;
			}
			else
			{
				*num3 = ptr;
			}
		}
		*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr;
	}

	// Token: 0x0600012F RID: 303 RVA: 0x00018C64 File Offset: 0x00018064
	internal unsafe static void _Lrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,s* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* ptr = *(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)ptr;
		long num = *(long*)ptr;
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			if (_Wherenode == *num3)
			{
				*num3 = ptr;
			}
			else
			{
				*(num3 + 16L) = ptr;
			}
		}
		*(long*)ptr = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t)) = ptr;
	}

	// Token: 0x06000130 RID: 304 RVA: 0x00018C0C File Offset: 0x0001800C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Max(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Pnode)
	{
		long num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t));
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x06000131 RID: 305 RVA: 0x00010B74 File Offset: 0x0000FF74
	internal unsafe static @byte** forward<enum\u0020std::byte\u0020const\u0020*\u0020&>(@byte** _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000132 RID: 306 RVA: 0x00010B84 File Offset: 0x0000FF84
	internal unsafe static uint* forward<unsigned\u0020int\u0020&>(uint* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000133 RID: 307 RVA: 0x00011A40 File Offset: 0x00010E40
	internal unsafe static _Ref_count_obj<IniParser>* {ctor}<enum\u0020std::byte\u0020const\u0020*\u0020&,unsigned\u0020int\u0020&>(_Ref_count_obj<IniParser>* A_0, @byte** <_Args_0>, uint* <_Args_1>)
	{
		*(A_0 + 8L) = 1;
		*(A_0 + 12L) = 1;
		try
		{
			*A_0 = ref <Module>.??_7?$_Ref_count_obj@VIniParser@@@std@@6B@;
			IniParser* ptr = A_0 + 16L;
			uint num = (uint)(*<_Args_1>);
			long num2 = *<_Args_0>;
			<Module>.IniParser.{ctor}(ptr, num2, num);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000134 RID: 308 RVA: 0x00012954 File Offset: 0x00011D54
	internal unsafe static void _Set_ptr_rep_and_enable_shared<class\u0020IniParser>(shared_ptr<IniParser>* A_0, IniParser* _Px, _Ref_count_base* _Rx)
	{
		*A_0 = _Px;
		*(A_0 + 8L) = _Rx;
	}

	// Token: 0x06000135 RID: 309 RVA: 0x00011AA0 File Offset: 0x00010EA0
	internal unsafe static _Ref_count_obj<ModuleManager::MODULE_INFO>* {ctor}<>(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0)
	{
		*(A_0 + 8L) = 1;
		*(A_0 + 12L) = 1;
		try
		{
			*A_0 = ref <Module>.??_7?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@6B@;
			initblk(A_0 + 16L, 0, 16L);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Ref_count_base.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000136 RID: 310 RVA: 0x0001296C File Offset: 0x00011D6C
	internal unsafe static void _Set_ptr_rep_and_enable_shared<struct\u0020ModuleManager::MODULE_INFO>(shared_ptr<ModuleManager::MODULE_INFO>* A_0, ModuleManager.MODULE_INFO* _Px, _Ref_count_base* _Rx)
	{
		*A_0 = _Px;
		*(A_0 + 8L) = _Rx;
	}

	// Token: 0x06000137 RID: 311 RVA: 0x00013584 File Offset: 0x00012984
	internal unsafe static unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* {ctor}<struct\u0020std::default_delete<class\u0020LauncherApp>,0>(unique_ptr<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0, LauncherApp* _Ptr)
	{
		*A_0 = _Ptr;
		return A_0;
	}

	// Token: 0x06000138 RID: 312 RVA: 0x00010B94 File Offset: 0x0000FF94
	internal unsafe static void _Adl_verify_range<class\u0020std::_String_iterator<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020>,class\u0020std::_String_iterator<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020>\u0020>(_String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* _First, _String_iterator<std::_String_val<std::_Simple_types<wchar_t>\u0020>\u0020>* _Last)
	{
	}

	// Token: 0x06000139 RID: 313 RVA: 0x00016F34 File Offset: 0x00016334
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* _Try_emplace<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* A_1, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Keyval)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Lbound<class\u0020std::basic_string<wchar_t,struct\u0020std::ch(A_0, _Keyval);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, ptr, A_0);
		if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> == *A_0) ? 1 : 0) == 0)
		{
			long num = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 32L;
			if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Keyval, num) < 0) ? 1 : 0) == 0)
			{
				cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>)) = 0;
				return A_1;
			}
		}
		tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&> = _Keyval;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
		tuple<> tuple<>;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buynode<struct\u0020std::piecewise_construct_t\u0020(A_0, ref <Module>.std.piecewise_construct, ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, ref tuple<>);
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_hint<struct\u0020std::pair<class\u0020std::basic_string<(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), ptr2);
		cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2, 8);
		*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
		return A_1;
	}

	// Token: 0x0600013A RID: 314 RVA: 0x00010BA4 File Offset: 0x0000FFA4
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* forward<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600013B RID: 315 RVA: 0x00010BB4 File Offset: 0x0000FFB4
	internal unsafe static void _Pocca<class\u0020std::allocator<wchar_t>\u0020>(allocator<wchar_t>* A_0, allocator<wchar_t>* A_1, integral_constant<bool,0> A_2)
	{
	}

	// Token: 0x0600013C RID: 316 RVA: 0x00010BC4 File Offset: 0x0000FFC4
	internal unsafe static ModuleManager.MODULE_INFO** move<struct\u0020ModuleManager::MODULE_INFO\u0020*\u0020&>(ModuleManager.MODULE_INFO** _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600013D RID: 317 RVA: 0x00010BD4 File Offset: 0x0000FFD4
	internal unsafe static _Ref_count_base** move<class\u0020std::_Ref_count_base\u0020*\u0020&>(_Ref_count_base** _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600013E RID: 318 RVA: 0x00010BE4 File Offset: 0x0000FFE4
	internal unsafe static void destroy<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020*>(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Ptr)
	{
	}

	// Token: 0x0600013F RID: 319 RVA: 0x00010BF4 File Offset: 0x0000FFF4
	internal unsafe static less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* forward<struct\u0020std::less<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020const\u0020&>(less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000140 RID: 320 RVA: 0x00010C04 File Offset: 0x00010004
	internal unsafe static _Zero_then_variadic_args_t* forward<struct\u0020std::_Zero_then_variadic_args_t>(_Zero_then_variadic_args_t* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000141 RID: 321 RVA: 0x00011AF8 File Offset: 0x00010EF8
	internal unsafe static _Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* {ctor}<>(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* A_0, _Zero_then_variadic_args_t A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000142 RID: 322 RVA: 0x00010C14 File Offset: 0x00010014
	internal unsafe static sbyte* move<char\u0020&>(sbyte* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000143 RID: 323 RVA: 0x00010C24 File Offset: 0x00010024
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** forward<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020*\u0020&>(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>** _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000144 RID: 324 RVA: 0x00010C34 File Offset: 0x00010034
	internal unsafe static shared_ptr<ModuleManager::MODULE_INFO>* move<class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020&>(shared_ptr<ModuleManager::MODULE_INFO>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000145 RID: 325 RVA: 0x00010C44 File Offset: 0x00010044
	internal unsafe static void _Move_construct_from<struct\u0020ModuleManager::MODULE_INFO>(_Ptr_base<ModuleManager::MODULE_INFO>* A_0, _Ptr_base<ModuleManager::MODULE_INFO>* _Right)
	{
		*A_0 = *_Right;
		*(A_0 + 8L) = *(_Right + 8L);
		*_Right = 0L;
		*(_Right + 8L) = 0L;
	}

	// Token: 0x06000146 RID: 326 RVA: 0x00011B14 File Offset: 0x00010F14
	internal unsafe static int _Traits_compare<struct\u0020std::char_traits<wchar_t>\u0020>(char* _Left, ulong _Left_size, char* _Right, ulong _Right_size)
	{
		ulong num = (ulong)(*(ref _Right_size < _Left_size ? ref _Right_size : ref _Left_size));
		char* ptr = _Right;
		int num2 = 0;
		if (num != 0UL)
		{
			ushort num3 = *_Left;
			ushort num4 = *_Right;
			if (num3 >= num4)
			{
				long num5 = _Left - _Right;
				while (num3 <= num4)
				{
					if (num == 1UL)
					{
						goto IL_57;
					}
					num -= 1UL;
					ptr += 2L;
					num3 = *(num5 + ptr);
					num4 = *ptr;
					if (num3 < num4)
					{
						goto IL_4F;
					}
				}
				num2 = 1;
				goto IL_57;
			}
			IL_4F:
			num2 = -1;
		}
		IL_57:
		int num6 = num2;
		if (num6 != null)
		{
			return num6;
		}
		if (_Left_size < _Right_size)
		{
			return -1;
		}
		return _Left_size > _Right_size;
	}

	// Token: 0x06000147 RID: 327 RVA: 0x00018764 File Offset: 0x00017B64
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::list14e08e29(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* _Al, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 80UL);
	}

	// Token: 0x06000148 RID: 328 RVA: 0x00018D3C File Offset: 0x0001813C
	internal unsafe static void destroy<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::l2e236425(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* __unnamed000, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* _Ptr)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(_Ptr);
	}

	// Token: 0x06000149 RID: 329 RVA: 0x000199EC File Offset: 0x00018DEC
	internal unsafe static void* __vecDelDtor(_Ref_count_obj<IniParser>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_Ref_count_obj<IniParser>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 32UL, (ulong)(*ptr), ldftn(std._Ref_count_obj<IniParser>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_Ref_count_obj<IniParser>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 32L + 8L));
			}
			return ptr;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 32UL);
		}
		return A_0;
	}

	// Token: 0x0600014A RID: 330 RVA: 0x00019A3C File Offset: 0x00018E3C
	internal unsafe static void {dtor}(_Ref_count_obj<IniParser>* A_0)
	{
	}

	// Token: 0x0600014B RID: 331 RVA: 0x00019A90 File Offset: 0x00018E90
	internal unsafe static void* __vecDelDtor(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_Ref_count_obj<ModuleManager::MODULE_INFO>* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 32UL, (ulong)(*ptr), ldftn(std._Ref_count_obj<ModuleManager::MODULE_INFO>.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_Ref_count_obj<ModuleManager::MODULE_INFO>* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 32L + 8L));
			}
			return ptr;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 32UL);
		}
		return A_0;
	}

	// Token: 0x0600014C RID: 332 RVA: 0x00019AE0 File Offset: 0x00018EE0
	internal unsafe static void {dtor}(_Ref_count_obj<ModuleManager::MODULE_INFO>* A_0)
	{
	}

	// Token: 0x0600014D RID: 333 RVA: 0x00018D50 File Offset: 0x00018150
	internal unsafe static void* __delDtor(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* A_0, uint A_0)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::alloc(A_0);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 48UL);
		}
		return A_0;
	}

	// Token: 0x0600014E RID: 334 RVA: 0x00018D74 File Offset: 0x00018174
	internal unsafe static void {dtor}(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* A_0)
	{
		try
		{
			map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* ptr = A_0 + 32L;
			try
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::), ptr);
				throw;
			}
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2 = *ptr;
			<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(ptr, ptr2);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x0600014F RID: 335 RVA: 0x00018E18 File Offset: 0x00018218
	internal unsafe static void {dtor}(map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, *A_0);
	}

	// Token: 0x06000150 RID: 336 RVA: 0x00010C6C File Offset: 0x0001006C
	internal unsafe static void _Set_ptr_rep(_Ptr_base<ModuleManager::MODULE_INFO>* A_0, ModuleManager.MODULE_INFO* _Other_ptr, _Ref_count_base* _Other_rep)
	{
		*A_0 = _Other_ptr;
		*(A_0 + 8L) = _Other_rep;
	}

	// Token: 0x06000151 RID: 337 RVA: 0x00010C84 File Offset: 0x00010084
	internal unsafe static _Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* {ctor}(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>* A_0)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		return A_0;
	}

	// Token: 0x06000152 RID: 338 RVA: 0x00010CA0 File Offset: 0x000100A0
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* {ctor}(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000153 RID: 339 RVA: 0x000196C4 File Offset: 0x00018AC4
	internal unsafe static allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* _Getal(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000154 RID: 340 RVA: 0x00018E60 File Offset: 0x00018260
	internal unsafe static void {dtor}(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		try
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::), A_0);
			throw;
		}
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, *A_0);
	}

	// Token: 0x06000155 RID: 341 RVA: 0x00010CB0 File Offset: 0x000100B0
	internal unsafe static void _Set_ptr_rep(_Ptr_base<IniParser>* A_0, IniParser* _Other_ptr, _Ref_count_base* _Other_rep)
	{
		*A_0 = _Other_ptr;
		*(A_0 + 8L) = _Other_rep;
	}

	// Token: 0x06000156 RID: 342 RVA: 0x00018780 File Offset: 0x00017B80
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000157 RID: 343 RVA: 0x00010CC8 File Offset: 0x000100C8
	internal unsafe static int compare(char* _First1, char* _First2, ulong _Count)
	{
		ulong num = _Count;
		char* ptr = _First2;
		int num2 = 0;
		if (_Count != null)
		{
			ushort num3 = *_First1;
			ushort num4 = *_First2;
			if (num3 >= num4)
			{
				long num5 = _First1 - _First2;
				while (num3 <= num4)
				{
					if (num == 1L)
					{
						return num2;
					}
					num -= 1L;
					ptr += 2L;
					num3 = *(num5 + ptr);
					num4 = *ptr;
					if (num3 < num4)
					{
						goto IL_48;
					}
				}
				return 1;
			}
			IL_48:
			num2 = -1;
		}
		return num2;
	}

	// Token: 0x06000158 RID: 344 RVA: 0x000196D4 File Offset: 0x00018AD4
	internal unsafe static allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* _Get_first(_Compressed_pair<std::allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>,std::_List_val<std::_List_simple_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000159 RID: 345 RVA: 0x00018EA8 File Offset: 0x000182A8
	internal unsafe static void {dtor}(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, *A_0);
	}

	// Token: 0x0600015A RID: 346 RVA: 0x00018F60 File Offset: 0x00018360
	internal unsafe static void _Tidy(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		long num = *A_0;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = num;
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2 = *num;
		_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>2, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
	}

	// Token: 0x0600015B RID: 347 RVA: 0x00018EC0 File Offset: 0x000182C0
	internal unsafe static void _Freeheadnode(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, _Pnode);
	}

	// Token: 0x0600015C RID: 348 RVA: 0x00018F84 File Offset: 0x00018384
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _First, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Last)
	{
		long num = *A_0;
		if (((_First == *num) ? 1 : 0) != 0 && ((_Last == num) ? 1 : 0) != 0)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0);
			*(long*)A_1 = *(*A_0);
			return A_1;
		}
		while (((((_First == _Last) ? 1 : 0) == 0) ? 1 : 0) != 0)
		{
			_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _First;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _First);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
		}
		*(long*)A_1 = _First;
		return A_1;
	}

	// Token: 0x0600015D RID: 349 RVA: 0x00019914 File Offset: 0x00018D14
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* ++(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, int A_0)
	{
		cpblk(A_1, A_0, 8);
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(A_0);
		return A_1;
	}

	// Token: 0x0600015E RID: 350 RVA: 0x00018ED4 File Offset: 0x000182D4
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* _Getal(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char* A_0)
	{
		return A_0;
	}

	// Token: 0x0600015F RID: 351 RVA: 0x00019898 File Offset: 0x00018C98
	internal unsafe static void clear(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0)
	{
		long num = *A_0;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = num;
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, *(num + 8L));
		*(*A_0 + 8L) = ptr;
		*(*A_0) = ptr;
		*(*A_0 + 16L) = ptr;
		*(A_0 + 8L) = 0L;
	}

	// Token: 0x06000160 RID: 352 RVA: 0x00018FE0 File Offset: 0x000183E0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020> = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>);
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Extract(A_0, _Where);
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, ptr);
		*(long*)A_1 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>_u0020>;
		return A_1;
	}

	// Token: 0x06000161 RID: 353 RVA: 0x00018EE4 File Offset: 0x000182E4
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* _Get_first(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_* A_0)
	{
		return A_0;
	}

	// Token: 0x06000162 RID: 354 RVA: 0x00019018 File Offset: 0x00018418
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Extract(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020> _Where)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = _Where;
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref _Where);
		long num = *(long*)ptr;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr2;
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr4;
		long num4;
		if (*(num + 25L) != 0)
		{
			ptr2 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		}
		else if (*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 25L) != 0)
		{
			ptr2 = num;
		}
		else
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = _Where;
			long num2 = _Where + 16L;
			long num3 = num2;
			ptr2 = *num2;
			if (_Where != ptr)
			{
				*(num + 8L) = _Where;
				*(long*)ptr3 = *(long*)ptr;
				if (ptr3 == *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)))
				{
					ptr4 = ptr3;
				}
				else
				{
					ptr4 = *(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
					{
						*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr4;
					}
					*(long*)ptr4 = ptr2;
					*num3 = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					*(*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 8L) = ptr3;
				}
				num4 = *A_0 + 8L;
				if (*num4 == ptr)
				{
					*num4 = ptr3;
				}
				else
				{
					long num5 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (*num5 == ptr)
					{
						*num5 = ptr3;
					}
					else
					{
						*(num5 + 16L) = ptr3;
					}
				}
				*(long*)(ptr3 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				sbyte b = *(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)));
				*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = b;
				goto IL_1C3;
			}
		}
		ptr4 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			*(long*)(ptr2 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr4;
		}
		num4 = *A_0 + 8L;
		if (*num4 == ptr)
		{
			*num4 = ptr2;
		}
		else if (*(long*)ptr4 == ptr)
		{
			*(long*)ptr4 = ptr2;
		}
		else
		{
			*(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr2;
		}
		long num6 = *A_0;
		if (*num6 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr5;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
			{
				ptr5 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr6 = ptr2;
				long num7 = *(long*)ptr2;
				if (*(num7 + 25L) == 0)
				{
					long num8 = num7;
					do
					{
						ptr6 = num8;
						num8 = *(long*)ptr6;
					}
					while (*(num8 + 25L) == 0);
				}
				ptr5 = ptr6;
			}
			*num6 = ptr5;
		}
		long num9 = *A_0 + 16L;
		if (*num9 == ptr)
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr7;
			if (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
			{
				ptr7 = ptr4;
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr8 = ptr2;
				long num10 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
				if (*(num10 + 25L) == 0)
				{
					long num11 = num10;
					do
					{
						ptr8 = num11;
						num11 = *(long*)(ptr8 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					}
					while (*(num11 + 25L) == 0);
				}
				ptr7 = ptr8;
			}
			*num9 = ptr7;
		}
		IL_1C3:
		if (*(sbyte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 1)
		{
			if (ptr2 != *(*A_0 + 8L))
			{
				while (*(sbyte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 1)
				{
					ulong num12 = (ulong)(*(long*)ptr4);
					if (ptr2 == num12)
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
							ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)ptr3 + 24L) != 1 || *(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) != 1)
							{
								if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) == 1)
								{
									*(*(long*)ptr3 + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr3);
									ptr3 = *(long*)(ptr4 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr9 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr9);
								*(byte*)ptr9 = 1;
								*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					else
					{
						_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr3 = num12;
						if (*(sbyte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
						{
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
							*(byte*)(ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
							ptr3 = *(long*)ptr4;
						}
						if (*(sbyte*)(ptr3 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) != 0)
						{
							ptr2 = ptr4;
						}
						else
						{
							if (*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) != 1 || *(*(long*)ptr3 + 24L) != 1)
							{
								if (*(*(long*)ptr3 + 24L) == 1)
								{
									*(*(long*)(ptr3 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) + 24L) = 1;
									*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
									<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr3);
									ptr3 = *(long*)ptr4;
								}
								_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr10 = ptr4 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>);
								*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = (byte)(*(sbyte*)ptr10);
								*(byte*)ptr10 = 1;
								*(*(long*)ptr3 + 24L) = 1;
								<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr4);
								break;
							}
							*(byte*)(ptr3 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 0;
							ptr2 = ptr4;
						}
					}
					ptr4 = *(long*)(ptr4 + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
					if (ptr2 == *(*A_0 + 8L))
					{
						break;
					}
				}
			}
			*(byte*)(ptr2 + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = 1;
		}
		ulong num13 = (ulong)(*(A_0 + 8L));
		if (0UL < num13)
		{
			*(A_0 + 8L) = (long)(num13 - 1UL);
		}
		return ptr;
	}

	// Token: 0x06000163 RID: 355 RVA: 0x000193E0 File Offset: 0x000187E0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** _Rmost(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 16L;
	}

	// Token: 0x06000164 RID: 356 RVA: 0x000193CC File Offset: 0x000187CC
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** _Root(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		return *A_0 + 8L;
	}

	// Token: 0x06000165 RID: 357 RVA: 0x000198D0 File Offset: 0x00018CD0
	internal unsafe static void _Erase(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wch* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Rootnode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = _Rootnode;
		if (*(sbyte*)(_Rootnode + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0)
		{
			do
			{
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits(A_0, *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)));
				ptr = *(long*)ptr;
				<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.__delDtor(_Rootnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>), 0U);
				<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,(A_0, _Rootnode);
				_Rootnode = ptr;
			}
			while (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) == 0);
		}
	}

	// Token: 0x06000166 RID: 358 RVA: 0x0001945C File Offset: 0x0001885C
	internal unsafe static void _Rrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(long*)_Wherenode;
		*(long*)_Wherenode = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num = *(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			if (_Wherenode == *(num3 + 16L))
			{
				*(num3 + 16L) = ptr;
			}
			else
			{
				*num3 = ptr;
			}
		}
		*(long*)(ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x06000167 RID: 359 RVA: 0x000193F4 File Offset: 0x000187F4
	internal unsafe static void _Lrotate(_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Wherenode)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* ptr = *(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)ptr;
		long num = *(long*)ptr;
		if (*(num + 25L) == 0)
		{
			*(num + 8L) = _Wherenode;
		}
		*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		long num2 = *A_0 + 8L;
		if (_Wherenode == *num2)
		{
			*num2 = ptr;
		}
		else
		{
			long num3 = *(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			if (_Wherenode == *num3)
			{
				*num3 = ptr;
			}
			else
			{
				*(num3 + 16L) = ptr;
			}
		}
		*(long*)ptr = _Wherenode;
		*(long*)(_Wherenode + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>)) = ptr;
	}

	// Token: 0x06000168 RID: 360 RVA: 0x0001939C File Offset: 0x0001879C
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Max(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Pnode)
	{
		long num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
		if (*(num + 25L) == 0)
		{
			do
			{
				_Pnode = num;
				num = *(long*)(_Pnode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>));
			}
			while (*(num + 25L) == 0);
		}
		return _Pnode;
	}

	// Token: 0x06000169 RID: 361 RVA: 0x00011B90 File Offset: 0x00010F90
	internal unsafe static void _Enable_shared_from_this<class\u0020IniParser,class\u0020IniParser>(shared_ptr<IniParser>* _This, IniParser* _Ptr)
	{
	}

	// Token: 0x0600016A RID: 362 RVA: 0x00011BA0 File Offset: 0x00010FA0
	internal unsafe static void _Enable_shared_from_this<struct\u0020ModuleManager::MODULE_INFO,struct\u0020ModuleManager::MODULE_INFO>(shared_ptr<ModuleManager::MODULE_INFO>* _This, ModuleManager.MODULE_INFO* _Ptr)
	{
	}

	// Token: 0x0600016B RID: 363 RVA: 0x00012984 File Offset: 0x00011D84
	internal unsafe static _Unique_ptr_base<LauncherApp,std::default_delete<LauncherApp>\u0020>* {ctor}<class\u0020LauncherApp\u0020*>(_Unique_ptr_base<LauncherApp,std::default_delete<LauncherApp>\u0020>* A_0, LauncherApp* _Ptr)
	{
		*A_0 = _Ptr;
		return A_0;
	}

	// Token: 0x0600016C RID: 364 RVA: 0x00013598 File Offset: 0x00012998
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* forward_as_tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* <_Args_0>)
	{
		*(long*)A_0 = <_Args_0>;
		return A_0;
	}

	// Token: 0x0600016D RID: 365 RVA: 0x00011BB0 File Offset: 0x00010FB0
	internal unsafe static tuple<>* forward_as_tuple<>(tuple<>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600016E RID: 366 RVA: 0x00016EAC File Offset: 0x000162AC
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* emplace_hint<struct\u0020std::piecewise_construct_t\u0020const\u0020&,class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>,class\u0020std::tuple<>\u0020>(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _Where, piecewise_construct_t* <_Val_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Val_1>, tuple<>* <_Val_2>)
	{
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buynode<struct\u0020std::piecewise_construct_t\u0020(A_0, <_Val_0>, <_Val_1>, <_Val_2>);
		<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_hint<struct\u0020std::pair<class\u0020std::basic_string<(A_0, A_1, _Where, ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), ptr);
		return A_1;
	}

	// Token: 0x0600016F RID: 367 RVA: 0x00011BC0 File Offset: 0x00010FC0
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* {ctor}<class\u0020std::_Tree_iterator<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool,0>(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Val1, bool* _Val2)
	{
		cpblk(A_0, _Val1, 8);
		*(A_0 + 8L) = *_Val2;
		return A_0;
	}

	// Token: 0x06000170 RID: 368 RVA: 0x00011BDC File Offset: 0x00010FDC
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* {ctor}<class\u0020std::_Tree_iterator<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>\u0020&,bool,0>(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Val1, bool* _Val2)
	{
		cpblk(A_0, _Val1, 8);
		*(A_0 + 8L) = *_Val2;
		return A_0;
	}

	// Token: 0x06000171 RID: 369 RVA: 0x000187B0 File Offset: 0x00017BB0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** addressof<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::b(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** _Val)
	{
		return _Val;
	}

	// Token: 0x06000172 RID: 370 RVA: 0x000187C0 File Offset: 0x00017BC0
	internal unsafe static void destroy<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::map<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<40269d43(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::map<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>,IniParser::ci_comp,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t** _Ptr)
	{
	}

	// Token: 0x06000173 RID: 371 RVA: 0x00019730 File Offset: 0x00018B30
	internal unsafe static _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>** addressof<struct\u0020std::_List_node<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,void\u0020*>\u0020*>(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>** _Val)
	{
		return _Val;
	}

	// Token: 0x06000174 RID: 372 RVA: 0x00018EF4 File Offset: 0x000182F4
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u00…(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* _Al, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 80UL);
	}

	// Token: 0x06000175 RID: 373 RVA: 0x000194CC File Offset: 0x000188CC
	internal unsafe static void destroy<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>\u0020>(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* __unnamed000, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* _Ptr)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.__delDtor(_Ptr, 0U);
	}

	// Token: 0x06000176 RID: 374 RVA: 0x000194E4 File Offset: 0x000188E4
	internal unsafe static void* __delDtor(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, uint A_0)
	{
		try
		{
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr = A_0 + 32L;
			try
			{
				<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 48UL);
		}
		return A_0;
	}

	// Token: 0x06000177 RID: 375 RVA: 0x00019594 File Offset: 0x00018994
	internal unsafe static void {dtor}(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		try
		{
			list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* ptr = A_0 + 32L;
			try
			{
				<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(ptr);
			}
			catch
			{
				<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.{dtor}), ptr);
				throw;
			}
			<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000178 RID: 376 RVA: 0x00018F10 File Offset: 0x00018310
	internal unsafe static void deallocate(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 80L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000179 RID: 377 RVA: 0x00019634 File Offset: 0x00018A34
	internal unsafe static void {dtor}(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		try
		{
			<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(A_0);
	}

	// Token: 0x0600017A RID: 378 RVA: 0x00019678 File Offset: 0x00018A78
	internal unsafe static void {dtor}(_List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>.{dtor}(A_0);
	}

	// Token: 0x0600017B RID: 379 RVA: 0x0001968C File Offset: 0x00018A8C
	internal unsafe static void {dtor}(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.delete(*A_0, 48UL);
	}

	// Token: 0x0600017C RID: 380 RVA: 0x00019750 File Offset: 0x00018B50
	internal unsafe static void _Tidy(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std.list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>.clear(A_0);
	}

	// Token: 0x0600017D RID: 381 RVA: 0x000196A8 File Offset: 0x00018AA8
	internal unsafe static void _Freeheadnode(_List_alloc<std::_List_base_types<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode)
	{
		<Module>.delete((void*)_Pnode, 48UL);
	}

	// Token: 0x0600017E RID: 382 RVA: 0x00019764 File Offset: 0x00018B64
	internal unsafe static void clear(list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0)
	{
		long num = *A_0;
		_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr = *num;
		long num2 = num;
		*num2 = num2;
		long num3 = *A_0;
		*(num3 + 8L) = num3;
		*(A_0 + 8L) = 0L;
		if (ptr != *A_0)
		{
			_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* ptr2;
			do
			{
				ptr2 = *(long*)ptr;
				<Module>.std._List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>._Freenode(A_0, ptr);
				ptr = ptr2;
			}
			while (ptr2 != *A_0);
		}
	}

	// Token: 0x0600017F RID: 383 RVA: 0x000197B4 File Offset: 0x00018BB4
	internal unsafe static void _Freenode(_List_buy<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>* A_0, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Pnode)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = _Pnode + 16L / (long)sizeof(_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>);
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), ptr);
			throw;
		}
		<Module>.delete((void*)_Pnode, 48UL);
	}

	// Token: 0x06000180 RID: 384 RVA: 0x00010D24 File Offset: 0x00010124
	internal unsafe static void _Enable_shared_from_this1<class\u0020IniParser,class\u0020IniParser>(shared_ptr<IniParser>* A_0, IniParser* A_1, integral_constant<bool,0> A_2)
	{
	}

	// Token: 0x06000181 RID: 385 RVA: 0x00010D34 File Offset: 0x00010134
	internal unsafe static void _Enable_shared_from_this1<struct\u0020ModuleManager::MODULE_INFO,struct\u0020ModuleManager::MODULE_INFO>(shared_ptr<ModuleManager::MODULE_INFO>* A_0, ModuleManager.MODULE_INFO* A_1, integral_constant<bool,0> A_2)
	{
	}

	// Token: 0x06000182 RID: 386 RVA: 0x00011BF8 File Offset: 0x00010FF8
	internal unsafe static _Compressed_pair<std::default_delete<LauncherApp>,LauncherApp\u0020*,1>* {ctor}<class\u0020LauncherApp\u0020*\u0020&>(_Compressed_pair<std::default_delete<LauncherApp>,LauncherApp\u0020*,1>* A_0, _Zero_then_variadic_args_t __unnamed000, LauncherApp** <_Val2_0>)
	{
		*A_0 = *<_Val2_0>;
		return A_0;
	}

	// Token: 0x06000183 RID: 387 RVA: 0x00012998 File Offset: 0x00011D98
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* {ctor}<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&,0>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _This_arg)
	{
		*A_0 = _This_arg;
		return A_0;
	}

	// Token: 0x06000184 RID: 388 RVA: 0x00010D44 File Offset: 0x00010144
	internal unsafe static piecewise_construct_t* forward<struct\u0020std::piecewise_construct_t\u0020const\u0020&>(piecewise_construct_t* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000185 RID: 389 RVA: 0x00010D54 File Offset: 0x00010154
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* forward<class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>\u0020>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000186 RID: 390 RVA: 0x00010D64 File Offset: 0x00010164
	internal unsafe static tuple<>* forward<class\u0020std::tuple<>\u0020>(tuple<>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x06000187 RID: 391 RVA: 0x00016AC8 File Offset: 0x00015EC8
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Buynode<struct\u0020std::piecewise_construct_t\u0020const\u0020&,class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>,class\u0020std::tuple<>\u0020>(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, piecewise_construct_t* <_Val_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Val_1>, tuple<>* <_Val_2>)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Buynode0(A_0);
		*(byte*)(ptr + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
		*(byte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 0;
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = ptr + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
			<Module>.std._Default_allocator_traits<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>.construct<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,struct\u0020std::piecew(A_0, ptr2, <_Val_0>, <_Val_1>, <_Val_2>);
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Freenode0(A_0, ptr);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000188 RID: 392 RVA: 0x00016BAC File Offset: 0x00015FAC
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Insert_hint<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020&,struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> _Where, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = 0L;
		bool flag = false;
		uint exceptionCode;
		try
		{
			if (*(A_0 + 8L) == 0L)
			{
				long num2 = *A_0;
				<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, true, num2, _Val, _Newnode);
				return A_1;
			}
			long num3 = *(*A_0);
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, num3, A_0);
			if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>) ? 1 : 0) != 0)
			{
				long num4 = _Where + 32L;
				if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Val, num4) < 0) ? 1 : 0) != 0)
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, true, _Where, _Val, _Newnode);
					return A_1;
				}
			}
			else
			{
				long num5 = *A_0;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2, num5, A_0);
				if (((_Where == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) != 0)
				{
					if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(*(*A_0 + 16L) + 32L, _Val) < 0) ? 1 : 0) != 0)
					{
						long num6 = *(*A_0 + 16L);
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, false, num6, _Val, _Newnode);
						return A_1;
					}
				}
				else
				{
					long num4 = _Where + 32L;
					if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Val, num4) < 0) ? 1 : 0) != 0)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
						if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 32L, _Val) < 0) ? 1 : 0) != 0)
						{
							if (*(*(tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 16L) + 25L) != 0)
							{
								<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, false, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, _Val, _Newnode);
								return A_1;
							}
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, true, _Where, _Val, _Newnode);
							return A_1;
						}
					}
					if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(num4, _Val) < 0) ? 1 : 0) != 0)
					{
						tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> = _Where;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.++(ref tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
						long num7 = *A_0;
						_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3;
						<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3, num7, A_0);
						if (((tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3) ? 1 : 0) == 0)
						{
							long num8 = tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 32L;
							if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Val, num8) < 0) ? 1 : 0) == 0)
							{
								goto IL_1F4;
							}
						}
						if (*(*(_Where + 16L) + 25L) != 0)
						{
							<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, false, _Where, _Val, _Newnode);
							return A_1;
						}
						<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, A_1, true, tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, _Val, _Newnode);
						return A_1;
					}
				}
			}
			IL_1F4:;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num9 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Destroy_if_node(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num9 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num9 != 0U);
				})
				{
				}
				if (num9 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num9);
			}
		}
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool> pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>;
		pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* ptr = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_nohint<struct\u0020std::pair<class\u0020std::basic_strin(A_0, &pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>,bool>, flag, _Val, _Newnode);
		cpblk(A_1, ptr, 8);
		return A_1;
	}

	// Token: 0x06000189 RID: 393 RVA: 0x00010DE0 File Offset: 0x000101E0
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* forward<class\u0020std::_Tree_iterator<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>\u0020>(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600018A RID: 394 RVA: 0x00010DF0 File Offset: 0x000101F0
	internal unsafe static bool* forward<bool>(bool* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600018B RID: 395 RVA: 0x00010E00 File Offset: 0x00010200
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* forward<class\u0020std::_Tree_iterator<class\u0020std::_Tree_val<struct\u0020std::_Tree_simple_types<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>\u0020&>(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600018C RID: 396 RVA: 0x00018F40 File Offset: 0x00018340
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** addressof<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u00…(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** _Val)
	{
		return _Val;
	}

	// Token: 0x0600018D RID: 397 RVA: 0x00018F50 File Offset: 0x00018350
	internal unsafe static void destroy<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::list<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,class\u0020std::allocator<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>\u0020>* __unnamed000, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::list<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::allocator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>\u0020>\u0020>,void\u0020*>** _Ptr)
	{
	}

	// Token: 0x0600018E RID: 398 RVA: 0x000196E4 File Offset: 0x00018AE4
	internal unsafe static void _Freenode0<class\u0020std::allocator<struct\u0020std::_List_node<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>\u0020>(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* _Al, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Ptr)
	{
		<Module>.delete((void*)_Ptr, 48UL);
	}

	// Token: 0x0600018F RID: 399 RVA: 0x00019808 File Offset: 0x00018C08
	internal unsafe static void destroy<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* __unnamed000, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Ptr)
	{
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(_Ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), _Ptr);
			throw;
		}
	}

	// Token: 0x06000190 RID: 400 RVA: 0x00019848 File Offset: 0x00018C48
	internal unsafe static void* __delDtor(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, uint A_0)
	{
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 32UL);
		}
		return A_0;
	}

	// Token: 0x06000191 RID: 401 RVA: 0x00011C48 File Offset: 0x00011048
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* --(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(A_0);
		return A_0;
	}

	// Token: 0x06000192 RID: 402 RVA: 0x00011C60 File Offset: 0x00011060
	internal unsafe static _Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* {ctor}(_Tree_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		*A_0 = 0L;
		return A_0;
	}

	// Token: 0x06000193 RID: 403 RVA: 0x000129AC File Offset: 0x00011DAC
	internal unsafe static void _Freenode0(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Pnode)
	{
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, _Pnode);
	}

	// Token: 0x06000194 RID: 404 RVA: 0x000129C0 File Offset: 0x00011DC0
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Buynode0(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = <Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>.allocate(A_0, 1L);
		uint exceptionCode;
		try
		{
			*(long*)ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
			*(long*)ptr2 = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr3 = ptr + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
			*(long*)ptr3 = *A_0;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num2 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std.allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>.deallocate(A_0, ptr, 1L);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num2 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num2 != 0U);
				})
				{
				}
				if (num2 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num2);
			}
		}
		return ptr;
	}

	// Token: 0x06000195 RID: 405 RVA: 0x000165C4 File Offset: 0x000159C4
	internal unsafe static void _Destroy_if_node(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Newnode)
	{
		<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>.__delDtor(_Newnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), 0U);
		<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, _Newnode);
	}

	// Token: 0x06000196 RID: 406 RVA: 0x00011C74 File Offset: 0x00011074
	internal unsafe static ulong size(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return *(A_0 + 8L);
	}

	// Token: 0x06000197 RID: 407 RVA: 0x00019700 File Offset: 0x00018B00
	internal unsafe static void deallocate(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* __unnamed000, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>* _Ptr, ulong _Count)
	{
		ulong num = _Count * 48L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x06000198 RID: 408 RVA: 0x00010E10 File Offset: 0x00010210
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* --(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		long num = *A_0;
		if (*(num + 25L) != 0)
		{
			*A_0 = *(num + 16L);
		}
		else
		{
			long num2 = *num;
			if (*(num2 + 25L) != 0)
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *(num + 8L);
				if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
				{
					while (*A_0 == *(long*)ptr)
					{
						*A_0 = ptr;
						ptr = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
						if (*(sbyte*)(ptr + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) != 0)
						{
							break;
						}
					}
				}
				if (*(*A_0 + 25L) == 0)
				{
					*A_0 = ptr;
				}
			}
			else
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = num2;
				long num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
				if (*(num3 + 25L) == 0)
				{
					do
					{
						ptr2 = num3;
						num3 = *(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
					}
					while (*(num3 + 25L) == 0);
				}
				*A_0 = ptr2;
			}
		}
		return A_0;
	}

	// Token: 0x06000199 RID: 409 RVA: 0x00010E9C File Offset: 0x0001029C
	internal unsafe static _Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* {ctor}(_Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>* A_0)
	{
		*A_0 = 0L;
		return A_0;
	}

	// Token: 0x0600019A RID: 410 RVA: 0x00010EB0 File Offset: 0x000102B0
	internal unsafe static LauncherApp** forward<class\u0020LauncherApp\u0020*\u0020&>(LauncherApp** _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600019B RID: 411 RVA: 0x00011C88 File Offset: 0x00011088
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* {ctor}<struct\u0020std::_Exact_args_t,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&,0>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, _Exact_args_t __unnamed000, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _This_arg)
	{
		*A_0 = _This_arg;
		return A_0;
	}

	// Token: 0x0600019C RID: 412 RVA: 0x000165E4 File Offset: 0x000159E4
	internal unsafe static void construct<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,struct\u0020std::piecewise_construct_t\u0020const\u0020&,class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>,class\u0020std::tuple<>\u0020>(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* __unnamed000, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Ptr, piecewise_construct_t* <_Args_0>, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* <_Args_1>, tuple<>* <_Args_2>)
	{
		tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&> tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>;
		cpblk(ref tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>, <_Args_1>, 8);
		piecewise_construct_t piecewise_construct_t = *<_Args_0>;
		try
		{
			*(_Ptr + 16L) = 0L;
			*(_Ptr + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), _Ptr);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(_Ptr, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020&>);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), _Ptr);
			throw;
		}
		try
		{
			*(_Ptr + 32L) = 0L;
			*(_Ptr + 32L + 8L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), _Ptr);
			throw;
		}
	}

	// Token: 0x0600019D RID: 413 RVA: 0x00010EC0 File Offset: 0x000102C0
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* forward<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020&>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600019E RID: 414 RVA: 0x000166A8 File Offset: 0x00015AA8
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* _Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020&,struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u…(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_1, [MarshalAs(UnmanagedType.U1)] bool _Addleft, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Wherenode, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Node)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		if (230584300921369394UL <= num)
		{
			<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Destroy_if_node(A_0, _Node);
			<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@));
		}
		*(A_0 + 8L) = (long)(num + 1UL);
		*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = _Wherenode;
		ulong num2 = (ulong)(*A_0);
		if (_Wherenode == num2)
		{
			*(num2 + 8UL) = _Node;
			*(*A_0) = _Node;
			*(*A_0 + 16L) = _Node;
		}
		else if (_Addleft)
		{
			*(long*)_Wherenode = _Node;
			num2 = (ulong)(*A_0);
			if (_Wherenode == *num2)
			{
				*num2 = _Node;
			}
		}
		else
		{
			*(long*)(_Wherenode + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = _Node;
			long num3 = *A_0 + 16L;
			if (_Wherenode == *num3)
			{
				*num3 = _Node;
			}
		}
		_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = _Node;
		if (*(*(long*)(_Node + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) == 0)
		{
			do
			{
				_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
				long num4 = *(long*)ptr2;
				long num5 = *(num4 + 8L);
				ulong num6 = (ulong)(*num5);
				if (num4 == (long)num6)
				{
					_Wherenode = *(num5 + 16L);
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *(num4 + 16L))
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Lrotate(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Rrotate(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 8L));
					}
				}
				else
				{
					_Wherenode = num6;
					if (*(sbyte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
					{
						*(num4 + 24L) = 1;
						*(byte*)(_Wherenode + 24L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) = 1;
						*(*(*(long*)ptr2 + 8L) + 24L) = 0;
						ptr = *(*(long*)ptr2 + 8L);
					}
					else
					{
						if (ptr == *num4)
						{
							ptr = num4;
							<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Rrotate(A_0, ptr);
						}
						*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) = 1;
						*(*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 8L) + 24L) = 0;
						<Module>.std._Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>._Lrotate(A_0, *(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 8L));
					}
				}
			}
			while (*(*(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) + 24L) == 0);
		}
		*(*(*A_0 + 8L) + 24L) = 1;
		*(long*)A_1 = _Node;
		return A_1;
	}

	// Token: 0x0600019F RID: 415 RVA: 0x00016860 File Offset: 0x00015C60
	internal unsafe static pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* _Insert_nohint<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020&,struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,vo(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>* A_1, [MarshalAs(UnmanagedType.U1)] bool _Leftish, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* _Val, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Newnode)
	{
		long num = (long)stackalloc byte[<Module>.__CxxQueryExceptionSize()];
		uint exceptionCode;
		try
		{
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr = *A_0;
			_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr2 = *(long*)(ptr + 8L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>));
			bool flag = true;
			while (*(sbyte*)(ptr2 + 25L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>)) == 0)
			{
				ptr = ptr2;
				if (_Leftish)
				{
					flag = ((((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), _Val) < 0) ? 1 : 0) == 0) ? 1 : 0) != 0;
				}
				else
				{
					_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* ptr3 = ptr2 + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>);
					flag = ((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(_Val, ptr3) < 0) ? 1 : 0) != 0;
				}
				ptr2 = ((!flag) ? (*(long*)(ptr2 + 16L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>))) : (*(long*)ptr2));
			}
			_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>;
			<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, ptr, A_0);
			if (flag)
			{
				long num2 = *(*A_0);
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2;
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.{ctor}(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2, num2, A_0);
				if (((tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> == tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>2) ? 1 : 0) != 0)
				{
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3;
					_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ptr4 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>3, true, ptr, _Val, _Newnode);
					cpblk(A_1, ptr4, 8);
					*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
					return A_1;
				}
				<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>);
			}
			if (((<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.compare(tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020> + 32L, _Val) < 0) ? 1 : 0) != 0)
			{
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020> tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>4;
				_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* ptr5 = <Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Insert_at<struct\u0020std::pair<class\u0020std::basic_string<wc(A_0, &tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>4, flag, ptr, _Val, _Newnode);
				cpblk(A_1, ptr5, 8);
				*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>)) = 1;
				return A_1;
			}
			<Module>.std.pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>.__delDtor(_Newnode + 32L / (long)sizeof(_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>), 0U);
			<Module>.std._Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>._Freenode0<class\u0020std::allocator<struct\u0020std::_Tree_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>\u0020>(A_0, _Newnode);
			cpblk(A_1, ref tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>_u0020>_u0020const_u0020,std::shared_ptr<ModuleManager::MODULE_INFO>_u0020>_u0020>_u0020>_u0020>, 8);
			*(byte*)(A_1 + 8L / (long)sizeof(pair<std::_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>,bool>)) = 0;
			return A_1;
		}
		catch when (delegate
		{
			// Failed to create a 'catch-when' expression
			exceptionCode = (uint)Marshal.GetExceptionCode();
			endfilter(<Module>.__CxxExceptionFilter(Marshal.GetExceptionPointers(), null, 0, null) != null);
		})
		{
			uint num3 = 0U;
			<Module>.__CxxRegisterExceptionObject(Marshal.GetExceptionPointers(), num);
			try
			{
				try
				{
					<Module>.std._Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>._Destroy_if_node(A_0, _Newnode);
					<Module>._CxxThrowException(null, null);
				}
				catch when (delegate
				{
					// Failed to create a 'catch-when' expression
					num3 = <Module>.__CxxDetectRethrow(Marshal.GetExceptionPointers());
					endfilter(num3 != 0U);
				})
				{
				}
				if (num3 != 0U)
				{
					throw;
				}
			}
			finally
			{
				<Module>.__CxxUnregisterExceptionObject(num, (int)num3);
			}
		}
		return 0L;
	}

	// Token: 0x060001A0 RID: 416 RVA: 0x00019740 File Offset: 0x00018B40
	internal unsafe static void destroy<struct\u0020std::_List_node<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>,void\u0020*>\u0020*>(allocator<std::_List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>\u0020>* __unnamed000, _List_node<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,void\u0020*>** _Ptr)
	{
	}

	// Token: 0x060001A1 RID: 417 RVA: 0x00011C9C File Offset: 0x0001109C
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* {ctor}(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0)
	{
		cpblk(A_0, A_0, 8);
		return A_0;
	}

	// Token: 0x060001A2 RID: 418 RVA: 0x00011CC0 File Offset: 0x000110C0
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* {ctor}(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0)
	{
		cpblk(A_0, A_0, 8);
		return A_0;
	}

	// Token: 0x060001A3 RID: 419 RVA: 0x00011CD4 File Offset: 0x000110D4
	internal unsafe static _Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* --(_Tree_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>\u0020>* A_0)
	{
		<Module>.std._Tree_unchecked_const_iterator<std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,std::_Iterator_base0>.--(A_0);
		return A_0;
	}

	// Token: 0x060001A4 RID: 420 RVA: 0x00012AC4 File Offset: 0x00011EC4
	internal unsafe static ulong max_size(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return 230584300921369395L;
	}

	// Token: 0x060001A5 RID: 421 RVA: 0x00010EE4 File Offset: 0x000102E4
	internal unsafe static ulong max_size(allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* A_0)
	{
		return 230584300921369395L;
	}

	// Token: 0x060001A6 RID: 422 RVA: 0x00011CEC File Offset: 0x000110EC
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* _Getal(_Tree_comp_alloc<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001A7 RID: 423 RVA: 0x00010EFC File Offset: 0x000102FC
	internal unsafe static allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>* _Get_first(_Compressed_pair<std::allocator<std::_Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>\u0020>,std::_Tree_val<std::_Tree_simple_types<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001A8 RID: 424 RVA: 0x00010F0C File Offset: 0x0001030C
	internal unsafe static tuple<>* {ctor}<struct\u0020std::_Exact_args_t,0>(tuple<>* A_0, _Exact_args_t A_0)
	{
		return A_0;
	}

	// Token: 0x060001A9 RID: 425 RVA: 0x00010F1C File Offset: 0x0001031C
	internal unsafe static _Tuple_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* {ctor}<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(_Tuple_val<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Arg)
	{
		*A_0 = _Arg;
		return A_0;
	}

	// Token: 0x060001AA RID: 426 RVA: 0x000158DC File Offset: 0x00014CDC
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* {ctor}<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* A_0, piecewise_construct_t __unnamed000, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Val1, tuple<>* _Val2)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = *(long*)_Val1;
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_0, ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			shared_ptr<ModuleManager::MODULE_INFO>* ptr2 = A_0 + 32L;
			*ptr2 = 0L;
			*(ptr2 + 8L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001AB RID: 427 RVA: 0x00010F30 File Offset: 0x00010330
	internal unsafe static _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Buy_if_not_node<struct\u0020std::pair<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020,class\u0020std::shared_ptr<struct\u0020ModuleManager::MODULE_INFO>\u0020>\u0020&>(_Tree<std::_Tmap_traits<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>,std::shared_ptr<ModuleManager::MODULE_INFO>,std::less<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020>,std::allocator<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>\u0020>,0>\u0020>* A_0, _Tree_node<std::pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>,void\u0020*>* _Node, pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* __unnamed001)
	{
		return _Node;
	}

	// Token: 0x060001AC RID: 428 RVA: 0x00015340 File Offset: 0x00014740
	internal unsafe static pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* {ctor}<class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>,class\u0020std::tuple<>,0>(pair<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020,std::shared_ptr<ModuleManager::MODULE_INFO>\u0020>* A_0, tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Val1, tuple<>* _Val2, integer_sequence<unsigned\u0020__int64,0> __unnamed002, integer_sequence<unsigned\u0020__int64> __unnamed003)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr = *_Val1;
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Construct_lv_contents(A_0, ptr);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		try
		{
			shared_ptr<ModuleManager::MODULE_INFO>* ptr2 = A_0 + 32L;
			*ptr2 = 0L;
			*(ptr2 + 8L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001AD RID: 429 RVA: 0x00010F40 File Offset: 0x00010340
	internal unsafe static tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* move<class\u0020std::tuple<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>\u0020&>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x060001AE RID: 430 RVA: 0x00010F50 File Offset: 0x00010350
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* get<0,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020const\u0020&>(tuple<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>\u0020const\u0020&>* _Tuple)
	{
		return *_Tuple;
	}

	// Token: 0x060001AF RID: 431 RVA: 0x00019A4C File Offset: 0x00018E4C
	internal unsafe static void* _Get_deleter(_Ref_count_base* A_0, type_info* A_0)
	{
		return 0L;
	}

	// Token: 0x060001B0 RID: 432 RVA: 0x00010F70 File Offset: 0x00010370
	internal unsafe static tuple<>* {ctor}(tuple<>* A_0, tuple<>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001B1 RID: 433 RVA: 0x00010F60 File Offset: 0x00010360
	internal unsafe static tuple<>* {ctor}(tuple<>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001B2 RID: 434 RVA: 0x00010D90 File Offset: 0x00010190
	internal unsafe static void {dtor}(_Ref_count_base* A_0)
	{
	}

	// Token: 0x060001B3 RID: 435 RVA: 0x00010D74 File Offset: 0x00010174
	internal unsafe static _Ref_count_base* {ctor}(_Ref_count_base* A_0)
	{
		*(A_0 + 8L) = 1;
		*(A_0 + 12L) = 1;
		return A_0;
	}

	// Token: 0x060001B4 RID: 436 RVA: 0x00010DA0 File Offset: 0x000101A0
	internal unsafe static void _Incref(_Ref_count_base* A_0)
	{
		Interlocked.Increment(A_0 + 8L);
	}

	// Token: 0x060001B5 RID: 437 RVA: 0x0001099C File Offset: 0x0000FD9C
	internal unsafe static void _Adopt(_Iterator_base0* A_0, void* A_0)
	{
	}

	// Token: 0x060001B6 RID: 438 RVA: 0x00010DB8 File Offset: 0x000101B8
	internal unsafe static void _Decwref(_Ref_count_base* A_0)
	{
		if (Interlocked.Decrement(A_0 + 12L) == 0)
		{
			calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), A_0, *(*A_0 + 8L));
		}
	}

	// Token: 0x060001B7 RID: 439 RVA: 0x00011C0C File Offset: 0x0001100C
	internal unsafe static void _Decref(_Ref_count_base* A_0)
	{
		if (Interlocked.Decrement(A_0 + 8L) == 0)
		{
			calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), A_0, *(*A_0));
			if (Interlocked.Decrement(A_0 + 12L) == 0)
			{
				calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), A_0, *(*A_0 + 8L));
			}
		}
	}

	// Token: 0x060001B8 RID: 440 RVA: 0x000111D0 File Offset: 0x000105D0
	internal unsafe static void _Xran()
	{
		<Module>.std._Xout_of_range((sbyte*)(&<Module>.??_C@_0BI@CFPLBAOH@invalid?5string?5position@));
	}

	// Token: 0x060001B9 RID: 441 RVA: 0x00011F90 File Offset: 0x00011390
	internal unsafe static void _Check_offset(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0, ulong _Off)
	{
		if (*(A_0 + 16L) < _Off)
		{
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>._Xran();
		}
	}

	// Token: 0x060001BA RID: 442 RVA: 0x00010384 File Offset: 0x0000F784
	internal unsafe static char* wmemset(char* _S, [MarshalAs(UnmanagedType.U2)] char _C, ulong _N)
	{
		char* ptr = _S;
		if (0UL < _N)
		{
			do
			{
				*ptr = _C;
				ptr += 2L / 2L;
				_N -= 1UL;
			}
			while (_N > 0UL);
		}
		return _S;
	}

	// Token: 0x060001BB RID: 443 RVA: 0x0001117C File Offset: 0x0001057C
	internal unsafe static char* assign(char* _First, ulong _Count, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = _Count;
		char* ptr = _First;
		if (0UL < _Count)
		{
			do
			{
				*ptr = _Ch;
				ptr += 2L / 2L;
				num -= 1UL;
			}
			while (num > 0UL);
		}
		return _First;
	}

	// Token: 0x060001BC RID: 444 RVA: 0x00011F08 File Offset: 0x00011308
	internal unsafe static void ()(<lambda_27735b27f0d68eb29e046e0551b25780>* A_0, char* _New_ptr, char* _Old_ptr, ulong _Old_size, ulong _Off, ulong _Count, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = _Off * 2L;
		cpblk(_New_ptr, _Old_ptr, num);
		ulong num2 = _Count;
		char* ptr = num + _New_ptr;
		if (0L < _Count)
		{
			do
			{
				*ptr = _Ch;
				ptr += 2L / 2L;
				num2 -= 1UL;
			}
			while (num2 > 0UL);
		}
		cpblk((_Off + _Count) * 2L + _New_ptr, num + _Old_ptr, (_Old_size - _Off + 1L) * 2L);
	}

	// Token: 0x060001BD RID: 445 RVA: 0x000141A0 File Offset: 0x000135A0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_27735b27f0d68eb29e046e0551b25780>,unsigned\u0020__int64,unsigned\u0020__int64,wchar_t>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_27735b27f0d68eb29e046e0551b25780> _Fn, ulong <_Args_0>, ulong <_Args_1>, [MarshalAs(UnmanagedType.U2)] char <_Args_2>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.insert.<lambda_27735b27f0d68eb29e046e0551b25780>.()(ref _Fn, ptr, ptr2, num, <_Args_0>, <_Args_1>, <_Args_2>);
			ulong num5 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num5 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num5);
			}
			<Module>.delete(ptr3, num5);
			*A_0 = ptr;
		}
		else
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.insert.<lambda_27735b27f0d68eb29e046e0551b25780>.()(ref _Fn, ptr, A_0, num, <_Args_0>, <_Args_1>, <_Args_2>);
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001BE RID: 446 RVA: 0x000154BC File Offset: 0x000148BC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* insert(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Off, ulong _Count, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = (ulong)(*(A_0 + 16L));
		if (num < _Off)
		{
			<Module>.std._String_val<std::_Simple_types<wchar_t>\u0020>._Xran();
		}
		ulong num2 = num;
		ulong num3 = (ulong)(*(A_0 + 24L));
		if (_Count <= num3 - num2)
		{
			*(A_0 + 16L) = num2 + _Count;
			char* ptr = A_0;
			if (((8UL <= num3) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			char* ptr2 = _Off * 2L / 2 + ptr;
			<Module>.memmove(_Count * 2L + ptr2, ptr2, (num2 - _Off + 1L) * 2L);
			ulong num4 = _Count;
			char* ptr3 = ptr2;
			if (0L < _Count)
			{
				do
				{
					*ptr3 = _Ch;
					ptr3 += 2L / 2L;
					num4 -= 1UL;
				}
				while (num4 > 0UL);
			}
			return A_0;
		}
		<lambda_27735b27f0d68eb29e046e0551b25780> <lambda_27735b27f0d68eb29e046e0551b25780>;
		initblk(ref <lambda_27735b27f0d68eb29e046e0551b25780>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_27735b27f0d68eb29e046e0551b25780>,unsigned\u0020__int64,unsigned\u0020__int64,wchar_t>(A_0, _Count, <lambda_27735b27f0d68eb29e046e0551b25780>, _Off, _Count, _Ch);
	}

	// Token: 0x060001BF RID: 447 RVA: 0x00011E00 File Offset: 0x00011200
	internal unsafe static ulong size(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		return *(A_0 + 16L);
	}

	// Token: 0x060001C0 RID: 448 RVA: 0x00011E14 File Offset: 0x00011214
	internal unsafe static void ()(<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>* A_0, char* _New_ptr, char* _Old_ptr, ulong _Old_size, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = _Old_size * 2L;
		cpblk(_New_ptr, _Old_ptr, num);
		*(num + _New_ptr) = _Ch;
		*(num + _New_ptr + 2L) = 0;
	}

	// Token: 0x060001C1 RID: 449 RVA: 0x0001404C File Offset: 0x0001344C
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>,wchar_t>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_94b5dcf1ef2e5769bf4885c9dfc60389> _Fn, [MarshalAs(UnmanagedType.U2)] char <_Args_0>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			ulong num5 = num * 2L;
			cpblk(ptr, ptr2, num5);
			*(num5 + ptr) = (short)<_Args_0>;
			*(num5 + ptr + 2L) = 0;
			ulong num6 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num6 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num6);
			}
			<Module>.delete(ptr3, num6);
			*A_0 = ptr;
		}
		else
		{
			ulong num5 = num * 2L;
			cpblk(ptr, A_0, num5);
			*(num5 + ptr) = (short)<_Args_0>;
			*(num5 + ptr + 2L) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001C2 RID: 450 RVA: 0x000153F4 File Offset: 0x000147F4
	internal unsafe static void push_back(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, [MarshalAs(UnmanagedType.U2)] char _Ch)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (num < num2)
		{
			*(A_0 + 16L) = num + 1L;
			char* ptr = A_0;
			if (((8UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			char* ptr2 = num * 2L / 2 + ptr;
			*ptr2 = _Ch;
			ptr2[2L / 2L] = '\0';
		}
		else
		{
			<lambda_94b5dcf1ef2e5769bf4885c9dfc60389> <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>;
			initblk(ref <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>, 0, 1L);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>,wchar_t>(A_0, 1L, <lambda_94b5dcf1ef2e5769bf4885c9dfc60389>, _Ch);
		}
	}

	// Token: 0x060001C3 RID: 451 RVA: 0x0001033C File Offset: 0x0000F73C
	internal unsafe static char* wcsrchr(char* _String, [MarshalAs(UnmanagedType.U2)] char _C)
	{
		return <Module>.wcsrchr((char*)_String, _C);
	}

	// Token: 0x060001C4 RID: 452 RVA: 0x00011148 File Offset: 0x00010548
	internal unsafe static void ()(<lambda_3ca51f66a9d03df3cf21518bbff746cd>* A_0, char* _New_ptr, char* _Old_ptr, ulong _Old_size, char* _Ptr, ulong _Count)
	{
		ulong num = _Old_size * 2L;
		cpblk(_New_ptr, _Old_ptr, num);
		cpblk(num + _New_ptr, _Ptr, _Count * 2L);
		*((_Old_size + _Count) * 2L + _New_ptr) = 0;
	}

	// Token: 0x060001C5 RID: 453 RVA: 0x00014250 File Offset: 0x00013650
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_grow_by<class\u0020<lambda_3ca51f66a9d03df3cf21518bbff746cd>,wchar_t\u0020const\u0020*,unsigned\u0020__int64>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Size_increase, <lambda_3ca51f66a9d03df3cf21518bbff746cd> _Fn, char* <_Args_0>, ulong <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, num2);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num4 + 1L);
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (8L <= num3)
		{
			char* ptr2 = *A_0;
			ulong num5 = num * 2L;
			cpblk(ptr, ptr2, num5);
			cpblk(num5 + ptr, <_Args_0>, <_Args_1> * 2UL);
			*((num + <_Args_1>) * 2L + ptr) = 0;
			ulong num6 = (num3 + 1L) * 2L;
			void* ptr3 = ptr2;
			if (num6 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num6);
			}
			<Module>.delete(ptr3, num6);
			*A_0 = ptr;
		}
		else
		{
			ulong num5 = num * 2L;
			cpblk(ptr, A_0, num5);
			cpblk(num5 + ptr, <_Args_0>, <_Args_1> * 2UL);
			*((num + <_Args_1>) * 2L + ptr) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001C6 RID: 454 RVA: 0x00015590 File Offset: 0x00014990
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr, ulong _Count)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			ulong num3 = num + _Count;
			*(A_0 + 16L) = num3;
			char* ptr = A_0;
			if (((8UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			<Module>.memmove((void*)(num * 2L / 2 + ptr), _Ptr, _Count * 2L);
			(num3 * 2L / 2)[ptr] = '\0';
			return A_0;
		}
		<lambda_3ca51f66a9d03df3cf21518bbff746cd> <lambda_3ca51f66a9d03df3cf21518bbff746cd>;
		initblk(ref <lambda_3ca51f66a9d03df3cf21518bbff746cd>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_grow_by<class\u0020<lambda_3ca51f66a9d03df3cf21518bbff746cd>,wchar_t\u0020const\u0020*,unsigned\u0020__int64>(A_0, _Count, <lambda_3ca51f66a9d03df3cf21518bbff746cd>, _Ptr, _Count);
	}

	// Token: 0x060001C7 RID: 455 RVA: 0x00015AC0 File Offset: 0x00014EC0
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* append(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		ulong num = (ulong)(*(_Right + 16L));
		char* ptr = _Right;
		if (((8L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.append(A_0, ptr, num);
	}

	// Token: 0x060001C8 RID: 456 RVA: 0x00011D60 File Offset: 0x00011160
	internal unsafe static sbyte* _Myptr(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
		sbyte* ptr = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060001C9 RID: 457 RVA: 0x00012B28 File Offset: 0x00011F28
	internal unsafe static sbyte* c_str(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		sbyte* ptr = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060001CA RID: 458 RVA: 0x00012B14 File Offset: 0x00011F14
	internal unsafe static ulong length(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		return *(A_0 + 16L);
	}

	// Token: 0x060001CB RID: 459 RVA: 0x00010F80 File Offset: 0x00010380
	internal unsafe static string InternalUnicodeToStringHelper(char* _src, ulong _count)
	{
		if (_count > 2147483647UL)
		{
			throw new ArgumentOutOfRangeException("Size of string exceeds INT_MAX.");
		}
		return new string((char*)_src, 0, (int)_count);
	}

	// Token: 0x060001CC RID: 460 RVA: 0x000135AC File Offset: 0x000129AC
	internal unsafe static string marshal_as<class\u0020System::String\u0020^,class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _from_obj)
	{
		ulong num = (ulong)(*(_from_obj + 16L));
		char* ptr = _from_obj;
		if (((8L <= *(_from_obj + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_from_obj;
		}
		if (num > 2147483647UL)
		{
			throw new ArgumentOutOfRangeException("Size of string exceeds INT_MAX.");
		}
		return new string((char*)ptr, 0, (int)num);
	}

	// Token: 0x060001CD RID: 461 RVA: 0x00012138 File Offset: 0x00011538
	internal unsafe static _Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* {ctor}<class\u0020std::allocator<wchar_t>\u0020>(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0, _One_then_variadic_args_t __unnamed000, allocator<wchar_t>* _Val1)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001CE RID: 462 RVA: 0x00011360 File Offset: 0x00010760
	internal unsafe static allocator<wchar_t>* forward<class\u0020std::allocator<wchar_t>\u0020>(allocator<wchar_t>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x060001CF RID: 463 RVA: 0x00012CD8 File Offset: 0x000120D8
	internal unsafe static _String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* {ctor}<class\u0020std::allocator<wchar_t>,void>(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0, allocator<wchar_t>* _Al)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001D0 RID: 464 RVA: 0x00013EF8 File Offset: 0x000132F8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			cpblk(A_0, _Right, 32);
			*(_Right + 16L) = 0L;
			*(_Right + 24L) = 7L;
			*_Right = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001D1 RID: 465 RVA: 0x00013FC8 File Offset: 0x000133C8
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* {ctor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr;
		basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 15L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001D2 RID: 466 RVA: 0x00015990 File Offset: 0x00014D90
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr, ulong _Count)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Ptr, _Count);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001D3 RID: 467 RVA: 0x000112B8 File Offset: 0x000106B8
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* addressof<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060001D4 RID: 468 RVA: 0x00011200 File Offset: 0x00010600
	internal unsafe static allocator<wchar_t>* move<class\u0020std::allocator<wchar_t>\u0020&>(allocator<wchar_t>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x060001D5 RID: 469 RVA: 0x000113D4 File Offset: 0x000107D4
	internal unsafe static void _Pocma<class\u0020std::allocator<wchar_t>\u0020>(allocator<wchar_t>* _Left, allocator<wchar_t>* _Right, integral_constant<bool,1> __unnamed002)
	{
	}

	// Token: 0x060001D6 RID: 470 RVA: 0x00011FEC File Offset: 0x000113EC
	internal unsafe static void _Pocma<class\u0020std::allocator<wchar_t>\u0020>(allocator<wchar_t>* _Left, allocator<wchar_t>* _Right)
	{
	}

	// Token: 0x060001D7 RID: 471 RVA: 0x00012C9C File Offset: 0x0001209C
	internal unsafe static void _Move_alloc(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0, allocator<wchar_t>* _Al)
	{
	}

	// Token: 0x060001D8 RID: 472 RVA: 0x00011260 File Offset: 0x00010660
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* addressof<class\u0020std::_String_val<struct\u0020std::_Simple_types<wchar_t>\u0020>\u0020>(_String_val<std::_Simple_types<wchar_t>\u0020>* _Val)
	{
		return _Val;
	}

	// Token: 0x060001D9 RID: 473 RVA: 0x00012BE8 File Offset: 0x00011FE8
	internal unsafe static void _Assign_rv_contents_with_alloc_always_equal(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, integral_constant<bool,1> __unnamed001)
	{
		cpblk(A_0, _Right, 32);
		*(_Right + 16L) = 0L;
		*(_Right + 24L) = 7L;
		*_Right = 0;
	}

	// Token: 0x060001DA RID: 474 RVA: 0x00012CAC File Offset: 0x000120AC
	internal unsafe static void _Assign_rv_contents(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right, integral_constant<bool,1> __unnamed001)
	{
		cpblk(A_0, _Right, 32);
		*(_Right + 16L) = 0L;
		*(_Right + 24L) = 7L;
		*_Right = 0;
	}

	// Token: 0x060001DB RID: 475 RVA: 0x00011210 File Offset: 0x00010610
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* move<class\u0020std::basic_string<wchar_t,struct\u0020std::char_traits<wchar_t>,class\u0020std::allocator<wchar_t>\u0020>\u0020&>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x060001DC RID: 476 RVA: 0x00013804 File Offset: 0x00012C04
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* =(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Right)
	{
		if (A_0 != _Right)
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
			integral_constant<bool,1> integral_constant<bool,1>;
			initblk(ref integral_constant<bool,1>, 0, 1L);
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Assign_rv_contents(A_0, _Right, integral_constant<bool,1>);
		}
		return A_0;
	}

	// Token: 0x060001DD RID: 477 RVA: 0x000136AC File Offset: 0x00012AAC
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001DE RID: 478 RVA: 0x00012ADC File Offset: 0x00011EDC
	internal unsafe static ulong length(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		return *(A_0 + 16L);
	}

	// Token: 0x060001DF RID: 479 RVA: 0x00011030 File Offset: 0x00010430
	internal unsafe static void ()(<lambda_f1129f3d98befd92b6d0e63ffb90e238>* A_0, sbyte* _New_ptr, sbyte* _Old_ptr, ulong _Old_size, sbyte* _Ptr, ulong _Count)
	{
		cpblk(_New_ptr, _Old_ptr, _Old_size);
		long num = _New_ptr + _Old_size;
		cpblk(num, _Ptr, _Count);
		*(num + _Count) = 0;
	}

	// Token: 0x060001E0 RID: 480 RVA: 0x00012EA0 File Offset: 0x000122A0
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_grow_by<class\u0020<lambda_f1129f3d98befd92b6d0e63ffb90e238>,char\u0020const\u0020*,unsigned\u0020__int64>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Size_increase, <lambda_f1129f3d98befd92b6d0e63ffb90e238> _Fn, sbyte* <_Args_0>, ulong <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, num2);
		ulong num5 = num4 + 1L;
		void* ptr;
		if (num5 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num5);
		}
		else if (num5 != null)
		{
			ptr = <Module>.@new(num5);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (16L <= num3)
		{
			sbyte* ptr2 = *A_0;
			cpblk(ptr, ptr2, num);
			long num6 = (byte*)ptr + num;
			cpblk(num6, <_Args_0>, <_Args_1>);
			*(num6 + (long)<_Args_1>) = 0;
			ulong num7 = num3 + 1L;
			void* ptr3 = ptr2;
			if (num7 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num7);
			}
			<Module>.delete(ptr3, num7);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, num);
			long num6 = (byte*)ptr + num;
			cpblk(num6, <_Args_0>, <_Args_1>);
			*(num6 + (long)<_Args_1>) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001E1 RID: 481 RVA: 0x00013798 File Offset: 0x00012B98
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* append(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, sbyte* _Ptr, ulong _Count)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			*(A_0 + 16L) = num + _Count;
			sbyte* ptr = A_0;
			if (((16UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			long num3 = ptr + num / sizeof(sbyte);
			<Module>.memmove(num3, _Ptr, _Count);
			*(num3 + _Count) = 0;
			return A_0;
		}
		<lambda_f1129f3d98befd92b6d0e63ffb90e238> <lambda_f1129f3d98befd92b6d0e63ffb90e238>;
		initblk(ref <lambda_f1129f3d98befd92b6d0e63ffb90e238>, 0, 1L);
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_grow_by<class\u0020<lambda_f1129f3d98befd92b6d0e63ffb90e238>,char\u0020const\u0020*,unsigned\u0020__int64>(A_0, _Count, <lambda_f1129f3d98befd92b6d0e63ffb90e238>, _Ptr, _Count);
	}

	// Token: 0x060001E2 RID: 482 RVA: 0x00010920 File Offset: 0x0000FD20
	internal unsafe static sbyte* assign(sbyte* _First, ulong _Count, sbyte _Ch)
	{
		initblk(_First, _Ch, _Count);
		return _First;
	}

	// Token: 0x060001E3 RID: 483 RVA: 0x00011004 File Offset: 0x00010404
	internal unsafe static void ()(<lambda_59d344839e59d86dc9255728ed6d9dcb>* A_0, sbyte* _New_ptr, sbyte* _Old_ptr, ulong _Old_size, ulong _Count, sbyte _Ch)
	{
		cpblk(_New_ptr, _Old_ptr, _Old_size);
		long num = _New_ptr + _Old_size;
		initblk(num, _Ch, _Count);
		*(num + _Count) = 0;
	}

	// Token: 0x060001E4 RID: 484 RVA: 0x00012DBC File Offset: 0x000121BC
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Reallocate_grow_by<class\u0020<lambda_59d344839e59d86dc9255728ed6d9dcb>,unsigned\u0020__int64,char>(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Size_increase, <lambda_59d344839e59d86dc9255728ed6d9dcb> _Fn, ulong <_Args_0>, sbyte <_Args_1>)
	{
		ulong num = *(A_0 + 16L);
		if (<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0) - num < _Size_increase)
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Xlen();
		}
		ulong num2 = num + _Size_increase;
		ulong num3 = *(A_0 + 24L);
		ulong num4 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Calculate_growth(A_0, num2);
		ulong num5 = num4 + 1L;
		void* ptr;
		if (num5 >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num5);
		}
		else if (num5 != null)
		{
			ptr = <Module>.@new(num5);
		}
		else
		{
			ptr = null;
		}
		*(A_0 + 16L) = num2;
		*(A_0 + 24L) = num4;
		if (16L <= num3)
		{
			sbyte* ptr2 = *A_0;
			cpblk(ptr, ptr2, num);
			long num6 = (byte*)ptr + num;
			initblk(num6, <_Args_1>, <_Args_0>);
			*(num6 + (long)<_Args_0>) = 0;
			ulong num7 = num3 + 1L;
			void* ptr3 = ptr2;
			if (num7 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr3, ref num7);
			}
			<Module>.delete(ptr3, num7);
			*A_0 = ptr;
		}
		else
		{
			cpblk(ptr, A_0, num);
			long num6 = (byte*)ptr + num;
			initblk(num6, <_Args_1>, <_Args_0>);
			*(num6 + (long)<_Args_0>) = 0;
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001E5 RID: 485 RVA: 0x0001372C File Offset: 0x00012B2C
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* append(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Count, sbyte _Ch)
	{
		ulong num = *(A_0 + 16L);
		ulong num2 = (ulong)(*(A_0 + 24L));
		if (_Count <= num2 - num)
		{
			*(A_0 + 16L) = num + _Count;
			sbyte* ptr = A_0;
			if (((16UL <= num2) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			long num3 = ptr + num / sizeof(sbyte);
			initblk(num3, _Ch, _Count);
			*(num3 + _Count) = 0;
			return A_0;
		}
		<lambda_59d344839e59d86dc9255728ed6d9dcb> <lambda_59d344839e59d86dc9255728ed6d9dcb>;
		initblk(ref <lambda_59d344839e59d86dc9255728ed6d9dcb>, 0, 1L);
		return <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Reallocate_grow_by<class\u0020<lambda_59d344839e59d86dc9255728ed6d9dcb>,unsigned\u0020__int64,char>(A_0, _Count, <lambda_59d344839e59d86dc9255728ed6d9dcb>, _Count, _Ch);
	}

	// Token: 0x060001E6 RID: 486 RVA: 0x000112F8 File Offset: 0x000106F8
	internal unsafe static allocator<wchar_t>* {ctor}(allocator<wchar_t>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001E7 RID: 487 RVA: 0x00011318 File Offset: 0x00010718
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>._Bxty* {ctor}(_String_val<std::_Simple_types<wchar_t>\u0020>._Bxty* A_0)
	{
		return A_0;
	}

	// Token: 0x060001E8 RID: 488 RVA: 0x00011FFC File Offset: 0x000113FC
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* {ctor}(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001E9 RID: 489 RVA: 0x00012D24 File Offset: 0x00012124
	internal unsafe static _Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* {ctor}<>(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0, _Zero_then_variadic_args_t A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001EA RID: 490 RVA: 0x00013614 File Offset: 0x00012A14
	internal unsafe static _String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* {ctor}(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x060001EB RID: 491 RVA: 0x00012BC8 File Offset: 0x00011FC8
	internal unsafe static void _Tidy_init(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 7L;
		*A_0 = 0;
	}

	// Token: 0x060001EC RID: 492 RVA: 0x00011EC4 File Offset: 0x000112C4
	internal unsafe static char* _Myptr(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x060001ED RID: 493 RVA: 0x0001036C File Offset: 0x0000F76C
	internal unsafe static char* wmemmove(char* _S1, char* _S2, ulong _N)
	{
		return <Module>.memmove((void*)_S1, (void*)_S2, _N * 2UL);
	}

	// Token: 0x060001EE RID: 494 RVA: 0x00011120 File Offset: 0x00010520
	internal unsafe static char* move(char* _First1, char* _First2, ulong _Count)
	{
		return <Module>.memmove(_First1, _First2, _Count * 2L);
	}

	// Token: 0x060001EF RID: 495 RVA: 0x000112C8 File Offset: 0x000106C8
	internal unsafe static void _Xlen()
	{
		<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BA@JFNIOLAK@string?5too?5long@));
	}

	// Token: 0x060001F0 RID: 496 RVA: 0x00011328 File Offset: 0x00010728
	internal unsafe static ulong max_size(allocator<wchar_t>* A_0)
	{
		return long.MaxValue;
	}

	// Token: 0x060001F1 RID: 497 RVA: 0x00011350 File Offset: 0x00010750
	internal unsafe static allocator<wchar_t>* _Get_first(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001F2 RID: 498 RVA: 0x00012128 File Offset: 0x00011528
	internal unsafe static allocator<wchar_t>* _Getal(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x060001F3 RID: 499 RVA: 0x00012F84 File Offset: 0x00012384
	internal unsafe static ulong max_size(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		return 9223372036854775806L;
	}

	// Token: 0x060001F4 RID: 500 RVA: 0x00013834 File Offset: 0x00012C34
	internal unsafe static ulong _Calculate_growth(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _Requested)
	{
		ulong num = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0);
		ulong num2 = _Requested | 7L;
		if (num2 > num)
		{
			return num;
		}
		ulong num3 = *(A_0 + 24L);
		ulong num4 = num3 >> 1;
		if (num3 > num - num4)
		{
			return num;
		}
		ulong num5 = num4 + num3;
		ulong num6 = num5;
		return *(ref num2 < num5 ? ref num6 : ref num2);
	}

	// Token: 0x060001F5 RID: 501 RVA: 0x000113E4 File Offset: 0x000107E4
	internal static ulong _Get_size_of_n<2>(ulong _Count)
	{
		ulong num = _Count * 2L;
		return (long.MaxValue < _Count) ? ulong.MaxValue : num;
	}

	// Token: 0x060001F6 RID: 502 RVA: 0x000120DC File Offset: 0x000114DC
	internal unsafe static char* allocate(allocator<wchar_t>* A_0, ulong _Count)
	{
		ulong num = _Count * 2L;
		if (9223372036854775807L < _Count)
		{
			num = ulong.MaxValue;
		}
		else if (num < 4096UL)
		{
			if (num != 0UL)
			{
				return <Module>.@new(num);
			}
			return 0L;
		}
		return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num);
	}

	// Token: 0x060001F7 RID: 503 RVA: 0x00010350 File Offset: 0x0000F750
	internal unsafe static char* wmemcpy(char* _S1, char* _S2, ulong _N)
	{
		cpblk(_S1, _S2, _N * 2UL);
		return _S1;
	}

	// Token: 0x060001F8 RID: 504 RVA: 0x0001105C File Offset: 0x0001045C
	internal unsafe static char* copy(char* _First1, char* _First2, ulong _Count)
	{
		cpblk(_First1, _First2, _Count * 2L);
		return _First1;
	}

	// Token: 0x060001F9 RID: 505 RVA: 0x00011E3C File Offset: 0x0001123C
	internal unsafe static void ()(<lambda_d4301fda4684ac16da26da6c6383f5f5>* A_0, char* _New_ptr, ulong _Count, char* _Ptr)
	{
		ulong num = _Count * 2L;
		cpblk(_New_ptr, _Ptr, num);
		*(num + _New_ptr) = 0;
	}

	// Token: 0x060001FA RID: 506 RVA: 0x00011410 File Offset: 0x00010810
	internal unsafe static char** forward<wchar_t\u0020*\u0020const\u0020&>(char** _Arg)
	{
		return _Arg;
	}

	// Token: 0x060001FB RID: 507 RVA: 0x00012184 File Offset: 0x00011584
	internal unsafe static void construct<wchar_t\u0020*,wchar_t\u0020*\u0020const\u0020&>(allocator<wchar_t>* __unnamed000, char** _Ptr, char** <_Args_0>)
	{
		*_Ptr = *<_Args_0>;
	}

	// Token: 0x060001FC RID: 508 RVA: 0x00014114 File Offset: 0x00013514
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* _Reallocate_for<class\u0020<lambda_d4301fda4684ac16da26da6c6383f5f5>,wchar_t\u0020const\u0020*>(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, ulong _New_size, <lambda_d4301fda4684ac16da26da6c6383f5f5> _Fn, char* <_Args_0>)
	{
		if (_New_size > <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.max_size(A_0))
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Xlen();
		}
		ulong num = *(A_0 + 24L);
		ulong num2 = <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Calculate_growth(A_0, _New_size);
		char* ptr = <Module>.std.allocator<wchar_t>.allocate(A_0, num2 + 1L);
		*(A_0 + 16L) = _New_size;
		*(A_0 + 24L) = num2;
		ulong num3 = _New_size * 2L;
		cpblk(ptr, <_Args_0>, num3);
		*(num3 + ptr) = 0;
		if (8L <= num)
		{
			ulong num4 = (num + 1L) * 2L;
			void* ptr2 = *A_0;
			if (num4 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr2, ref num4);
			}
			<Module>.delete(ptr2, num4);
			*A_0 = ptr;
		}
		else
		{
			*A_0 = ptr;
		}
		return A_0;
	}

	// Token: 0x060001FD RID: 509 RVA: 0x0001545C File Offset: 0x0001485C
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* assign(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr, ulong _Count)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (_Count <= num)
		{
			char* ptr = A_0;
			if (((8UL <= num) ? 1 : 0) != 0)
			{
				ptr = *A_0;
			}
			*(A_0 + 16L) = _Count;
			ulong num2 = _Count * 2L;
			<Module>.memmove((void*)ptr, _Ptr, num2);
			(num2 / 2UL)[ptr] = '\0';
			return A_0;
		}
		<lambda_d4301fda4684ac16da26da6c6383f5f5> <lambda_d4301fda4684ac16da26da6c6383f5f5>;
		initblk(ref <lambda_d4301fda4684ac16da26da6c6383f5f5>, 0, 1L);
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Reallocate_for<class\u0020<lambda_d4301fda4684ac16da26da6c6383f5f5>,wchar_t\u0020const\u0020*>(A_0, _Count, <lambda_d4301fda4684ac16da26da6c6383f5f5>, _Ptr);
	}

	// Token: 0x060001FE RID: 510 RVA: 0x000111A8 File Offset: 0x000105A8
	internal unsafe static ulong length(char* _First)
	{
		char* ptr = _First;
		if (*(short*)_First != 0)
		{
			do
			{
				ptr += 2L / (long)sizeof(char);
			}
			while (*(short*)ptr != 0);
		}
		return ptr - _First >> 1;
	}

	// Token: 0x060001FF RID: 511 RVA: 0x00015560 File Offset: 0x00014960
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* assign(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr)
	{
		char* ptr = _Ptr;
		if (*_Ptr != 0)
		{
			do
			{
				ptr += 2L;
			}
			while (*ptr != 0);
		}
		return <Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Ptr, ptr - _Ptr >> 1);
	}

	// Token: 0x06000200 RID: 512 RVA: 0x00015A1C File Offset: 0x00014E1C
	internal unsafe static basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* {ctor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0, char* _Ptr)
	{
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr;
		basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* ptr2;
		try
		{
			ptr = A_0 + 16L;
			*ptr = 0L;
			ptr2 = A_0 + 24L;
			*ptr2 = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<wchar_t>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			*ptr = 0L;
			*ptr2 = 7L;
			*A_0 = 0;
			char* ptr3 = _Ptr;
			if (*_Ptr != 0)
			{
				do
				{
					ptr3 += 2L;
				}
				while (*ptr3 != 0);
			}
			long num = ptr3 - _Ptr >> 1;
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>.assign(A_0, _Ptr, num);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000201 RID: 513 RVA: 0x00010FAC File Offset: 0x000103AC
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<wchar_t>\u0020>._Bxty* A_0)
	{
	}

	// Token: 0x06000202 RID: 514 RVA: 0x00011CFC File Offset: 0x000110FC
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
	}

	// Token: 0x06000203 RID: 515 RVA: 0x00012B50 File Offset: 0x00011F50
	internal unsafe static void {dtor}(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0)
	{
	}

	// Token: 0x06000204 RID: 516 RVA: 0x000135F4 File Offset: 0x000129F4
	internal unsafe static void {dtor}(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x06000205 RID: 517 RVA: 0x00011EF8 File Offset: 0x000112F8
	internal unsafe static void _Orphan_all(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x06000206 RID: 518 RVA: 0x00011138 File Offset: 0x00010538
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* _Get_second(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000207 RID: 519 RVA: 0x00011EE8 File Offset: 0x000112E8
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* _Get_data(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000208 RID: 520 RVA: 0x00011088 File Offset: 0x00010488
	internal unsafe static allocator<wchar_t>* _Get_first(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000209 RID: 521 RVA: 0x00011D50 File Offset: 0x00011150
	internal unsafe static allocator<wchar_t>* _Getal(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600020A RID: 522 RVA: 0x00011250 File Offset: 0x00010650
	internal unsafe static void destroy<wchar_t\u0020*>(allocator<wchar_t>* __unnamed000, char** _Ptr)
	{
	}

	// Token: 0x0600020B RID: 523 RVA: 0x00011240 File Offset: 0x00010640
	internal unsafe static char** addressof<wchar_t\u0020*>(char** _Val)
	{
		return _Val;
	}

	// Token: 0x0600020C RID: 524 RVA: 0x00011F60 File Offset: 0x00011360
	internal unsafe static void deallocate(allocator<wchar_t>* A_0, char* _Ptr, ulong _Count)
	{
		ulong num = _Count * 2L;
		void* ptr = _Ptr;
		if (num >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x0600020D RID: 525 RVA: 0x0001110C File Offset: 0x0001050C
	internal unsafe static void assign(char* _Left, char* _Right)
	{
		*_Left = (short)(*_Right);
	}

	// Token: 0x0600020E RID: 526 RVA: 0x00012B70 File Offset: 0x00011F70
	internal unsafe static void _Tidy_deallocate(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (((8UL <= num) ? 1 : 0) != 0)
		{
			ulong num2 = (num + 1UL) * 2UL;
			void* ptr = *A_0;
			if (num2 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num2);
			}
			<Module>.delete(ptr, num2);
		}
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 7L;
		*A_0 = 0;
	}

	// Token: 0x0600020F RID: 527 RVA: 0x00013EB8 File Offset: 0x000132B8
	internal unsafe static void {dtor}(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		try
		{
			<Module>.std.basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000210 RID: 528 RVA: 0x00011DF0 File Offset: 0x000111F0
	internal unsafe static void _Orphan_all(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x06000211 RID: 529 RVA: 0x00011280 File Offset: 0x00010680
	internal unsafe static void destroy<char\u0020*>(allocator<char>* __unnamed000, sbyte** _Ptr)
	{
	}

	// Token: 0x06000212 RID: 530 RVA: 0x00012C14 File Offset: 0x00012014
	internal unsafe static void _Tidy_deallocate(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		ulong num = (ulong)(*(A_0 + 24L));
		if (((16UL <= num) ? 1 : 0) != 0)
		{
			ulong num2 = num + 1UL;
			void* ptr = *A_0;
			if (num2 >= 4096UL)
			{
				<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num2);
			}
			<Module>.delete(ptr, num2);
		}
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 15L;
		*A_0 = 0;
	}

	// Token: 0x06000213 RID: 531 RVA: 0x00013F88 File Offset: 0x00013388
	internal unsafe static void {dtor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Tidy_deallocate(A_0);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
	}

	// Token: 0x06000214 RID: 532 RVA: 0x00011308 File Offset: 0x00010708
	internal unsafe static allocator<char>* {ctor}(allocator<char>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000215 RID: 533 RVA: 0x00011340 File Offset: 0x00010740
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>._Bxty* {ctor}(_String_val<std::_Simple_types<char>\u0020>._Bxty* A_0)
	{
		return A_0;
	}

	// Token: 0x06000216 RID: 534 RVA: 0x00012048 File Offset: 0x00011448
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* {ctor}(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000217 RID: 535 RVA: 0x00012D70 File Offset: 0x00012170
	internal unsafe static _Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* {ctor}<>(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0, _Zero_then_variadic_args_t A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000218 RID: 536 RVA: 0x00013660 File Offset: 0x00012A60
	internal unsafe static _String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* {ctor}(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000219 RID: 537 RVA: 0x00010FBC File Offset: 0x000103BC
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<char>\u0020>._Bxty* A_0)
	{
	}

	// Token: 0x0600021A RID: 538 RVA: 0x00011D0C File Offset: 0x0001110C
	internal unsafe static void {dtor}(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
	}

	// Token: 0x0600021B RID: 539 RVA: 0x00012B60 File Offset: 0x00011F60
	internal unsafe static void {dtor}(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0)
	{
	}

	// Token: 0x0600021C RID: 540 RVA: 0x00013604 File Offset: 0x00012A04
	internal unsafe static void {dtor}(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
	}

	// Token: 0x0600021D RID: 541 RVA: 0x00011E5C File Offset: 0x0001125C
	internal unsafe static void _Tidy_init(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		*(A_0 + 16L) = 0L;
		*(A_0 + 24L) = 15L;
		*A_0 = 0;
	}

	// Token: 0x0600021E RID: 542 RVA: 0x00010FCC File Offset: 0x000103CC
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Large_string_engaged(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
		return (16L <= *(A_0 + 24L)) ? 1 : 0;
	}

	// Token: 0x0600021F RID: 543 RVA: 0x00011D88 File Offset: 0x00011188
	internal unsafe static sbyte* _Myptr(_String_val<std::_Simple_types<char>\u0020>* A_0)
	{
		sbyte* ptr = A_0;
		if (((16L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x06000220 RID: 544 RVA: 0x00010908 File Offset: 0x0000FD08
	internal unsafe static sbyte* move(sbyte* _First1, sbyte* _First2, ulong _Count)
	{
		return <Module>.memmove(_First1, _First2, _Count);
	}

	// Token: 0x06000221 RID: 545 RVA: 0x000112E0 File Offset: 0x000106E0
	internal unsafe static void _Xlen()
	{
		<Module>.std._Xlength_error((sbyte*)(&<Module>.??_C@_0BA@JFNIOLAK@string?5too?5long@));
	}

	// Token: 0x06000222 RID: 546 RVA: 0x000110C4 File Offset: 0x000104C4
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* _Get_second(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000223 RID: 547 RVA: 0x00011DC0 File Offset: 0x000111C0
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* _Get_data(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000224 RID: 548 RVA: 0x000110F4 File Offset: 0x000104F4
	internal unsafe static ulong max_size(allocator<char>* A_0)
	{
		return -1L;
	}

	// Token: 0x06000225 RID: 549 RVA: 0x000110D4 File Offset: 0x000104D4
	internal unsafe static allocator<char>* _Get_first(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000226 RID: 550 RVA: 0x00011DD0 File Offset: 0x000111D0
	internal unsafe static allocator<char>* _Getal(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000227 RID: 551 RVA: 0x000111E8 File Offset: 0x000105E8
	internal unsafe static ulong* _Min_value<unsigned\u0020__int64>(ulong* _Left, ulong* _Right)
	{
		return (*_Right < *_Left) ? _Right : _Left;
	}

	// Token: 0x06000228 RID: 552 RVA: 0x0001042C File Offset: 0x0000F82C
	internal static long max()
	{
		return long.MaxValue;
	}

	// Token: 0x06000229 RID: 553 RVA: 0x00011E80 File Offset: 0x00011280
	internal unsafe static ulong max_size(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0)
	{
		return long.MaxValue;
	}

	// Token: 0x0600022A RID: 554 RVA: 0x000110B4 File Offset: 0x000104B4
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* _Get_second(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600022B RID: 555 RVA: 0x00011DB0 File Offset: 0x000111B0
	internal unsafe static _String_val<std::_Simple_types<char>\u0020>* _Get_data(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600022C RID: 556 RVA: 0x00010FEC File Offset: 0x000103EC
	internal unsafe static ulong* _Max_value<unsigned\u0020__int64>(ulong* _Left, ulong* _Right)
	{
		return (*_Left < *_Right) ? _Right : _Left;
	}

	// Token: 0x0600022D RID: 557 RVA: 0x00012094 File Offset: 0x00011494
	internal unsafe static ulong _Calculate_growth(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, ulong _Requested)
	{
		ulong num = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0);
		ulong num2 = _Requested | 15L;
		if (num2 > num)
		{
			return num;
		}
		ulong num3 = *(A_0 + 24L);
		ulong num4 = num3 >> 1;
		if (num3 > num - num4)
		{
			return num;
		}
		ulong num5 = num4 + num3;
		ulong num6 = num5;
		return *(ref num2 < num5 ? ref num6 : ref num2);
	}

	// Token: 0x0600022E RID: 558 RVA: 0x000110E4 File Offset: 0x000104E4
	internal unsafe static allocator<char>* _Get_first(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x0600022F RID: 559 RVA: 0x00011DE0 File Offset: 0x000111E0
	internal unsafe static allocator<char>* _Getal(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000230 RID: 560 RVA: 0x00011380 File Offset: 0x00010780
	internal unsafe static void* _Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(ulong _Bytes)
	{
		ulong num = _Bytes + 39L;
		num = ((num <= _Bytes) ? ulong.MaxValue : num);
		ulong num2 = <Module>.@new(num);
		if (num2 != null)
		{
			void* ptr = (num2 + 39L) & -32L;
			*(ptr - 8L) = num2;
			return ptr;
		}
		<Module>._invalid_parameter_noinfo_noreturn();
		return 0L;
	}

	// Token: 0x06000231 RID: 561 RVA: 0x000109DC File Offset: 0x0000FDDC
	internal unsafe static void* _Allocate(ulong _Bytes)
	{
		return <Module>.@new(_Bytes);
	}

	// Token: 0x06000232 RID: 562 RVA: 0x00011FC0 File Offset: 0x000113C0
	internal unsafe static void* _Allocate<16,struct\u0020std::_Default_allocate_traits,0>(ulong _Bytes)
	{
		if (_Bytes >= 4096L)
		{
			return <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(_Bytes);
		}
		if (_Bytes != null)
		{
			return <Module>.@new(_Bytes);
		}
		return 0L;
	}

	// Token: 0x06000233 RID: 563 RVA: 0x000109CC File Offset: 0x0000FDCC
	internal static ulong _Get_size_of_n<1>(ulong _Count)
	{
		return _Count;
	}

	// Token: 0x06000234 RID: 564 RVA: 0x00012C6C File Offset: 0x0001206C
	internal unsafe static sbyte* allocate(allocator<char>* A_0, ulong _Count)
	{
		void* ptr;
		if (_Count >= 4096L)
		{
			ptr = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(_Count);
		}
		else if (_Count != null)
		{
			ptr = <Module>.@new(_Count);
		}
		else
		{
			ptr = null;
		}
		return ptr;
	}

	// Token: 0x06000235 RID: 565 RVA: 0x0001097C File Offset: 0x0000FD7C
	internal unsafe static void _Orphan_all(_Container_base0* A_0)
	{
	}

	// Token: 0x06000236 RID: 566 RVA: 0x000108E0 File Offset: 0x0000FCE0
	internal unsafe static sbyte* copy(sbyte* _First1, sbyte* _First2, ulong _Count)
	{
		cpblk(_First1, _First2, _Count);
		return _First1;
	}

	// Token: 0x06000237 RID: 567 RVA: 0x00010938 File Offset: 0x0000FD38
	internal unsafe static void assign(sbyte* _Left, sbyte* _Right)
	{
		*_Left = (byte)(*_Right);
	}

	// Token: 0x06000238 RID: 568 RVA: 0x00011220 File Offset: 0x00010620
	internal unsafe static sbyte* _Unfancy<char>(sbyte* _Ptr)
	{
		return _Ptr;
	}

	// Token: 0x06000239 RID: 569 RVA: 0x000109F0 File Offset: 0x0000FDF0
	internal unsafe static void _Adjust_manually_vector_aligned(void** _Ptr, ulong* _Bytes)
	{
		*_Bytes += 39L;
		long num = *_Ptr;
		ulong num2 = *(num - 8L);
		if (num - num2 - 8L <= 31L)
		{
			*_Ptr = num2;
		}
		else
		{
			<Module>._invalid_parameter_noinfo_noreturn();
		}
	}

	// Token: 0x0600023A RID: 570 RVA: 0x00011290 File Offset: 0x00010690
	internal unsafe static void _Deallocate<16,0>(void* _Ptr, ulong _Bytes)
	{
		if (_Bytes >= 4096UL)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref _Ptr, ref _Bytes);
		}
		<Module>.delete(_Ptr, _Bytes);
	}

	// Token: 0x0600023B RID: 571 RVA: 0x00011E98 File Offset: 0x00011298
	internal unsafe static void deallocate(allocator<char>* A_0, sbyte* _Ptr, ulong _Count)
	{
		ulong num = _Count;
		void* ptr = _Ptr;
		if (_Count >= 4096L)
		{
			<Module>.std._Adjust_manually_vector_aligned(ref ptr, ref num);
		}
		<Module>.delete(ptr, num);
	}

	// Token: 0x0600023C RID: 572 RVA: 0x00010234 File Offset: 0x0000F634
	internal unsafe static void* @new(ulong _Size, void* _Where)
	{
		return _Where;
	}

	// Token: 0x0600023D RID: 573 RVA: 0x00011370 File Offset: 0x00010770
	internal unsafe static sbyte** forward<char\u0020*\u0020const\u0020&>(sbyte** _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600023E RID: 574 RVA: 0x00011FAC File Offset: 0x000113AC
	internal unsafe static void construct<char\u0020*,char\u0020*\u0020const\u0020&>(allocator<char>* __unnamed000, sbyte** _Ptr, sbyte** <_Args_0>)
	{
		*_Ptr = *<_Args_0>;
	}

	// Token: 0x0600023F RID: 575 RVA: 0x00011270 File Offset: 0x00010670
	internal unsafe static sbyte** addressof<char\u0020*>(sbyte** _Val)
	{
		return _Val;
	}

	// Token: 0x06000240 RID: 576 RVA: 0x00010A24 File Offset: 0x0000FE24
	internal static ulong _Convert_size<unsigned\u0020__int64>(ulong _Len)
	{
		return _Len;
	}

	// Token: 0x06000241 RID: 577 RVA: 0x00011098 File Offset: 0x00010498
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool _Large_string_engaged(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
		return (8L <= *(A_0 + 24L)) ? 1 : 0;
	}

	// Token: 0x06000242 RID: 578 RVA: 0x00011230 File Offset: 0x00010630
	internal unsafe static char* _Unfancy<wchar_t>(char* _Ptr)
	{
		return _Ptr;
	}

	// Token: 0x06000243 RID: 579 RVA: 0x00011D1C File Offset: 0x0001111C
	internal unsafe static char* _Myptr(_String_val<std::_Simple_types<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x06000244 RID: 580 RVA: 0x00011078 File Offset: 0x00010478
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* _Get_second(_Compressed_pair<std::allocator<wchar_t>,std::_String_val<std::_Simple_types<wchar_t>\u0020>,1>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000245 RID: 581 RVA: 0x00011D40 File Offset: 0x00011140
	internal unsafe static _String_val<std::_Simple_types<wchar_t>\u0020>* _Get_data(_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t>\u0020>\u0020>* A_0)
	{
		return A_0;
	}

	// Token: 0x06000246 RID: 582 RVA: 0x00012AF0 File Offset: 0x00011EF0
	internal unsafe static char* c_str(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* A_0)
	{
		char* ptr = A_0;
		if (((8L <= *(A_0 + 24L)) ? 1 : 0) != 0)
		{
			ptr = *A_0;
		}
		return ptr;
	}

	// Token: 0x06000247 RID: 583 RVA: 0x00019AF0 File Offset: 0x00018EF0
	internal unsafe static exception* {ctor}(exception* A_0, exception* _Other)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		exception* ptr = A_0 + 8L;
		initblk(ptr, 0, 16L);
		<Module>.__std_exception_copy(_Other / sizeof(__std_exception_data) + 8L, ptr);
		return A_0;
	}

	// Token: 0x06000248 RID: 584 RVA: 0x00019B1C File Offset: 0x00018F1C
	internal unsafe static void {dtor}(exception* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000249 RID: 585 RVA: 0x0001A5F4 File Offset: 0x000199F4
	internal unsafe static sbyte* what(exception* A_0)
	{
		ulong num = (ulong)(*(A_0 + 8L));
		return num != 0UL ? num : ref <Module>.??_C@_0BC@EOODALEL@Unknown?5exception@;
	}

	// Token: 0x0600024A RID: 586 RVA: 0x0001A594 File Offset: 0x00019994
	internal unsafe static void* __vecDelDtor(exception* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			exception* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 24UL, (ulong)(*ptr), ldftn(std.exception.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				exception* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 24L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 24UL);
		}
		return A_0;
	}

	// Token: 0x0600024B RID: 587 RVA: 0x00019B3C File Offset: 0x00018F3C
	internal unsafe static void {dtor}(exception_ptr* A_0)
	{
		<Module>.__ExceptionPtrDestroy(A_0);
	}

	// Token: 0x0600024C RID: 588 RVA: 0x00019B50 File Offset: 0x00018F50
	internal unsafe static exception_ptr* {ctor}(exception_ptr* A_0, exception_ptr* _Rhs)
	{
		<Module>.__ExceptionPtrCopy(A_0, _Rhs);
		return A_0;
	}

	// Token: 0x0600024D RID: 589 RVA: 0x00019B90 File Offset: 0x00018F90
	internal unsafe static _Container_base12* {ctor}(_Container_base12* A_0, _Container_base12* A_0)
	{
		*A_0 = 0L;
		return A_0;
	}

	// Token: 0x0600024E RID: 590 RVA: 0x0001A288 File Offset: 0x00019688
	internal unsafe static _Iterator_base12* {ctor}(_Iterator_base12* A_0, _Iterator_base12* _Right)
	{
		*A_0 = 0L;
		*(A_0 + 8L) = 0L;
		ulong num = (ulong)(*_Right);
		if (0UL != num)
		{
			_Container_base12* ptr = *num;
			if (ptr != null)
			{
				*A_0 = *(long*)ptr;
			}
		}
		return A_0;
	}

	// Token: 0x0600024F RID: 591 RVA: 0x0001A010 File Offset: 0x00019410
	internal unsafe static _Iterator_base12* =(_Iterator_base12* A_0, _Iterator_base12* _Right)
	{
		ulong num = (ulong)(*_Right);
		if (*A_0 != (long)num && num != 0UL)
		{
			_Container_base12* ptr = *num;
			if (ptr != null)
			{
				*A_0 = *(long*)ptr;
			}
		}
		return A_0;
	}

	// Token: 0x06000250 RID: 592 RVA: 0x00019BA4 File Offset: 0x00018FA4
	internal unsafe static void _Adopt(_Iterator_base12* A_0, _Container_base12* _Parent)
	{
		if (_Parent != null)
		{
			*A_0 = *(long*)_Parent;
		}
	}

	// Token: 0x06000251 RID: 593 RVA: 0x0001A614 File Offset: 0x00019A14
	internal unsafe static void* __vecDelDtor(runtime_error* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			runtime_error* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 24UL, (ulong)(*ptr), ldftn(std.runtime_error.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				runtime_error* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 24L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 24UL);
		}
		return A_0;
	}

	// Token: 0x06000252 RID: 594 RVA: 0x00019BB8 File Offset: 0x00018FB8
	internal unsafe static void {dtor}(runtime_error* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000253 RID: 595 RVA: 0x0001A6D4 File Offset: 0x00019AD4
	internal unsafe static void* __vecDelDtor(bad_cast* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			bad_cast* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 24UL, (ulong)(*ptr), ldftn(std.bad_cast.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				bad_cast* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 24L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 24UL);
		}
		return A_0;
	}

	// Token: 0x06000254 RID: 596 RVA: 0x0001A734 File Offset: 0x00019B34
	internal unsafe static void {dtor}(bad_cast* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000255 RID: 597 RVA: 0x00019BD8 File Offset: 0x00018FD8
	internal unsafe static runtime_error* {ctor}(runtime_error* A_0, runtime_error* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		runtime_error* ptr = A_0 + 8L;
		initblk(ptr, 0, 16L);
		<Module>.__std_exception_copy(A_0 / sizeof(__std_exception_data) + 8L, ptr);
		try
		{
			*A_0 = ref <Module>.??_7runtime_error@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.exception.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000256 RID: 598 RVA: 0x00019C38 File Offset: 0x00019038
	internal unsafe static locale* {ctor}(locale* A_0, locale* _Right)
	{
		long num = *(_Right + 8L);
		*(A_0 + 8L) = num;
		long num2 = num;
		calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), (IntPtr)num2, *(*num2 + 8L));
		return A_0;
	}

	// Token: 0x06000257 RID: 599 RVA: 0x0001A674 File Offset: 0x00019A74
	internal unsafe static void* __vecDelDtor(_System_error* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			_System_error* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 40UL, (ulong)(*ptr), ldftn(std._System_error.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				_System_error* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 40L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 40UL);
		}
		return A_0;
	}

	// Token: 0x06000258 RID: 600 RVA: 0x00019C60 File Offset: 0x00019060
	internal unsafe static void {dtor}(_System_error* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x06000259 RID: 601 RVA: 0x0001A754 File Offset: 0x00019B54
	internal unsafe static void* __vecDelDtor(system_error* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			system_error* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 40UL, (ulong)(*ptr), ldftn(std.system_error.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				system_error* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 40L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 40UL);
		}
		return A_0;
	}

	// Token: 0x0600025A RID: 602 RVA: 0x00019C80 File Offset: 0x00019080
	internal unsafe static void {dtor}(system_error* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x0600025B RID: 603 RVA: 0x0001A7B4 File Offset: 0x00019BB4
	internal unsafe static void* __vecDelDtor(ios_base.failure* A_0, uint A_0)
	{
		if ((A_0 & 2U) != 0U)
		{
			ios_base.failure* ptr = A_0 - 8L;
			<Module>.__ehvec_dtor(A_0, 40UL, (ulong)(*ptr), ldftn(std.ios_base.failure.{dtor}));
			if ((A_0 & 1U) != 0U)
			{
				ios_base.failure* ptr2 = ptr;
				<Module>.delete[](ptr2, (ulong)(*ptr2 * 40L + 8L));
			}
			return ptr;
		}
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
		if ((A_0 & 1U) != 0U)
		{
			<Module>.delete(A_0, 40UL);
		}
		return A_0;
	}

	// Token: 0x0600025C RID: 604 RVA: 0x0001A814 File Offset: 0x00019C14
	internal unsafe static void {dtor}(ios_base.failure* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		<Module>.__std_exception_destroy(A_0 / sizeof(__std_exception_data) + 8L);
	}

	// Token: 0x0600025D RID: 605 RVA: 0x0001A2B4 File Offset: 0x000196B4
	internal unsafe static ios_base.failure* {ctor}(ios_base.failure* A_0, ios_base.failure* A_0)
	{
		<Module>.std._System_error.{ctor}(A_0, A_0);
		try
		{
			*A_0 = ref <Module>.??_7system_error@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._System_error.{dtor}), A_0);
			throw;
		}
		try
		{
			*A_0 = ref <Module>.??_7failure@ios_base@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.system_error.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600025E RID: 606 RVA: 0x0001A034 File Offset: 0x00019434
	internal unsafe static system_error* {ctor}(system_error* A_0, system_error* A_0)
	{
		<Module>.std._System_error.{ctor}(A_0, A_0);
		try
		{
			*A_0 = ref <Module>.??_7system_error@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._System_error.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600025F RID: 607 RVA: 0x00019CA0 File Offset: 0x000190A0
	internal unsafe static _System_error* {ctor}(_System_error* A_0, _System_error* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		_System_error* ptr = A_0 + 8L;
		initblk(ptr, 0, 16L);
		<Module>.__std_exception_copy(A_0 / sizeof(__std_exception_data) + 8L, ptr);
		try
		{
			*A_0 = ref <Module>.??_7runtime_error@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.exception.{dtor}), A_0);
			throw;
		}
		try
		{
			*A_0 = ref <Module>.??_7_System_error@std@@6B@;
			cpblk(A_0 + 24L, A_0 + 24L, 16);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.runtime_error.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000260 RID: 608 RVA: 0x00019D3C File Offset: 0x0001913C
	internal static ref char PtrToStringChars(string s)
	{
		ref byte ptr = s;
		if ((ref ptr) != null)
		{
			ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
		}
		return ref ptr;
	}

	// Token: 0x06000261 RID: 609 RVA: 0x00019D58 File Offset: 0x00019158
	internal static ulong GetAnsiStringSize(string _str)
	{
		ref byte ptr = _str;
		if ((ref ptr) != null)
		{
			ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
		}
		ref char char_u0020modopt(IsConst)& = ref ptr;
		ulong num = (ulong)<Module>.WideCharToMultiByte(3U, 1024, ref char_u0020modopt(IsConst)&, _str.Length, null, 0, null, null);
		if (num == 0UL && _str.Length != 0)
		{
			throw new ArgumentException("Conversion from WideChar to MultiByte failed.  Please check the content of the string and/or locale settings.");
		}
		return num + 1UL;
	}

	// Token: 0x06000262 RID: 610 RVA: 0x00019DAC File Offset: 0x000191AC
	internal unsafe static void WriteAnsiString(sbyte* _buf, ulong _size, string _str)
	{
		ref byte ptr = _str;
		if ((ref ptr) != null)
		{
			ptr = (ulong)RuntimeHelpers.OffsetToStringData + (ref ptr);
		}
		ref char char_u0020modopt(IsConst)& = ref ptr;
		if (_size > 2147483647UL)
		{
			throw new ArgumentOutOfRangeException("Size of string exceeds INT_MAX.");
		}
		ulong num = (ulong)<Module>.WideCharToMultiByte(3U, 1024, ref char_u0020modopt(IsConst)&, _str.Length, _buf, (int)_size, null, null);
		if (num < _size && (num != 0UL || _size == 1UL))
		{
			*(byte*)(num / (ulong)sizeof(sbyte) + _buf) = 0;
			return;
		}
		throw new ArgumentException("Conversion from WideChar to MultiByte failed.  Please check the content of the string and/or locale settings.");
	}

	// Token: 0x06000263 RID: 611 RVA: 0x00019F40 File Offset: 0x00019340
	internal unsafe static sbyte* release(char_buffer<char>* A_0)
	{
		sbyte* ptr = *A_0;
		*A_0 = 0L;
		return ptr;
	}

	// Token: 0x06000264 RID: 612 RVA: 0x00019F54 File Offset: 0x00019354
	internal unsafe static sbyte* get(char_buffer<char>* A_0)
	{
		return *A_0;
	}

	// Token: 0x06000265 RID: 613 RVA: 0x00019F64 File Offset: 0x00019364
	internal unsafe static void {dtor}(char_buffer<char>* A_0)
	{
		<Module>.delete[](*A_0);
	}

	// Token: 0x06000266 RID: 614 RVA: 0x00019F78 File Offset: 0x00019378
	internal unsafe static char_buffer<char>* {ctor}(char_buffer<char>* A_0, ulong _size)
	{
		*A_0 = <Module>.new[](_size);
		return A_0;
	}

	// Token: 0x06000267 RID: 615 RVA: 0x0001A464 File Offset: 0x00019864
	internal unsafe static basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* {ctor}(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		try
		{
			<Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>._Construct_lv_contents(A_0, _Right);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x06000268 RID: 616 RVA: 0x00019F90 File Offset: 0x00019390
	internal unsafe static allocator<char>* select_on_container_copy_construction(allocator<char>* A_0, allocator<char>* _Al)
	{
		return A_0;
	}

	// Token: 0x06000269 RID: 617 RVA: 0x0001A3B0 File Offset: 0x000197B0
	internal unsafe static void _Construct_lv_contents(basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* A_0, basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>* _Right)
	{
		ulong num = *(_Right + 16L);
		sbyte* ptr = _Right;
		if (((16L <= *(_Right + 24L)) ? 1 : 0) != 0)
		{
			ptr = *_Right;
		}
		if (num < 16L)
		{
			cpblk(A_0, ptr, 16L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = 15L;
		}
		else
		{
			ulong num2 = <Module>.std.basic_string<char,std::char_traits<char>,std::allocator<char>\u0020>.max_size(A_0);
			ulong num3 = num | 15L;
			ulong num4 = num3;
			ulong num5 = *(ref num2 < num3 ? ref num2 : ref num4);
			ulong num6 = num5 + 1L;
			void* ptr2;
			if (num6 >= 4096L)
			{
				ptr2 = <Module>.std._Allocate_manually_vector_aligned<struct\u0020std::_Default_allocate_traits>(num6);
			}
			else if (num6 != null)
			{
				ptr2 = <Module>.@new(num6);
			}
			else
			{
				ptr2 = null;
			}
			*A_0 = ptr2;
			cpblk(ptr2, ptr, num + 1L);
			*(A_0 + 16L) = num;
			*(A_0 + 24L) = num5;
		}
	}

	// Token: 0x0600026A RID: 618 RVA: 0x0001A364 File Offset: 0x00019764
	internal unsafe static _String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* {ctor}<class\u0020std::allocator<char>,void>(_String_alloc<std::_String_base_types<char,std::allocator<char>\u0020>\u0020>* A_0, allocator<char>* _Al)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600026B RID: 619 RVA: 0x00019FA0 File Offset: 0x000193A0
	internal unsafe static bad_cast* {ctor}(bad_cast* A_0, bad_cast* A_0)
	{
		*A_0 = ref <Module>.??_7exception@std@@6B@;
		bad_cast* ptr = A_0 + 8L;
		initblk(ptr, 0, 16L);
		<Module>.__std_exception_copy(A_0 / sizeof(__std_exception_data) + 8L, ptr);
		try
		{
			*A_0 = ref <Module>.??_7bad_cast@std@@6B@;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std.exception.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600026C RID: 620 RVA: 0x0001A000 File Offset: 0x00019400
	internal unsafe static allocator<char>* forward<class\u0020std::allocator<char>\u0020>(allocator<char>* _Arg)
	{
		return _Arg;
	}

	// Token: 0x0600026D RID: 621 RVA: 0x0001A23C File Offset: 0x0001963C
	internal unsafe static _Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* {ctor}<class\u0020std::allocator<char>\u0020>(_Compressed_pair<std::allocator<char>,std::_String_val<std::_Simple_types<char>\u0020>,1>* A_0, _One_then_variadic_args_t __unnamed000, allocator<char>* _Val1)
	{
		try
		{
			*(A_0 + 16L) = 0L;
			*(A_0 + 24L) = 0L;
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(std._String_val<std::_Simple_types<char>\u0020>._Bxty.{dtor}), A_0);
			throw;
		}
		return A_0;
	}

	// Token: 0x0600026E RID: 622 RVA: 0x0001C850 File Offset: 0x0001BC50
	internal static void <CrtImplementationDetails>.ThrowNestedModuleLoadException(Exception innerException, Exception nestedException)
	{
		throw new ModuleLoadExceptionHandlerException("A nested exception occurred after the primary exception that caused the C++ module to fail to load.\n", innerException, nestedException);
	}

	// Token: 0x0600026F RID: 623 RVA: 0x0001C1FC File Offset: 0x0001B5FC
	internal static void <CrtImplementationDetails>.ThrowModuleLoadException(string errorMessage)
	{
		throw new ModuleLoadException(errorMessage);
	}

	// Token: 0x06000270 RID: 624 RVA: 0x0001C210 File Offset: 0x0001B610
	internal static void <CrtImplementationDetails>.ThrowModuleLoadException(string errorMessage, Exception innerException)
	{
		throw new ModuleLoadException(errorMessage, innerException);
	}

	// Token: 0x06000271 RID: 625 RVA: 0x0001C32C File Offset: 0x0001B72C
	internal static void <CrtImplementationDetails>.RegisterModuleUninitializer(EventHandler handler)
	{
		ModuleUninitializer._ModuleUninitializer.AddHandler(handler);
	}

	// Token: 0x06000272 RID: 626 RVA: 0x0001C344 File Offset: 0x0001B744
	[SecuritySafeCritical]
	internal unsafe static Guid <CrtImplementationDetails>.FromGUID(_GUID* guid)
	{
		Guid guid2 = new Guid((uint)(*guid), *(guid + 4L), *(guid + 6L), *(guid + 8L), *(guid + 9L), *(guid + 10L), *(guid + 11L), *(guid + 12L), *(guid + 13L), *(guid + 14L), *(guid + 15L));
		return guid2;
	}

	// Token: 0x06000273 RID: 627 RVA: 0x0001C394 File Offset: 0x0001B794
	[SecurityCritical]
	internal unsafe static int __get_default_appdomain(IUnknown** ppUnk)
	{
		ICorRuntimeHost* ptr = null;
		int num;
		try
		{
			Guid guid = <Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e);
			ptr = (ICorRuntimeHost*)RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(<Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e), guid).ToPointer();
			goto IL_36;
		}
		catch (Exception ex)
		{
			num = Marshal.GetHRForException(ex);
		}
		if (num < 0)
		{
			return num;
		}
		IL_36:
		long num2 = *(*(long*)ptr + 104L);
		num = calli(System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,IUnknown**), ptr, ppUnk, num2);
		ICorRuntimeHost* ptr2 = ptr;
		uint num3 = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr2, *(*(long*)ptr2 + 16L));
		return num;
	}

	// Token: 0x06000274 RID: 628 RVA: 0x0001C414 File Offset: 0x0001B814
	internal unsafe static void __release_appdomain(IUnknown* ppUnk)
	{
		uint num = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ppUnk, *(*(long*)ppUnk + 16L));
	}

	// Token: 0x06000275 RID: 629 RVA: 0x0001C430 File Offset: 0x0001B830
	[SecurityCritical]
	internal unsafe static AppDomain <CrtImplementationDetails>.GetDefaultDomain()
	{
		IUnknown* ptr = null;
		int num = <Module>.__get_default_appdomain(&ptr);
		if (num >= 0)
		{
			try
			{
				IntPtr intPtr = new IntPtr((void*)ptr);
				return (AppDomain)Marshal.GetObjectForIUnknown(intPtr);
			}
			finally
			{
				<Module>.__release_appdomain(ptr);
			}
		}
		Marshal.ThrowExceptionForHR(num);
		return null;
	}

	// Token: 0x06000276 RID: 630 RVA: 0x0001C490 File Offset: 0x0001B890
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.DoCallBackInDefaultDomain(method function, void* cookie)
	{
		Guid guid = <Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02);
		ICLRRuntimeHost* ptr = (ICLRRuntimeHost*)RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(<Module>.<CrtImplementationDetails>.FromGUID(ref <Module>._GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02), guid).ToPointer();
		try
		{
			AppDomain appDomain = <Module>.<CrtImplementationDetails>.GetDefaultDomain();
			long num = *(*(long*)ptr + 64L);
			int num2 = calli(System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr,System.UInt32 modopt(System.Runtime.CompilerServices.IsLong),System.Int32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl) (System.Void*),System.Void*), ptr, appDomain.Id, function, cookie, num);
			if (num2 < 0)
			{
				Marshal.ThrowExceptionForHR(num2);
			}
		}
		finally
		{
			ICLRRuntimeHost* ptr2 = ptr;
			uint num3 = calli(System.UInt32 modopt(System.Runtime.CompilerServices.IsLong) modopt(System.Runtime.CompilerServices.CallConvCdecl)(System.IntPtr), ptr2, *(*(long*)ptr2 + 16L));
		}
	}

	// Token: 0x06000277 RID: 631 RVA: 0x0001C548 File Offset: 0x0001B948
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __scrt_is_safe_for_managed_code()
	{
		return (<Module>.__scrt_native_dllmain_reason <= 1U) ? 0 : 1;
	}

	// Token: 0x06000278 RID: 632 RVA: 0x0001C580 File Offset: 0x0001B980
	[SecuritySafeCritical]
	internal unsafe static int <CrtImplementationDetails>.DefaultDomain.DoNothing(void* cookie)
	{
		GC.KeepAlive(int.MaxValue);
		return 0;
	}

	// Token: 0x06000279 RID: 633 RVA: 0x0001C5A0 File Offset: 0x0001B9A0
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool <CrtImplementationDetails>.DefaultDomain.HasPerProcess()
	{
		if (<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)2)
		{
			void** ptr = (void**)(&<Module>.__xc_mp_a);
			if ((ref <Module>.__xc_mp_a) < (ref <Module>.__xc_mp_z))
			{
				while (*(long*)ptr == 0L)
				{
					ptr += 8L / (long)sizeof(void*);
					if (ptr >= (void**)(&<Module>.__xc_mp_z))
					{
						goto IL_35;
					}
				}
				<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_35:
			<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)0;
			return 0;
		}
		return (<Module>.?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)(-1)) ? 1 : 0;
	}

	// Token: 0x0600027A RID: 634 RVA: 0x0001C5F4 File Offset: 0x0001B9F4
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal unsafe static bool <CrtImplementationDetails>.DefaultDomain.HasNative()
	{
		if (<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)2)
		{
			void** ptr = (void**)(&<Module>.__xi_a);
			if ((ref <Module>.__xi_a) < (ref <Module>.__xi_z))
			{
				while (*(long*)ptr == 0L)
				{
					ptr += 8L / (long)sizeof(void*);
					if (ptr >= (void**)(&<Module>.__xi_z))
					{
						goto IL_35;
					}
				}
				<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_35:
			void** ptr2 = (void**)(&<Module>.__xc_a);
			if ((ref <Module>.__xc_a) < (ref <Module>.__xc_z))
			{
				while (*(long*)ptr2 == 0L)
				{
					ptr2 += 8L / (long)sizeof(void*);
					if (ptr2 >= (void**)(&<Module>.__xc_z))
					{
						goto IL_62;
					}
				}
				<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)(-1);
				return 1;
			}
			IL_62:
			<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A = (TriBool)0;
			return 0;
		}
		return (<Module>.?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A == (TriBool)(-1)) ? 1 : 0;
	}

	// Token: 0x0600027B RID: 635 RVA: 0x0001C674 File Offset: 0x0001BA74
	[SecuritySafeCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.DefaultDomain.NeedsInitialization()
	{
		int num;
		if ((<Module>.<CrtImplementationDetails>.DefaultDomain.HasPerProcess() != null && !<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA) || (<Module>.<CrtImplementationDetails>.DefaultDomain.HasNative() != null && !<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA && <Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)0))
		{
			num = 1;
		}
		else
		{
			num = 0;
		}
		return (byte)num;
	}

	// Token: 0x0600027C RID: 636 RVA: 0x0001C6AC File Offset: 0x0001BAAC
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.DefaultDomain.NeedsUninitialization()
	{
		return <Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;
	}

	// Token: 0x0600027D RID: 637 RVA: 0x0001C6C0 File Offset: 0x0001BAC0
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.DefaultDomain.Initialize()
	{
		<Module>.<CrtImplementationDetails>.DoCallBackInDefaultDomain(<Module>.__unep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z, null);
	}

	// Token: 0x0600027E RID: 638 RVA: 0x000010F8 File Offset: 0x000004F8
	internal static void ??__E?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA@@YMXXZ()
	{
		<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 0;
	}

	// Token: 0x0600027F RID: 639 RVA: 0x0000110C File Offset: 0x0000050C
	internal static void ??__E?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA@@YMXXZ()
	{
		<Module>.?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 0;
	}

	// Token: 0x06000280 RID: 640 RVA: 0x00001120 File Offset: 0x00000520
	internal static void ??__E?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA@@YMXXZ()
	{
		<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA = false;
	}

	// Token: 0x06000281 RID: 641 RVA: 0x00001134 File Offset: 0x00000534
	internal static void ??__E?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x06000282 RID: 642 RVA: 0x00001148 File Offset: 0x00000548
	internal static void ??__E?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x06000283 RID: 643 RVA: 0x0000115C File Offset: 0x0000055C
	internal static void ??__E?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x06000284 RID: 644 RVA: 0x00001170 File Offset: 0x00000570
	internal static void ??__E?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A@@YMXXZ()
	{
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)0;
	}

	// Token: 0x06000285 RID: 645 RVA: 0x0001C8A4 File Offset: 0x0001BCA4
	[SecuritySafeCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeVtables(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during vtable initialization.\n");
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initterm_m((method*)(&<Module>.__xi_vt_a), (method*)(&<Module>.__xi_vt_z));
		<Module>.?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
	}

	// Token: 0x06000286 RID: 646 RVA: 0x0001C8D8 File Offset: 0x0001BCD8
	[SecuritySafeCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeDefaultAppDomain(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load while attempting to initialize the default appdomain.\n");
		<Module>.<CrtImplementationDetails>.DefaultDomain.Initialize();
	}

	// Token: 0x06000287 RID: 647 RVA: 0x0001C8F8 File Offset: 0x0001BCF8
	[DebuggerStepThrough]
	[SecuritySafeCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeNative(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during native initialization.\n");
		<Module>.__security_init_cookie();
		<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
		if (<Module>.__scrt_is_safe_for_managed_code() == null)
		{
			<Module>.abort();
		}
		if (<Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)1)
		{
			<Module>.abort();
		}
		if (<Module>.__scrt_current_native_startup_state == (__scrt_native_startup_state)0)
		{
			<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)1;
			if (<Module>._initterm_e((method*)(&<Module>.__xi_a), (method*)(&<Module>.__xi_z)) != 0)
			{
				<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0));
			}
			<Module>._initterm((method*)(&<Module>.__xc_a), (method*)(&<Module>.__xc_z));
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)2;
			<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
			<Module>.?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
		}
	}

	// Token: 0x06000288 RID: 648 RVA: 0x0001C988 File Offset: 0x0001BD88
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializePerProcess(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during process initialization.\n");
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initatexit_m();
		<Module>._initterm_m((method*)(&<Module>.__xc_mp_a), (method*)(&<Module>.__xc_mp_z));
		<Module>.?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
		<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA = true;
	}

	// Token: 0x06000289 RID: 649 RVA: 0x0001C9C8 File Offset: 0x0001BDC8
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializePerAppDomain(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during appdomain initialization.\n");
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)1;
		<Module>._initatexit_app_domain();
		<Module>._initterm_m((method*)(&<Module>.__xc_ma_a), (method*)(&<Module>.__xc_ma_z));
		<Module>.?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A = (Progress)2;
	}

	// Token: 0x0600028A RID: 650 RVA: 0x0001CA04 File Offset: 0x0001BE04
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.InitializeUninitializer(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load during registration for the unload events.\n");
		<Module>.<CrtImplementationDetails>.RegisterModuleUninitializer(new EventHandler(<Module>.<CrtImplementationDetails>.LanguageSupport.DomainUnload));
	}

	// Token: 0x0600028B RID: 651 RVA: 0x0001CA30 File Offset: 0x0001BE30
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport._Initialize(LanguageSupport* A_0)
	{
		<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA = AppDomain.CurrentDomain.IsDefaultAppDomain();
		<Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA = <Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA || <Module>.?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;
		void* ptr = <Module>._getFiberPtrId();
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		RuntimeHelpers.PrepareConstrainedRegions();
		try
		{
			while (num2 == 0)
			{
				try
				{
				}
				finally
				{
					void* ptr2 = Interlocked.CompareExchange(ref <Module>.__scrt_native_startup_lock, ptr, 0L);
					if (ptr2 == null)
					{
						num2 = 1;
					}
					else if (ptr2 == ptr)
					{
						num = 1;
						num2 = 1;
					}
				}
				if (num2 == 0)
				{
					<Module>.Sleep(1000);
				}
			}
			<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeVtables(A_0);
			if (<Module>.?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeNative(A_0);
				<Module>.<CrtImplementationDetails>.LanguageSupport.InitializePerProcess(A_0);
			}
			else
			{
				num3 = ((<Module>.<CrtImplementationDetails>.DefaultDomain.NeedsInitialization() != 0) ? 1 : num3);
			}
		}
		finally
		{
			if (num == 0)
			{
				Interlocked.Exchange(ref <Module>.__scrt_native_startup_lock, 0L);
			}
		}
		if (num3 != 0)
		{
			<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeDefaultAppDomain(A_0);
		}
		<Module>.<CrtImplementationDetails>.LanguageSupport.InitializePerAppDomain(A_0);
		<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA = 1;
		<Module>.<CrtImplementationDetails>.LanguageSupport.InitializeUninitializer(A_0);
	}

	// Token: 0x0600028C RID: 652 RVA: 0x0001C6DC File Offset: 0x0001BADC
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain()
	{
		<Module>._app_exit_callback();
	}

	// Token: 0x0600028D RID: 653 RVA: 0x0001C6F0 File Offset: 0x0001BAF0
	[SecurityCritical]
	internal unsafe static int <CrtImplementationDetails>.LanguageSupport._UninitializeDefaultDomain(void* cookie)
	{
		<Module>._exit_callback();
		<Module>.?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		if (<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA)
		{
			<Module>._cexit();
			<Module>.__scrt_current_native_startup_state = (__scrt_native_startup_state)0;
			<Module>.?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		}
		<Module>.?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA = false;
		return 0;
	}

	// Token: 0x0600028E RID: 654 RVA: 0x0001C728 File Offset: 0x0001BB28
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain()
	{
		if (<Module>.<CrtImplementationDetails>.DefaultDomain.NeedsUninitialization() != null)
		{
			if (AppDomain.CurrentDomain.IsDefaultAppDomain())
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport._UninitializeDefaultDomain(null);
			}
			else
			{
				<Module>.<CrtImplementationDetails>.DoCallBackInDefaultDomain(<Module>.__unep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z, null);
			}
		}
	}

	// Token: 0x0600028F RID: 655 RVA: 0x0001C760 File Offset: 0x0001BB60
	[SecurityCritical]
	[PrePrepareMethod]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	internal static void <CrtImplementationDetails>.LanguageSupport.DomainUnload(object A_0, EventArgs A_1)
	{
		if (<Module>.?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA != 0 && Interlocked.Exchange(ref <Module>.?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA, 1) == 0)
		{
			byte b = ((Interlocked.Decrement(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA) == 0) ? 1 : 0);
			<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain();
			if (b != 0)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain();
			}
		}
	}

	// Token: 0x06000290 RID: 656 RVA: 0x0001CB34 File Offset: 0x0001BF34
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.Cleanup(LanguageSupport* A_0, Exception innerException)
	{
		try
		{
			bool flag = ((Interlocked.Decrement(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA) == 0) ? 1 : 0) != 0;
			<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeAppDomain();
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.UninitializeDefaultDomain();
			}
		}
		catch (Exception ex)
		{
			<Module>.<CrtImplementationDetails>.ThrowNestedModuleLoadException(innerException, ex);
		}
		catch (object obj)
		{
			<Module>.<CrtImplementationDetails>.ThrowNestedModuleLoadException(innerException, null);
		}
	}

	// Token: 0x06000291 RID: 657 RVA: 0x0001CBA8 File Offset: 0x0001BFA8
	[SecurityCritical]
	internal unsafe static LanguageSupport* <CrtImplementationDetails>.LanguageSupport.{ctor}(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.{ctor}(A_0);
		return A_0;
	}

	// Token: 0x06000292 RID: 658 RVA: 0x0001CBC0 File Offset: 0x0001BFC0
	[SecurityCritical]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.{dtor}(LanguageSupport* A_0)
	{
		<Module>.gcroot<System::String\u0020^>.{dtor}(A_0);
	}

	// Token: 0x06000293 RID: 659 RVA: 0x0001CBD4 File Offset: 0x0001BFD4
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static void <CrtImplementationDetails>.LanguageSupport.Initialize(LanguageSupport* A_0)
	{
		bool flag = false;
		RuntimeHelpers.PrepareConstrainedRegions();
		try
		{
			<Module>.gcroot<System::String\u0020^>.=(A_0, "The C++ module failed to load.\n");
			RuntimeHelpers.PrepareConstrainedRegions();
			try
			{
			}
			finally
			{
				Interlocked.Increment(ref <Module>.?Count@AllDomains@<CrtImplementationDetails>@@2HA);
				flag = true;
			}
			<Module>.<CrtImplementationDetails>.LanguageSupport._Initialize(A_0);
		}
		catch (Exception ex)
		{
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.Cleanup(A_0, ex);
			}
			<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0), ex);
		}
		catch (object obj)
		{
			if (flag)
			{
				<Module>.<CrtImplementationDetails>.LanguageSupport.Cleanup(A_0, null);
			}
			<Module>.<CrtImplementationDetails>.ThrowModuleLoadException(<Module>.gcroot<System::String\u0020^>..PE$AAVString@System@@(A_0), null);
		}
	}

	// Token: 0x06000294 RID: 660 RVA: 0x0001CC90 File Offset: 0x0001C090
	[DebuggerStepThrough]
	[SecurityCritical]
	static unsafe <Module>()
	{
		LanguageSupport languageSupport;
		<Module>.<CrtImplementationDetails>.LanguageSupport.{ctor}(ref languageSupport);
		try
		{
			<Module>.<CrtImplementationDetails>.LanguageSupport.Initialize(ref languageSupport);
		}
		catch
		{
			<Module>.___CxxCallUnwindDtor(ldftn(<CrtImplementationDetails>.LanguageSupport.{dtor}), (void*)(&languageSupport));
			throw;
		}
		<Module>.<CrtImplementationDetails>.LanguageSupport.{dtor}(ref languageSupport);
	}

	// Token: 0x06000295 RID: 661 RVA: 0x0001C79C File Offset: 0x0001BB9C
	[SecuritySafeCritical]
	internal unsafe static string PE$AAVString@System@@(gcroot<System::String\u0020^>* A_0)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		return ((GCHandle)intPtr).Target;
	}

	// Token: 0x06000296 RID: 662 RVA: 0x0001C7C0 File Offset: 0x0001BBC0
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static gcroot<System::String\u0020^>* =(gcroot<System::String\u0020^>* A_0, string t)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		((GCHandle)intPtr).Target = t;
		return A_0;
	}

	// Token: 0x06000297 RID: 663 RVA: 0x0001C7E8 File Offset: 0x0001BBE8
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static void {dtor}(gcroot<System::String\u0020^>* A_0)
	{
		IntPtr intPtr = new IntPtr(*A_0);
		((GCHandle)intPtr).Free();
		*A_0 = 0L;
	}

	// Token: 0x06000298 RID: 664 RVA: 0x0001C810 File Offset: 0x0001BC10
	[DebuggerStepThrough]
	[SecuritySafeCritical]
	internal unsafe static gcroot<System::String\u0020^>* {ctor}(gcroot<System::String\u0020^>* A_0)
	{
		*A_0 = ((IntPtr)GCHandle.Alloc(null)).ToPointer();
		return A_0;
	}

	// Token: 0x06000299 RID: 665 RVA: 0x0001CD04 File Offset: 0x0001C104
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[HandleProcessCorruptedStateExceptions]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void ___CxxCallUnwindDtor(method pDtor, void* pThis)
	{
		try
		{
			calli(System.Void(System.Void*), pThis, pDtor);
		}
		catch when (endfilter(<Module>.__FrameUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x0600029A RID: 666 RVA: 0x0001CD48 File Offset: 0x0001C148
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[HandleProcessCorruptedStateExceptions]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void ___CxxCallUnwindDelDtor(method pDtor, void* pThis)
	{
		try
		{
			calli(System.Void(System.Void*), pThis, pDtor);
		}
		catch when (endfilter(<Module>.__FrameUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x0600029B RID: 667 RVA: 0x0001CD8C File Offset: 0x0001C18C
	[HandleProcessCorruptedStateExceptions]
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void ___CxxCallUnwindVecDtor(method pVecDtor, void* ptr, ulong size, int count, method pDtor)
	{
		try
		{
			calli(System.Void(System.Void*,System.UInt64,System.Int32,System.Void (System.Void*)), ptr, size, count, pDtor, pVecDtor);
		}
		catch when (endfilter(<Module>.__FrameUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x0600029C RID: 668 RVA: 0x0001CE4C File Offset: 0x0001C24C
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityCritical]
	[HandleProcessCorruptedStateExceptions]
	internal unsafe static void __ehvec_dtor(void* ptr, ulong size, ulong count, method destructor)
	{
		bool flag = false;
		ptr = (void*)(size * count + (byte*)ptr);
		try
		{
			for (;;)
			{
				long num = (long)count;
				count -= 1UL;
				if (num == 0L)
				{
					break;
				}
				ptr = (void*)((byte*)ptr - size);
				calli(System.Void(System.Void*), ptr, destructor);
			}
			flag = true;
		}
		finally
		{
			if (!flag)
			{
				<Module>.__ArrayUnwind(ptr, size, count, destructor);
			}
		}
	}

	// Token: 0x0600029D RID: 669 RVA: 0x0001CDD4 File Offset: 0x0001C1D4
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static int ArrayUnwindFilter(_EXCEPTION_POINTERS* pExPtrs)
	{
		if (*(*(long*)pExPtrs) != -529697949)
		{
			return 0;
		}
		<Module>.terminate();
		return 0;
	}

	// Token: 0x0600029E RID: 670 RVA: 0x0001CDF4 File Offset: 0x0001C1F4
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[HandleProcessCorruptedStateExceptions]
	internal unsafe static void __ArrayUnwind(void* ptr, ulong size, ulong count, method destructor)
	{
		try
		{
			for (ulong num = 0UL; num != count; num += 1UL)
			{
				ptr = (void*)((byte*)ptr - size);
				calli(System.Void(System.Void*), ptr, destructor);
			}
		}
		catch when (endfilter(<Module>.?A0x94e83ccb.ArrayUnwindFilter(Marshal.GetExceptionPointers()) != null))
		{
		}
	}

	// Token: 0x0600029F RID: 671 RVA: 0x0001CEA8 File Offset: 0x0001C2A8
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	internal unsafe static void __ehvec_dtor(void* ptr, ulong size, int count, method destructor)
	{
		<Module>.__ehvec_dtor(ptr, size, (ulong)((long)count), destructor);
	}

	// Token: 0x060002A0 RID: 672 RVA: 0x0001CEC0 File Offset: 0x0001C2C0
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static ValueType <CrtImplementationDetails>.AtExitLock._handle()
	{
		if (<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA != null)
		{
			IntPtr intPtr = new IntPtr(<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA);
			return GCHandle.FromIntPtr(intPtr);
		}
		return null;
	}

	// Token: 0x060002A1 RID: 673 RVA: 0x0001D3B8 File Offset: 0x0001C7B8
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Construct(object value)
	{
		<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = null;
		<Module>.<CrtImplementationDetails>.AtExitLock._lock_Set(value);
	}

	// Token: 0x060002A2 RID: 674 RVA: 0x0001CEF0 File Offset: 0x0001C2F0
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Set(object value)
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType == null)
		{
			valueType = GCHandle.Alloc(value);
			<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = GCHandle.ToIntPtr((GCHandle)valueType).ToPointer();
		}
		else
		{
			((GCHandle)valueType).Target = value;
		}
	}

	// Token: 0x060002A3 RID: 675 RVA: 0x0001CF40 File Offset: 0x0001C340
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static object <CrtImplementationDetails>.AtExitLock._lock_Get()
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType != null)
		{
			return ((GCHandle)valueType).Target;
		}
		return null;
	}

	// Token: 0x060002A4 RID: 676 RVA: 0x0001CF64 File Offset: 0x0001C364
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock._lock_Destruct()
	{
		ValueType valueType = <Module>.<CrtImplementationDetails>.AtExitLock._handle();
		if (valueType != null)
		{
			((GCHandle)valueType).Free();
			<Module>.?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA = null;
		}
	}

	// Token: 0x060002A5 RID: 677 RVA: 0x0001CF8C File Offset: 0x0001C38C
	[DebuggerStepThrough]
	[SecurityCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool <CrtImplementationDetails>.AtExitLock.IsInitialized()
	{
		return (<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get() != null) ? 1 : 0;
	}

	// Token: 0x060002A6 RID: 678 RVA: 0x0001D3D4 File Offset: 0x0001C7D4
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.AddRef()
	{
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() == null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock._lock_Construct(new object());
			<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA = 0;
		}
		<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA++;
	}

	// Token: 0x060002A7 RID: 679 RVA: 0x0001CFA8 File Offset: 0x0001C3A8
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.RemoveRef()
	{
		<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA += -1;
		if (<Module>.?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA == 0)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock._lock_Destruct();
		}
	}

	// Token: 0x060002A8 RID: 680 RVA: 0x0001CFD0 File Offset: 0x0001C3D0
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static void <CrtImplementationDetails>.AtExitLock.Enter()
	{
		Monitor.Enter(<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get());
	}

	// Token: 0x060002A9 RID: 681 RVA: 0x0001CFE8 File Offset: 0x0001C3E8
	[DebuggerStepThrough]
	[SecurityCritical]
	internal static void <CrtImplementationDetails>.AtExitLock.Exit()
	{
		Monitor.Exit(<Module>.<CrtImplementationDetails>.AtExitLock._lock_Get());
	}

	// Token: 0x060002AA RID: 682 RVA: 0x0001D000 File Offset: 0x0001C400
	[SecurityCritical]
	[DebuggerStepThrough]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __global_lock()
	{
		bool flag = false;
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() != null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock.Enter();
			flag = true;
		}
		return flag;
	}

	// Token: 0x060002AB RID: 683 RVA: 0x0001D020 File Offset: 0x0001C420
	[DebuggerStepThrough]
	[SecurityCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __global_unlock()
	{
		bool flag = false;
		if (<Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized() != null)
		{
			<Module>.<CrtImplementationDetails>.AtExitLock.Exit();
			flag = true;
		}
		return flag;
	}

	// Token: 0x060002AC RID: 684 RVA: 0x0001D404 File Offset: 0x0001C804
	[DebuggerStepThrough]
	[SecurityCritical]
	[return: MarshalAs(UnmanagedType.U1)]
	internal static bool __alloc_global_lock()
	{
		<Module>.<CrtImplementationDetails>.AtExitLock.AddRef();
		return <Module>.<CrtImplementationDetails>.AtExitLock.IsInitialized();
	}

	// Token: 0x060002AD RID: 685 RVA: 0x0001D040 File Offset: 0x0001C440
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static void __dealloc_global_lock()
	{
		<Module>.<CrtImplementationDetails>.AtExitLock.RemoveRef();
	}

	// Token: 0x060002AE RID: 686 RVA: 0x0001D054 File Offset: 0x0001C454
	[SecurityCritical]
	internal unsafe static int _atexit_helper(method func, ulong* __pexit_list_size, method** __ponexitend_e, method** __ponexitbegin_e)
	{
		method system.Void_u0020() = 0L;
		if (func == null)
		{
			return -1;
		}
		if (<Module>.?A0x5f1aee9f.__global_lock() == 1)
		{
			try
			{
				method* ptr = (method*)<Module>.DecodePointer(*(long*)__ponexitbegin_e);
				method* ptr2 = (method*)<Module>.DecodePointer(*(long*)__ponexitend_e);
				long num = (long)(ptr2 - ptr);
				if (*__pexit_list_size - 1UL < (ulong)num >> 3)
				{
					try
					{
						ulong num2 = *__pexit_list_size * 8UL;
						ulong num3 = ((num2 < 4096UL) ? num2 : 4096UL);
						IntPtr intPtr = new IntPtr((int)(num2 + num3));
						IntPtr intPtr2 = new IntPtr((void*)ptr);
						IntPtr intPtr3 = Marshal.ReAllocHGlobal(intPtr2, intPtr);
						ptr2 = (method*)((byte*)intPtr3.ToPointer() + num);
						ptr = (method*)intPtr3.ToPointer();
						ulong num4 = *__pexit_list_size;
						ulong num5 = ((512UL < num4) ? 512UL : num4);
						*__pexit_list_size = num4 + num5;
					}
					catch (OutOfMemoryException)
					{
						IntPtr intPtr4 = new IntPtr((int)(*__pexit_list_size * 8UL + 12UL));
						IntPtr intPtr5 = new IntPtr((void*)ptr);
						IntPtr intPtr6 = Marshal.ReAllocHGlobal(intPtr5, intPtr4);
						ptr2 = (intPtr6.ToPointer() - ptr) / (IntPtr)sizeof(method) + ptr2;
						ptr = (method*)intPtr6.ToPointer();
						*__pexit_list_size += 4UL;
					}
				}
				*(long*)ptr2 = func;
				ptr2 += 8L / (long)sizeof(method);
				system.Void_u0020() = func;
				*(long*)__ponexitbegin_e = <Module>.EncodePointer((void*)ptr);
				*(long*)__ponexitend_e = <Module>.EncodePointer((void*)ptr2);
			}
			catch (OutOfMemoryException)
			{
			}
			finally
			{
				<Module>.?A0x5f1aee9f.__global_unlock();
			}
			if (system.Void_u0020() != null)
			{
				return 0;
			}
		}
		return -1;
	}

	// Token: 0x060002AF RID: 687 RVA: 0x0001D1CC File Offset: 0x0001C5CC
	[SecurityCritical]
	internal unsafe static void _exit_callback()
	{
		if (<Module>.?A0x5f1aee9f.__exit_list_size != 0UL)
		{
			method* ptr = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitbegin_m);
			method* ptr2 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitend_m);
			if (ptr != -1L && ptr != null && ptr2 != null)
			{
				method* ptr3 = ptr;
				method* ptr4 = ptr2;
				for (;;)
				{
					ptr2 -= 8L / (long)sizeof(method);
					if (ptr2 < ptr)
					{
						break;
					}
					if (*(long*)ptr2 != <Module>.EncodePointer(null))
					{
						void* ptr5 = <Module>.DecodePointer(*(long*)ptr2);
						*(long*)ptr2 = <Module>.EncodePointer(null);
						calli(System.Void(), ptr5);
						method* ptr6 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitbegin_m);
						method* ptr7 = (method*)<Module>.DecodePointer((void*)<Module>.?A0x5f1aee9f.__onexitend_m);
						if (ptr3 != ptr6 || ptr4 != ptr7)
						{
							ptr3 = ptr6;
							ptr = ptr6;
							ptr4 = ptr7;
							ptr2 = ptr7;
						}
					}
				}
				IntPtr intPtr = new IntPtr((void*)ptr);
				Marshal.FreeHGlobal(intPtr);
			}
			<Module>.?A0x5f1aee9f.__dealloc_global_lock();
		}
	}

	// Token: 0x060002B0 RID: 688 RVA: 0x0001D41C File Offset: 0x0001C81C
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static int _initatexit_m()
	{
		int num = 0;
		if (<Module>.?A0x5f1aee9f.__alloc_global_lock() == 1)
		{
			<Module>.?A0x5f1aee9f.__onexitbegin_m = (method*)<Module>.EncodePointer(Marshal.AllocHGlobal(256).ToPointer());
			<Module>.?A0x5f1aee9f.__onexitend_m = <Module>.?A0x5f1aee9f.__onexitbegin_m;
			<Module>.?A0x5f1aee9f.__exit_list_size = 32UL;
			num = 1;
		}
		return num;
	}

	// Token: 0x060002B1 RID: 689 RVA: 0x0001D464 File Offset: 0x0001C864
	internal static method _onexit_m(method _Function)
	{
		return (<Module>._atexit_m(_Function) == -1) ? 0L : _Function;
	}

	// Token: 0x060002B2 RID: 690 RVA: 0x0001D27C File Offset: 0x0001C67C
	[SecurityCritical]
	internal unsafe static int _atexit_m(method func)
	{
		return <Module>._atexit_helper(<Module>.EncodePointer(func), &<Module>.?A0x5f1aee9f.__exit_list_size, &<Module>.?A0x5f1aee9f.__onexitend_m, &<Module>.?A0x5f1aee9f.__onexitbegin_m);
	}

	// Token: 0x060002B3 RID: 691 RVA: 0x0001D480 File Offset: 0x0001C880
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static int _initatexit_app_domain()
	{
		if (<Module>.?A0x5f1aee9f.__alloc_global_lock() == 1)
		{
			<Module>.__onexitbegin_app_domain = (method*)<Module>.EncodePointer(Marshal.AllocHGlobal(256).ToPointer());
			<Module>.__onexitend_app_domain = <Module>.__onexitbegin_app_domain;
			<Module>.__exit_list_size_app_domain = 32UL;
		}
		return 1;
	}

	// Token: 0x060002B4 RID: 692 RVA: 0x0001D2A4 File Offset: 0x0001C6A4
	[HandleProcessCorruptedStateExceptions]
	[SecurityCritical]
	internal unsafe static void _app_exit_callback()
	{
		if (<Module>.__exit_list_size_app_domain != 0UL)
		{
			method* ptr = (method*)<Module>.DecodePointer((void*)<Module>.__onexitbegin_app_domain);
			method* ptr2 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitend_app_domain);
			try
			{
				if (ptr != -1L && ptr != null && ptr2 != null)
				{
					method* ptr3 = ptr;
					method* ptr4 = ptr2;
					for (;;)
					{
						do
						{
							ptr2 -= 8L / (long)sizeof(method);
						}
						while (ptr2 >= ptr && *(long*)ptr2 == <Module>.EncodePointer(null));
						if (ptr2 < ptr)
						{
							break;
						}
						method system.Void_u0020() = <Module>.DecodePointer(*(long*)ptr2);
						*(long*)ptr2 = <Module>.EncodePointer(null);
						calli(System.Void(), system.Void_u0020());
						method* ptr5 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitbegin_app_domain);
						method* ptr6 = (method*)<Module>.DecodePointer((void*)<Module>.__onexitend_app_domain);
						if (ptr3 != ptr5 || ptr4 != ptr6)
						{
							ptr3 = ptr5;
							ptr = ptr5;
							ptr4 = ptr6;
							ptr2 = ptr6;
						}
					}
				}
			}
			finally
			{
				IntPtr intPtr = new IntPtr((void*)ptr);
				Marshal.FreeHGlobal(intPtr);
				<Module>.?A0x5f1aee9f.__dealloc_global_lock();
			}
		}
	}

	// Token: 0x060002B5 RID: 693 RVA: 0x0001D4C4 File Offset: 0x0001C8C4
	[SecurityCritical]
	internal static method _onexit_m_appdomain(method _Function)
	{
		return (<Module>._atexit_m_appdomain(_Function) == -1) ? 0L : _Function;
	}

	// Token: 0x060002B6 RID: 694 RVA: 0x0001D390 File Offset: 0x0001C790
	[DebuggerStepThrough]
	[SecurityCritical]
	internal unsafe static int _atexit_m_appdomain(method func)
	{
		return <Module>._atexit_helper(<Module>.EncodePointer(func), &<Module>.__exit_list_size_app_domain, &<Module>.__onexitend_app_domain, &<Module>.__onexitbegin_app_domain);
	}

	// Token: 0x060002B7 RID: 695
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SuppressUnmanagedCodeSecurity]
	[SecurityCritical]
	[DllImport("KERNEL32.dll")]
	public unsafe static extern void* DecodePointer(void* _Ptr);

	// Token: 0x060002B8 RID: 696
	[SecurityCritical]
	[ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
	[SuppressUnmanagedCodeSecurity]
	[DllImport("KERNEL32.dll")]
	public unsafe static extern void* EncodePointer(void* _Ptr);

	// Token: 0x060002B9 RID: 697 RVA: 0x0001D4E0 File Offset: 0x0001C8E0
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static int _initterm_e(method* pfbegin, method* pfend)
	{
		int num = 0;
		if (pfbegin < pfend)
		{
			while (num == 0)
			{
				ulong num2 = (ulong)(*(long*)pfbegin);
				if (num2 != 0UL)
				{
					num = calli(System.Int32 modopt(System.Runtime.CompilerServices.CallConvCdecl)(), num2);
				}
				pfbegin += 8L / (long)sizeof(method);
				if (pfbegin >= pfend)
				{
					break;
				}
			}
		}
		return num;
	}

	// Token: 0x060002BA RID: 698 RVA: 0x0001D510 File Offset: 0x0001C910
	[SecurityCritical]
	[DebuggerStepThrough]
	internal unsafe static void _initterm(method* pfbegin, method* pfend)
	{
		if (pfbegin < pfend)
		{
			do
			{
				ulong num = (ulong)(*(long*)pfbegin);
				if (num != 0UL)
				{
					calli(System.Void modopt(System.Runtime.CompilerServices.CallConvCdecl)(), num);
				}
				pfbegin += 8L / (long)sizeof(method);
			}
			while (pfbegin < pfend);
		}
	}

	// Token: 0x060002BB RID: 699 RVA: 0x0001D538 File Offset: 0x0001C938
	[DebuggerStepThrough]
	internal static ModuleHandle <CrtImplementationDetails>.ThisModule.Handle()
	{
		return typeof(ThisModule).Module.ModuleHandle;
	}

	// Token: 0x060002BC RID: 700 RVA: 0x0001D588 File Offset: 0x0001C988
	[DebuggerStepThrough]
	[SecurityCritical]
	[SecurityPermission(SecurityAction.Assert, UnmanagedCode = true)]
	internal unsafe static void _initterm_m(method* pfbegin, method* pfend)
	{
		if (pfbegin < pfend)
		{
			do
			{
				ulong num = (ulong)(*(long*)pfbegin);
				if (num != 0UL)
				{
					void* ptr = calli(System.Void modopt(System.Runtime.CompilerServices.IsConst)*(), <Module>.<CrtImplementationDetails>.ThisModule.ResolveMethod<void\u0020const\u0020*\u0020__clrcall(void)>(num));
				}
				pfbegin += 8L / (long)sizeof(method);
			}
			while (pfbegin < pfend);
		}
	}

	// Token: 0x060002BD RID: 701 RVA: 0x0001D55C File Offset: 0x0001C95C
	[SecurityCritical]
	[DebuggerStepThrough]
	internal static method <CrtImplementationDetails>.ThisModule.ResolveMethod<void\u0020const\u0020*\u0020__clrcall(void)>(method methodToken)
	{
		return <Module>.<CrtImplementationDetails>.ThisModule.Handle().ResolveMethodHandle(methodToken).GetFunctionPointer()
			.ToPointer();
	}

	// Token: 0x060002BE RID: 702 RVA: 0x0001D5BB File Offset: 0x0001C9BB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void __std_terminate();

	// Token: 0x060002BF RID: 703 RVA: 0x0000BA00 File Offset: 0x0000AE00
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern IniParser* {ctor}(IniParser*, @byte*, uint);

	// Token: 0x060002C0 RID: 704 RVA: 0x00001690 File Offset: 0x00000A90
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void Write(char*, __arglist);

	// Token: 0x060002C1 RID: 705 RVA: 0x0001D5DF File Offset: 0x0001C9DF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _CxxThrowException(void*, _s__ThrowInfo*);

	// Token: 0x060002C2 RID: 706 RVA: 0x0001D7F1 File Offset: 0x0001CBF1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __CxxUnregisterExceptionObject(void*, int);

	// Token: 0x060002C3 RID: 707 RVA: 0x0001D7D9 File Offset: 0x0001CBD9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern int __CxxQueryExceptionSize();

	// Token: 0x060002C4 RID: 708 RVA: 0x0001D7EB File Offset: 0x0001CBEB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxDetectRethrow(void*);

	// Token: 0x060002C5 RID: 709 RVA: 0x0001D7E5 File Offset: 0x0001CBE5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxRegisterExceptionObject(void*, void*);

	// Token: 0x060002C6 RID: 710 RVA: 0x0001D7DF File Offset: 0x0001CBDF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __CxxExceptionFilter(void*, void*, int, void*);

	// Token: 0x060002C7 RID: 711 RVA: 0x0001AA40 File Offset: 0x00019E40
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _Xout_of_range(sbyte*);

	// Token: 0x060002C8 RID: 712 RVA: 0x0001D6B7 File Offset: 0x0001CAB7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern uint GetModuleFileNameW(HINSTANCE__*, char*, uint);

	// Token: 0x060002C9 RID: 713 RVA: 0x0001D7B5 File Offset: 0x0001CBB5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void CoUninitialize();

	// Token: 0x060002CA RID: 714 RVA: 0x0000AB60 File Offset: 0x00009F60
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>* LoadStringFromResource(basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>\u0020>*, int, HINSTANCE__*);

	// Token: 0x060002CB RID: 715 RVA: 0x0001D7A9 File Offset: 0x0001CBA9
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int MessageBoxW(HWND__*, char*, char*, uint);

	// Token: 0x060002CC RID: 716 RVA: 0x0001D7AF File Offset: 0x0001CBAF
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int CoInitialize(void*);

	// Token: 0x060002CD RID: 717 RVA: 0x0001D7C8 File Offset: 0x0001CBC8
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete[](void*, ulong);

	// Token: 0x060002CE RID: 718 RVA: 0x0001D7CD File Offset: 0x0001CBCD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern char* wcsrchr(char*, [MarshalAs(UnmanagedType.U2)] char);

	// Token: 0x060002CF RID: 719 RVA: 0x0001D79D File Offset: 0x0001CB9D
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern method GetProcAddress(HINSTANCE__*, sbyte*);

	// Token: 0x060002D0 RID: 720 RVA: 0x0001D797 File Offset: 0x0001CB97
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern HINSTANCE__* LoadLibraryW(char*);

	// Token: 0x060002D1 RID: 721 RVA: 0x0001D803 File Offset: 0x0001CC03
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _wtoi(char*);

	// Token: 0x060002D2 RID: 722 RVA: 0x0001D7FD File Offset: 0x0001CBFD
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int _wcsicmp(char*, char*);

	// Token: 0x060002D3 RID: 723 RVA: 0x0001D7D3 File Offset: 0x0001CBD3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* memmove(void*, void*, ulong);

	// Token: 0x060002D4 RID: 724 RVA: 0x0001A852 File Offset: 0x00019C52
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void _Xlength_error(sbyte*);

	// Token: 0x060002D5 RID: 725 RVA: 0x0001AF8C File Offset: 0x0001A38C
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* @new(ulong);

	// Token: 0x060002D6 RID: 726 RVA: 0x0001D5F1 File Offset: 0x0001C9F1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void _invalid_parameter_noinfo_noreturn();

	// Token: 0x060002D7 RID: 727 RVA: 0x0001AF84 File Offset: 0x0001A384
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete(void*, ulong);

	// Token: 0x060002D8 RID: 728 RVA: 0x0001D767 File Offset: 0x0001CB67
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int WideCharToMultiByte(uint, uint, char*, int, sbyte*, int, sbyte*, int*);

	// Token: 0x060002D9 RID: 729 RVA: 0x0001D72C File Offset: 0x0001CB2C
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* new[](ulong);

	// Token: 0x060002DA RID: 730 RVA: 0x0001D7BB File Offset: 0x0001CBBB
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __ExceptionPtrDestroy(void*);

	// Token: 0x060002DB RID: 731 RVA: 0x0001D5C7 File Offset: 0x0001C9C7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __std_exception_copy(__std_exception_data*, __std_exception_data*);

	// Token: 0x060002DC RID: 732 RVA: 0x0001D7C1 File Offset: 0x0001CBC1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __ExceptionPtrCopy(void*, void*);

	// Token: 0x060002DD RID: 733 RVA: 0x0001D724 File Offset: 0x0001CB24
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void delete[](void*);

	// Token: 0x060002DE RID: 734 RVA: 0x0001D5C1 File Offset: 0x0001C9C1
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void __std_exception_destroy(__std_exception_data*);

	// Token: 0x060002DF RID: 735 RVA: 0x0001C570 File Offset: 0x0001B970
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern void* _getFiberPtrId();

	// Token: 0x060002E0 RID: 736 RVA: 0x0001D69F File Offset: 0x0001CA9F
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void _cexit();

	// Token: 0x060002E1 RID: 737 RVA: 0x0001D7A3 File Offset: 0x0001CBA3
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void Sleep(uint);

	// Token: 0x060002E2 RID: 738 RVA: 0x0001D809 File Offset: 0x0001CC09
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void abort();

	// Token: 0x060002E3 RID: 739 RVA: 0x0001B560 File Offset: 0x0001A960
	[SuppressUnmanagedCodeSecurity]
	[MethodImpl(MethodImplOptions.Unmanaged | MethodImplOptions.PreserveSig, MethodCodeType = MethodCodeType.Native)]
	internal static extern void __security_init_cookie();

	// Token: 0x060002E4 RID: 740 RVA: 0x0001D7F7 File Offset: 0x0001CBF7
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal unsafe static extern int __FrameUnwindFilter(_EXCEPTION_POINTERS*);

	// Token: 0x060002E5 RID: 741 RVA: 0x0001D6A5 File Offset: 0x0001CAA5
	[SuppressUnmanagedCodeSecurity]
	[DllImport("", CallingConvention = CallingConvention.Cdecl, SetLastError = true)]
	[MethodImpl(MethodImplOptions.Unmanaged, MethodCodeType = MethodCodeType.Native)]
	internal static extern void terminate();

	// Token: 0x04000001 RID: 1 RVA: 0x00022798 File Offset: 0x00020D98
	internal static $ArrayType$$$BY0P@$$CB_W ??_C@_1BO@JDCCOIEG@?$AAL?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe@;

	// Token: 0x04000002 RID: 2 RVA: 0x000227B8 File Offset: 0x00020DB8
	internal static $ArrayType$$$BY0M@$$CB_W ??_C@_1BI@GPBGKNOG@?$AAU?$AAS?$AAE?$AA_?$AAM?$AAO?$AAD?$AAU?$AAL?$AAE?$AAS@;

	// Token: 0x04000003 RID: 3 RVA: 0x000227D0 File Offset: 0x00020DD0
	internal static $ArrayType$$$BY0N@$$CB_W ??_C@_1BK@BJPLKHOD@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAt?$AAi?$AAt?$AAl?$AAe@;

	// Token: 0x04000004 RID: 4 RVA: 0x000227F0 File Offset: 0x00020DF0
	internal static $ArrayType$$$BY0N@$$CB_W ??_C@_1BK@PDBBMBD@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh@;

	// Token: 0x04000005 RID: 5 RVA: 0x00022810 File Offset: 0x00020E10
	internal static $ArrayType$$$BY0O@$$CB_W ??_C@_1BM@KDFFFNEE@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA_?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt@;

	// Token: 0x04000006 RID: 6 RVA: 0x00022830 File Offset: 0x00020E30
	internal static $ArrayType$$$BY0L@$$CB_W ??_C@_1BG@COEEJDOJ@?$AAc?$AAe?$AAf?$AA_?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe@;

	// Token: 0x04000007 RID: 7 RVA: 0x00022848 File Offset: 0x00020E48
	internal static $ArrayType$$$BY0BE@$$CB_W ??_C@_1CI@OBJJCAJH@?$AAc?$AAe?$AAf?$AA_?$AAa?$AAc?$AAc?$AAe?$AAp?$AAt?$AA_?$AAl?$AAa?$AAn?$AAg@;

	// Token: 0x04000008 RID: 8 RVA: 0x00022870 File Offset: 0x00020E70
	internal static $ArrayType$$$BY0O@$$CB_W ??_C@_1BM@FFPALKEM@?$AAc?$AAe?$AAf?$AA_?$AAu?$AAs?$AAe?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@;

	// Token: 0x04000009 RID: 9 RVA: 0x00022890 File Offset: 0x00020E90
	internal static $ArrayType$$$BY0P@$$CB_W ??_C@_1BO@GEPPECKO@?$AAc?$AAe?$AAf?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe?$AA_?$AAp?$AAa?$AAt?$AAh@;

	// Token: 0x0400000A RID: 10 RVA: 0x000228B0 File Offset: 0x00020EB0
	internal static $ArrayType$$$BY0BN@$$CB_W ??_C@_1DK@LEDGMEFL@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAs?$AAt?$AAa?$AAr?$AAt?$AAe?$AAr?$AA_?$AAe?$AAx@;

	// Token: 0x0400000B RID: 11 RVA: 0x000228F0 File Offset: 0x00020EF0
	internal static $ArrayType$$$BY0BF@$$CB_W ??_C@_1CK@HOAFIEFH@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAa?$AAb?$AAl?$AAe@;

	// Token: 0x0400000C RID: 12 RVA: 0x00022920 File Offset: 0x00020F20
	internal static $ArrayType$$$BY0BH@$$CB_W ??_C@_1CO@LAFLGHFO@?$AAg?$AAa?$AAm?$AAe?$AA_?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt?$AAe?$AA_?$AAa?$AAr@;

	// Token: 0x0400000D RID: 13 RVA: 0x00022950 File Offset: 0x00020F50
	internal static $ArrayType$$$BY0BE@$$CB_W ??_C@_1CI@PAGBDABE@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA_?$AAa?$AAg?$AAe?$AAn?$AAt?$AA_@;

	// Token: 0x0400000E RID: 14 RVA: 0x00022978 File Offset: 0x00020F78
	internal static $ArrayType$$$BY09$$CB_W ??_C@_1BE@BELKDIMO@?$AAu?$AAr?$AAl?$AA_?$AAl?$AAo?$AAg?$AAi?$AAn@;

	// Token: 0x0400000F RID: 15 RVA: 0x00022990 File Offset: 0x00020F90
	internal static $ArrayType$$$BY0L@$$CB_W ??_C@_1BG@DGFIJKPA@?$AAu?$AAr?$AAl?$AA_?$AAl?$AAo?$AAg?$AAo?$AAu?$AAt@;

	// Token: 0x04000010 RID: 16 RVA: 0x000229A8 File Offset: 0x00020FA8
	internal static $ArrayType$$$BY08$$CB_W ??_C@_1BC@MJCNHJFJ@?$AAu?$AAr?$AAl?$AA_?$AAm?$AAa?$AAi?$AAn@;

	// Token: 0x04000011 RID: 17 RVA: 0x000229C0 File Offset: 0x00020FC0
	internal static $ArrayType$$$BY0BG@$$CB_W ??_C@_1CM@LANEAIAC@?$AAu?$AAr?$AAl?$AA_?$AAs?$AAe?$AAs?$AAs?$AAi?$AAo?$AAn?$AA_?$AAv?$AAa?$AAl@;

	// Token: 0x04000012 RID: 18 RVA: 0x000229F0 File Offset: 0x00020FF0
	internal static $ArrayType$$$BY0BB@$$CB_W ??_C@_1CC@FMBCGIBO@?$AAu?$AAr?$AAl?$AA_?$AAp?$AAa?$AAt?$AAc?$AAh?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc@;

	// Token: 0x04000013 RID: 19 RVA: 0x00022A18 File Offset: 0x00021018
	internal static $ArrayType$$$BY05$$CB_W ??_C@_1M@BCFJEEOJ@?$AAq?$AAa?$AA_?$AAi?$AAd@;

	// Token: 0x04000014 RID: 20 RVA: 0x00022A28 File Offset: 0x00021028
	internal static $ArrayType$$$BY05$$CB_W ??_C@_1M@HECMOPML@?$AAq?$AAa?$AA_?$AAp?$AAw@;

	// Token: 0x04000015 RID: 21 RVA: 0x00022A38 File Offset: 0x00021038
	internal static $ArrayType$$$BY0BL@$$CB_W ??_C@_1DG@KGGNMKAC@?$AAf?$AAo?$AAr?$AAc?$AAe?$AA_?$AAd?$AAi?$AAs?$AAp?$AAl?$AAa?$AAy?$AA_?$AAw@;

	// Token: 0x04000016 RID: 22 RVA: 0x00022A70 File Offset: 0x00021070
	internal static $ArrayType$$$BY0N@$$CB_W ??_C@_1BK@MPFOAOEG@?$AAl?$AAo?$AAa?$AAd?$AA_?$AAl?$AAi?$AAb?$AAr?$AAa?$AAr?$AAy@;

	// Token: 0x04000017 RID: 23 RVA: 0x00022E48 File Offset: 0x00021448
	internal static $ArrayType$$$BY0BI@$$CBD ??_C@_0BI@CFPLBAOH@invalid?5string?5position@;

	// Token: 0x04000018 RID: 24 RVA: 0x00022FA0 File Offset: 0x000215A0
	internal static $ArrayType$$$BY0BA@$$CBD ??_C@_0BA@JFNIOLAK@string?5too?5long@;

	// Token: 0x04000019 RID: 25 RVA: 0x00022A8C File Offset: 0x0002108C
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13MCLHKIEA@?$AA?$FL@;

	// Token: 0x0400001A RID: 26 RVA: 0x00022A90 File Offset: 0x00021090
	internal static $ArrayType$$$BY03$$CB_W ??_C@_17IHNNDFDL@?$AA?$FN?$AA?$AN?$AA?6@;

	// Token: 0x0400001B RID: 27 RVA: 0x00022A98 File Offset: 0x00021098
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13NMPKAAJP@?$AA?$DN@;

	// Token: 0x0400001C RID: 28 RVA: 0x00022A9C File Offset: 0x0002109C
	internal static $ArrayType$$$BY02$$CB_W ??_C@_15JNBOKNOG@?$AA?$AN?$AA?6@;

	// Token: 0x0400001D RID: 29 RVA: 0x00022AB8 File Offset: 0x000210B8
	internal static $ArrayType$$$BY0N@$$CBD ??_C@_0N@DAFEMANB@mfModuleInit@;

	// Token: 0x0400001E RID: 30 RVA: 0x00022AC8 File Offset: 0x000210C8
	internal static $ArrayType$$$BY0O@$$CBD ??_C@_0O@GHINADND@mfModuleClear@;

	// Token: 0x0400001F RID: 31 RVA: 0x00022B10 File Offset: 0x00021110
	internal static $ArrayType$$$BY0BP@$$CB_W ??_C@_1DO@FDOECBL@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?5@;

	// Token: 0x04000020 RID: 32 RVA: 0x00022AD8 File Offset: 0x000210D8
	internal static $ArrayType$$$BY0BK@$$CB_W ??_C@_1DE@NCBBBJGA@?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?5?$AAi?$AAn?$AAi?$AAt?$AA?5?$AAf?$AAa?$AAi@;

	// Token: 0x04000021 RID: 33 RVA: 0x00022AA4 File Offset: 0x000210A4
	internal static $ArrayType$$$BY01$$CB_W ??_C@_13ENNFDPBH@?$AA_@;

	// Token: 0x04000022 RID: 34 RVA: 0x00022B90 File Offset: 0x00021190
	internal static $ArrayType$$$BY0BC@$$CB_W ??_C@_1CE@BAACFLMB@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?5?$AAe?$AAx?$AAe?$AAc?$AAu?$AAt@;

	// Token: 0x04000023 RID: 35 RVA: 0x00022BB8 File Offset: 0x000211B8
	internal static $ArrayType$$$BY0BJ@$$CB_W ??_C@_1DC@JPKBEPJA@?$AAl?$AAa?$AAu?$AAn?$AAc?$AAh?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAo?$AAs?$AAe?$AAd@;

	// Token: 0x04000024 RID: 36 RVA: 0x00022D9C File Offset: 0x0002139C
	internal static $ArrayType$$$BY00$$CB_W ??_C@_11LOCGONAA@@;

	// Token: 0x04000025 RID: 37 RVA: 0x00022AA8 File Offset: 0x000210A8
	internal static $ArrayType$$$BY07$$CB_W ??_C@_1BA@FLCPIJCD@?$AAf?$AAi?$AAl?$AAe?$AA?3?$AA?1?$AA?1@;

	// Token: 0x04000026 RID: 38 RVA: 0x00022B50 File Offset: 0x00021150
	internal static $ArrayType$$$BY0BN@$$CB_W ??_C@_1DK@HAEPPJJL@?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAm@;

	// Token: 0x04000027 RID: 39 RVA: 0x00023000 File Offset: 0x00021600
	internal static $ArrayType$$$BY0BE@$$CBD ??_C@_0BE@JONHPENG@map?1set?$DMT?$DO?5too?5long@;

	// Token: 0x04000028 RID: 40 RVA: 0x000AE0B8 File Offset: 0x000AC6B8
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@8;

	// Token: 0x04000029 RID: 41 RVA: 0x000AE038 File Offset: 0x000AC638
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x0400002A RID: 42 RVA: 0x000AE090 File Offset: 0x000AC690
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@8;

	// Token: 0x0400002B RID: 43 RVA: 0x000B6F08 File Offset: 0x000B4F08
	internal static $_TypeDescriptor$_extraBytes_26 ??_R0?AV_Ref_count_base@std@@@8;

	// Token: 0x0400002C RID: 44 RVA: 0x000AE690 File Offset: 0x000ACC90
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2_Ref_count_base@std@@8;

	// Token: 0x0400002D RID: 45 RVA: 0x000AE6A0 File Offset: 0x000ACCA0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3_Ref_count_base@std@@8;

	// Token: 0x0400002E RID: 46 RVA: 0x000AE6B8 File Offset: 0x000ACCB8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@_Ref_count_base@std@@8;

	// Token: 0x0400002F RID: 47 RVA: 0x000AE010 File Offset: 0x000AC610
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x04000030 RID: 48 RVA: 0x000AE0D0 File Offset: 0x000AC6D0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@8;

	// Token: 0x04000031 RID: 49 RVA: 0x000B6DA0 File Offset: 0x000B4DA0
	internal static $_TypeDescriptor$_extraBytes_56 ??_R0?AV?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@@8;

	// Token: 0x04000032 RID: 50 RVA: 0x000AE050 File Offset: 0x000AC650
	internal static _s__RTTIClassHierarchyDescriptor ??_R3?$_Ref_count_obj@VIniParser@@@std@@8;

	// Token: 0x04000033 RID: 51 RVA: 0x000B6D60 File Offset: 0x000B4D60
	internal static $_TypeDescriptor$_extraBytes_40 ??_R0?AV?$_Ref_count_obj@VIniParser@@@std@@@8;

	// Token: 0x04000034 RID: 52 RVA: 0x000AE0E8 File Offset: 0x000AC6E8
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@6B@;

	// Token: 0x04000035 RID: 53 RVA: 0x000AE068 File Offset: 0x000AC668
	internal static _s__RTTICompleteObjectLocator2 ??_R4?$_Ref_count_obj@VIniParser@@@std@@6B@;

	// Token: 0x04000036 RID: 54 RVA: 0x00022E18 File Offset: 0x00021418
	internal static piecewise_construct_t piecewise_construct;

	// Token: 0x04000037 RID: 55 RVA: 0x000B4080 File Offset: 0x000B2080
	internal static $ArrayType$$$BY04Q6AXXZ ??_7?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@6B@;

	// Token: 0x04000038 RID: 56 RVA: 0x000B4058 File Offset: 0x000B2058
	internal static $ArrayType$$$BY04Q6AXXZ ??_7?$_Ref_count_obj@VIniParser@@@std@@6B@;

	// Token: 0x04000039 RID: 57 RVA: 0x000B7300 File Offset: 0x000B5300
	internal unsafe static HINSTANCE__* g_hInstance;

	// Token: 0x0400003A RID: 58 RVA: 0x000B78C0 File Offset: 0x00000000
	internal unsafe static ModuleManager* ?m_instance@ModuleManager@@0PEAV1@EA;

	// Token: 0x0400003B RID: 59 RVA: 0x000226E4 File Offset: 0x00020CE4
	internal static char g_backslash;

	// Token: 0x0400003C RID: 60 RVA: 0x000226E0 File Offset: 0x00020CE0
	internal static char g_slash;

	// Token: 0x0400003D RID: 61 RVA: 0x000B78B8 File Offset: 0x00000000
	internal static bool ?use_log@LogMsg@@2_NA;

	// Token: 0x0400003E RID: 62 RVA: 0x00022790 File Offset: 0x00020D90
	internal unsafe static char* load_library;

	// Token: 0x0400003F RID: 63 RVA: 0x00022788 File Offset: 0x00020D88
	internal unsafe static char* force_display_window_title;

	// Token: 0x04000040 RID: 64 RVA: 0x00022780 File Offset: 0x00020D80
	internal unsafe static char* qa_pw;

	// Token: 0x04000041 RID: 65 RVA: 0x00022778 File Offset: 0x00020D78
	internal unsafe static char* qa_id;

	// Token: 0x04000042 RID: 66 RVA: 0x00022770 File Offset: 0x00020D70
	internal unsafe static char* url_patch_source;

	// Token: 0x04000043 RID: 67 RVA: 0x00022768 File Offset: 0x00020D68
	internal unsafe static char* url_session_validator;

	// Token: 0x04000044 RID: 68 RVA: 0x00022760 File Offset: 0x00020D60
	internal unsafe static char* url_main;

	// Token: 0x04000045 RID: 69 RVA: 0x00022758 File Offset: 0x00020D58
	internal unsafe static char* url_logout;

	// Token: 0x04000046 RID: 70 RVA: 0x00022750 File Offset: 0x00020D50
	internal unsafe static char* url_login;

	// Token: 0x04000047 RID: 71 RVA: 0x00022748 File Offset: 0x00020D48
	internal unsafe static char* launcher_agent_name;

	// Token: 0x04000048 RID: 72 RVA: 0x00022740 File Offset: 0x00020D40
	internal unsafe static char* game_execute_arguments;

	// Token: 0x04000049 RID: 73 RVA: 0x00022738 File Offset: 0x00020D38
	internal unsafe static char* game_executable_name;

	// Token: 0x0400004A RID: 74 RVA: 0x00022730 File Offset: 0x00020D30
	internal unsafe static char* game_starter_executable_name;

	// Token: 0x0400004B RID: 75 RVA: 0x00022728 File Offset: 0x00020D28
	internal unsafe static char* cef_cache_path;

	// Token: 0x0400004C RID: 76 RVA: 0x00022720 File Offset: 0x00020D20
	internal unsafe static char* cef_use_cache;

	// Token: 0x0400004D RID: 77 RVA: 0x00022718 File Offset: 0x00020D18
	internal unsafe static char* cef_accept_language;

	// Token: 0x0400004E RID: 78 RVA: 0x00022710 File Offset: 0x00020D10
	internal unsafe static char* cef_locale;

	// Token: 0x0400004F RID: 79 RVA: 0x00022708 File Offset: 0x00020D08
	internal unsafe static char* window_height;

	// Token: 0x04000050 RID: 80 RVA: 0x00022700 File Offset: 0x00020D00
	internal unsafe static char* window_width;

	// Token: 0x04000051 RID: 81 RVA: 0x000226F8 File Offset: 0x00020CF8
	internal unsafe static char* window_title;

	// Token: 0x04000052 RID: 82 RVA: 0x000226F0 File Offset: 0x00020CF0
	internal unsafe static char* use_modules;

	// Token: 0x04000053 RID: 83 RVA: 0x000226E8 File Offset: 0x00020CE8
	internal unsafe static char* launcher_module;

	// Token: 0x04000054 RID: 84 RVA: 0x000B5B60 File Offset: 0x000B3B60
	public static method __m2mep@?LoadIniData@IniParser@@$$FSA?AV?$shared_ptr@VIniParser@@@std@@PEBW4byte@3@I@Z;

	// Token: 0x04000055 RID: 85 RVA: 0x000B58D0 File Offset: 0x000B38D0
	public static method __m2mep@??Rci_comp@IniParser@@$$FQEBA_NAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z;

	// Token: 0x04000056 RID: 86 RVA: 0x000B5EC0 File Offset: 0x000B3EC0
	public static method __m2mep@?GetValueStringW@IniParser@@$$FQEAA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEB_W00@Z;

	// Token: 0x04000057 RID: 87 RVA: 0x000B5ED0 File Offset: 0x000B3ED0
	public static method __m2mep@?GetValueIntW@IniParser@@$$FQEAAHPEB_W0H@Z;

	// Token: 0x04000058 RID: 88 RVA: 0x000B5EE0 File Offset: 0x000B3EE0
	public static method __m2mep@?FindSection@IniParser@@$$FQEAAPEBV?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$a;

	// Token: 0x04000059 RID: 89 RVA: 0x000B5CF0 File Offset: 0x000B3CF0
	public static method __m2mep@?GetIniBuffer@IniParser@@$$FQEAAXAEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z;

	// Token: 0x0400005A RID: 90 RVA: 0x000B4140 File Offset: 0x000B2140
	public static method __m2mep@??0LauncherApp@@$$FQEAA@XZ;

	// Token: 0x0400005B RID: 91 RVA: 0x000B5B70 File Offset: 0x000B3B70
	public static method __m2mep@??$marshal_as@PE$AAVIniModuleSection@LauncherModel@@V1@@interop@msclr@@$$FYMPE$AAVIniModuleSection@LauncherModel@@AEBV2@@Z;

	// Token: 0x0400005C RID: 92 RVA: 0x000B6080 File Offset: 0x000B4080
	public static method __m2mep@?GetInstance@ModuleManager@@$$FSAPEAV1@XZ;

	// Token: 0x0400005D RID: 93 RVA: 0x000B6090 File Offset: 0x000B4090
	public static method __m2mep@?Clear@ModuleManager@@$$FSAXXZ;

	// Token: 0x0400005E RID: 94 RVA: 0x000B6030 File Offset: 0x000B4030
	public static method __m2mep@?LoadModules@ModuleManager@@$$FQEAM_NPEAVIniParser@@PE$AAVApp@LauncherView@@@Z;

	// Token: 0x0400005F RID: 95 RVA: 0x000B6050 File Offset: 0x000B4050
	public static method __m2mep@??1ModuleManager@@$$FAEAA@XZ;

	// Token: 0x04000060 RID: 96 RVA: 0x000B5EF0 File Offset: 0x000B3EF0
	public static method __m2mep@?GetModuleObjectName@ModuleManager@@$$FAEBA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBV23@@Z;

	// Token: 0x04000061 RID: 97 RVA: 0x000B6060 File Offset: 0x000B4060
	public static method __m2mep@??0ModuleManager@@$$FAEAA@XZ;

	// Token: 0x04000062 RID: 98 RVA: 0x000B6070 File Offset: 0x000B4070
	public static method __m2mep@??_GModuleManager@@$$FAEAAPEAXI@Z;

	// Token: 0x04000063 RID: 99 RVA: 0x000B4030 File Offset: 0x000B2030
	public static method __m2mep@?<MarshalCopy>@?$gcroot@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@@$$FSMXPEAU1@0@Z;

	// Token: 0x04000064 RID: 100 RVA: 0x000B4040 File Offset: 0x000B2040
	public static method __m2mep@?<MarshalDestroy>@?$gcroot@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@@$$FSMXPEAU1@@Z;

	// Token: 0x04000065 RID: 101 RVA: 0x000B6040 File Offset: 0x000B4040
	public static method __m2mep@??1?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@@std@@$$FQEAA@XZ;

	// Token: 0x04000066 RID: 102 RVA: 0x000B4120 File Offset: 0x000B2120
	public static method __m2mep@?lmRun@@$$J0YAHPEAUHINSTANCE__@@PEBD_K_N@Z;

	// Token: 0x04000067 RID: 103 RVA: 0x000B5D00 File Offset: 0x000B3D00
	public static method __m2mep@??0IniModuleSection@@$$FQEAA@XZ;

	// Token: 0x04000068 RID: 104 RVA: 0x000B5D10 File Offset: 0x000B3D10
	public static method __m2mep@??1IniModuleSection@@$$FQEAA@XZ;

	// Token: 0x04000069 RID: 105 RVA: 0x000B4100 File Offset: 0x000B2100
	public static method __m2mep@?ProcessUrl@LauncherApp@@$$FAEBA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AEBV23@@Z;

	// Token: 0x0400006A RID: 106 RVA: 0x000B4110 File Offset: 0x000B2110
	public static method __m2mep@?LoadResource@LauncherApp@@$$FQEBM_NPEAVIniParser@@PE$AAVApp@LauncherView@@AEAVIniModuleSection@@@Z;

	// Token: 0x0400006B RID: 107 RVA: 0x000B40E0 File Offset: 0x000B20E0
	public static method __m2mep@?Run@LauncherApp@@$$FQEBMXPE$AAVApp@LauncherView@@AEBVIniModuleSection@@@Z;

	// Token: 0x0400006C RID: 108 RVA: 0x000B54C0 File Offset: 0x000B34C0
	public static method __m2mep@??C?$unique_ptr@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEBAPEAVLauncherApp@@XZ;

	// Token: 0x0400006D RID: 109 RVA: 0x000B54D0 File Offset: 0x000B34D0
	public static method __m2mep@??1?$unique_ptr@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400006E RID: 110 RVA: 0x000B4D60 File Offset: 0x000B2D60
	public static method __m2mep@??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x0400006F RID: 111 RVA: 0x000B58E0 File Offset: 0x000B38E0
	public static method __m2mep@??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x04000070 RID: 112 RVA: 0x000B54E0 File Offset: 0x000B34E0
	public static method __m2mep@??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEBAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@1@XZ;

	// Token: 0x04000071 RID: 113 RVA: 0x000B5F00 File Offset: 0x000B3F00
	public static method __m2mep@?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x04000072 RID: 114 RVA: 0x000B5B80 File Offset: 0x000B3B80
	public static method __m2mep@?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x04000073 RID: 115 RVA: 0x000B5B90 File Offset: 0x000B3B90
	public static method __m2mep@?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator;

	// Token: 0x04000074 RID: 116 RVA: 0x000B6000 File Offset: 0x000B4000
	public static method __m2mep@??1?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000075 RID: 117 RVA: 0x000B6010 File Offset: 0x000B4010
	public static method __m2mep@??A?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@@std@@$$FQEAAAEAV?$shared_ptr@UMODULE_INFO@ModuleManager@@@1@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z;

	// Token: 0x04000076 RID: 118 RVA: 0x000B6020 File Offset: 0x000B4020
	public static method __m2mep@??0?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@@std@@$$FQEAA@XZ;

	// Token: 0x04000077 RID: 119 RVA: 0x000B5BA0 File Offset: 0x000B3BA0
	public static method __m2mep@??4?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAAAEAV01@AEBV01@@Z;

	// Token: 0x04000078 RID: 120 RVA: 0x000B58F0 File Offset: 0x000B38F0
	public static method __m2mep@??1?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAA@XZ;

	// Token: 0x04000079 RID: 121 RVA: 0x000B4150 File Offset: 0x000B2150
	public static method __m2mep@??1?$gcroot@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@@$$FQEAA@XZ;

	// Token: 0x0400007A RID: 122 RVA: 0x000B4000 File Offset: 0x000B2000
	public static method __m2mep@??0?$gcroot@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@@$$FQEAA@AEBU0@@Z;

	// Token: 0x0400007B RID: 123 RVA: 0x000B4160 File Offset: 0x000B2160
	public static method __m2mep@??0?$gcroot@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@@$$FQEAM@PE$AAVAddWebBrowserCreateCallbackFn@App@LauncherView@@@Z;

	// Token: 0x0400007C RID: 124 RVA: 0x000B4D70 File Offset: 0x000B2D70
	public static method __m2mep@??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x0400007D RID: 125 RVA: 0x000B4170 File Offset: 0x000B2170
	public static method __m2mep@??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x0400007E RID: 126 RVA: 0x000B54F0 File Offset: 0x000B34F0
	public static method __m2mep@??C?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ;

	// Token: 0x0400007F RID: 127 RVA: 0x000B4180 File Offset: 0x000B2180
	public static method __m2mep@??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x04000080 RID: 128 RVA: 0x000B5500 File Offset: 0x000B3500
	public static method __m2mep@??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBAPEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ;

	// Token: 0x04000081 RID: 129 RVA: 0x000B4D80 File Offset: 0x000B2D80
	public static method __m2mep@??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBAAEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ;

	// Token: 0x04000082 RID: 130 RVA: 0x000B4D90 File Offset: 0x000B2D90
	public static method __m2mep@??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x04000083 RID: 131 RVA: 0x000B4190 File Offset: 0x000B2190
	public static method __m2mep@??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x04000084 RID: 132 RVA: 0x000B5510 File Offset: 0x000B3510
	public static method __m2mep@??C?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBAPEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_str;

	// Token: 0x04000085 RID: 133 RVA: 0x000B5900 File Offset: 0x000B3900
	public static method __m2mep@??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x04000086 RID: 134 RVA: 0x000B5520 File Offset: 0x000B3520
	public static method __m2mep@??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_W;

	// Token: 0x04000087 RID: 135 RVA: 0x000B5DE0 File Offset: 0x000B3DE0
	public static method __m2mep@?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W;

	// Token: 0x04000088 RID: 136 RVA: 0x000B5DF0 File Offset: 0x000B3DF0
	public static method __m2mep@?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W;

	// Token: 0x04000089 RID: 137 RVA: 0x000B5530 File Offset: 0x000B3530
	public static method __m2mep@?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x0400008A RID: 138 RVA: 0x000B5910 File Offset: 0x000B3910
	public static method __m2mep@?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@;

	// Token: 0x0400008B RID: 139 RVA: 0x000B5920 File Offset: 0x000B3920
	public static method __m2mep@?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@;

	// Token: 0x0400008C RID: 140 RVA: 0x000B5930 File Offset: 0x000B3930
	public static method __m2mep@?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x0400008D RID: 141 RVA: 0x000B41A0 File Offset: 0x000B21A0
	public static method __m2mep@?get@?$_Ptr_base@VIniParser@@@std@@$$FIEBAPEAVIniParser@@XZ;

	// Token: 0x0400008E RID: 142 RVA: 0x000B4DA0 File Offset: 0x000B2DA0
	public static method __m2mep@??9?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x0400008F RID: 143 RVA: 0x000B41B0 File Offset: 0x000B21B0
	public static method __m2mep@??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x04000090 RID: 144 RVA: 0x000B5940 File Offset: 0x000B3940
	public static method __m2mep@??E?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char;

	// Token: 0x04000091 RID: 145 RVA: 0x000B5540 File Offset: 0x000B3540
	public static method __m2mep@??C?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char;

	// Token: 0x04000092 RID: 146 RVA: 0x000B5E00 File Offset: 0x000B3E00
	public static method __m2mep@?find@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@st;

	// Token: 0x04000093 RID: 147 RVA: 0x000B5950 File Offset: 0x000B3950
	public static method __m2mep@?empty@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x04000094 RID: 148 RVA: 0x000B5BB0 File Offset: 0x000B3BB0
	public static method __m2mep@?end@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std;

	// Token: 0x04000095 RID: 149 RVA: 0x000B5BC0 File Offset: 0x000B3BC0
	public static method __m2mep@?begin@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x04000096 RID: 150 RVA: 0x000B5BD0 File Offset: 0x000B3BD0
	public static method __m2mep@?front@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAAAEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ;

	// Token: 0x04000097 RID: 151 RVA: 0x000B5960 File Offset: 0x000B3960
	public static method __m2mep@?end@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEBA?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ;

	// Token: 0x04000098 RID: 152 RVA: 0x000B5970 File Offset: 0x000B3970
	public static method __m2mep@?end@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ;

	// Token: 0x04000099 RID: 153 RVA: 0x000B5980 File Offset: 0x000B3980
	public static method __m2mep@?begin@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEBA?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ;

	// Token: 0x0400009A RID: 154 RVA: 0x000B5990 File Offset: 0x000B3990
	public static method __m2mep@?begin@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAA?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ;

	// Token: 0x0400009B RID: 155 RVA: 0x000B59A0 File Offset: 0x000B39A0
	public static method __m2mep@??1?$shared_ptr@VIniParser@@@std@@$$FQEAA@XZ;

	// Token: 0x0400009C RID: 156 RVA: 0x000B4DB0 File Offset: 0x000B2DB0
	public static method __m2mep@??0?$shared_ptr@VIniParser@@@std@@$$FQEAA@$$QEAV01@@Z;

	// Token: 0x0400009D RID: 157 RVA: 0x000B5550 File Offset: 0x000B3550
	public static method __m2mep@?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA_NXZ;

	// Token: 0x0400009E RID: 158 RVA: 0x000B5BE0 File Offset: 0x000B3BE0
	public static method __m2mep@?back@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEA_WXZ;

	// Token: 0x0400009F RID: 159 RVA: 0x000B59B0 File Offset: 0x000B39B0
	public static method __m2mep@?front@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBAAEB_WXZ;

	// Token: 0x040000A0 RID: 160 RVA: 0x000B5BF0 File Offset: 0x000B3BF0
	public static method __m2mep@?front@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEA_WXZ;

	// Token: 0x040000A1 RID: 161 RVA: 0x000B59C0 File Offset: 0x000B39C0
	public static method __m2mep@?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ;

	// Token: 0x040000A2 RID: 162 RVA: 0x000B59D0 File Offset: 0x000B39D0
	public static method __m2mep@?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ;

	// Token: 0x040000A3 RID: 163 RVA: 0x000B5E10 File Offset: 0x000B3E10
	public static method __m2mep@?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@_W@Z;

	// Token: 0x040000A4 RID: 164 RVA: 0x000B5E20 File Offset: 0x000B3E20
	public static method __m2mep@?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W@Z;

	// Token: 0x040000A5 RID: 165 RVA: 0x000B5E30 File Offset: 0x000B3E30
	public static method __m2mep@??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@AEBV01@@Z;

	// Token: 0x040000A6 RID: 166 RVA: 0x000B40F0 File Offset: 0x000B20F0
	public static method __m2mep@??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040000A7 RID: 167 RVA: 0x000B4200 File Offset: 0x000B2200
	public static method __m2mep@??0?$_Ptr_base@VIniParser@@@std@@$$FIEAA@XZ;

	// Token: 0x040000A8 RID: 168 RVA: 0x000B4DC0 File Offset: 0x000B2DC0
	public static method __m2mep@?pointer_to@?$pointer_traits@PEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allo;

	// Token: 0x040000A9 RID: 169 RVA: 0x000B4DD0 File Offset: 0x000B2DD0
	public static method __m2mep@?pointer_to@?$pointer_traits@PEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@$$FSAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040000AA RID: 170 RVA: 0x000B4DE0 File Offset: 0x000B2DE0
	public static method __m2mep@?pointer_to@?$pointer_traits@PEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@$$FSAPEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040000AB RID: 171 RVA: 0x000B4DF0 File Offset: 0x000B2DF0
	public static method __m2mep@?pointer_to@?$pointer_traits@PEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FSAPEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AEAV32@@Z;

	// Token: 0x040000AC RID: 172 RVA: 0x000B4E00 File Offset: 0x000B2E00
	public static method __m2mep@?pointer_to@?$pointer_traits@PEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FSAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AEBV32@@Z;

	// Token: 0x040000AD RID: 173 RVA: 0x000B4E10 File Offset: 0x000B2E10
	public static method __m2mep@?pointer_to@?$pointer_traits@PEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@$$FSAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@2@AEAU32@@Z;

	// Token: 0x040000AE RID: 174 RVA: 0x000B4E20 File Offset: 0x000B2E20
	public static method __m2mep@?_Myptr@?$_Unique_ptr_base@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEBAAEBQEAVLauncherApp@@XZ;

	// Token: 0x040000AF RID: 175 RVA: 0x000B4E30 File Offset: 0x000B2E30
	public static method __m2mep@?get_deleter@?$_Unique_ptr_base@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEAAAEAU?$default_delete@VLauncherApp@@@2@XZ;

	// Token: 0x040000B0 RID: 176 RVA: 0x000B4E40 File Offset: 0x000B2E40
	public static method __m2mep@?get@?$unique_ptr@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEBAPEAVLauncherApp@@XZ;

	// Token: 0x040000B1 RID: 177 RVA: 0x000B4210 File Offset: 0x000B2210
	public static method __m2mep@??R?$default_delete@VLauncherApp@@@std@@$$FQEBAXPEAVLauncherApp@@@Z;

	// Token: 0x040000B2 RID: 178 RVA: 0x000B5560 File Offset: 0x000B3560
	public static method __m2mep@?_Decref@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAAXXZ;

	// Token: 0x040000B3 RID: 179 RVA: 0x000B4220 File Offset: 0x000B2220
	public static method __m2mep@??8?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x040000B4 RID: 180 RVA: 0x000B5570 File Offset: 0x000B3570
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040000B5 RID: 181 RVA: 0x000B4E50 File Offset: 0x000B2E50
	public static method __m2mep@??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEBAAEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@1@XZ;

	// Token: 0x040000B6 RID: 182 RVA: 0x000B59E0 File Offset: 0x000B39E0
	public static method __m2mep@??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@M;

	// Token: 0x040000B7 RID: 183 RVA: 0x000B4230 File Offset: 0x000B2230
	public static method __m2mep@?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@XZ;

	// Token: 0x040000B8 RID: 184 RVA: 0x000B4E60 File Offset: 0x000B2E60
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040000B9 RID: 185 RVA: 0x000B4E70 File Offset: 0x000B2E70
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAAEAU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ;

	// Token: 0x040000BA RID: 186 RVA: 0x000B5C00 File Offset: 0x000B3C00
	public static method __m2mep@??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x040000BB RID: 187 RVA: 0x000B5580 File Offset: 0x000B3580
	public static method __m2mep@?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEBAAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_t;

	// Token: 0x040000BC RID: 188 RVA: 0x000B5FE0 File Offset: 0x000B3FE0
	public static method __m2mep@?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEAAXXZ;

	// Token: 0x040000BD RID: 189 RVA: 0x000B5E40 File Offset: 0x000B3E40
	public static method __m2mep@?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$all;

	// Token: 0x040000BE RID: 190 RVA: 0x000B5E50 File Offset: 0x000B3E50
	public static method __m2mep@??0?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA@AEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z;

	// Token: 0x040000BF RID: 191 RVA: 0x000B5C10 File Offset: 0x000B3C10
	public static method __m2mep@??R?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEBA_NAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@0@Z;

	// Token: 0x040000C0 RID: 192 RVA: 0x000B59F0 File Offset: 0x000B39F0
	public static method __m2mep@?swap@?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAAXAEAV12@@Z;

	// Token: 0x040000C1 RID: 193 RVA: 0x000B40C0 File Offset: 0x000B20C0
	public static method __m2mep@??0?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040000C2 RID: 194 RVA: 0x000B4240 File Offset: 0x000B2240
	public static method __m2mep@??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBA_NAEBV01@@Z;

	// Token: 0x040000C3 RID: 195 RVA: 0x000B4250 File Offset: 0x000B2250
	public static method __m2mep@??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEBAAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ;

	// Token: 0x040000C4 RID: 196 RVA: 0x000B5590 File Offset: 0x000B3590
	public static method __m2mep@??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z;

	// Token: 0x040000C5 RID: 197 RVA: 0x000B55A0 File Offset: 0x000B35A0
	public static method __m2mep@??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z;

	// Token: 0x040000C6 RID: 198 RVA: 0x000B55B0 File Offset: 0x000B35B0
	public static method __m2mep@?_Myhead@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEBAAEBQEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@2@XZ;

	// Token: 0x040000C7 RID: 199 RVA: 0x000B55C0 File Offset: 0x000B35C0
	public static method __m2mep@?_Myhead@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAAAEAPEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@2@XZ;

	// Token: 0x040000C8 RID: 200 RVA: 0x000B4E80 File Offset: 0x000B2E80
	public static method __m2mep@?_Get_data@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEBAAEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ;

	// Token: 0x040000C9 RID: 201 RVA: 0x000B4E90 File Offset: 0x000B2E90
	public static method __m2mep@?_Get_data@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAAAEAV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ;

	// Token: 0x040000CA RID: 202 RVA: 0x000B55D0 File Offset: 0x000B35D0
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040000CB RID: 203 RVA: 0x000B4270 File Offset: 0x000B2270
	public static method __m2mep@??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBAAEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_str;

	// Token: 0x040000CC RID: 204 RVA: 0x000B55E0 File Offset: 0x000B35E0
	public static method __m2mep@??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocat;

	// Token: 0x040000CD RID: 205 RVA: 0x000B4280 File Offset: 0x000B2280
	public static method __m2mep@??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEBAAEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_W;

	// Token: 0x040000CE RID: 206 RVA: 0x000B55F0 File Offset: 0x000B35F0
	public static method __m2mep@??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$;

	// Token: 0x040000CF RID: 207 RVA: 0x000B4290 File Offset: 0x000B2290
	public static method __m2mep@?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?;

	// Token: 0x040000D0 RID: 208 RVA: 0x000B4EA0 File Offset: 0x000B2EA0
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@;

	// Token: 0x040000D1 RID: 209 RVA: 0x000B4EB0 File Offset: 0x000B2EB0
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@;

	// Token: 0x040000D2 RID: 210 RVA: 0x000B4EC0 File Offset: 0x000B2EC0
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@;

	// Token: 0x040000D3 RID: 211 RVA: 0x000B4ED0 File Offset: 0x000B2ED0
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@;

	// Token: 0x040000D4 RID: 212 RVA: 0x000B5600 File Offset: 0x000B3600
	public static method __m2mep@?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W;

	// Token: 0x040000D5 RID: 213 RVA: 0x000B5D20 File Offset: 0x000B3D20
	public static method __m2mep@?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$alloc;

	// Token: 0x040000D6 RID: 214 RVA: 0x000B5D30 File Offset: 0x000B3D30
	public static method __m2mep@?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$alloc;

	// Token: 0x040000D7 RID: 215 RVA: 0x000B4EE0 File Offset: 0x000B2EE0
	public static method __m2mep@?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W;

	// Token: 0x040000D8 RID: 216 RVA: 0x000B5610 File Offset: 0x000B3610
	public static method __m2mep@?_Decref@?$_Ptr_base@VIniParser@@@std@@$$FIEAAXXZ;

	// Token: 0x040000D9 RID: 217 RVA: 0x000B5620 File Offset: 0x000B3620
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x040000DA RID: 218 RVA: 0x000B4EF0 File Offset: 0x000B2EF0
	public static method __m2mep@??D?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char;

	// Token: 0x040000DB RID: 219 RVA: 0x000B5A00 File Offset: 0x000B3A00
	public static method __m2mep@??0?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char;

	// Token: 0x040000DC RID: 220 RVA: 0x000B42A0 File Offset: 0x000B22A0
	public static method __m2mep@?_Lmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@st;

	// Token: 0x040000DD RID: 221 RVA: 0x000B4F00 File Offset: 0x000B2F00
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$al;

	// Token: 0x040000DE RID: 222 RVA: 0x000B4F10 File Offset: 0x000B2F10
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$all;

	// Token: 0x040000DF RID: 223 RVA: 0x000B5630 File Offset: 0x000B3630
	public static method __m2mep@?_Key@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@st;

	// Token: 0x040000E0 RID: 224 RVA: 0x000B5D40 File Offset: 0x000B3D40
	public static method __m2mep@?lower_bound@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040000E1 RID: 225 RVA: 0x000B5640 File Offset: 0x000B3640
	public static method __m2mep@?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@st;

	// Token: 0x040000E2 RID: 226 RVA: 0x000B4F20 File Offset: 0x000B2F20
	public static method __m2mep@??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBA_JAEBV01@@Z;

	// Token: 0x040000E3 RID: 227 RVA: 0x000B42B0 File Offset: 0x000B22B0
	public static method __m2mep@??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBAAEB_WXZ;

	// Token: 0x040000E4 RID: 228 RVA: 0x000B5A10 File Offset: 0x000B3A10
	public static method __m2mep@??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBA?AV01@_J@Z;

	// Token: 0x040000E5 RID: 229 RVA: 0x000B5650 File Offset: 0x000B3650
	public static method __m2mep@??H?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBA?AV01@_J@Z;

	// Token: 0x040000E6 RID: 230 RVA: 0x000B42C0 File Offset: 0x000B22C0
	public static method __m2mep@??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBAAEA_WXZ;

	// Token: 0x040000E7 RID: 231 RVA: 0x000B5660 File Offset: 0x000B3660
	public static method __m2mep@??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEAA@PEA_WPEBU_Container_base0@1@@Z;

	// Token: 0x040000E8 RID: 232 RVA: 0x000B42D0 File Offset: 0x000B22D0
	public static method __m2mep@?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@$$FSA?AV?$allocator@_W@2@AEBV32@@Z;

	// Token: 0x040000E9 RID: 233 RVA: 0x000B5670 File Offset: 0x000B3670
	public static method __m2mep@?_Copy_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAAXAEBV?$allocator@_W@2@@Z;

	// Token: 0x040000EA RID: 234 RVA: 0x000B5680 File Offset: 0x000B3680
	public static method __m2mep@?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA?AV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ;

	// Token: 0x040000EB RID: 235 RVA: 0x000B5A20 File Offset: 0x000B3A20
	public static method __m2mep@?_Construct_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAXAEBV12@@Z;

	// Token: 0x040000EC RID: 236 RVA: 0x000B42E0 File Offset: 0x000B22E0
	public static method __m2mep@??0?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAA@XZ;

	// Token: 0x040000ED RID: 237 RVA: 0x000B42F0 File Offset: 0x000B22F0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@U?$default_delete@VLauncherApp@@@std@@PEAVLauncherApp@@$00@std@@$$FQEBAAEBQEAVLauncherApp@@XZ;

	// Token: 0x040000EE RID: 238 RVA: 0x000B4300 File Offset: 0x000B2300
	public static method __m2mep@?_Get_first@?$_Compressed_pair@U?$default_delete@VLauncherApp@@@std@@PEAVLauncherApp@@$00@std@@$$FQEAAAEAU?$default_delete@VLauncherApp@@@2@XZ;

	// Token: 0x040000EF RID: 239 RVA: 0x000B5690 File Offset: 0x000B3690
	public static method __m2mep@?_Swap@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAAXAEAV12@@Z;

	// Token: 0x040000F0 RID: 240 RVA: 0x000B4310 File Offset: 0x000B2310
	public static method __m2mep@?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@2@$00@std@@$$FQEAAAEAV?$_C;

	// Token: 0x040000F1 RID: 241 RVA: 0x000B4320 File Offset: 0x000B2320
	public static method __m2mep@?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@2@$00@std@@$$FQEAAAEAU?$les;

	// Token: 0x040000F2 RID: 242 RVA: 0x000B4330 File Offset: 0x000B2330
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@std@@$$FQEAAAEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std;

	// Token: 0x040000F3 RID: 243 RVA: 0x000B4F30 File Offset: 0x000B2F30
	public static method __m2mep@??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040000F4 RID: 244 RVA: 0x000B4340 File Offset: 0x000B2340
	public static method __m2mep@??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEBAAEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@1@XZ;

	// Token: 0x040000F5 RID: 245 RVA: 0x000B56A0 File Offset: 0x000B36A0
	public static method __m2mep@??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_;

	// Token: 0x040000F6 RID: 246 RVA: 0x000B5A30 File Offset: 0x000B3A30
	public static method __m2mep@?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$sha;

	// Token: 0x040000F7 RID: 247 RVA: 0x000B5D50 File Offset: 0x000B3D50
	public static method __m2mep@??0?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA@AEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z;

	// Token: 0x040000F8 RID: 248 RVA: 0x000B4F40 File Offset: 0x000B2F40
	public static method __m2mep@?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEBAAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@AEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@;

	// Token: 0x040000F9 RID: 249 RVA: 0x000B5FC0 File Offset: 0x000B3FC0
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator;

	// Token: 0x040000FA RID: 250 RVA: 0x000B4350 File Offset: 0x000B2350
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@$$FQEBAAEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ;

	// Token: 0x040000FB RID: 251 RVA: 0x000B4360 File Offset: 0x000B2360
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@$$FQEAAAEAV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ;

	// Token: 0x040000FC RID: 252 RVA: 0x000B4F50 File Offset: 0x000B2F50
	public static method __m2mep@??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAA@PEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@1@PEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@1@@Z;

	// Token: 0x040000FD RID: 253 RVA: 0x000B4370 File Offset: 0x000B2370
	public static method __m2mep@?_Get_second@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_tra;

	// Token: 0x040000FE RID: 254 RVA: 0x000B4380 File Offset: 0x000B2380
	public static method __m2mep@?_Get_second@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_tra;

	// Token: 0x040000FF RID: 255 RVA: 0x000B4390 File Offset: 0x000B2390
	public static method __m2mep@?_Get_first@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_trai;

	// Token: 0x04000100 RID: 256 RVA: 0x000B43A0 File Offset: 0x000B23A0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_trai;

	// Token: 0x04000101 RID: 257 RVA: 0x000B43B0 File Offset: 0x000B23B0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$a;

	// Token: 0x04000102 RID: 258 RVA: 0x000B43C0 File Offset: 0x000B23C0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$a;

	// Token: 0x04000103 RID: 259 RVA: 0x000B4F60 File Offset: 0x000B2F60
	public static method __m2mep@??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x04000104 RID: 260 RVA: 0x000B4F70 File Offset: 0x000B2F70
	public static method __m2mep@??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$al;

	// Token: 0x04000105 RID: 261 RVA: 0x000B4F80 File Offset: 0x000B2F80
	public static method __m2mep@?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W;

	// Token: 0x04000106 RID: 262 RVA: 0x000B43D0 File Offset: 0x000B23D0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x04000107 RID: 263 RVA: 0x000B43E0 File Offset: 0x000B23E0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x04000108 RID: 264 RVA: 0x000B43F0 File Offset: 0x000B23F0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$;

	// Token: 0x04000109 RID: 265 RVA: 0x000B4F90 File Offset: 0x000B2F90
	public static method __m2mep@??E?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_;

	// Token: 0x0400010A RID: 266 RVA: 0x000B4400 File Offset: 0x000B2400
	public static method __m2mep@??D?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x0400010B RID: 267 RVA: 0x000B56B0 File Offset: 0x000B36B0
	public static method __m2mep@??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x0400010C RID: 268 RVA: 0x000B4FA0 File Offset: 0x000B2FA0
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$al;

	// Token: 0x0400010D RID: 269 RVA: 0x000B4FB0 File Offset: 0x000B2FB0
	public static method __m2mep@?_Kfn@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@st;

	// Token: 0x0400010E RID: 270 RVA: 0x000B4410 File Offset: 0x000B2410
	public static method __m2mep@?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBAXAEBV12@@Z;

	// Token: 0x0400010F RID: 271 RVA: 0x000B4FC0 File Offset: 0x000B2FC0
	public static method __m2mep@??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEAA@PEB_WPEBU_Container_base0@1@@Z;

	// Token: 0x04000110 RID: 272 RVA: 0x000B56C0 File Offset: 0x000B36C0
	public static method __m2mep@??Z?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEAAAEAV01@_J@Z;

	// Token: 0x04000111 RID: 273 RVA: 0x000B4FD0 File Offset: 0x000B2FD0
	public static method __m2mep@??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEAAAEAV01@_J@Z;

	// Token: 0x04000112 RID: 274 RVA: 0x000B4FE0 File Offset: 0x000B2FE0
	public static method __m2mep@??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAA@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@1@PEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2;

	// Token: 0x04000113 RID: 275 RVA: 0x000B56D0 File Offset: 0x000B36D0
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAA?AV01@H@Z;

	// Token: 0x04000114 RID: 276 RVA: 0x000B4420 File Offset: 0x000B2420
	public static method __m2mep@?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FSAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@PEAU32@@Z;

	// Token: 0x04000115 RID: 277 RVA: 0x000B4FF0 File Offset: 0x000B2FF0
	public static method __m2mep@?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V;

	// Token: 0x04000116 RID: 278 RVA: 0x000B5C20 File Offset: 0x000B3C20
	public static method __m2mep@?_Construct@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAXXZ;

	// Token: 0x04000117 RID: 279 RVA: 0x000B5FA0 File Offset: 0x000B3FA0
	public static method __m2mep@?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAXXZ;

	// Token: 0x04000118 RID: 280 RVA: 0x000B5F60 File Offset: 0x000B3F60
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAA?AV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator;

	// Token: 0x04000119 RID: 281 RVA: 0x000B4430 File Offset: 0x000B2430
	public static method __m2mep@?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FSAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_t;

	// Token: 0x0400011A RID: 282 RVA: 0x000B4440 File Offset: 0x000B2440
	public static method __m2mep@?_Get_second@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x0400011B RID: 283 RVA: 0x000B4450 File Offset: 0x000B2450
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$;

	// Token: 0x0400011C RID: 284 RVA: 0x000B5000 File Offset: 0x000B3000
	public static method __m2mep@??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_;

	// Token: 0x0400011D RID: 285 RVA: 0x000B4460 File Offset: 0x000B2460
	public static method __m2mep@?_Min@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@;

	// Token: 0x0400011E RID: 286 RVA: 0x000B4470 File Offset: 0x000B2470
	public static method __m2mep@??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEAAAEAV01@_J@Z;

	// Token: 0x0400011F RID: 287 RVA: 0x000B4480 File Offset: 0x000B2480
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@std@@$$FQEAAAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shar;

	// Token: 0x04000120 RID: 288 RVA: 0x000B56E0 File Offset: 0x000B36E0
	public static method __m2mep@?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEAAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@V?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INF;

	// Token: 0x04000121 RID: 289 RVA: 0x000B4490 File Offset: 0x000B2490
	public static method __m2mep@?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@XZ;

	// Token: 0x04000122 RID: 290 RVA: 0x000B44A0 File Offset: 0x000B24A0
	public static method __m2mep@?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@XZ;

	// Token: 0x04000123 RID: 291 RVA: 0x000B5A40 File Offset: 0x000B3A40
	public static method __m2mep@?_Buyheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$share;

	// Token: 0x04000124 RID: 292 RVA: 0x000B5F70 File Offset: 0x000B3F70
	public static method __m2mep@?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_IN;

	// Token: 0x04000125 RID: 293 RVA: 0x000B44B0 File Offset: 0x000B24B0
	public static method __m2mep@?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@@Z;

	// Token: 0x04000126 RID: 294 RVA: 0x000B44C0 File Offset: 0x000B24C0
	public static method __m2mep@?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@@Z;

	// Token: 0x04000127 RID: 295 RVA: 0x000B44D0 File Offset: 0x000B24D0
	public static method __m2mep@?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FSAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@PEAU32@@Z;

	// Token: 0x04000128 RID: 296 RVA: 0x000B56F0 File Offset: 0x000B36F0
	public static method __m2mep@?allocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@$$FQEAAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@_K@Z;

	// Token: 0x04000129 RID: 297 RVA: 0x000B5010 File Offset: 0x000B3010
	public static method __m2mep@?deallocate@?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@$$FQEAAXQEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@_K@Z;

	// Token: 0x0400012A RID: 298 RVA: 0x000B5A50 File Offset: 0x000B3A50
	public static method __m2mep@??$make_shared@VIniParser@@AEAPEBW4byte@std@@AEAI@std@@$$FYA?AV?$shared_ptr@VIniParser@@@0@AEAPEBW4byte@0@AEAI@Z;

	// Token: 0x0400012B RID: 299 RVA: 0x000B44E0 File Offset: 0x000B24E0
	public static method __m2mep@??$LOG_MSG@PEB_WPEB_W@@$$FYAXPEB_W0@Z;

	// Token: 0x0400012C RID: 300 RVA: 0x000B5A60 File Offset: 0x000B3A60
	public static method __m2mep@??$make_shared@UMODULE_INFO@ModuleManager@@$$V@std@@$$FYA?AV?$shared_ptr@UMODULE_INFO@ModuleManager@@@0@XZ;

	// Token: 0x0400012D RID: 301 RVA: 0x000B5020 File Offset: 0x000B3020
	public static method __m2mep@??$?CUMODULE_INFO@ModuleManager@@$0A@@?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEBAPEAUMODULE_INFO@ModuleManager@@XZ;

	// Token: 0x0400012E RID: 302 RVA: 0x000B5030 File Offset: 0x000B3030
	public static method __m2mep@??$?9UMODULE_INFO@ModuleManager@@@std@@$$FYA_N$$TAEBV?$shared_ptr@UMODULE_INFO@ModuleManager@@@0@@Z;

	// Token: 0x0400012F RID: 303 RVA: 0x000B5E60 File Offset: 0x000B3E60
	public static method __m2mep@??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@$$FYA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV10@QEB_W@Z;

	// Token: 0x04000130 RID: 304 RVA: 0x000B44F0 File Offset: 0x000B24F0
	public static method __m2mep@??$LOG_MSG@PEB_W@@$$FYAXPEB_W@Z;

	// Token: 0x04000131 RID: 305 RVA: 0x000B5C30 File Offset: 0x000B3C30
	public static method __m2mep@??$make_unique@VLauncherApp@@$$V$0A@@std@@$$FYA?AV?$unique_ptr@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@0@XZ;

	// Token: 0x04000132 RID: 306 RVA: 0x000B5050 File Offset: 0x000B3050
	public static method __m2mep@??$replace@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@_W@std@@$$FYAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AEB_W1@Z;

	// Token: 0x04000133 RID: 307 RVA: 0x000B5040 File Offset: 0x000B3040
	public static method __m2mep@??$_Get_unwrapped@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$0A@@std@@$$FYAPEA_WAEBV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z;

	// Token: 0x04000134 RID: 308 RVA: 0x000B4500 File Offset: 0x000B2500
	public static method __m2mep@??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FYAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@0@AEAV10@@Z;

	// Token: 0x04000135 RID: 309 RVA: 0x000B5FF0 File Offset: 0x000B3FF0
	public static method __m2mep@??$try_emplace@$$V@?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@@std@@$$FQEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x04000136 RID: 310 RVA: 0x000B4510 File Offset: 0x000B2510
	public static method __m2mep@??$addressof@$$CBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FYAPEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V;

	// Token: 0x04000137 RID: 311 RVA: 0x000B4520 File Offset: 0x000B2520
	public static method __m2mep@??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FYAPEAV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$al;

	// Token: 0x04000138 RID: 312 RVA: 0x000B4530 File Offset: 0x000B2530
	public static method __m2mep@??$addressof@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits;

	// Token: 0x04000139 RID: 313 RVA: 0x000B4540 File Offset: 0x000B2540
	public static method __m2mep@??$addressof@$$CBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FYAPEBV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@AEBV10@@Z;

	// Token: 0x0400013A RID: 314 RVA: 0x000B4550 File Offset: 0x000B2550
	public static method __m2mep@??$addressof@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@$$FYAPEAV?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@AEAV10@@Z;

	// Token: 0x0400013B RID: 315 RVA: 0x000B4560 File Offset: 0x000B2560
	public static method __m2mep@??$move@AEAV?$shared_ptr@VIniParser@@@std@@@std@@$$FYA$$QEAV?$shared_ptr@VIniParser@@@0@AEAV10@@Z;

	// Token: 0x0400013C RID: 316 RVA: 0x000B4570 File Offset: 0x000B2570
	public static method __m2mep@??$_Move_construct_from@VIniParser@@@?$_Ptr_base@VIniParser@@@std@@$$FIEAAX$$QEAV01@@Z;

	// Token: 0x0400013D RID: 317 RVA: 0x000B4580 File Offset: 0x000B2580
	public static method __m2mep@??$_Refancy@PEA_W$0A@@std@@$$FYAPEA_WPEA_W@Z;

	// Token: 0x0400013E RID: 318 RVA: 0x000B45A0 File Offset: 0x000B25A0
	public static method __m2mep@??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYAPEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z;

	// Token: 0x0400013F RID: 319 RVA: 0x000B45E0 File Offset: 0x000B25E0
	public static method __m2mep@??$addressof@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?;

	// Token: 0x04000140 RID: 320 RVA: 0x000B45F0 File Offset: 0x000B25F0
	public static method __m2mep@??$addressof@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@$$FYAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@0@;

	// Token: 0x04000141 RID: 321 RVA: 0x000B4600 File Offset: 0x000B2600
	public static method __m2mep@??$addressof@$$CBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@$$FYAPEBU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2;

	// Token: 0x04000142 RID: 322 RVA: 0x000B4620 File Offset: 0x000B2620
	public static method __m2mep@??$addressof@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@$$FYAPEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@0@AEAU10@@Z;

	// Token: 0x04000143 RID: 323 RVA: 0x000B5D60 File Offset: 0x000B3D60
	public static method __m2mep@??$_Lbound@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEBAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$;

	// Token: 0x04000144 RID: 324 RVA: 0x000B5A70 File Offset: 0x000B3A70
	public static method __m2mep@??$?M_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@$$FYA_NAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z;

	// Token: 0x04000145 RID: 325 RVA: 0x000B5060 File Offset: 0x000B3060
	public static method __m2mep@??$_Copy_construct_from@UMODULE_INFO@ModuleManager@@@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAAXAEBV?$shared_ptr@UMODULE_INFO@ModuleManager@@@1@@Z;

	// Token: 0x04000146 RID: 326 RVA: 0x000B5C40 File Offset: 0x000B3C40
	public static method __m2mep@??$_Lbound@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std;

	// Token: 0x04000147 RID: 327 RVA: 0x000B5C50 File Offset: 0x000B3C50
	public static method __m2mep@??$_Lbound@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@;

	// Token: 0x04000148 RID: 328 RVA: 0x000B5070 File Offset: 0x000B3070
	public static method __m2mep@??$_Pocca@V?$allocator@_W@std@@@std@@$$FYAXAEAV?$allocator@_W@0@AEBV10@@Z;

	// Token: 0x04000149 RID: 329 RVA: 0x000B4640 File Offset: 0x000B2640
	public static method __m2mep@??$addressof@$$CBV?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FYAPEBV?$_String_val@U?$_Simple_types@_W@std@@@0@AEBV10@@Z;

	// Token: 0x0400014A RID: 330 RVA: 0x000B4650 File Offset: 0x000B2650
	public static method __m2mep@??$_Refancy@PEB_W$0A@@std@@$$FYAPEB_WPEB_W@Z;

	// Token: 0x0400014B RID: 331 RVA: 0x000B5080 File Offset: 0x000B3080
	public static method __m2mep@??$swap@PEAUMODULE_INFO@ModuleManager@@X@std@@$$FYAXAEAPEAUMODULE_INFO@ModuleManager@@0@Z;

	// Token: 0x0400014C RID: 332 RVA: 0x000B5090 File Offset: 0x000B3090
	public static method __m2mep@??$swap@PEAV_Ref_count_base@std@@X@std@@$$FYAXAEAPEAV_Ref_count_base@0@0@Z;

	// Token: 0x0400014D RID: 333 RVA: 0x000B5700 File Offset: 0x000B3700
	public static method __m2mep@??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEA;

	// Token: 0x0400014E RID: 334 RVA: 0x000B5710 File Offset: 0x000B3710
	public static method __m2mep@??$?0AEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@U_Zero_then_variadic_args_t@1@@?$_Compressed_pair@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$alloca;

	// Token: 0x0400014F RID: 335 RVA: 0x000B46A0 File Offset: 0x000B26A0
	public static method __m2mep@??$_Kfn@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@$$FSAAEBV?$basic_string@_W;

	// Token: 0x04000150 RID: 336 RVA: 0x000B46B0 File Offset: 0x000B26B0
	public static method __m2mep@??$_Kfn@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator;

	// Token: 0x04000151 RID: 337 RVA: 0x000B46C0 File Offset: 0x000B26C0
	public static method __m2mep@??$_Kfn@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?;

	// Token: 0x04000152 RID: 338 RVA: 0x000B5F10 File Offset: 0x000B3F10
	public static method __m2mep@??$destroy@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@;

	// Token: 0x04000153 RID: 339 RVA: 0x000B50A0 File Offset: 0x000B30A0
	public static method __m2mep@??$swap@DX@std@@$$FYAXAEAD0@Z;

	// Token: 0x04000154 RID: 340 RVA: 0x000B46D0 File Offset: 0x000B26D0
	public static method __m2mep@??$addressof@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@$$FYAPEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@0@AEAPEAU10@@Z;

	// Token: 0x04000155 RID: 341 RVA: 0x000B50B0 File Offset: 0x000B30B0
	public static method __m2mep@??$construct@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@AEAPEAU12@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shar;

	// Token: 0x04000156 RID: 342 RVA: 0x000B46E0 File Offset: 0x000B26E0
	public static method __m2mep@??$_Get_size_of_n@$0FA@@std@@$$FYA_K_K@Z;

	// Token: 0x04000157 RID: 343 RVA: 0x000B5E70 File Offset: 0x000B3E70
	public static method __m2mep@??_G?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@$$FQEAAPEAXI@Z;

	// Token: 0x04000158 RID: 344 RVA: 0x000B5D70 File Offset: 0x000B3D70
	public static method __m2mep@??1?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@$$FQEAA@XZ;

	// Token: 0x04000159 RID: 345 RVA: 0x000B5180 File Offset: 0x000B3180
	public static method __m2mep@?_Delete_this@?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FEEAAXXZ;

	// Token: 0x0400015A RID: 346 RVA: 0x000B5170 File Offset: 0x000B3170
	public static method __m2mep@?_Destroy@?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FEEAAXXZ;

	// Token: 0x0400015B RID: 347 RVA: 0x000B46F0 File Offset: 0x000B26F0
	public static method __m2mep@?_Getptr@?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FQEAAPEAUMODULE_INFO@ModuleManager@@XZ;

	// Token: 0x0400015C RID: 348 RVA: 0x000B5130 File Offset: 0x000B3130
	public static method __m2mep@?_Delete_this@?$_Ref_count_obj@VIniParser@@@std@@$$FEEAAXXZ;

	// Token: 0x0400015D RID: 349 RVA: 0x000B5120 File Offset: 0x000B3120
	public static method __m2mep@?_Destroy@?$_Ref_count_obj@VIniParser@@@std@@$$FEEAAXXZ;

	// Token: 0x0400015E RID: 350 RVA: 0x000B4700 File Offset: 0x000B2700
	public static method __m2mep@?_Getptr@?$_Ref_count_obj@VIniParser@@@std@@$$FQEAAPEAVIniParser@@XZ;

	// Token: 0x0400015F RID: 351 RVA: 0x000B4710 File Offset: 0x000B2710
	public static method __m2mep@?get@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEBAPEAUMODULE_INFO@ModuleManager@@XZ;

	// Token: 0x04000160 RID: 352 RVA: 0x000B50C0 File Offset: 0x000B30C0
	public static method __m2mep@?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@2@QEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UM;

	// Token: 0x04000161 RID: 353 RVA: 0x000B50D0 File Offset: 0x000B30D0
	public static method __m2mep@?_Get_data@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x04000162 RID: 354 RVA: 0x000B5C60 File Offset: 0x000B3C60
	public static method __m2mep@?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEBA_NAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z;

	// Token: 0x04000163 RID: 355 RVA: 0x000B50E0 File Offset: 0x000B30E0
	public static method __m2mep@??0?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAA@$$QEAV01@@Z;

	// Token: 0x04000164 RID: 356 RVA: 0x000B4720 File Offset: 0x000B2720
	public static method __m2mep@??0?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FQEAA@XZ;

	// Token: 0x04000165 RID: 357 RVA: 0x000B5A80 File Offset: 0x000B3A80
	public static method __m2mep@?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocato;

	// Token: 0x04000166 RID: 358 RVA: 0x000B5A90 File Offset: 0x000B3A90
	public static method __m2mep@?_Compare@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2;

	// Token: 0x04000167 RID: 359 RVA: 0x000B4730 File Offset: 0x000B2730
	public static method __m2mep@??0?$shared_ptr@VIniParser@@@std@@$$FQEAA@XZ;

	// Token: 0x04000168 RID: 360 RVA: 0x000B4750 File Offset: 0x000B2750
	public static method __m2mep@?_Unwrapped@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FQEBAPEA_WXZ;

	// Token: 0x04000169 RID: 361 RVA: 0x000B4740 File Offset: 0x000B2740
	public static method __m2mep@??$_Const_cast@$$CB_W@std@@$$FYAPEA_WPEB_W@Z;

	// Token: 0x0400016A RID: 362 RVA: 0x000B5720 File Offset: 0x000B3720
	public static method __m2mep@?compare@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBAHAEBV12@@Z;

	// Token: 0x0400016B RID: 363 RVA: 0x000B60A0 File Offset: 0x000B40A0
	public static method __m2mep@??_GIniParser@@$$FQEAAPEAXI@Z;

	// Token: 0x0400016C RID: 364 RVA: 0x000B60B0 File Offset: 0x000B40B0
	public static method __m2mep@??1IniParser@@$$FQEAA@XZ;

	// Token: 0x0400016D RID: 365 RVA: 0x000B60C0 File Offset: 0x000B40C0
	public static method __m2mep@??1?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$ba;

	// Token: 0x0400016E RID: 366 RVA: 0x000B4760 File Offset: 0x000B2760
	public static method __m2mep@?_Get_second@?$_Compressed_pair@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@2@$00@std@@$$FQEBAAEBV?$_C;

	// Token: 0x0400016F RID: 367 RVA: 0x000B4770 File Offset: 0x000B2770
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@std@@$$FQEBAAEBV?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std;

	// Token: 0x04000170 RID: 368 RVA: 0x000B50F0 File Offset: 0x000B30F0
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEBAAEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@XZ;

	// Token: 0x04000171 RID: 369 RVA: 0x000B6440 File Offset: 0x000B4440
	public static method __m2mep@?_Mysize@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAAAEA_KXZ;

	// Token: 0x04000172 RID: 370 RVA: 0x000B5100 File Offset: 0x000B3100
	public static method __m2mep@?_Getcomp@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$all;

	// Token: 0x04000173 RID: 371 RVA: 0x000B60D0 File Offset: 0x000B40D0
	public static method __m2mep@??1?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@;

	// Token: 0x04000174 RID: 372 RVA: 0x000B4780 File Offset: 0x000B2780
	public static method __m2mep@?_Get_first@?$_Compressed_pair@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@2@$00@std@@$$FQEBAAEBU?$les;

	// Token: 0x04000175 RID: 373 RVA: 0x000B4790 File Offset: 0x000B2790
	public static method __m2mep@?_Get_first@?$_Compressed_pair@Uci_comp@IniParser@@V?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x04000176 RID: 374 RVA: 0x000B60E0 File Offset: 0x000B40E0
	public static method __m2mep@??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x04000177 RID: 375 RVA: 0x000B6160 File Offset: 0x000B4160
	public static method __m2mep@?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x04000178 RID: 376 RVA: 0x000B60F0 File Offset: 0x000B40F0
	public static method __m2mep@?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V;

	// Token: 0x04000179 RID: 377 RVA: 0x000B6170 File Offset: 0x000B4170
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x0400017A RID: 378 RVA: 0x000B64D0 File Offset: 0x000B44D0
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU;

	// Token: 0x0400017B RID: 379 RVA: 0x000B6100 File Offset: 0x000B4100
	public static method __m2mep@?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$alloc;

	// Token: 0x0400017C RID: 380 RVA: 0x000B64B0 File Offset: 0x000B44B0
	public static method __m2mep@?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x0400017D RID: 381 RVA: 0x000B6180 File Offset: 0x000B4180
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@s;

	// Token: 0x0400017E RID: 382 RVA: 0x000B6110 File Offset: 0x000B4110
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$c;

	// Token: 0x0400017F RID: 383 RVA: 0x000B6190 File Offset: 0x000B4190
	public static method __m2mep@?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@;

	// Token: 0x04000180 RID: 384 RVA: 0x000B61C0 File Offset: 0x000B41C0
	public static method __m2mep@?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@st;

	// Token: 0x04000181 RID: 385 RVA: 0x000B61B0 File Offset: 0x000B41B0
	public static method __m2mep@?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std;

	// Token: 0x04000182 RID: 386 RVA: 0x000B64C0 File Offset: 0x000B44C0
	public static method __m2mep@?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@;

	// Token: 0x04000183 RID: 387 RVA: 0x000B61E0 File Offset: 0x000B41E0
	public static method __m2mep@?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@;

	// Token: 0x04000184 RID: 388 RVA: 0x000B61D0 File Offset: 0x000B41D0
	public static method __m2mep@?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@;

	// Token: 0x04000185 RID: 389 RVA: 0x000B61A0 File Offset: 0x000B41A0
	public static method __m2mep@?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@;

	// Token: 0x04000186 RID: 390 RVA: 0x000B47A0 File Offset: 0x000B27A0
	public static method __m2mep@??$forward@AEAPEBW4byte@std@@@std@@$$FYAAEAPEBW4byte@0@AEAPEBW410@@Z;

	// Token: 0x04000187 RID: 391 RVA: 0x000B47B0 File Offset: 0x000B27B0
	public static method __m2mep@??$forward@AEAI@std@@$$FYAAEAIAEAI@Z;

	// Token: 0x04000188 RID: 392 RVA: 0x000B5110 File Offset: 0x000B3110
	public static method __m2mep@??$?0AEAPEBW4byte@std@@AEAI@?$_Ref_count_obj@VIniParser@@@std@@$$FQEAA@AEAPEBW4byte@1@AEAI@Z;

	// Token: 0x04000189 RID: 393 RVA: 0x000B5730 File Offset: 0x000B3730
	public static method __m2mep@??$_Set_ptr_rep_and_enable_shared@VIniParser@@@?$shared_ptr@VIniParser@@@std@@$$FAEAAXPEAVIniParser@@PEAV_Ref_count_base@1@@Z;

	// Token: 0x0400018A RID: 394 RVA: 0x000B5160 File Offset: 0x000B3160
	public static method __m2mep@??$?0$$V@?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FQEAA@XZ;

	// Token: 0x0400018B RID: 395 RVA: 0x000B5740 File Offset: 0x000B3740
	public static method __m2mep@??$_Set_ptr_rep_and_enable_shared@UMODULE_INFO@ModuleManager@@@?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@$$FAEAAXPEAUMODULE_INFO@ModuleManager@@PEAV_Ref_count_base@1@@Z;

	// Token: 0x0400018C RID: 396 RVA: 0x000B5AA0 File Offset: 0x000B3AA0
	public static method __m2mep@??$?0U?$default_delete@VLauncherApp@@@std@@$0A@@?$unique_ptr@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEAA@PEAVLauncherApp@@@Z;

	// Token: 0x0400018D RID: 397 RVA: 0x000B47C0 File Offset: 0x000B27C0
	public static method __m2mep@??$_Adl_verify_range@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@V12@@std@@$$FYAXAEBV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z;

	// Token: 0x0400018E RID: 398 RVA: 0x000B5FD0 File Offset: 0x000B3FD0
	public static method __m2mep@??$_Try_emplace@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$V@?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@@std@@$$FQEAA?AU?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$p;

	// Token: 0x0400018F RID: 399 RVA: 0x000B47D0 File Offset: 0x000B27D0
	public static method __m2mep@??$forward@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYAAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEBV10@@Z;

	// Token: 0x04000190 RID: 400 RVA: 0x000B47E0 File Offset: 0x000B27E0
	public static method __m2mep@??$_Pocca@V?$allocator@_W@std@@@std@@$$FYAXAEAV?$allocator@_W@0@AEBV10@U?$integral_constant@_N$0A@@0@@Z;

	// Token: 0x04000191 RID: 401 RVA: 0x000B47F0 File Offset: 0x000B27F0
	public static method __m2mep@??$move@AEAPEAUMODULE_INFO@ModuleManager@@@std@@$$FYA$$QEAPEAUMODULE_INFO@ModuleManager@@AEAPEAU12@@Z;

	// Token: 0x04000192 RID: 402 RVA: 0x000B4800 File Offset: 0x000B2800
	public static method __m2mep@??$move@AEAPEAV_Ref_count_base@std@@@std@@$$FYA$$QEAPEAV_Ref_count_base@0@AEAPEAV10@@Z;

	// Token: 0x04000193 RID: 403 RVA: 0x000B4810 File Offset: 0x000B2810
	public static method __m2mep@??$destroy@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODU;

	// Token: 0x04000194 RID: 404 RVA: 0x000B4820 File Offset: 0x000B2820
	public static method __m2mep@??$forward@AEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@$$FYAAEBU?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AEBU10@@Z;

	// Token: 0x04000195 RID: 405 RVA: 0x000B4830 File Offset: 0x000B2830
	public static method __m2mep@??$forward@U_Zero_then_variadic_args_t@std@@@std@@$$FYA$$QEAU_Zero_then_variadic_args_t@0@AEAU10@@Z;

	// Token: 0x04000196 RID: 406 RVA: 0x000B51A0 File Offset: 0x000B31A0
	public static method __m2mep@??$?0$$V@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@std@@$$FQEAA@U_Zero_then_variadic_args_t@1@@Z;

	// Token: 0x04000197 RID: 407 RVA: 0x000B4840 File Offset: 0x000B2840
	public static method __m2mep@??$move@AEAD@std@@$$FYA$$QEADAEAD@Z;

	// Token: 0x04000198 RID: 408 RVA: 0x000B4850 File Offset: 0x000B2850
	public static method __m2mep@??$forward@AEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@$$FYAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@0@AEAPEAU10@@Z;

	// Token: 0x04000199 RID: 409 RVA: 0x000B4860 File Offset: 0x000B2860
	public static method __m2mep@??$move@AEAV?$shared_ptr@UMODULE_INFO@ModuleManager@@@std@@@std@@$$FYA$$QEAV?$shared_ptr@UMODULE_INFO@ModuleManager@@@0@AEAV10@@Z;

	// Token: 0x0400019A RID: 410 RVA: 0x000B4870 File Offset: 0x000B2870
	public static method __m2mep@??$_Move_construct_from@UMODULE_INFO@ModuleManager@@@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAAX$$QEAV01@@Z;

	// Token: 0x0400019B RID: 411 RVA: 0x000B51B0 File Offset: 0x000B31B0
	public static method __m2mep@??$_Traits_compare@U?$char_traits@_W@std@@@std@@$$FYAHQEB_W_K01@Z;

	// Token: 0x0400019C RID: 412 RVA: 0x000B6120 File Offset: 0x000B4120
	public static method __m2mep@??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std;

	// Token: 0x0400019D RID: 413 RVA: 0x000B61F0 File Offset: 0x000B41F0
	public static method __m2mep@??$destroy@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$a;

	// Token: 0x0400019E RID: 414 RVA: 0x000B5140 File Offset: 0x000B3140
	public static method __m2mep@??_E?$_Ref_count_obj@VIniParser@@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x0400019F RID: 415 RVA: 0x000B64E0 File Offset: 0x000B44E0
	public static method __m2mep@??1?$_Ref_count_obj@VIniParser@@@std@@$$FUEAA@XZ;

	// Token: 0x040001A0 RID: 416 RVA: 0x000B5190 File Offset: 0x000B3190
	public static method __m2mep@??_E?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040001A1 RID: 417 RVA: 0x000B64F0 File Offset: 0x000B44F0
	public static method __m2mep@??1?$_Ref_count_obj@UMODULE_INFO@ModuleManager@@@std@@$$FUEAA@XZ;

	// Token: 0x040001A2 RID: 418 RVA: 0x000B6200 File Offset: 0x000B4200
	public static method __m2mep@??_G?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator;

	// Token: 0x040001A3 RID: 419 RVA: 0x000B6210 File Offset: 0x000B4210
	public static method __m2mep@??1?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@;

	// Token: 0x040001A4 RID: 420 RVA: 0x000B6220 File Offset: 0x000B4220
	public static method __m2mep@??1?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@;

	// Token: 0x040001A5 RID: 421 RVA: 0x000B4880 File Offset: 0x000B2880
	public static method __m2mep@?_Set_ptr_rep@?$_Ptr_base@UMODULE_INFO@ModuleManager@@@std@@$$FIEAAXPEAUMODULE_INFO@ModuleManager@@PEAV_Ref_count_base@2@@Z;

	// Token: 0x040001A6 RID: 422 RVA: 0x000B4890 File Offset: 0x000B2890
	public static method __m2mep@??0?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x040001A7 RID: 423 RVA: 0x000B48A0 File Offset: 0x000B28A0
	public static method __m2mep@??0?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@$$FQEAA@XZ;

	// Token: 0x040001A8 RID: 424 RVA: 0x000B63C0 File Offset: 0x000B43C0
	public static method __m2mep@?_Getal@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAAAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@2@XZ;

	// Token: 0x040001A9 RID: 425 RVA: 0x000B6230 File Offset: 0x000B4230
	public static method __m2mep@??1?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@;

	// Token: 0x040001AA RID: 426 RVA: 0x000B48B0 File Offset: 0x000B28B0
	public static method __m2mep@?_Set_ptr_rep@?$_Ptr_base@VIniParser@@@std@@$$FIEAAXPEAVIniParser@@PEAV_Ref_count_base@2@@Z;

	// Token: 0x040001AB RID: 427 RVA: 0x000B6130 File Offset: 0x000B4130
	public static method __m2mep@?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_stri;

	// Token: 0x040001AC RID: 428 RVA: 0x000B48C0 File Offset: 0x000B28C0
	public static method __m2mep@?compare@?$_WChar_traits@_W@std@@$$FSAHQEB_W0_K@Z;

	// Token: 0x040001AD RID: 429 RVA: 0x000B63D0 File Offset: 0x000B43D0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@V?$_List_val@U?$_List_simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@$00@std@@$$FQEAAAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@2@XZ;

	// Token: 0x040001AE RID: 430 RVA: 0x000B6240 File Offset: 0x000B4240
	public static method __m2mep@??1?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allo;

	// Token: 0x040001AF RID: 431 RVA: 0x000B62C0 File Offset: 0x000B42C0
	public static method __m2mep@?_Tidy@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040001B0 RID: 432 RVA: 0x000B6250 File Offset: 0x000B4250
	public static method __m2mep@?_Freeheadnode@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@;

	// Token: 0x040001B1 RID: 433 RVA: 0x000B62D0 File Offset: 0x000B42D0
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040001B2 RID: 434 RVA: 0x000B64A0 File Offset: 0x000B44A0
	public static method __m2mep@??E?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@@std@@$$FQEAA?AV01@H@Z;

	// Token: 0x040001B3 RID: 435 RVA: 0x000B6260 File Offset: 0x000B4260
	public static method __m2mep@?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?;

	// Token: 0x040001B4 RID: 436 RVA: 0x000B6480 File Offset: 0x000B4480
	public static method __m2mep@?clear@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040001B5 RID: 437 RVA: 0x000B62E0 File Offset: 0x000B42E0
	public static method __m2mep@?erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_;

	// Token: 0x040001B6 RID: 438 RVA: 0x000B6270 File Offset: 0x000B4270
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$al;

	// Token: 0x040001B7 RID: 439 RVA: 0x000B62F0 File Offset: 0x000B42F0
	public static method __m2mep@?_Extract@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEAAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$;

	// Token: 0x040001B8 RID: 440 RVA: 0x000B6320 File Offset: 0x000B4320
	public static method __m2mep@?_Rmost@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?;

	// Token: 0x040001B9 RID: 441 RVA: 0x000B6310 File Offset: 0x000B4310
	public static method __m2mep@?_Root@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEBAAEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$;

	// Token: 0x040001BA RID: 442 RVA: 0x000B6490 File Offset: 0x000B4490
	public static method __m2mep@?_Erase@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x040001BB RID: 443 RVA: 0x000B6340 File Offset: 0x000B4340
	public static method __m2mep@?_Rrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?;

	// Token: 0x040001BC RID: 444 RVA: 0x000B6330 File Offset: 0x000B4330
	public static method __m2mep@?_Lrotate@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?;

	// Token: 0x040001BD RID: 445 RVA: 0x000B6300 File Offset: 0x000B4300
	public static method __m2mep@?_Max@?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@std@@@std@@$$FSAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_t;

	// Token: 0x040001BE RID: 446 RVA: 0x000B51C0 File Offset: 0x000B31C0
	public static method __m2mep@??$_Enable_shared_from_this@VIniParser@@V1@@std@@$$FYAXAEBV?$shared_ptr@VIniParser@@@0@PEAVIniParser@@@Z;

	// Token: 0x040001BF RID: 447 RVA: 0x000B51D0 File Offset: 0x000B31D0
	public static method __m2mep@??$_Enable_shared_from_this@UMODULE_INFO@ModuleManager@@U12@@std@@$$FYAXAEBV?$shared_ptr@UMODULE_INFO@ModuleManager@@@0@PEAUMODULE_INFO@ModuleManager@@@Z;

	// Token: 0x040001C0 RID: 448 RVA: 0x000B5750 File Offset: 0x000B3750
	public static method __m2mep@??$?0PEAVLauncherApp@@@?$_Unique_ptr_base@VLauncherApp@@U?$default_delete@VLauncherApp@@@std@@@std@@$$FQEAA@PEAVLauncherApp@@@Z;

	// Token: 0x040001C1 RID: 449 RVA: 0x000B5AB0 File Offset: 0x000B3AB0
	public static method __m2mep@??$forward_as_tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYA?AV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z;

	// Token: 0x040001C2 RID: 450 RVA: 0x000B51E0 File Offset: 0x000B31E0
	public static method __m2mep@??$forward_as_tuple@$$V@std@@$$FYA?AV?$tuple@$$V@0@XZ;

	// Token: 0x040001C3 RID: 451 RVA: 0x000B5FB0 File Offset: 0x000B3FB0
	public static method __m2mep@??$emplace_hint@AEBUpiecewise_construct_t@std@@V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@st;

	// Token: 0x040001C4 RID: 452 RVA: 0x000B51F0 File Offset: 0x000B31F0
	public static method __m2mep@??$?0V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@_N@std@@$$FQEAA@$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV;

	// Token: 0x040001C5 RID: 453 RVA: 0x000B5200 File Offset: 0x000B3200
	public static method __m2mep@??$?0AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@_N$0A@@?$pair@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@_N@std@@$$FQEAA@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CB;

	// Token: 0x040001C6 RID: 454 RVA: 0x000B6140 File Offset: 0x000B4140
	public static method __m2mep@??$addressof@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$alloca;

	// Token: 0x040001C7 RID: 455 RVA: 0x000B6150 File Offset: 0x000B4150
	public static method __m2mep@??$destroy@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$map@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@Uci_comp@IniParser@@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocato;

	// Token: 0x040001C8 RID: 456 RVA: 0x000B6400 File Offset: 0x000B4400
	public static method __m2mep@??$addressof@PEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@$$FYAPEAPEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@0@AEAPEAU10@@Z;

	// Token: 0x040001C9 RID: 457 RVA: 0x000B6280 File Offset: 0x000B4280
	public static method __m2mep@??$_Freenode0@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@@?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_trai;

	// Token: 0x040001CA RID: 458 RVA: 0x000B6350 File Offset: 0x000B4350
	public static method __m2mep@??$destroy@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_;

	// Token: 0x040001CB RID: 459 RVA: 0x000B6360 File Offset: 0x000B4360
	public static method __m2mep@??_G?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@$$FQEAAPEAXI@Z;

	// Token: 0x040001CC RID: 460 RVA: 0x000B6370 File Offset: 0x000B4370
	public static method __m2mep@??1?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@$$FQEAA@XZ;

	// Token: 0x040001CD RID: 461 RVA: 0x000B6290 File Offset: 0x000B4290
	public static method __m2mep@?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@;

	// Token: 0x040001CE RID: 462 RVA: 0x000B6380 File Offset: 0x000B4380
	public static method __m2mep@??1?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAA@XZ;

	// Token: 0x040001CF RID: 463 RVA: 0x000B6390 File Offset: 0x000B4390
	public static method __m2mep@??1?$_List_buy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAA@XZ;

	// Token: 0x040001D0 RID: 464 RVA: 0x000B63A0 File Offset: 0x000B43A0
	public static method __m2mep@??1?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x040001D1 RID: 465 RVA: 0x000B6420 File Offset: 0x000B4420
	public static method __m2mep@?_Tidy@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAAXXZ;

	// Token: 0x040001D2 RID: 466 RVA: 0x000B63B0 File Offset: 0x000B43B0
	public static method __m2mep@?_Freeheadnode@?$_List_alloc@U?$_List_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@$$FQEAAXPEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@2@@Z;

	// Token: 0x040001D3 RID: 467 RVA: 0x000B6430 File Offset: 0x000B4430
	public static method __m2mep@?clear@?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAAXXZ;

	// Token: 0x040001D4 RID: 468 RVA: 0x000B6450 File Offset: 0x000B4450
	public static method __m2mep@?_Freenode@?$_List_buy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@$$FQEAAXPEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@2@@Z;

	// Token: 0x040001D5 RID: 469 RVA: 0x000B48D0 File Offset: 0x000B28D0
	public static method __m2mep@??$_Enable_shared_from_this1@VIniParser@@V1@@std@@$$FYAXAEBV?$shared_ptr@VIniParser@@@0@PEAVIniParser@@U?$integral_constant@_N$0A@@0@@Z;

	// Token: 0x040001D6 RID: 470 RVA: 0x000B48E0 File Offset: 0x000B28E0
	public static method __m2mep@??$_Enable_shared_from_this1@UMODULE_INFO@ModuleManager@@U12@@std@@$$FYAXAEBV?$shared_ptr@UMODULE_INFO@ModuleManager@@@0@PEAUMODULE_INFO@ModuleManager@@U?$integral_constant@_N$0A@@0@@Z;

	// Token: 0x040001D7 RID: 471 RVA: 0x000B5210 File Offset: 0x000B3210
	public static method __m2mep@??$?0AEAPEAVLauncherApp@@@?$_Compressed_pair@U?$default_delete@VLauncherApp@@@std@@PEAVLauncherApp@@$00@std@@$$FQEAA@U_Zero_then_variadic_args_t@1@AEAPEAVLauncherApp@@@Z;

	// Token: 0x040001D8 RID: 472 RVA: 0x000B5760 File Offset: 0x000B3760
	public static method __m2mep@??$?0AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$0A@@?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEAA@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z;

	// Token: 0x040001D9 RID: 473 RVA: 0x000B48F0 File Offset: 0x000B28F0
	public static method __m2mep@??$forward@AEBUpiecewise_construct_t@std@@@std@@$$FYAAEBUpiecewise_construct_t@0@AEBU10@@Z;

	// Token: 0x040001DA RID: 474 RVA: 0x000B4900 File Offset: 0x000B2900
	public static method __m2mep@??$forward@V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@$$FYA$$QEAV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AEAV10@@Z;

	// Token: 0x040001DB RID: 475 RVA: 0x000B4910 File Offset: 0x000B2910
	public static method __m2mep@??$forward@V?$tuple@$$V@std@@@std@@$$FYA$$QEAV?$tuple@$$V@0@AEAV10@@Z;

	// Token: 0x040001DC RID: 476 RVA: 0x000B5F80 File Offset: 0x000B3F80
	public static method __m2mep@??$_Buynode@AEBUpiecewise_construct_t@std@@V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$tuple@$$V@2@@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@;

	// Token: 0x040001DD RID: 477 RVA: 0x000B5F90 File Offset: 0x000B3F90
	public static method __m2mep@??$_Insert_hint@AEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@st;

	// Token: 0x040001DE RID: 478 RVA: 0x000B4960 File Offset: 0x000B2960
	public static method __m2mep@??$forward@V?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@@std@@$$FYA$$QEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@0@AEAV10@@Z;

	// Token: 0x040001DF RID: 479 RVA: 0x000B4970 File Offset: 0x000B2970
	public static method __m2mep@??$forward@_N@std@@$$FYA$$QEA_NAEA_N@Z;

	// Token: 0x040001E0 RID: 480 RVA: 0x000B4980 File Offset: 0x000B2980
	public static method __m2mep@??$forward@AEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@@std@@$$FYAAEAV?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@0@AEAV10@@Z;

	// Token: 0x040001E1 RID: 481 RVA: 0x000B62A0 File Offset: 0x000B42A0
	public static method __m2mep@??$addressof@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@std@@$$FYAPEAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_trai;

	// Token: 0x040001E2 RID: 482 RVA: 0x000B62B0 File Offset: 0x000B42B0
	public static method __m2mep@??$destroy@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$list@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basi;

	// Token: 0x040001E3 RID: 483 RVA: 0x000B63E0 File Offset: 0x000B43E0
	public static method __m2mep@??$_Freenode0@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@@?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@$$FSAXAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@1@PEAU01@@Z;

	// Token: 0x040001E4 RID: 484 RVA: 0x000B6460 File Offset: 0x000B4460
	public static method __m2mep@??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@1@QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z;

	// Token: 0x040001E5 RID: 485 RVA: 0x000B6470 File Offset: 0x000B4470
	public static method __m2mep@??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAPEAXI@Z;

	// Token: 0x040001E6 RID: 486 RVA: 0x000B5230 File Offset: 0x000B3230
	public static method __m2mep@??F?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040001E7 RID: 487 RVA: 0x000B5240 File Offset: 0x000B3240
	public static method __m2mep@??0?$_Tree_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x040001E8 RID: 488 RVA: 0x000B5770 File Offset: 0x000B3770
	public static method __m2mep@?_Freenode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared;

	// Token: 0x040001E9 RID: 489 RVA: 0x000B5780 File Offset: 0x000B3780
	public static method __m2mep@?_Buynode0@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEAAPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_p;

	// Token: 0x040001EA RID: 490 RVA: 0x000B5F20 File Offset: 0x000B3F20
	public static method __m2mep@?_Destroy_if_node@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FIEAAXPEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@;

	// Token: 0x040001EB RID: 491 RVA: 0x000B5250 File Offset: 0x000B3250
	public static method __m2mep@?size@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEBA_KXZ;

	// Token: 0x040001EC RID: 492 RVA: 0x000B63F0 File Offset: 0x000B43F0
	public static method __m2mep@?deallocate@?$_Default_allocator_traits@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@2@QEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@2@_K@Z;

	// Token: 0x040001ED RID: 493 RVA: 0x000B4990 File Offset: 0x000B2990
	public static method __m2mep@??F?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040001EE RID: 494 RVA: 0x000B49A0 File Offset: 0x000B29A0
	public static method __m2mep@??0?$_Tree_unchecked_const_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@U_Iterator_base0@2@@std@@$$FQEAA@XZ;

	// Token: 0x040001EF RID: 495 RVA: 0x000B49B0 File Offset: 0x000B29B0
	public static method __m2mep@??$forward@AEAPEAVLauncherApp@@@std@@$$FYAAEAPEAVLauncherApp@@AEAPEAV1@@Z;

	// Token: 0x040001F0 RID: 496 RVA: 0x000B5260 File Offset: 0x000B3260
	public static method __m2mep@??$?0U_Exact_args_t@std@@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$V$0A@@?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEAA@U_Exact_args_t@1@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z;

	// Token: 0x040001F1 RID: 497 RVA: 0x000B5F30 File Offset: 0x000B3F30
	public static method __m2mep@??$construct@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@AEBUpiecewise_construct_t@2@V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$tuple@$$V@2@@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_Tree_nod;

	// Token: 0x040001F2 RID: 498 RVA: 0x000B49C0 File Offset: 0x000B29C0
	public static method __m2mep@??$forward@AEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@$$FYAAEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@0@AEAU10@@Z;

	// Token: 0x040001F3 RID: 499 RVA: 0x000B5F40 File Offset: 0x000B3F40
	public static method __m2mep@??$_Insert_at@AEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@;

	// Token: 0x040001F4 RID: 500 RVA: 0x000B5F50 File Offset: 0x000B3F50
	public static method __m2mep@??$_Insert_nohint@AEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAU?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@2@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@;

	// Token: 0x040001F5 RID: 501 RVA: 0x000B6410 File Offset: 0x000B4410
	public static method __m2mep@??$destroy@PEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@?$_Default_allocator_traits@V?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@std@@@std@@$$FSAXAEAV?$allocator@U?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@std@@@1@QEAPEAU?$_List_node@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PEAX@1@@Z;

	// Token: 0x040001F6 RID: 502 RVA: 0x000B5270 File Offset: 0x000B3270
	public static method __m2mep@??0?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEAA@$$QEAV01@@Z;

	// Token: 0x040001F7 RID: 503 RVA: 0x000B40D0 File Offset: 0x000B20D0
	public static method __m2mep@?<MarshalCopy>@?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FSMXPEAV12@0@Z;

	// Token: 0x040001F8 RID: 504 RVA: 0x000B40A0 File Offset: 0x000B20A0
	public static method __m2mep@?<MarshalCopy>@?$tuple@$$V@std@@$$FSMXPEAV12@0@Z;

	// Token: 0x040001F9 RID: 505 RVA: 0x000B4010 File Offset: 0x000B2010
	public static method __m2mep@?<MarshalCopy>@?$tuple@$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FSMXPEAV12@0@Z;

	// Token: 0x040001FA RID: 506 RVA: 0x000B40B0 File Offset: 0x000B20B0
	public static method __m2mep@??0?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040001FB RID: 507 RVA: 0x000B5280 File Offset: 0x000B3280
	public static method __m2mep@??F?$_Tree_iterator@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@std@@@std@@$$FQEAAAEAV01@XZ;

	// Token: 0x040001FC RID: 508 RVA: 0x000B5790 File Offset: 0x000B3790
	public static method __m2mep@?max_size@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEBA_KXZ;

	// Token: 0x040001FD RID: 509 RVA: 0x000B49D0 File Offset: 0x000B29D0
	public static method __m2mep@?max_size@?$_Default_allocator_traits@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@@std@@$$FSA_KAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@2@@Z;

	// Token: 0x040001FE RID: 510 RVA: 0x000B5290 File Offset: 0x000B3290
	public static method __m2mep@?_Getal@?$_Tree_comp_alloc@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@2@$0A@@std@@@std@@$$FQEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V;

	// Token: 0x040001FF RID: 511 RVA: 0x000B49E0 File Offset: 0x000B29E0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@PEAX@std@@@std@@V?$_Tree_val@U?$_Tree_simple_types@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@std@@@2@$00@std@@$$FQEBAAEBV?$allocator@U?$_Tree_node@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shar;

	// Token: 0x04000200 RID: 512 RVA: 0x000B49F0 File Offset: 0x000B29F0
	public static method __m2mep@??$?0U_Exact_args_t@std@@$0A@@?$tuple@$$V@std@@$$FQEAA@U_Exact_args_t@1@@Z;

	// Token: 0x04000201 RID: 513 RVA: 0x000B4A00 File Offset: 0x000B2A00
	public static method __m2mep@??$?0AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Tuple_val@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FQEAA@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z;

	// Token: 0x04000202 RID: 514 RVA: 0x000B5E80 File Offset: 0x000B3E80
	public static method __m2mep@??$?0AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$Z$$V@?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@$$FQEAA@Upiecewise_construct_t@1@V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@V?$tuple@$$V@1@@Z;

	// Token: 0x04000203 RID: 515 RVA: 0x000B4A10 File Offset: 0x000B2A10
	public static method __m2mep@??$_Buy_if_not_node@AEAU?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@?$_Tree@V?$_Tmap_traits@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@U?$less@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V?$allocator@U?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@@;

	// Token: 0x04000204 RID: 516 RVA: 0x000B5D80 File Offset: 0x000B3D80
	public static method __m2mep@??$?0V?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@V?$tuple@$$V@1@$0A@$$Z$S@?$pair@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$shared_ptr@UMODULE_INFO@ModuleManager@@@2@@std@@$$FQEAA@AEAV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@AEAV?$tuple@$$V@1@U?$integer_sequence@_K$0A@@1@U?$integer_sequence@_K$S@1@@Z;

	// Token: 0x04000205 RID: 517 RVA: 0x000B4A20 File Offset: 0x000B2A20
	public static method __m2mep@??$move@AEAV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@$$FYA$$QEAV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@AEAV10@@Z;

	// Token: 0x04000206 RID: 518 RVA: 0x000B4A30 File Offset: 0x000B2A30
	public static method __m2mep@??$get@$0A@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYAAEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QEAV?$tuple@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@0@@Z;

	// Token: 0x04000207 RID: 519 RVA: 0x000B5150 File Offset: 0x000B3150
	public static method __m2mep@?_Get_deleter@_Ref_count_base@std@@$$FUEBAPEAXAEBVtype_info@@@Z;

	// Token: 0x04000208 RID: 520 RVA: 0x000B4020 File Offset: 0x000B2020
	public static method __m2mep@??0?$tuple@$$V@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x04000209 RID: 521 RVA: 0x000B4A40 File Offset: 0x000B2A40
	public static method __m2mep@??0?$tuple@$$V@std@@$$FQEAA@XZ;

	// Token: 0x0400020A RID: 522 RVA: 0x000B4930 File Offset: 0x000B2930
	public static method __m2mep@??1_Ref_count_base@std@@$$FUEAA@XZ;

	// Token: 0x0400020B RID: 523 RVA: 0x000B4920 File Offset: 0x000B2920
	public static method __m2mep@??0_Ref_count_base@std@@$$FIEAA@XZ;

	// Token: 0x0400020C RID: 524 RVA: 0x000B4940 File Offset: 0x000B2940
	public static method __m2mep@?_Incref@_Ref_count_base@std@@$$FQEAAXXZ;

	// Token: 0x0400020D RID: 525 RVA: 0x000B4630 File Offset: 0x000B2630
	public static method __m2mep@?_Adopt@_Iterator_base0@std@@$$FQEAAXPEBX@Z;

	// Token: 0x0400020E RID: 526 RVA: 0x000B4950 File Offset: 0x000B2950
	public static method __m2mep@?_Decwref@_Ref_count_base@std@@$$FQEAAXXZ;

	// Token: 0x0400020F RID: 527 RVA: 0x000B5220 File Offset: 0x000B3220
	public static method __m2mep@?_Decref@_Ref_count_base@std@@$$FQEAAXXZ;

	// Token: 0x04000210 RID: 528 RVA: 0x000B4BB0 File Offset: 0x000B2BB0
	public static method __m2mep@?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FSAXXZ;

	// Token: 0x04000211 RID: 529 RVA: 0x000B5410 File Offset: 0x000B3410
	public static method __m2mep@?_Check_offset@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEBAX_K@Z;

	// Token: 0x04000212 RID: 530 RVA: 0x000B41F0 File Offset: 0x000B21F0
	public static method __m2mep@?wmemset@@$$J0YAPEA_WPEA_W_W_K@Z;

	// Token: 0x04000213 RID: 531 RVA: 0x000B4B90 File Offset: 0x000B2B90
	public static method __m2mep@?assign@?$_WChar_traits@_W@std@@$$FSAPEA_WQEA_W_K_W@Z;

	// Token: 0x04000214 RID: 532 RVA: 0x000B53F0 File Offset: 0x000B33F0
	public static method __m2mep@??R<lambda_27735b27f0d68eb29e046e0551b25780>@@$$FQEBAXQEA_WQEB_W_K22_W@Z;

	// Token: 0x04000215 RID: 533 RVA: 0x000B5CD0 File Offset: 0x000B3CD0
	public static method __m2mep@??$_Reallocate_grow_by@V<lambda_27735b27f0d68eb29e046e0551b25780>@@_K_K_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@_KV<lambda_27735b27f0d68eb29e046e0551b25780>@@_K2_W@Z;

	// Token: 0x04000216 RID: 534 RVA: 0x000B5DB0 File Offset: 0x000B3DB0
	public static method __m2mep@?insert@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@_K0_W@Z;

	// Token: 0x04000217 RID: 535 RVA: 0x000B5360 File Offset: 0x000B3360
	public static method __m2mep@?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA_KXZ;

	// Token: 0x04000218 RID: 536 RVA: 0x000B5370 File Offset: 0x000B3370
	public static method __m2mep@??R<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>@@$$FQEBAXQEA_WQEB_W_K_W@Z;

	// Token: 0x04000219 RID: 537 RVA: 0x000B5CB0 File Offset: 0x000B3CB0
	public static method __m2mep@??$_Reallocate_grow_by@V<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>@@_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@_KV<lambda_94b5dcf1ef2e5769bf4885c9dfc60389>@@_W@Z;

	// Token: 0x0400021A RID: 538 RVA: 0x000B5D90 File Offset: 0x000B3D90
	public static method __m2mep@?push_back@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX_W@Z;

	// Token: 0x0400021B RID: 539 RVA: 0x000B41C0 File Offset: 0x000B21C0
	public static method __m2mep@?wcsrchr@@$$FYAPEA_WPEA_W_W@Z;

	// Token: 0x0400021C RID: 540 RVA: 0x000B4B80 File Offset: 0x000B2B80
	public static method __m2mep@??R<lambda_3ca51f66a9d03df3cf21518bbff746cd>@@$$FQEBAXQEA_WQEB_W_K12@Z;

	// Token: 0x0400021D RID: 541 RVA: 0x000B5CE0 File Offset: 0x000B3CE0
	public static method __m2mep@??$_Reallocate_grow_by@V<lambda_3ca51f66a9d03df3cf21518bbff746cd>@@PEB_W_K@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@_KV<lambda_3ca51f66a9d03df3cf21518bbff746cd>@@PEB_W_K@Z;

	// Token: 0x0400021E RID: 542 RVA: 0x000B5DD0 File Offset: 0x000B3DD0
	public static method __m2mep@?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z;

	// Token: 0x0400021F RID: 543 RVA: 0x000B5EB0 File Offset: 0x000B3EB0
	public static method __m2mep@?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@AEBV12@@Z;

	// Token: 0x04000220 RID: 544 RVA: 0x000B52F0 File Offset: 0x000B32F0
	public static method __m2mep@?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEBAPEBDXZ;

	// Token: 0x04000221 RID: 545 RVA: 0x000B57D0 File Offset: 0x000B37D0
	public static method __m2mep@?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEBAPEBDXZ;

	// Token: 0x04000222 RID: 546 RVA: 0x000B57C0 File Offset: 0x000B37C0
	public static method __m2mep@?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEBA_KXZ;

	// Token: 0x04000223 RID: 547 RVA: 0x000B4A50 File Offset: 0x000B2A50
	public static method __m2mep@?InternalUnicodeToStringHelper@details@interop@msclr@@$$FYMPE$AAVString@System@@PEB_W_K@Z;

	// Token: 0x04000224 RID: 548 RVA: 0x000B5AC0 File Offset: 0x000B3AC0
	public static method __m2mep@??$marshal_as@PE$AAVString@System@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@interop@msclr@@$$FYMPE$AAVString@System@@AEBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z;

	// Token: 0x04000225 RID: 549 RVA: 0x000B54A0 File Offset: 0x000B34A0
	public static method __m2mep@??$?0V?$allocator@_W@std@@$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@_W@1@@Z;

	// Token: 0x04000226 RID: 550 RVA: 0x000B4D00 File Offset: 0x000B2D00
	public static method __m2mep@??$forward@V?$allocator@_W@std@@@std@@$$FYA$$QEAV?$allocator@_W@0@AEAV10@@Z;

	// Token: 0x04000227 RID: 551 RVA: 0x000B5870 File Offset: 0x000B3870
	public static method __m2mep@??$?0V?$allocator@_W@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAA@$$QEAV?$allocator@_W@1@@Z;

	// Token: 0x04000228 RID: 552 RVA: 0x000B5C80 File Offset: 0x000B3C80
	public static method __m2mep@??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@$$QEAV01@@Z;

	// Token: 0x04000229 RID: 553 RVA: 0x000B5CA0 File Offset: 0x000B3CA0
	public static method __m2mep@??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAA@XZ;

	// Token: 0x0400022A RID: 554 RVA: 0x000B5E90 File Offset: 0x000B3E90
	public static method __m2mep@??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@QEB_W_K@Z;

	// Token: 0x0400022B RID: 555 RVA: 0x000B4C70 File Offset: 0x000B2C70
	public static method __m2mep@??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYAPEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z;

	// Token: 0x0400022C RID: 556 RVA: 0x000B4BD0 File Offset: 0x000B2BD0
	public static method __m2mep@??$move@AEAV?$allocator@_W@std@@@std@@$$FYA$$QEAV?$allocator@_W@0@AEAV10@@Z;

	// Token: 0x0400022D RID: 557 RVA: 0x000B4D30 File Offset: 0x000B2D30
	public static method __m2mep@??$_Pocma@V?$allocator@_W@std@@@std@@$$FYAXAEAV?$allocator@_W@0@0U?$integral_constant@_N$00@0@@Z;

	// Token: 0x0400022E RID: 558 RVA: 0x000B5440 File Offset: 0x000B3440
	public static method __m2mep@??$_Pocma@V?$allocator@_W@std@@@std@@$$FYAXAEAV?$allocator@_W@0@0@Z;

	// Token: 0x0400022F RID: 559 RVA: 0x000B5850 File Offset: 0x000B3850
	public static method __m2mep@?_Move_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAAXAEAV?$allocator@_W@2@@Z;

	// Token: 0x04000230 RID: 560 RVA: 0x000B4C30 File Offset: 0x000B2C30
	public static method __m2mep@??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@$$FYAPEAV?$_String_val@U?$_Simple_types@_W@std@@@0@AEAV10@@Z;

	// Token: 0x04000231 RID: 561 RVA: 0x000B5820 File Offset: 0x000B3820
	public static method __m2mep@?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z;

	// Token: 0x04000232 RID: 562 RVA: 0x000B5860 File Offset: 0x000B3860
	public static method __m2mep@?_Assign_rv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAX$$QEAV12@U?$integral_constant@_N$00@2@@Z;

	// Token: 0x04000233 RID: 563 RVA: 0x000B4BE0 File Offset: 0x000B2BE0
	public static method __m2mep@??$move@AEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@$$FYA$$QEAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AEAV10@@Z;

	// Token: 0x04000234 RID: 564 RVA: 0x000B5B40 File Offset: 0x000B3B40
	public static method __m2mep@??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@$$QEAV01@@Z;

	// Token: 0x04000235 RID: 565 RVA: 0x000B5B10 File Offset: 0x000B3B10
	public static method __m2mep@??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@XZ;

	// Token: 0x04000236 RID: 566 RVA: 0x000B57A0 File Offset: 0x000B37A0
	public static method __m2mep@?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA_KXZ;

	// Token: 0x04000237 RID: 567 RVA: 0x000B4AB0 File Offset: 0x000B2AB0
	public static method __m2mep@??R<lambda_f1129f3d98befd92b6d0e63ffb90e238>@@$$FQEBAXQEADQEBD_K12@Z;

	// Token: 0x04000238 RID: 568 RVA: 0x000B58B0 File Offset: 0x000B38B0
	public static method __m2mep@??$_Reallocate_grow_by@V<lambda_f1129f3d98befd92b6d0e63ffb90e238>@@PEBD_K@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV01@_KV<lambda_f1129f3d98befd92b6d0e63ffb90e238>@@PEBD_K@Z;

	// Token: 0x04000239 RID: 569 RVA: 0x000B5B30 File Offset: 0x000B3B30
	public static method __m2mep@?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@QEBD_K@Z;

	// Token: 0x0400023A RID: 570 RVA: 0x000B45C0 File Offset: 0x000B25C0
	public static method __m2mep@?assign@?$char_traits@D@std@@$$FSAPEADQEAD_KD@Z;

	// Token: 0x0400023B RID: 571 RVA: 0x000B4AA0 File Offset: 0x000B2AA0
	public static method __m2mep@??R<lambda_59d344839e59d86dc9255728ed6d9dcb>@@$$FQEBAXQEADQEBD_K2D@Z;

	// Token: 0x0400023C RID: 572 RVA: 0x000B58A0 File Offset: 0x000B38A0
	public static method __m2mep@??$_Reallocate_grow_by@V<lambda_59d344839e59d86dc9255728ed6d9dcb>@@_KD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV01@_KV<lambda_59d344839e59d86dc9255728ed6d9dcb>@@_KD@Z;

	// Token: 0x0400023D RID: 573 RVA: 0x000B5B20 File Offset: 0x000B3B20
	public static method __m2mep@?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAAEAV12@_KD@Z;

	// Token: 0x0400023E RID: 574 RVA: 0x000B4CA0 File Offset: 0x000B2CA0
	public static method __m2mep@??0?$allocator@_W@std@@$$FQEAA@XZ;

	// Token: 0x0400023F RID: 575 RVA: 0x000B4CC0 File Offset: 0x000B2CC0
	public static method __m2mep@??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000240 RID: 576 RVA: 0x000B5450 File Offset: 0x000B3450
	public static method __m2mep@??0?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000241 RID: 577 RVA: 0x000B5880 File Offset: 0x000B3880
	public static method __m2mep@??$?0$$V@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEAA@U_Zero_then_variadic_args_t@1@@Z;

	// Token: 0x04000242 RID: 578 RVA: 0x000B5AF0 File Offset: 0x000B3AF0
	public static method __m2mep@??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000243 RID: 579 RVA: 0x000B5810 File Offset: 0x000B3810
	public static method __m2mep@?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAXXZ;

	// Token: 0x04000244 RID: 580 RVA: 0x000B53C0 File Offset: 0x000B33C0
	public static method __m2mep@?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEAAPEA_WXZ;

	// Token: 0x04000245 RID: 581 RVA: 0x000B41E0 File Offset: 0x000B21E0
	public static method __m2mep@?wmemmove@@$$J0YAPEA_WPEA_WPEB_W_K@Z;

	// Token: 0x04000246 RID: 582 RVA: 0x000B4B60 File Offset: 0x000B2B60
	public static method __m2mep@?move@?$_WChar_traits@_W@std@@$$FSAPEA_WQEA_WQEB_W_K@Z;

	// Token: 0x04000247 RID: 583 RVA: 0x000B4C80 File Offset: 0x000B2C80
	public static method __m2mep@?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FSAXXZ;

	// Token: 0x04000248 RID: 584 RVA: 0x000B4CD0 File Offset: 0x000B2CD0
	public static method __m2mep@?max_size@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@$$FSA_KAEBV?$allocator@_W@2@@Z;

	// Token: 0x04000249 RID: 585 RVA: 0x000B4CF0 File Offset: 0x000B2CF0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEBAAEBV?$allocator@_W@2@XZ;

	// Token: 0x0400024A RID: 586 RVA: 0x000B5490 File Offset: 0x000B3490
	public static method __m2mep@?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEBAAEBV?$allocator@_W@2@XZ;

	// Token: 0x0400024B RID: 587 RVA: 0x000B58C0 File Offset: 0x000B38C0
	public static method __m2mep@?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA_KXZ;

	// Token: 0x0400024C RID: 588 RVA: 0x000B5B50 File Offset: 0x000B3B50
	public static method __m2mep@?_Calculate_growth@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBA_K_K@Z;

	// Token: 0x0400024D RID: 589 RVA: 0x000B4D40 File Offset: 0x000B2D40
	public static method __m2mep@??$_Get_size_of_n@$01@std@@$$FYA_K_K@Z;

	// Token: 0x0400024E RID: 590 RVA: 0x000B5480 File Offset: 0x000B3480
	public static method __m2mep@?allocate@?$allocator@_W@std@@$$FQEAAPEA_W_K@Z;

	// Token: 0x0400024F RID: 591 RVA: 0x000B41D0 File Offset: 0x000B21D0
	public static method __m2mep@?wmemcpy@@$$J0YAPEA_WPEA_WPEB_W_K@Z;

	// Token: 0x04000250 RID: 592 RVA: 0x000B4AC0 File Offset: 0x000B2AC0
	public static method __m2mep@?copy@?$_WChar_traits@_W@std@@$$FSAPEA_WQEA_WQEB_W_K@Z;

	// Token: 0x04000251 RID: 593 RVA: 0x000B5380 File Offset: 0x000B3380
	public static method __m2mep@??R<lambda_d4301fda4684ac16da26da6c6383f5f5>@@$$FQEBAXQEA_W_KQEB_W@Z;

	// Token: 0x04000252 RID: 594 RVA: 0x000B4D50 File Offset: 0x000B2D50
	public static method __m2mep@??$forward@AEBQEA_W@std@@$$FYAAEBQEA_WAEBQEA_W@Z;

	// Token: 0x04000253 RID: 595 RVA: 0x000B54B0 File Offset: 0x000B34B0
	public static method __m2mep@??$construct@PEA_WAEBQEA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@$$FSAXAEAV?$allocator@_W@1@QEAPEA_WAEBQEA_W@Z;

	// Token: 0x04000254 RID: 596 RVA: 0x000B5CC0 File Offset: 0x000B3CC0
	public static method __m2mep@??$_Reallocate_for@V<lambda_d4301fda4684ac16da26da6c6383f5f5>@@PEB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV01@_KV<lambda_d4301fda4684ac16da26da6c6383f5f5>@@PEB_W@Z;

	// Token: 0x04000255 RID: 597 RVA: 0x000B5DA0 File Offset: 0x000B3DA0
	public static method __m2mep@?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W_K@Z;

	// Token: 0x04000256 RID: 598 RVA: 0x000B4BA0 File Offset: 0x000B2BA0
	public static method __m2mep@?length@?$_WChar_traits@_W@std@@$$FSA_KPEB_W@Z;

	// Token: 0x04000257 RID: 599 RVA: 0x000B5DC0 File Offset: 0x000B3DC0
	public static method __m2mep@?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAAEAV12@QEB_W@Z;

	// Token: 0x04000258 RID: 600 RVA: 0x000B5EA0 File Offset: 0x000B3EA0
	public static method __m2mep@??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@QEB_W@Z;

	// Token: 0x04000259 RID: 601 RVA: 0x000B4A60 File Offset: 0x000B2A60
	public static method __m2mep@??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400025A RID: 602 RVA: 0x000B52A0 File Offset: 0x000B32A0
	public static method __m2mep@??1?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400025B RID: 603 RVA: 0x000B57E0 File Offset: 0x000B37E0
	public static method __m2mep@??1?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEAA@XZ;

	// Token: 0x0400025C RID: 604 RVA: 0x000B5AD0 File Offset: 0x000B3AD0
	public static method __m2mep@??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400025D RID: 605 RVA: 0x000B53E0 File Offset: 0x000B33E0
	public static method __m2mep@?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAAXXZ;

	// Token: 0x0400025E RID: 606 RVA: 0x000B4B70 File Offset: 0x000B2B70
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ;

	// Token: 0x0400025F RID: 607 RVA: 0x000B53D0 File Offset: 0x000B33D0
	public static method __m2mep@?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAAAEAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ;

	// Token: 0x04000260 RID: 608 RVA: 0x000B4AE0 File Offset: 0x000B2AE0
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEAAAEAV?$allocator@_W@2@XZ;

	// Token: 0x04000261 RID: 609 RVA: 0x000B52E0 File Offset: 0x000B32E0
	public static method __m2mep@?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEAAAEAV?$allocator@_W@2@XZ;

	// Token: 0x04000262 RID: 610 RVA: 0x000B4C20 File Offset: 0x000B2C20
	public static method __m2mep@??$destroy@PEA_W@?$_Default_allocator_traits@V?$allocator@_W@std@@@std@@$$FSAXAEAV?$allocator@_W@1@QEAPEA_W@Z;

	// Token: 0x04000263 RID: 611 RVA: 0x000B4C10 File Offset: 0x000B2C10
	public static method __m2mep@??$addressof@PEA_W@std@@$$FYAPEAPEA_WAEAPEA_W@Z;

	// Token: 0x04000264 RID: 612 RVA: 0x000B5400 File Offset: 0x000B3400
	public static method __m2mep@?deallocate@?$allocator@_W@std@@$$FQEAAXQEA_W_K@Z;

	// Token: 0x04000265 RID: 613 RVA: 0x000B4B50 File Offset: 0x000B2B50
	public static method __m2mep@?assign@?$_WChar_traits@_W@std@@$$FSAXAEA_WAEB_W@Z;

	// Token: 0x04000266 RID: 614 RVA: 0x000B5800 File Offset: 0x000B3800
	public static method __m2mep@?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAAXXZ;

	// Token: 0x04000267 RID: 615 RVA: 0x000B5C70 File Offset: 0x000B3C70
	public static method __m2mep@??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEAA@XZ;

	// Token: 0x04000268 RID: 616 RVA: 0x000B5350 File Offset: 0x000B3350
	public static method __m2mep@?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAAXXZ;

	// Token: 0x04000269 RID: 617 RVA: 0x000B4C50 File Offset: 0x000B2C50
	public static method __m2mep@??$destroy@PEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@$$FSAXAEAV?$allocator@D@1@QEAPEAD@Z;

	// Token: 0x0400026A RID: 618 RVA: 0x000B5830 File Offset: 0x000B3830
	public static method __m2mep@?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAXXZ;

	// Token: 0x0400026B RID: 619 RVA: 0x000B5C90 File Offset: 0x000B3C90
	public static method __m2mep@??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAA@XZ;

	// Token: 0x0400026C RID: 620 RVA: 0x000B4CB0 File Offset: 0x000B2CB0
	public static method __m2mep@??0?$allocator@D@std@@$$FQEAA@XZ;

	// Token: 0x0400026D RID: 621 RVA: 0x000B4CE0 File Offset: 0x000B2CE0
	public static method __m2mep@??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400026E RID: 622 RVA: 0x000B5460 File Offset: 0x000B3460
	public static method __m2mep@??0?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEAA@XZ;

	// Token: 0x0400026F RID: 623 RVA: 0x000B5890 File Offset: 0x000B3890
	public static method __m2mep@??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEAA@U_Zero_then_variadic_args_t@1@@Z;

	// Token: 0x04000270 RID: 624 RVA: 0x000B5B00 File Offset: 0x000B3B00
	public static method __m2mep@??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000271 RID: 625 RVA: 0x000B4A70 File Offset: 0x000B2A70
	public static method __m2mep@??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000272 RID: 626 RVA: 0x000B52B0 File Offset: 0x000B32B0
	public static method __m2mep@??1?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000273 RID: 627 RVA: 0x000B57F0 File Offset: 0x000B37F0
	public static method __m2mep@??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEAA@XZ;

	// Token: 0x04000274 RID: 628 RVA: 0x000B5AE0 File Offset: 0x000B3AE0
	public static method __m2mep@??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAA@XZ;

	// Token: 0x04000275 RID: 629 RVA: 0x000B5390 File Offset: 0x000B3390
	public static method __m2mep@?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAXXZ;

	// Token: 0x04000276 RID: 630 RVA: 0x000B4A80 File Offset: 0x000B2A80
	public static method __m2mep@?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEBA_NXZ;

	// Token: 0x04000277 RID: 631 RVA: 0x000B5300 File Offset: 0x000B3300
	public static method __m2mep@?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@$$FQEAAPEADXZ;

	// Token: 0x04000278 RID: 632 RVA: 0x000B45B0 File Offset: 0x000B25B0
	public static method __m2mep@?move@?$char_traits@D@std@@$$FSAPEADQEADQEBD_K@Z;

	// Token: 0x04000279 RID: 633 RVA: 0x000B4C90 File Offset: 0x000B2C90
	public static method __m2mep@?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FSAXXZ;

	// Token: 0x0400027A RID: 634 RVA: 0x000B4B10 File Offset: 0x000B2B10
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ;

	// Token: 0x0400027B RID: 635 RVA: 0x000B5320 File Offset: 0x000B3320
	public static method __m2mep@?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAAAEAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ;

	// Token: 0x0400027C RID: 636 RVA: 0x000B4B40 File Offset: 0x000B2B40
	public static method __m2mep@?max_size@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@$$FSA_KAEBV?$allocator@D@2@@Z;

	// Token: 0x0400027D RID: 637 RVA: 0x000B4B20 File Offset: 0x000B2B20
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEBAAEBV?$allocator@D@2@XZ;

	// Token: 0x0400027E RID: 638 RVA: 0x000B5330 File Offset: 0x000B3330
	public static method __m2mep@?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEBAAEBV?$allocator@D@2@XZ;

	// Token: 0x0400027F RID: 639 RVA: 0x000B4BC0 File Offset: 0x000B2BC0
	public static method __m2mep@??$_Min_value@_K@std@@$$FYAAEB_KAEB_K0@Z;

	// Token: 0x04000280 RID: 640 RVA: 0x000B4260 File Offset: 0x000B2260
	public static method __m2mep@?max@?$numeric_limits@_J@std@@$$FSA_JXZ;

	// Token: 0x04000281 RID: 641 RVA: 0x000B53A0 File Offset: 0x000B33A0
	public static method __m2mep@?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEBA_KXZ;

	// Token: 0x04000282 RID: 642 RVA: 0x000B4B00 File Offset: 0x000B2B00
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ;

	// Token: 0x04000283 RID: 643 RVA: 0x000B5310 File Offset: 0x000B3310
	public static method __m2mep@?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEBAAEBV?$_String_val@U?$_Simple_types@D@std@@@2@XZ;

	// Token: 0x04000284 RID: 644 RVA: 0x000B4A90 File Offset: 0x000B2A90
	public static method __m2mep@??$_Max_value@_K@std@@$$FYAAEB_KAEB_K0@Z;

	// Token: 0x04000285 RID: 645 RVA: 0x000B5470 File Offset: 0x000B3470
	public static method __m2mep@?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEBA_K_K@Z;

	// Token: 0x04000286 RID: 646 RVA: 0x000B4B30 File Offset: 0x000B2B30
	public static method __m2mep@?_Get_first@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEAAAEAV?$allocator@D@2@XZ;

	// Token: 0x04000287 RID: 647 RVA: 0x000B5340 File Offset: 0x000B3340
	public static method __m2mep@?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAAAEAV?$allocator@D@2@XZ;

	// Token: 0x04000288 RID: 648 RVA: 0x000B4D20 File Offset: 0x000B2D20
	public static method __m2mep@??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@$$FYAPEAX_K@Z;

	// Token: 0x04000289 RID: 649 RVA: 0x000B4670 File Offset: 0x000B2670
	public static method __m2mep@?_Allocate@_Default_allocate_traits@std@@$$FSAPEAX_K@Z;

	// Token: 0x0400028A RID: 650 RVA: 0x000B5430 File Offset: 0x000B3430
	public static method __m2mep@??$_Allocate@$0BA@U_Default_allocate_traits@std@@$0A@@std@@$$FYAPEAX_K@Z;

	// Token: 0x0400028B RID: 651 RVA: 0x000B4660 File Offset: 0x000B2660
	public static method __m2mep@??$_Get_size_of_n@$00@std@@$$FYA_K_K@Z;

	// Token: 0x0400028C RID: 652 RVA: 0x000B5840 File Offset: 0x000B3840
	public static method __m2mep@?allocate@?$allocator@D@std@@$$FQEAAPEAD_K@Z;

	// Token: 0x0400028D RID: 653 RVA: 0x000B4610 File Offset: 0x000B2610
	public static method __m2mep@?_Orphan_all@_Container_base0@std@@$$FQEAAXXZ;

	// Token: 0x0400028E RID: 654 RVA: 0x000B4590 File Offset: 0x000B2590
	public static method __m2mep@?copy@?$char_traits@D@std@@$$FSAPEADQEADQEBD_K@Z;

	// Token: 0x0400028F RID: 655 RVA: 0x000B45D0 File Offset: 0x000B25D0
	public static method __m2mep@?assign@?$char_traits@D@std@@$$FSAXAEADAEBD@Z;

	// Token: 0x04000290 RID: 656 RVA: 0x000B4BF0 File Offset: 0x000B2BF0
	public static method __m2mep@??$_Unfancy@D@std@@$$FYAPEADPEAD@Z;

	// Token: 0x04000291 RID: 657 RVA: 0x000B4680 File Offset: 0x000B2680
	public static method __m2mep@?_Adjust_manually_vector_aligned@std@@$$FYAXAEAPEAXAEA_K@Z;

	// Token: 0x04000292 RID: 658 RVA: 0x000B4C60 File Offset: 0x000B2C60
	public static method __m2mep@??$_Deallocate@$0BA@$0A@@std@@$$FYAXPEAX_K@Z;

	// Token: 0x04000293 RID: 659 RVA: 0x000B53B0 File Offset: 0x000B33B0
	public static method __m2mep@?deallocate@?$allocator@D@std@@$$FQEAAXQEAD_K@Z;

	// Token: 0x04000294 RID: 660 RVA: 0x000B4130 File Offset: 0x000B2130
	public static method __m2mep@??2@$$FYAPEAX_KPEAX@Z;

	// Token: 0x04000295 RID: 661 RVA: 0x000B4D10 File Offset: 0x000B2D10
	public static method __m2mep@??$forward@AEBQEAD@std@@$$FYAAEBQEADAEBQEAD@Z;

	// Token: 0x04000296 RID: 662 RVA: 0x000B5420 File Offset: 0x000B3420
	public static method __m2mep@??$construct@PEADAEBQEAD@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@$$FSAXAEAV?$allocator@D@1@QEAPEADAEBQEAD@Z;

	// Token: 0x04000297 RID: 663 RVA: 0x000B4C40 File Offset: 0x000B2C40
	public static method __m2mep@??$addressof@PEAD@std@@$$FYAPEAPEADAEAPEAD@Z;

	// Token: 0x04000298 RID: 664 RVA: 0x000B4690 File Offset: 0x000B2690
	public static method __m2mep@??$_Convert_size@_K@std@@$$FYA_K_K@Z;

	// Token: 0x04000299 RID: 665 RVA: 0x000B4AF0 File Offset: 0x000B2AF0
	public static method __m2mep@?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEBA_NXZ;

	// Token: 0x0400029A RID: 666 RVA: 0x000B4C00 File Offset: 0x000B2C00
	public static method __m2mep@??$_Unfancy@_W@std@@$$FYAPEA_WPEA_W@Z;

	// Token: 0x0400029B RID: 667 RVA: 0x000B52C0 File Offset: 0x000B32C0
	public static method __m2mep@?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@$$FQEBAPEB_WXZ;

	// Token: 0x0400029C RID: 668 RVA: 0x000B4AD0 File Offset: 0x000B2AD0
	public static method __m2mep@?_Get_second@?$_Compressed_pair@V?$allocator@_W@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@$$FQEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ;

	// Token: 0x0400029D RID: 669 RVA: 0x000B52D0 File Offset: 0x000B32D0
	public static method __m2mep@?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@$$FQEBAAEBV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ;

	// Token: 0x0400029E RID: 670 RVA: 0x000B57B0 File Offset: 0x000B37B0
	public static method __m2mep@?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@$$FQEBAPEB_WXZ;

	// Token: 0x0400029F RID: 671 RVA: 0x00022FB0 File Offset: 0x000215B0
	internal static $ArrayType$$$BY0BC@$$CBD ??_C@_0BC@EOODALEL@Unknown?5exception@;

	// Token: 0x040002A0 RID: 672 RVA: 0x000B6E60 File Offset: 0x000B4E60
	internal static $_TypeDescriptor$_extraBytes_27 ??_R0?AVfailure@ios_base@std@@@8;

	// Token: 0x040002A1 RID: 673 RVA: 0x000B6DE8 File Offset: 0x000B4DE8
	internal static $_TypeDescriptor$_extraBytes_24 ??_R0?AVruntime_error@std@@@8;

	// Token: 0x040002A2 RID: 674 RVA: 0x000AEC40 File Offset: 0x000AD240
	internal static _s__RTTICompleteObjectLocator2 ??_R4exception@std@@6B@;

	// Token: 0x040002A3 RID: 675 RVA: 0x000AE240 File Offset: 0x000AC840
	internal static $_s__RTTIBaseClassArray$_extraBytes_32 ??_R2system_error@std@@8;

	// Token: 0x040002A4 RID: 676 RVA: 0x000AE218 File Offset: 0x000AC818
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@system_error@std@@8;

	// Token: 0x040002A5 RID: 677 RVA: 0x000AE168 File Offset: 0x000AC768
	internal static _s__RTTICompleteObjectLocator2 ??_R4runtime_error@std@@6B@;

	// Token: 0x040002A6 RID: 678 RVA: 0x000AE1F0 File Offset: 0x000AC7F0
	internal static _s__RTTICompleteObjectLocator2 ??_R4_System_error@std@@6B@;

	// Token: 0x040002A7 RID: 679 RVA: 0x000AEB70 File Offset: 0x000AD170
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@bad_cast@std@@8;

	// Token: 0x040002A8 RID: 680 RVA: 0x000AE110 File Offset: 0x000AC710
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@runtime_error@std@@8;

	// Token: 0x040002A9 RID: 681 RVA: 0x000AE1B8 File Offset: 0x000AC7B8
	internal static $_s__RTTIBaseClassArray$_extraBytes_24 ??_R2_System_error@std@@8;

	// Token: 0x040002AA RID: 682 RVA: 0x000B6E38 File Offset: 0x000B4E38
	internal static $_TypeDescriptor$_extraBytes_23 ??_R0?AVsystem_error@std@@@8;

	// Token: 0x040002AB RID: 683 RVA: 0x000AEBF0 File Offset: 0x000AD1F0
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@exception@std@@8;

	// Token: 0x040002AC RID: 684 RVA: 0x000AE280 File Offset: 0x000AC880
	internal static _s__RTTICompleteObjectLocator2 ??_R4system_error@std@@6B@;

	// Token: 0x040002AD RID: 685 RVA: 0x000AE1D8 File Offset: 0x000AC7D8
	internal static _s__RTTIClassHierarchyDescriptor ??_R3_System_error@std@@8;

	// Token: 0x040002AE RID: 686 RVA: 0x000AEB98 File Offset: 0x000AD198
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2bad_cast@std@@8;

	// Token: 0x040002AF RID: 687 RVA: 0x000AEC18 File Offset: 0x000AD218
	internal static $_s__RTTIBaseClassArray$_extraBytes_8 ??_R2exception@std@@8;

	// Token: 0x040002B0 RID: 688 RVA: 0x000AE318 File Offset: 0x000AC918
	internal static _s__RTTICompleteObjectLocator2 ??_R4failure@ios_base@std@@6B@;

	// Token: 0x040002B1 RID: 689 RVA: 0x000B65D0 File Offset: 0x000B45D0
	internal static $ArrayType$$$BY02Q6AXXZ ??_7bad_cast@std@@6B@;

	// Token: 0x040002B2 RID: 690 RVA: 0x000B72A8 File Offset: 0x000B52A8
	internal static $_TypeDescriptor$_extraBytes_19 ??_R0?AVbad_cast@std@@@8;

	// Token: 0x040002B3 RID: 691 RVA: 0x000AE2D0 File Offset: 0x000AC8D0
	internal static $_s__RTTIBaseClassArray$_extraBytes_40 ??_R2failure@ios_base@std@@8;

	// Token: 0x040002B4 RID: 692 RVA: 0x000AE300 File Offset: 0x000AC900
	internal static _s__RTTIClassHierarchyDescriptor ??_R3failure@ios_base@std@@8;

	// Token: 0x040002B5 RID: 693 RVA: 0x000B6508 File Offset: 0x000B4508
	internal static $ArrayType$$$BY02Q6AXXZ ??_7exception@std@@6B@;

	// Token: 0x040002B6 RID: 694 RVA: 0x000B78C8 File Offset: 0x00000000
	internal static int __@@_PchSym_@00@UxPdliphkzxvUxorvmgRozfmxsviUozfmxsviUozfmxsvinlwfovCUcGEUivovzhvUhgwzucOlyq@4B2008FD98C1DD4;

	// Token: 0x040002B7 RID: 695 RVA: 0x000AEC28 File Offset: 0x000AD228
	internal static _s__RTTIClassHierarchyDescriptor ??_R3exception@std@@8;

	// Token: 0x040002B8 RID: 696 RVA: 0x000B6570 File Offset: 0x000B4570
	internal static $ArrayType$$$BY02Q6AXXZ ??_7runtime_error@std@@6B@;

	// Token: 0x040002B9 RID: 697 RVA: 0x000B65A8 File Offset: 0x000B45A8
	internal static $ArrayType$$$BY02Q6AXXZ ??_7_System_error@std@@6B@;

	// Token: 0x040002BA RID: 698 RVA: 0x000AE2A8 File Offset: 0x000AC8A8
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@failure@ios_base@std@@8;

	// Token: 0x040002BB RID: 699 RVA: 0x000AE190 File Offset: 0x000AC790
	internal static _s__RTTIBaseClassDescriptor ??_R1A@?0A@EA@_System_error@std@@8;

	// Token: 0x040002BC RID: 700 RVA: 0x000AEBB0 File Offset: 0x000AD1B0
	internal static _s__RTTIClassHierarchyDescriptor ??_R3bad_cast@std@@8;

	// Token: 0x040002BD RID: 701 RVA: 0x000AEBC8 File Offset: 0x000AD1C8
	internal static _s__RTTICompleteObjectLocator2 ??_R4bad_cast@std@@6B@;

	// Token: 0x040002BE RID: 702 RVA: 0x000AE138 File Offset: 0x000AC738
	internal static $_s__RTTIBaseClassArray$_extraBytes_16 ??_R2runtime_error@std@@8;

	// Token: 0x040002BF RID: 703 RVA: 0x000B6E10 File Offset: 0x000B4E10
	internal static $_TypeDescriptor$_extraBytes_24 ??_R0?AV_System_error@std@@@8;

	// Token: 0x040002C0 RID: 704 RVA: 0x000AE268 File Offset: 0x000AC868
	internal static _s__RTTIClassHierarchyDescriptor ??_R3system_error@std@@8;

	// Token: 0x040002C1 RID: 705 RVA: 0x000B72D0 File Offset: 0x000B52D0
	internal static $_TypeDescriptor$_extraBytes_20 ??_R0?AVexception@std@@@8;

	// Token: 0x040002C2 RID: 706 RVA: 0x000B65F8 File Offset: 0x000B45F8
	internal static $ArrayType$$$BY02Q6AXXZ ??_7system_error@std@@6B@;

	// Token: 0x040002C3 RID: 707 RVA: 0x000AE150 File Offset: 0x000AC750
	internal static _s__RTTIClassHierarchyDescriptor ??_R3runtime_error@std@@8;

	// Token: 0x040002C4 RID: 708 RVA: 0x000B6630 File Offset: 0x000B4630
	internal static $ArrayType$$$BY02Q6AXXZ ??_7failure@ios_base@std@@6B@;

	// Token: 0x040002C5 RID: 709 RVA: 0x000B6518 File Offset: 0x000B4518
	public static method __m2mep@??0exception@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002C6 RID: 710 RVA: 0x000B66A0 File Offset: 0x000B46A0
	public static method __m2mep@??1exception@std@@$$FUEAA@XZ;

	// Token: 0x040002C7 RID: 711 RVA: 0x000B6690 File Offset: 0x000B4690
	public static method __m2mep@?what@exception@std@@$$FUEBAPEBDXZ;

	// Token: 0x040002C8 RID: 712 RVA: 0x000B6680 File Offset: 0x000B4680
	public static method __m2mep@??_Eexception@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002C9 RID: 713 RVA: 0x000B66B0 File Offset: 0x000B46B0
	public static method __m2mep@??1exception_ptr@std@@$$FQEAA@XZ;

	// Token: 0x040002CA RID: 714 RVA: 0x000B6528 File Offset: 0x000B4528
	public static method __m2mep@??0exception_ptr@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002CB RID: 715 RVA: 0x000B6538 File Offset: 0x000B4538
	public static method __m2mep@?<MarshalCopy>@exception_ptr@std@@$$FSMXPEAV12@0@Z;

	// Token: 0x040002CC RID: 716 RVA: 0x000B6548 File Offset: 0x000B4548
	public static method __m2mep@?<MarshalDestroy>@exception_ptr@std@@$$FSMXPEAV12@@Z;

	// Token: 0x040002CD RID: 717 RVA: 0x000B6558 File Offset: 0x000B4558
	public static method __m2mep@??0_Container_base12@std@@$$FQEAA@AEBU01@@Z;

	// Token: 0x040002CE RID: 718 RVA: 0x000B6618 File Offset: 0x000B4618
	public static method __m2mep@??0_Iterator_base12@std@@$$FQEAA@AEBU01@@Z;

	// Token: 0x040002CF RID: 719 RVA: 0x000B67C0 File Offset: 0x000B47C0
	public static method __m2mep@??4_Iterator_base12@std@@$$FQEAAAEAU01@AEBU01@@Z;

	// Token: 0x040002D0 RID: 720 RVA: 0x000B66C0 File Offset: 0x000B46C0
	public static method __m2mep@?_Adopt@_Iterator_base12@std@@$$FQEAAXPEBU_Container_base12@2@@Z;

	// Token: 0x040002D1 RID: 721 RVA: 0x000B66E0 File Offset: 0x000B46E0
	public static method __m2mep@??_Eruntime_error@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002D2 RID: 722 RVA: 0x000B66D0 File Offset: 0x000B46D0
	public static method __m2mep@??1runtime_error@std@@$$FUEAA@XZ;

	// Token: 0x040002D3 RID: 723 RVA: 0x000B67A0 File Offset: 0x000B47A0
	public static method __m2mep@??_Ebad_cast@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002D4 RID: 724 RVA: 0x000B6820 File Offset: 0x000B4820
	public static method __m2mep@??1bad_cast@std@@$$FUEAA@XZ;

	// Token: 0x040002D5 RID: 725 RVA: 0x000B6580 File Offset: 0x000B4580
	public static method __m2mep@??0runtime_error@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002D6 RID: 726 RVA: 0x000B6590 File Offset: 0x000B4590
	public static method __m2mep@??0locale@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002D7 RID: 727 RVA: 0x000B6660 File Offset: 0x000B4660
	public static method __m2mep@?<MarshalCopy>@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FSMXPEAV12@0@Z;

	// Token: 0x040002D8 RID: 728 RVA: 0x000B6670 File Offset: 0x000B4670
	public static method __m2mep@?<MarshalDestroy>@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FSMXPEAV12@@Z;

	// Token: 0x040002D9 RID: 729 RVA: 0x000B6710 File Offset: 0x000B4710
	public static method __m2mep@??_E_System_error@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002DA RID: 730 RVA: 0x000B66F0 File Offset: 0x000B46F0
	public static method __m2mep@??1_System_error@std@@$$FUEAA@XZ;

	// Token: 0x040002DB RID: 731 RVA: 0x000B67D0 File Offset: 0x000B47D0
	public static method __m2mep@??_Esystem_error@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002DC RID: 732 RVA: 0x000B6700 File Offset: 0x000B4700
	public static method __m2mep@??1system_error@std@@$$FUEAA@XZ;

	// Token: 0x040002DD RID: 733 RVA: 0x000B67F0 File Offset: 0x000B47F0
	public static method __m2mep@??_Efailure@ios_base@std@@$$FUEAAPEAXI@Z;

	// Token: 0x040002DE RID: 734 RVA: 0x000B6830 File Offset: 0x000B4830
	public static method __m2mep@??1failure@ios_base@std@@$$FUEAA@XZ;

	// Token: 0x040002DF RID: 735 RVA: 0x000B6640 File Offset: 0x000B4640
	public static method __m2mep@??0failure@ios_base@std@@$$FQEAA@AEBV012@@Z;

	// Token: 0x040002E0 RID: 736 RVA: 0x000B6608 File Offset: 0x000B4608
	public static method __m2mep@??0system_error@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002E1 RID: 737 RVA: 0x000B65B8 File Offset: 0x000B45B8
	public static method __m2mep@??0_System_error@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002E2 RID: 738 RVA: 0x000B6720 File Offset: 0x000B4720
	public static method __m2mep@?PtrToStringChars@@$$FYMPE$CB_WPE$ABVString@System@@@Z;

	// Token: 0x040002E3 RID: 739 RVA: 0x000B6730 File Offset: 0x000B4730
	public static method __m2mep@?GetAnsiStringSize@details@interop@msclr@@$$FYM_KPE$AAVString@System@@@Z;

	// Token: 0x040002E4 RID: 740 RVA: 0x000B6740 File Offset: 0x000B4740
	public static method __m2mep@?WriteAnsiString@details@interop@msclr@@$$FYMXPEAD_KPE$AAVString@System@@@Z;

	// Token: 0x040002E5 RID: 741 RVA: 0x000B6750 File Offset: 0x000B4750
	public static method __m2mep@?release@?$char_buffer@D@details@interop@msclr@@$$FQEAAPEADXZ;

	// Token: 0x040002E6 RID: 742 RVA: 0x000B6760 File Offset: 0x000B4760
	public static method __m2mep@?get@?$char_buffer@D@details@interop@msclr@@$$FQEBAPEADXZ;

	// Token: 0x040002E7 RID: 743 RVA: 0x000B6770 File Offset: 0x000B4770
	public static method __m2mep@??1?$char_buffer@D@details@interop@msclr@@$$FQEAA@XZ;

	// Token: 0x040002E8 RID: 744 RVA: 0x000B6780 File Offset: 0x000B4780
	public static method __m2mep@??0?$char_buffer@D@details@interop@msclr@@$$FQEAA@_K@Z;

	// Token: 0x040002E9 RID: 745 RVA: 0x000B6650 File Offset: 0x000B4650
	public static method __m2mep@??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002EA RID: 746 RVA: 0x000B6790 File Offset: 0x000B4790
	public static method __m2mep@?select_on_container_copy_construction@?$_Default_allocator_traits@V?$allocator@D@std@@@std@@$$FSA?AV?$allocator@D@2@AEBV32@@Z;

	// Token: 0x040002EB RID: 747 RVA: 0x000B6810 File Offset: 0x000B4810
	public static method __m2mep@?_Construct_lv_contents@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$$FQEAAXAEBV12@@Z;

	// Token: 0x040002EC RID: 748 RVA: 0x000B6800 File Offset: 0x000B4800
	public static method __m2mep@??$?0V?$allocator@D@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@$$FQEAA@$$QEAV?$allocator@D@1@@Z;

	// Token: 0x040002ED RID: 749 RVA: 0x000B65E0 File Offset: 0x000B45E0
	public static method __m2mep@??0bad_cast@std@@$$FQEAA@AEBV01@@Z;

	// Token: 0x040002EE RID: 750 RVA: 0x000B67B0 File Offset: 0x000B47B0
	public static method __m2mep@??$forward@V?$allocator@D@std@@@std@@$$FYA$$QEAV?$allocator@D@0@AEAV10@@Z;

	// Token: 0x040002EF RID: 751 RVA: 0x000B67E0 File Offset: 0x000B47E0
	public static method __m2mep@??$?0V?$allocator@D@std@@$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@$$FQEAA@U_One_then_variadic_args_t@1@$$QEAV?$allocator@D@1@@Z;

	// Token: 0x040002F0 RID: 752 RVA: 0x00022CF8 File Offset: 0x000212F8
	internal static __s_GUID _GUID_cb2f6723_ab3a_11d2_9c40_00c04fa30a3e;

	// Token: 0x040002F1 RID: 753 RVA: 0x00022CE8 File Offset: 0x000212E8
	internal static __s_GUID _GUID_cb2f6722_ab3a_11d2_9c40_00c04fa30a3e;

	// Token: 0x040002F2 RID: 754
	[FixedAddressValueType]
	internal static int ?Uninitialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA;

	// Token: 0x040002F3 RID: 755 RVA: 0x00022680 File Offset: 0x00020C80
	internal static method ?Uninitialized$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x040002F4 RID: 756
	[FixedAddressValueType]
	internal static Progress ?InitializedNative@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x040002F5 RID: 757 RVA: 0x00022698 File Offset: 0x00020C98
	internal static method ?InitializedNative$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x040002F6 RID: 758 RVA: 0x00022D08 File Offset: 0x00021308
	internal static __s_GUID _GUID_90f1a06c_7712_4762_86b5_7a5eba6bdb02;

	// Token: 0x040002F7 RID: 759 RVA: 0x00022D18 File Offset: 0x00021318
	internal static __s_GUID _GUID_90f1a06e_7712_4762_86b5_7a5eba6bdb02;

	// Token: 0x040002F8 RID: 760
	[FixedAddressValueType]
	internal static Progress ?InitializedPerAppDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x040002F9 RID: 761 RVA: 0x000B7EC8 File Offset: 0x00000000
	internal static bool ?Entered@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x040002FA RID: 762 RVA: 0x000B6874 File Offset: 0x000B4874
	internal static TriBool ?hasNative@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A;

	// Token: 0x040002FB RID: 763 RVA: 0x000B7ECB File Offset: 0x00000000
	internal static bool ?InitializedPerProcess@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x040002FC RID: 764 RVA: 0x000B7ECC File Offset: 0x00000000
	internal static int ?Count@AllDomains@<CrtImplementationDetails>@@2HA;

	// Token: 0x040002FD RID: 765
	[FixedAddressValueType]
	internal static int ?Initialized@CurrentDomain@<CrtImplementationDetails>@@$$Q2HA;

	// Token: 0x040002FE RID: 766 RVA: 0x000B7ECA File Offset: 0x00000000
	internal static bool ?InitializedNativeFromCCTOR@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x040002FF RID: 767
	[FixedAddressValueType]
	internal static bool ?IsDefaultDomain@CurrentDomain@<CrtImplementationDetails>@@$$Q2_NA;

	// Token: 0x04000300 RID: 768
	[FixedAddressValueType]
	internal static Progress ?InitializedVtables@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x04000301 RID: 769 RVA: 0x000B7EC9 File Offset: 0x00000000
	internal static bool ?InitializedNative@DefaultDomain@<CrtImplementationDetails>@@2_NA;

	// Token: 0x04000302 RID: 770
	[FixedAddressValueType]
	internal static Progress ?InitializedPerProcess@CurrentDomain@<CrtImplementationDetails>@@$$Q2W4Progress@2@A;

	// Token: 0x04000303 RID: 771 RVA: 0x000B6870 File Offset: 0x000B4870
	internal static TriBool ?hasPerProcess@DefaultDomain@<CrtImplementationDetails>@@0W4TriBool@2@A;

	// Token: 0x04000304 RID: 772 RVA: 0x000226C0 File Offset: 0x00020CC0
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_mp_z;

	// Token: 0x04000305 RID: 773 RVA: 0x000226D0 File Offset: 0x00020CD0
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xi_vt_z;

	// Token: 0x04000306 RID: 774 RVA: 0x000226A0 File Offset: 0x00020CA0
	internal static method ?InitializedPerProcess$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x04000307 RID: 775 RVA: 0x00022670 File Offset: 0x00020C70
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_ma_a;

	// Token: 0x04000308 RID: 776 RVA: 0x000226B0 File Offset: 0x00020CB0
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_ma_z;

	// Token: 0x04000309 RID: 777 RVA: 0x000226A8 File Offset: 0x00020CA8
	internal static method ?InitializedPerAppDomain$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400030A RID: 778 RVA: 0x000226C8 File Offset: 0x00020CC8
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xi_vt_a;

	// Token: 0x0400030B RID: 779 RVA: 0x00022678 File Offset: 0x00020C78
	internal static method ?Initialized$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400030C RID: 780 RVA: 0x000226B8 File Offset: 0x00020CB8
	internal static $ArrayType$$$BY00Q6MPEBXXZ __xc_mp_a;

	// Token: 0x0400030D RID: 781 RVA: 0x00022690 File Offset: 0x00020C90
	internal static method ?InitializedVtables$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400030E RID: 782 RVA: 0x00022688 File Offset: 0x00020C88
	internal static method ?IsDefaultDomain$initializer$@CurrentDomain@<CrtImplementationDetails>@@$$Q2P6MXXZEA;

	// Token: 0x0400030F RID: 783 RVA: 0x000B69F8 File Offset: 0x000B49F8
	public static method __m2mep@?ThrowNestedModuleLoadException@<CrtImplementationDetails>@@$$FYMXPE$AAVException@System@@0@Z;

	// Token: 0x04000310 RID: 784 RVA: 0x000B6888 File Offset: 0x000B4888
	public static method __m2mep@?ThrowModuleLoadException@<CrtImplementationDetails>@@$$FYMXPE$AAVString@System@@@Z;

	// Token: 0x04000311 RID: 785 RVA: 0x000B6898 File Offset: 0x000B4898
	public static method __m2mep@?ThrowModuleLoadException@<CrtImplementationDetails>@@$$FYMXPE$AAVString@System@@PE$AAVException@3@@Z;

	// Token: 0x04000312 RID: 786 RVA: 0x000B68A8 File Offset: 0x000B48A8
	public static method __m2mep@?RegisterModuleUninitializer@<CrtImplementationDetails>@@$$FYMXPE$AAVEventHandler@System@@@Z;

	// Token: 0x04000313 RID: 787 RVA: 0x000B68B8 File Offset: 0x000B48B8
	public static method __m2mep@?FromGUID@<CrtImplementationDetails>@@$$FYM?AVGuid@System@@AEBU_GUID@@@Z;

	// Token: 0x04000314 RID: 788 RVA: 0x000B68C8 File Offset: 0x000B48C8
	public static method __m2mep@?__get_default_appdomain@@$$FYAJPEAPEAUIUnknown@@@Z;

	// Token: 0x04000315 RID: 789 RVA: 0x000B68D8 File Offset: 0x000B48D8
	public static method __m2mep@?__release_appdomain@@$$FYAXPEAUIUnknown@@@Z;

	// Token: 0x04000316 RID: 790 RVA: 0x000B68E8 File Offset: 0x000B48E8
	public static method __m2mep@?GetDefaultDomain@<CrtImplementationDetails>@@$$FYMPE$AAVAppDomain@System@@XZ;

	// Token: 0x04000317 RID: 791 RVA: 0x000B68F8 File Offset: 0x000B48F8
	public static method __m2mep@?DoCallBackInDefaultDomain@<CrtImplementationDetails>@@$$FYAXP6AJPEAX@Z0@Z;

	// Token: 0x04000318 RID: 792 RVA: 0x000B6908 File Offset: 0x000B4908
	public static method __m2mep@?__scrt_is_safe_for_managed_code@@$$FYA_NXZ;

	// Token: 0x04000319 RID: 793 RVA: 0x000B6918 File Offset: 0x000B4918
	public static method __m2mep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x0400031A RID: 794 RVA: 0x000B6928 File Offset: 0x000B4928
	public static method __m2mep@?HasPerProcess@DefaultDomain@<CrtImplementationDetails>@@$$FSA_NXZ;

	// Token: 0x0400031B RID: 795 RVA: 0x000B6938 File Offset: 0x000B4938
	public static method __m2mep@?HasNative@DefaultDomain@<CrtImplementationDetails>@@$$FSA_NXZ;

	// Token: 0x0400031C RID: 796 RVA: 0x000B6948 File Offset: 0x000B4948
	public static method __m2mep@?NeedsInitialization@DefaultDomain@<CrtImplementationDetails>@@$$FSA_NXZ;

	// Token: 0x0400031D RID: 797 RVA: 0x000B6958 File Offset: 0x000B4958
	public static method __m2mep@?NeedsUninitialization@DefaultDomain@<CrtImplementationDetails>@@$$FSA_NXZ;

	// Token: 0x0400031E RID: 798 RVA: 0x000B6968 File Offset: 0x000B4968
	public static method __m2mep@?Initialize@DefaultDomain@<CrtImplementationDetails>@@$$FSAXXZ;

	// Token: 0x0400031F RID: 799 RVA: 0x000B6A08 File Offset: 0x000B4A08
	public static method __m2mep@?InitializeVtables@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000320 RID: 800 RVA: 0x000B6A18 File Offset: 0x000B4A18
	public static method __m2mep@?InitializeDefaultAppDomain@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000321 RID: 801 RVA: 0x000B6A28 File Offset: 0x000B4A28
	public static method __m2mep@?InitializeNative@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000322 RID: 802 RVA: 0x000B6A38 File Offset: 0x000B4A38
	public static method __m2mep@?InitializePerProcess@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000323 RID: 803 RVA: 0x000B6A48 File Offset: 0x000B4A48
	public static method __m2mep@?InitializePerAppDomain@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000324 RID: 804 RVA: 0x000B6A58 File Offset: 0x000B4A58
	public static method __m2mep@?InitializeUninitializer@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000325 RID: 805 RVA: 0x000B6A68 File Offset: 0x000B4A68
	public static method __m2mep@?_Initialize@LanguageSupport@<CrtImplementationDetails>@@$$FAEAAXXZ;

	// Token: 0x04000326 RID: 806 RVA: 0x000B6978 File Offset: 0x000B4978
	public static method __m2mep@?UninitializeAppDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAXXZ;

	// Token: 0x04000327 RID: 807 RVA: 0x000B6988 File Offset: 0x000B4988
	public static method __m2mep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000328 RID: 808 RVA: 0x000B6998 File Offset: 0x000B4998
	public static method __m2mep@?UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAXXZ;

	// Token: 0x04000329 RID: 809 RVA: 0x000B69A8 File Offset: 0x000B49A8
	public static method __m2mep@?DomainUnload@LanguageSupport@<CrtImplementationDetails>@@$$FCMXPE$AAVObject@System@@PE$AAVEventArgs@4@@Z;

	// Token: 0x0400032A RID: 810 RVA: 0x000B6A78 File Offset: 0x000B4A78
	public static method __m2mep@?Cleanup@LanguageSupport@<CrtImplementationDetails>@@$$FAEAMXPE$AAVException@System@@@Z;

	// Token: 0x0400032B RID: 811 RVA: 0x000B6A88 File Offset: 0x000B4A88
	public static method __m2mep@??0LanguageSupport@<CrtImplementationDetails>@@$$FQEAA@XZ;

	// Token: 0x0400032C RID: 812 RVA: 0x000B6A98 File Offset: 0x000B4A98
	public static method __m2mep@??1LanguageSupport@<CrtImplementationDetails>@@$$FQEAA@XZ;

	// Token: 0x0400032D RID: 813 RVA: 0x000B6AA8 File Offset: 0x000B4AA8
	public static method __m2mep@?Initialize@LanguageSupport@<CrtImplementationDetails>@@$$FQEAAXXZ;

	// Token: 0x0400032E RID: 814 RVA: 0x000B6878 File Offset: 0x000B4878
	public static method cctor@@$$FYMXXZ;

	// Token: 0x0400032F RID: 815 RVA: 0x000B69B8 File Offset: 0x000B49B8
	public static method __m2mep@??B?$gcroot@PE$AAVString@System@@@@$$FQEBMPE$AAVString@System@@XZ;

	// Token: 0x04000330 RID: 816 RVA: 0x000B69C8 File Offset: 0x000B49C8
	public static method __m2mep@??4?$gcroot@PE$AAVString@System@@@@$$FQEAMAEAU0@PE$AAVString@System@@@Z;

	// Token: 0x04000331 RID: 817 RVA: 0x000B69D8 File Offset: 0x000B49D8
	public static method __m2mep@??1?$gcroot@PE$AAVString@System@@@@$$FQEAA@XZ;

	// Token: 0x04000332 RID: 818 RVA: 0x000B69E8 File Offset: 0x000B49E8
	public static method __m2mep@??0?$gcroot@PE$AAVString@System@@@@$$FQEAA@XZ;

	// Token: 0x04000333 RID: 819 RVA: 0x00022D28 File Offset: 0x00021328
	public unsafe static int** __unep@?DoNothing@DefaultDomain@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000334 RID: 820 RVA: 0x00022D30 File Offset: 0x00021330
	public unsafe static int** __unep@?_UninitializeDefaultDomain@LanguageSupport@<CrtImplementationDetails>@@$$FCAJPEAX@Z;

	// Token: 0x04000335 RID: 821 RVA: 0x000B6AF0 File Offset: 0x000B4AF0
	public static method __m2mep@?___CxxCallUnwindDtor@@$$J0YMXP6MXPEAX@Z0@Z;

	// Token: 0x04000336 RID: 822 RVA: 0x000B6B00 File Offset: 0x000B4B00
	public static method __m2mep@?___CxxCallUnwindDelDtor@@$$J0YMXP6MXPEAX@Z0@Z;

	// Token: 0x04000337 RID: 823 RVA: 0x000B6B10 File Offset: 0x000B4B10
	public static method __m2mep@?___CxxCallUnwindVecDtor@@$$J0YMXP6MXPEAX_KHP6MX0@Z@Z01H2@Z;

	// Token: 0x04000338 RID: 824 RVA: 0x000B6B30 File Offset: 0x000B4B30
	public static method __m2mep@??_M@$$FYMXPEAX_K1P6MX0@Z@Z;

	// Token: 0x04000339 RID: 825 RVA: 0x000B6B50 File Offset: 0x000B4B50
	public static method __m2mep@?ArrayUnwindFilter@?A0x94e83ccb@@$$FYAHPEAU_EXCEPTION_POINTERS@@@Z;

	// Token: 0x0400033A RID: 826 RVA: 0x000B6B20 File Offset: 0x000B4B20
	public static method __m2mep@?__ArrayUnwind@@$$FYMXPEAX_K1P6MX0@Z@Z;

	// Token: 0x0400033B RID: 827 RVA: 0x000B6B40 File Offset: 0x000B4B40
	public static method __m2mep@??_M@$$FYMXPEAX_KHP6MX0@Z@Z;

	// Token: 0x0400033C RID: 828 RVA: 0x000B8038 File Offset: 0x00000000
	internal unsafe static method* __onexitbegin_m;

	// Token: 0x0400033D RID: 829 RVA: 0x000B8030 File Offset: 0x00000000
	internal static ulong __exit_list_size;

	// Token: 0x0400033E RID: 830
	[FixedAddressValueType]
	internal unsafe static method* __onexitend_app_domain;

	// Token: 0x0400033F RID: 831
	[FixedAddressValueType]
	internal unsafe static void* ?_lock@AtExitLock@<CrtImplementationDetails>@@$$Q0PEAXEA;

	// Token: 0x04000340 RID: 832
	[FixedAddressValueType]
	internal static int ?_ref_count@AtExitLock@<CrtImplementationDetails>@@$$Q0HA;

	// Token: 0x04000341 RID: 833 RVA: 0x000B8040 File Offset: 0x00000000
	internal unsafe static method* __onexitend_m;

	// Token: 0x04000342 RID: 834
	[FixedAddressValueType]
	internal static ulong __exit_list_size_app_domain;

	// Token: 0x04000343 RID: 835
	[FixedAddressValueType]
	internal unsafe static method* __onexitbegin_app_domain;

	// Token: 0x04000344 RID: 836 RVA: 0x000B6BF0 File Offset: 0x000B4BF0
	public static method __m2mep@?_handle@AtExitLock@<CrtImplementationDetails>@@$$FCMPE$AA__ZVGCHandle@InteropServices@Runtime@System@@XZ;

	// Token: 0x04000345 RID: 837 RVA: 0x000B6CA0 File Offset: 0x000B4CA0
	public static method __m2mep@?_lock_Construct@AtExitLock@<CrtImplementationDetails>@@$$FCMXPE$AAVObject@System@@@Z;

	// Token: 0x04000346 RID: 838 RVA: 0x000B6C00 File Offset: 0x000B4C00
	public static method __m2mep@?_lock_Set@AtExitLock@<CrtImplementationDetails>@@$$FCMXPE$AAVObject@System@@@Z;

	// Token: 0x04000347 RID: 839 RVA: 0x000B6C10 File Offset: 0x000B4C10
	public static method __m2mep@?_lock_Get@AtExitLock@<CrtImplementationDetails>@@$$FCMPE$AAVObject@System@@XZ;

	// Token: 0x04000348 RID: 840 RVA: 0x000B6C20 File Offset: 0x000B4C20
	public static method __m2mep@?_lock_Destruct@AtExitLock@<CrtImplementationDetails>@@$$FCAXXZ;

	// Token: 0x04000349 RID: 841 RVA: 0x000B6C30 File Offset: 0x000B4C30
	public static method __m2mep@?IsInitialized@AtExitLock@<CrtImplementationDetails>@@$$FSA_NXZ;

	// Token: 0x0400034A RID: 842 RVA: 0x000B6CB0 File Offset: 0x000B4CB0
	public static method __m2mep@?AddRef@AtExitLock@<CrtImplementationDetails>@@$$FSAXXZ;

	// Token: 0x0400034B RID: 843 RVA: 0x000B6C40 File Offset: 0x000B4C40
	public static method __m2mep@?RemoveRef@AtExitLock@<CrtImplementationDetails>@@$$FSAXXZ;

	// Token: 0x0400034C RID: 844 RVA: 0x000B6C50 File Offset: 0x000B4C50
	public static method __m2mep@?Enter@AtExitLock@<CrtImplementationDetails>@@$$FSAXXZ;

	// Token: 0x0400034D RID: 845 RVA: 0x000B6C60 File Offset: 0x000B4C60
	public static method __m2mep@?Exit@AtExitLock@<CrtImplementationDetails>@@$$FSAXXZ;

	// Token: 0x0400034E RID: 846 RVA: 0x000B6C70 File Offset: 0x000B4C70
	public static method __m2mep@?__global_lock@?A0x5f1aee9f@@$$FYA_NXZ;

	// Token: 0x0400034F RID: 847 RVA: 0x000B6C80 File Offset: 0x000B4C80
	public static method __m2mep@?__global_unlock@?A0x5f1aee9f@@$$FYA_NXZ;

	// Token: 0x04000350 RID: 848 RVA: 0x000B6CC0 File Offset: 0x000B4CC0
	public static method __m2mep@?__alloc_global_lock@?A0x5f1aee9f@@$$FYA_NXZ;

	// Token: 0x04000351 RID: 849 RVA: 0x000B6C90 File Offset: 0x000B4C90
	public static method __m2mep@?__dealloc_global_lock@?A0x5f1aee9f@@$$FYAXXZ;

	// Token: 0x04000352 RID: 850 RVA: 0x000B6B60 File Offset: 0x000B4B60
	public static method __m2mep@?_atexit_helper@@$$J0YMHP6MXXZPEA_KPEAPEAP6MXXZ2@Z;

	// Token: 0x04000353 RID: 851 RVA: 0x000B6B70 File Offset: 0x000B4B70
	public static method __m2mep@?_exit_callback@@$$J0YMXXZ;

	// Token: 0x04000354 RID: 852 RVA: 0x000B6BB0 File Offset: 0x000B4BB0
	public static method __m2mep@?_initatexit_m@@$$J0YMHXZ;

	// Token: 0x04000355 RID: 853 RVA: 0x000B6BC0 File Offset: 0x000B4BC0
	public static method __m2mep@?_onexit_m@@$$J0YMP6MHXZP6MHXZ@Z;

	// Token: 0x04000356 RID: 854 RVA: 0x000B6B80 File Offset: 0x000B4B80
	public static method __m2mep@?_atexit_m@@$$J0YMHP6MXXZ@Z;

	// Token: 0x04000357 RID: 855 RVA: 0x000B6BD0 File Offset: 0x000B4BD0
	public static method __m2mep@?_initatexit_app_domain@@$$J0YMHXZ;

	// Token: 0x04000358 RID: 856 RVA: 0x000B6B90 File Offset: 0x000B4B90
	public static method __m2mep@?_app_exit_callback@@$$J0YMXXZ;

	// Token: 0x04000359 RID: 857 RVA: 0x000B6BE0 File Offset: 0x000B4BE0
	public static method __m2mep@?_onexit_m_appdomain@@$$J0YMP6MHXZP6MHXZ@Z;

	// Token: 0x0400035A RID: 858 RVA: 0x000B6BA0 File Offset: 0x000B4BA0
	public static method __m2mep@?_atexit_m_appdomain@@$$J0YMHP6MXXZ@Z;

	// Token: 0x0400035B RID: 859 RVA: 0x000B6CD0 File Offset: 0x000B4CD0
	public static method __m2mep@?_initterm_e@@$$FYMHPEAP6AHXZ0@Z;

	// Token: 0x0400035C RID: 860 RVA: 0x000B6CE0 File Offset: 0x000B4CE0
	public static method __m2mep@?_initterm@@$$FYMXPEAP6AXXZ0@Z;

	// Token: 0x0400035D RID: 861 RVA: 0x000B6D00 File Offset: 0x000B4D00
	public static method __m2mep@?Handle@ThisModule@<CrtImplementationDetails>@@$$FCM?AVModuleHandle@System@@XZ;

	// Token: 0x0400035E RID: 862 RVA: 0x000B6CF0 File Offset: 0x000B4CF0
	public static method __m2mep@?_initterm_m@@$$FYMXPEBQ6MPEBXXZ0@Z;

	// Token: 0x0400035F RID: 863 RVA: 0x000B6D10 File Offset: 0x000B4D10
	public static method __m2mep@??$ResolveMethod@$$A6MPEBXXZ@ThisModule@<CrtImplementationDetails>@@$$FSMP6MPEBXXZP6MPEBXXZ@Z;

	// Token: 0x04000360 RID: 864 RVA: 0x00022C70 File Offset: 0x00021270
	internal static $ArrayType$$$BY01Q6AXXZ ??_7type_info@@6B@;

	// Token: 0x04000361 RID: 865 RVA: 0x00022648 File Offset: 0x00020C48
	internal static $ArrayType$$$BY0A@P6AHXZ __xi_z;

	// Token: 0x04000362 RID: 866 RVA: 0x000B78E8 File Offset: 0x00000000
	internal static __scrt_native_startup_state __scrt_current_native_startup_state;

	// Token: 0x04000363 RID: 867 RVA: 0x000B78F0 File Offset: 0x00000000
	internal unsafe static void* __scrt_native_startup_lock;

	// Token: 0x04000364 RID: 868 RVA: 0x00022610 File Offset: 0x00020C10
	internal static $ArrayType$$$BY0A@P6AXXZ __xc_a;

	// Token: 0x04000365 RID: 869 RVA: 0x00022640 File Offset: 0x00020C40
	internal static $ArrayType$$$BY0A@P6AHXZ __xi_a;

	// Token: 0x04000366 RID: 870 RVA: 0x000B6840 File Offset: 0x000B4840
	internal static uint __scrt_native_dllmain_reason;

	// Token: 0x04000367 RID: 871 RVA: 0x00022638 File Offset: 0x00020C38
	internal static $ArrayType$$$BY0A@P6AXXZ __xc_z;
}
