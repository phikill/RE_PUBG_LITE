#pragma once

// Name: LitePC_0701, Version: 1.0.0

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class ShadowTrackerExtra.ActorCacheMgr
// 0x0050 (0x03B8 - 0x0368)
class AActorCacheMgr : public AActor
{
public:
	TMap<class UClass*, class UActorCachePool*>        DataMap;                                                  // 0x0368(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ActorCacheMgr");
		return ptr;
	}


	class AActor* GetActor(class UClass* Type);
	bool AddToPool(class UClass* Type, class AActor* Target);
};


// Class ShadowTrackerExtra.ActorCachePool
// 0x0028 (0x0050 - 0x0028)
class UActorCachePool : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ActorCachePool");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AgentBoundComponent
// 0x0018 (0x0110 - 0x00F8)
class UAgentBoundComponent : public UActorComponent
{
public:
	struct FVector                                     LocalCenter;                                              // 0x00F8(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     LocalSize;                                                // 0x0104(0x000C) (Edit, BlueprintVisible, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AgentBoundComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AIActingComponent
// 0x0268 (0x0360 - 0x00F8)
class UAIActingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F8(0x0018) MISSED OFFSET
	TArray<struct FAIActingCandidateData>              CandidateAIList;                                          // 0x0110(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0xA0];                                      // 0x0120(0x00A0) MISSED OFFSET
	int                                                MaxActiveAI;                                              // 0x01C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ActiveAI_n;                                               // 0x01C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ActiveAI_m;                                               // 0x01C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AISpawnCircleOriginOffset;                                // 0x01CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoWhiteCirclesRadius;                                     // 0x01D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SelectActionPeriod;                                       // 0x01D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpawnCheckHumanRadiusSquare;                              // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                TryFindSpawnAILocNum;                                     // 0x01DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAIActingItem>                       AIActingItemList;                                         // 0x01E0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIBeginAttackEachOther>             AIAttackEachOtherRatingTimeConfig;                        // 0x01F0(0x0010) (Edit, ZeroConstructor)
	int                                                FullFeedLimit;                                            // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	TArray<struct FDeliveryRatingConfig>               DeliveryWaveInterval;                                     // 0x0208(0x0010) (Edit, ZeroConstructor)
	float                                              DeliveryBeginTime;                                        // 0x0218(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DeliveryFreq;                                             // 0x021C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                DeliveryAINumEachPeriod;                                  // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinimumWarmScore;                                         // 0x0224(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FAIDeliveryAreaLimit>                AIDeliveryAreaLimit;                                      // 0x0228(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIRatingDamage>                     AIRatingDamageConfig;                                     // 0x0238(0x0010) (Edit, ZeroConstructor)
	TArray<struct FAIAttackAIRatingDamage>             AIAttackAIRatingDamage;                                   // 0x0248(0x0010) (Edit, ZeroConstructor)
	TArray<struct FDeliveryPlayerConfig>               AIDeliveryPlayerConfig;                                   // 0x0258(0x0010) (Edit, ZeroConstructor)
	class ACirleAreaVolume*                            CircleAreaVolume;                                         // 0x0268(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCircleMgrComponent*                         CircleMgrComponent;                                       // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE8];                                      // 0x0278(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AIActingComponent");
		return ptr;
	}


	void BroadFinishLastBreathFunction(const struct FString& Killer, const struct FString& Killed, int WeaponId);
};


// Class ShadowTrackerExtra.AimingComp
// 0x0020 (0x0118 - 0x00F8)
class UAimingComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x00F8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AimingComp");
		return ptr;
	}


	void ToggleShoulderFiring(bool Toggle);
	void ToggleAimingDownSight(bool Toggle, bool bTeleportCamera);
	void SetAiming(EAimingType AimingType);
	void OnTargetingReleased();
	void OnTargetingPressed();
	EBoltActionWeaponProgressType GetCurrentBoltActionProgress();
	EAimingType GetAimingType();
};


// Class ShadowTrackerExtra.AIPickupResouce
// 0x0028 (0x0390 - 0x0368)
class AAIPickupResouce : public AActor
{
public:
	int                                                GroupID;                                                  // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x036C(0x0004) MISSED OFFSET
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x0370(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         SignSprite;                                               // 0x0378(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         GoodSprite;                                               // 0x0380(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBillboardComponent*                         BadSprite;                                                // 0x0388(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AIPickupResouce");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TimerRegistComponent
// 0x0038 (0x0130 - 0x00F8)
class UTimerRegistComponent : public UActorComponent
{
public:
	bool                                               bEnable;                                                  // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET
	TArray<struct FRegisterTimer>                      TimerRegister;                                            // 0x0100(0x0010) (ZeroConstructor)
	struct FString                                     TimerName;                                                // 0x0110(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0120(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TimerRegistComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AirAttackComponent
// 0x0078 (0x01A8 - 0x0130)
class UAirAttackComponent : public UTimerRegistComponent
{
public:
	struct FVector                                     MapOriginal;                                              // 0x0130(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	float                                              MapRadius;                                                // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FlightHeight;                                             // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SeaLevelHeight;                                           // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTime;                                                // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WaveCount;                                                // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                WaveInternal;                                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FAirAttackCfg                               AirAttackConfig;                                          // 0x0154(0x0014) (Edit, BlueprintVisible, DisableEditOnInstance)
	int                                                TryCount;                                                 // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x016C(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirAttackComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AirAttackCS
// 0x0008 (0x0138 - 0x0130)
class UAirAttackCS : public UTimerRegistComponent
{
public:
	class UClass*                                      ExplosionEffectTemplate;                                  // 0x0130(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirAttackCS");
		return ptr;
	}


	void OnAirAttack(TEnumAsByte<EAirAttackInfo> airattacktype, int waveindex);
	void DoBombHarmAtLocation(struct FVector* bombLocation);
	void AirAttackThrowBomb(int Index);
};


// Class ShadowTrackerExtra.AirborneEjectionVolume
// 0x0010 (0x0378 - 0x0368)
class AAirborneEjectionVolume : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	class USphereComponent*                            Sphere;                                                   // 0x0370(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirborneEjectionVolume");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AirDropBoxActor
// 0x00B0 (0x0418 - 0x0368)
class AAirDropBoxActor : public AActor
{
public:
	float                                              DroppingSpeed;                                            // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsHitTheGround;                                          // 0x036C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x036D(0x0003) MISSED OFFSET
	float                                              HitGroundHeight;                                          // 0x0370(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SmokeStartScaleDistance;                                  // 0x0374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmokeEndScaleDistance;                                    // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmokeStartScaleValue;                                     // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SmokeEndScaleValue;                                       // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PrevSmokeCurrentDistanceScaler;                           // 0x0384(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsShowingSmoke;                                          // 0x0388(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0389(0x0003) MISSED OFFSET
	float                                              ForceUpdateLocInterval;                                   // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForceUpdateLocDissqThreshold;                             // 0x0390(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       WrapperBoxName;                                           // 0x03A0(0x0018) (Edit, DisableEditOnInstance)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                AirDropBoxId;                                             // 0x03C0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              OBUIShowDistance;                                         // 0x03C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSuperAirdrop;                                          // 0x03C8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x03C9(0x0007) MISSED OFFSET
	struct FAirDropResource                            NormalAirdropBoxResource;                                 // 0x03D0(0x0020) (Edit, BlueprintVisible)
	struct FAirDropResource                            SuperAirdropBoxResource;                                  // 0x03F0(0x0020) (Edit, BlueprintVisible)
	class APlayerTombBox*                              DeadTombBox;                                              // 0x0410(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirDropBoxActor");
		return ptr;
	}


	void SetBuoyancyUpdatedComponent(class USceneComponent* UpdatedComponent);
	void OnRep_BoxId();
	void OnRep_AirdropTypeChange();
	void OnLanded();
	void GenerateWrappersBox(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FVector& BoxLoc);
	bool ForceUpdateAirdropLoc();
	void DistanceScalerChangedEvent(float Scale);
	void ChangeAirdropAppearance();
	void BoxReachGround();
};


// Class ShadowTrackerExtra.AirDropComponent
// 0x00F0 (0x0220 - 0x0130)
class UAirDropComponent : public UTimerRegistComponent
{
public:
	struct FAirDropPlaneParams                         AirDropPlaneParams;                                       // 0x0130(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FAirDropPlaneParams                         SuperAirDropPlaneParams;                                  // 0x014C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FAirDropConfig>                      AirDropConfigs;                                           // 0x0168(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	class UClass*                                      AirDropPlaneBluePrint;                                    // 0x0178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      AirDropBoxBlueprint;                                      // 0x0180(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SuperAirDropRandomRadius;                                 // 0x0188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SuperAirDropRouteRandomRadiusMin;                         // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SuperAirDropRouteRandomRadiusMax;                         // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StuffBoxToWorldBoundaryMinDis;                            // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0198(0x0010) MISSED OFFSET
	class UDataTable*                                  AirDropBoxDataTable;                                      // 0x01A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FSuperAirDropBoxDataItem>            FSuperAirDropBoxDataSet;                                  // 0x01B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FAirDropOrder                               AirDropOrder;                                             // 0x01C0(0x0030)
	struct FAirDropOrder                               SuperAirDropOrder;                                        // 0x01F0(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirDropComponent");
		return ptr;
	}


	void OnAirPlaneDropStuff(const struct FVector& DropLoc, const struct FAirDropOrder& Order);
	void OnAirDropStart(const struct FAirDropOrder& Order);
	void CallSuperAirDrop(const struct FVector& DropLoc);
};


// Class ShadowTrackerExtra.PlayerTombBox
// 0x0050 (0x03B8 - 0x0368)
class APlayerTombBox : public AActor
{
public:
	struct FName                                       TombName;                                                 // 0x0368(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       TargetPlayer;                                             // 0x0370(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       DamageCauser;                                             // 0x0378(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                DeadTime;                                                 // 0x0380(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bDisableCollision;                                        // 0x0384(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	class AActor*                                      AttachedActor;                                            // 0x0388(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLastDiedInTeam;                                        // 0x0390(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0391(0x0007) MISSED OFFSET
	class APickUpListWrapperActor*                     ListWrapperActor;                                         // 0x0398(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class UBoxComponent*                               Box;                                                      // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bAirDropInnerBox;                                         // 0x03A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x03A9(0x0007) MISSED OFFSET
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x03B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerTombBox");
		return ptr;
	}


	void SwitchToDeadTombBox();
	void OnRep_AttachmentReplication();
	void OnRep_AttachedActor();
	void HideDeadTombApparence();
	void GeneratePlayerBackpackWrappers();
	void GenerateAirDropBoxWrappers(TArray<struct FAirDropBoxGenerateWrapperItemData> DataList, const struct FName& AirBoxName);
};


// Class ShadowTrackerExtra.AirDropInnerBox
// 0x0000 (0x03B8 - 0x03B8)
class AAirDropInnerBox : public APlayerTombBox
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirDropInnerBox");
		return ptr;
	}

};


// Class ShadowTrackerExtra.FlightVehicle
// 0x0000 (0x0368 - 0x0368)
class AFlightVehicle : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.FlightVehicle");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AirDropPlane
// 0x0068 (0x03D0 - 0x0368)
class AAirDropPlane : public AFlightVehicle
{
public:
	struct FFlyingParam                                FlyingParam;                                              // 0x0368(0x0014) (Edit, BlueprintVisible, Net)
	struct FVector                                     DroppingStuffLocation;                                    // 0x037C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              DroppingSpeed;                                            // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LifeSpanAfterDrop;                                        // 0x038C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x0390(0x0038) MISSED OFFSET
	class UProjectileMovementComponent*                PMComp;                                                   // 0x03C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AirDropPlane");
		return ptr;
	}


	void OnRep_FlyingParams();
};


// Class ShadowTrackerExtra.AIWorldVolumeBase
// 0x0008 (0x03A8 - 0x03A0)
class AAIWorldVolumeBase : public AVolume
{
public:
	float                                              CellSize;                                                 // 0x03A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AIWorldVolumeBase");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AIWorldVolume
// 0x0060 (0x0408 - 0x03A8)
class AAIWorldVolume : public AAIWorldVolumeBase
{
public:
	struct FString                                     AIOcclusionFilePath;                                      // 0x03A8(0x0010) (Edit, ZeroConstructor)
	bool                                               bDebugOnClient;                                           // 0x03B8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4F];                                      // 0x03B9(0x004F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AIWorldVolume");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AkSoundPlayerSceneComponent
// 0x0020 (0x02C0 - 0x02A0)
class UAkSoundPlayerSceneComponent : public USceneComponent
{
public:
	class UAkAudioEvent*                               AkSoundEvent;                                             // 0x02A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x02A8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AkSoundPlayerSceneComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AutoRunPlayerTestActor
// 0x0028 (0x0390 - 0x0368)
class AAutoRunPlayerTestActor : public AActor
{
public:
	float                                              Interval;                                                 // 0x0368(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x036C(0x0004) MISSED OFFSET
	TArray<struct FVector>                             PortalLoctions;                                           // 0x0370(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0380(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AutoRunPlayerTestActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AutoRunTest
// 0x0160 (0x0258 - 0x00F8)
class UAutoRunTest : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x160];                                     // 0x00F8(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AutoRunTest");
		return ptr;
	}

};


// Class ShadowTrackerExtra.AvatarComponent
// 0x02D0 (0x0570 - 0x02A0)
class UAvatarComponent : public USceneComponent
{
public:
	class UMeshComponent*                              MasterBoneComponent;                                      // 0x02A0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TMap<int, struct FMeshData>                        avatarMeshList;                                           // 0x02A8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DisableEditOnInstance)
	TMap<int, class UMeshComponent*>                   meshComponentList;                                        // 0x02F8(0x0050) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst)
	TMap<int, struct FName>                            slotToSocket;                                             // 0x0348(0x0050) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TMap<EAvatarSlotType, struct FMeshData>            DefaultAvataConfig;                                       // 0x0398(0x0050) (BlueprintVisible, ZeroConstructor, Transient)
	int                                                gender;                                                   // 0x03E8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	bool                                               isNeedRefresh;                                            // 0x03EC(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET
	TMap<struct FSoftObjectPath, class UBattleItemHandleBase*> PendingLoadRes;                                           // 0x03F0(0x0050) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnAvatarEquipped;                                         // 0x0440(0x0010) (BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x120];                                     // 0x0450(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AvatarComponent");
		return ptr;
	}


	void ShowAttachmentByIndex(int Index, bool bIsVisible);
	void ResetComponentMaster();
	void ResetAllAvataSlot();
	bool PutOnEquipmentByResID(int resID);
	bool PutOnEquipmentByItemHandle(class UBattleItemHandleBase* ItemHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh);
	bool PutOffEquimentByResID(int resID);
	bool PutOffEquiment(int Slot);
	void OnAsyncLoadMesh(const struct FSoftObjectPath& AssetRef, bool isReplaced);
	void LoadMeshsAsync(class UBattleItemHandleBase* handleList, bool needDirectLoad);
	bool IsTeammate();
	bool IsSlotHasEquipped(int Slot);
	bool IsNeedReplaced(class UBackpackAvatarHandle* doReplaceHandle);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	class UStaticMesh* GetStaticMesh(const struct FMeshPackage& meshPack);
	struct FItemDefineID GetSlotDefinedID(int slotID);
	class USkeletalMesh* GetSkeletalMesh(const struct FMeshPackage& meshPack);
	class UMaterialInstance* GetMaterial(const struct FMeshPackage& meshPack);
	bool GetEquimentMeshBySlot(int Slot, struct FMeshData* meshPack);
	EMeshType GetApplyMeshType(int Slot);
	void ClearMeshBySlot(int Slot, bool putDefault);
	void ClearMeshByItemHandle(class UBattleItemHandleBase* ItemHandle);
	bool ApplyStaticMeshByID(int Slot, class UStaticMesh* pSM, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
	bool ApplySkeletalMeshByID(int Slot, class USkeletalMesh* Mesh, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
	void ApplyMesh(class UMeshComponent* Component, class USkeletalMesh* SkeletalMesh, class UStaticMesh* StaticMesh);
	void ApplyMaterial(class UBattleItemHandleBase* ItemHandle, class UMeshComponent* meshComp);
	void ApplyConfig();
};


// Class ShadowTrackerExtra.AvatarUtils
// 0x0000 (0x0028 - 0x0028)
class UAvatarUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AvatarUtils");
		return ptr;
	}


	struct FAvatarItemData STATIC_GetAvatarDataTableRowByID(const struct FItemDefineID& definedID);
	struct FAvatarItemData STATIC_ConstructAvatarItemDataFromTable(const struct FItemDefineID& definedID);
};


// Class ShadowTrackerExtra.AvatarBPUtils
// 0x0000 (0x0028 - 0x0028)
class UAvatarBPUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.AvatarBPUtils");
		return ptr;
	}


	struct FAvatarItemData GetAvatarDataTableRowByID(const struct FItemDefineID& definedID);
	struct FAvatarItemData ConstructAvatarItemDataFromTable(const struct FItemDefineID& definedID);
};


// Class ShadowTrackerExtra.BackpackAvatarHandle
// 0x0378 (0x0440 - 0x00C8)
class UBackpackAvatarHandle : public UBattleItemHandleBase
{
public:
	EAvatarSlotType                                    slotID;                                                   // 0x00C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EAvatarSubSlot                                     subSlot;                                                  // 0x00C9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00CA(0x0006) MISSED OFFSET
	struct FMeshPackage                                meshPack;                                                 // 0x00D0(0x0178) (Edit, BlueprintVisible)
	struct FMeshPackage                                replacedMeshPack;                                         // 0x0248(0x0178) (Edit, BlueprintVisible)
	TArray<EAvatarSlotType>                            hiddenFlags;                                              // 0x03C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<EReplaceSlot>                               replaceFlags;                                             // 0x03D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UBackpackComponent*                          pBackpackComp;                                            // 0x03E0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                itemCapacity;                                             // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Durability;                                               // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	struct FBodyAttachmentConfig                       BodyAttachmentConfig;                                     // 0x03F8(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	EAvatarSlotType                                    hideBoneSlot;                                             // 0x0430(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0431(0x0007) MISSED OFFSET
	struct FName                                       hideBoneName;                                             // 0x0438(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BackpackAvatarHandle");
		return ptr;
	}


	void OnCharacterAttrChangedWithDetailEvent(class AActor* Owner, const struct FString& AttrName, float deltaVal, float resultVal);
	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent* avatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.BackpackEmoteHandle
// 0x0060 (0x0128 - 0x00C8)
class UBackpackEmoteHandle : public UBattleItemHandleBase
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x00C8(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.BackpackEmoteHandle.AnimAsset
	float                                              BlendTime;                                                // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData02[0x10];                                      // 0x00F4(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.BackpackEmoteHandle.LobbyEnterEmoteAnimAssetList
	unsigned char                                      UnknownData03[0x10];                                      // 0x0108(0x0010) UNKNOWN PROPERTY: ArrayProperty ShadowTrackerExtra.BackpackEmoteHandle.LobbyLeaveEmoteAnimAssetList
	class UAkAudioEvent*                               EmoteSoundStartEvent;                                     // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               EmoteSoundInterruptEvent;                                 // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BackpackEmoteHandle");
		return ptr;
	}


	bool HandleUse(const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	bool HandlePickup(const TScriptInterface<class UItemContainerInterface>& ItemContainer, const struct FBattleItemPickupInfo& PickupInfo, EBattleItemPickupReason Reason);
	bool HandleDrop(int InCount, EBattleItemDropReason Reason);
	bool HandleDisuse(EBattleItemDisuseReason Reason);
	class UBackpackComponent* GetBackpackComponent();
	bool CheckCanPickUp(class UCharacterAvatarComponent* avatarComp, int nowCapcity);
};


// Class ShadowTrackerExtra.BackpackUtils
// 0x0000 (0x0028 - 0x0028)
class UBackpackUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BackpackUtils");
		return ptr;
	}


	TArray<struct FBattleSearchItemSortingInfo> STATIC_SortBattleSearchItemList(TArray<struct FBattleSearchItemSortingInfo> ItemList);
	TArray<struct FBattleSearchBoxSortingInfo> STATIC_SortBattleSearchBoxList(TArray<struct FBattleSearchBoxSortingInfo> BoxList);
	TArray<struct FBattleItemSortingInfo> STATIC_SortBattleItemList(TArray<struct FBattleItemSortingInfo> ItemList);
	int STATIC_ReturnIteratively(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, int Count, bool bCallHandlePickup);
	int STATIC_PickupFromGround(class UBackpackComponent* BackpackComp, class APickUpWrapperActor* Source, const struct FBattleItemUseTarget& AutoEquipTarget, bool bForceAutoEquip, int PickUpCount);
	struct FSkinData STATIC_MakeSkinDataFromItemDefineID(const struct FItemDefineID& DefineID);
	bool STATIC_IsSameItem(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	bool STATIC_IsSameInstance(const struct FItemDefineID& DefineID1, const struct FItemDefineID& DefineID2);
	bool STATIC_IsItemUseful(class UBackpackComponent* BackpackComp, class UWeaponManagerComponent* weaponComp, const struct FItemDefineID& DefineID, const struct FSearchedPickUpItemResult& SearchItemResult);
	bool STATIC_IsCharacterVirtualItem(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID);
	TArray<struct FBattleItemData> STATIC_GetWeaponsInBackpack(class UBackpackComponent* BackpackComp, bool bSortPriority);
	TArray<struct FBattleItemData> STATIC_GetWeaponAttachmentsInBackpack(class UBackpackComponent* BackpackComp, bool bSortPriority);
	TArray<class UBattleItemHandleBase*> STATIC_GetWeaponAttachmentHandles(class UBackpackComponent* BackpackComp);
	struct FString STATIC_GetRawBattleTextByType(EBattleTextType Type);
	struct FString STATIC_GetRawBattleTextByRawTextID(int ID);
	int STATIC_GetItemCountByDefineIDUnEquip(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, bool bOnlyInstance);
	int STATIC_GetItemCountByDefineID(class UBackpackComponent* BackpackComp, const struct FItemDefineID& DefineID, bool bOnlyInstance);
	TArray<struct FBattleItemData> STATIC_GetEmoteItemInBackpack(class UBackpackComponent* BackpackComp);
	TArray<struct FBattleItemData> STATIC_GetConsumablesInBackpack(class UBackpackComponent* BackpackComp, bool bSortPriority);
	TArray<struct FBattleItemData> STATIC_GetClothingAndArmorInBackpack(class UBackpackComponent* BackpackComp, bool bSortPriority);
	struct FBattleItemData STATIC_GetCharacterVirtualItemInBackpack(class UBackpackComponent* BackpackComp);
	class UBattleItemHandleBase* STATIC_GetCharacterVirtualItemHandleInBackpack(class UBackpackComponent* BackpackComp);
	struct FBattleWeaponItemDisplayData STATIC_GetBattleWeaponItemDisplayDataByDefineID(const struct FItemDefineID& DefineID);
	struct FBattleItemFeatureData STATIC_GetBattleItemFeatureDataByDefineID(const struct FItemDefineID& DefineID);
	TEnumAsByte<EBackpackItemType> STATIC_GetBackpackItemType(const struct FItemDefineID& ItemDefineID);
	void STATIC_GetAttackTipDataByDamageEventType(int DamageType, int SubType, struct FString* OutAttackName, struct FString* OutAttackActionName);
	TArray<struct FBattleItemData> STATIC_GetAllItemsInBackpack(class UBackpackComponent* BackpackComp, bool bIncludeVirtualItems, bool bSortPriority);
	uint64_t STATIC_GenerateRandomInstanceID();
	struct FItemDefineID STATIC_GenerateItemDefineIDWithRandomInstanceID(int Type, int TypeSpecificID);
	struct FItemDefineID STATIC_GenerateItemDefineIDByItemTableIDWithRandomInstanceID(int ItemTableID);
	void STATIC_ForceDropNonClothing(class UBackpackComponent* BackpackComp);
	void STATIC_ForceDropAll(class UBackpackComponent* BackpackComp);
	TArray<struct FPickUpWrapperItem> STATIC_ExtractPickupWrapperItems(class UBackpackComponent* BackpackComp);
	void STATIC_CreateBattleItemHandleAsync(const struct FItemDefineID& DefineID, class UObject* Outer, const struct FScriptDelegate& Delegate);
	class UBattleItemHandleBase* STATIC_CreateBattleItemHandle(const struct FItemDefineID& DefineID, class UObject* Outer);
	struct FBattleItemData STATIC_ConstructBattleItemDataByItemTableID(int ItemTableID);
	struct FBattleItemData STATIC_ConstructBattleItemDataByDefineID(const struct FItemDefineID& DefineID);
	bool STATIC_CheckCapacityForSwapOrDrop(class UBackpackComponent* BackpackComp, int OldCapacity, int NewCapacity);
	void STATIC_AddCharacterVirtualItemHandleToBackpack(class UBackpackComponent* BackpackComp, class ASTExtraBaseCharacter* Character);
};


// Class ShadowTrackerExtra.BackpackBlueprintUtils
// 0x0238 (0x0260 - 0x0028)
class UBackpackBlueprintUtils : public UObject
{
public:
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0028(0x00D0) MISSED OFFSET
	TArray<struct FCreateBattleItemHandleAsyncRequest> PendingAsyncRequests;                                     // 0x00F8(0x0010) (ZeroConstructor)
	TMap<int, struct FItemRecordData>                  mapItemRecord;                                            // 0x0108(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<int, EWeaponAttachmentSocketType>             mapAttachPos;                                             // 0x0158(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	struct FPickupSetting                              PickupSetting;                                            // 0x01A8(0x0040) (Edit, BlueprintVisible)
	struct FPickupProposeData                          proposeData;                                              // 0x01E8(0x0078) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BackpackBlueprintUtils");
		return ptr;
	}


	struct FSkinData MakeSkinDataFromItemDefineID(const struct FItemDefineID& DefineID);
	bool IsVirtualItemData(const struct FBattleItemData& ItemData);
	void InitialItemTable();
	struct FString GetRawBattleTextByType(EBattleTextType Type);
	struct FString GetRawBattleTextByRawTextID(int ID);
	int GetItemSubTypeID(int SpecificID);
	struct FLogItem GetItemDataForGameLog(int ItemID);
	struct FBattleItemData GetCharacterVirtualItemInBackpack(class UBackpackComponent* BackpackComp);
	class UBattleItemHandleBase* GetCharacterVirtualItemHandleInBackpack(class UBackpackComponent* BackpackComp);
	struct FBattleWeaponItemDisplayData GetBattleWeaponItemDisplayDataByDefineID(const struct FItemDefineID& DefineID);
	struct FString GetBattleItemHandlePath(const struct FItemDefineID& DefineID);
	struct FBattleItemFeatureData GetBattleItemFeatureDataByDefineID(const struct FItemDefineID& DefineID);
	void GenerateItemDefineIDByItemTableID(int ItemTableID, int* Type, int* TypeSpecificID);
	class UBattleItemHandleBase* CreateBattleItemHandle(const struct FItemDefineID& DefineID, class UObject* Outer);
	struct FBattleItemData ConstructBattleItemDataByItemTableID(int ItemTableID);
	struct FBattleItemData ConstructBattleItemDataByDefineID(const struct FItemDefineID& DefineID);
	void AddCharacterVirtualItemToBackpack(class UBackpackComponent* BackpackComp, class ASTExtraBaseCharacter* Character);
};


// Class ShadowTrackerExtra.BackpackWeaponAttachHandle
// 0x0180 (0x0248 - 0x00C8)
class UBackpackWeaponAttachHandle : public UBattleItemHandleBase
{
public:
	struct FWeaponAttachmentConfig                     WeaponAttachmentConfig;                                   // 0x00C8(0x0160) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UBackpackComponent*                          BackpackComp;                                             // 0x0228(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTslWeaponAttachmentData*                    TslWeaponAttachmentData;                                  // 0x0230(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0238(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BackpackWeaponAttachHandle");
		return ptr;
	}


	void ReturnWeaponAdditionalBulletsToBackpack(class ASTExtraShootWeapon* Weapon, int BulletNum);
	void ResetNeedReturnBulletsWhenDisuseExtendMaxBulletDJ();
	void HandleDisuseReplaceByNew(class UBackpackWeaponAttachHandle* NewHandle);
	bool EquipOrUnEuipAttachment(class ASTExtraShootWeapon* InWeapon, bool IsEquip);
};


// Class ShadowTrackerExtra.BaseAIController
// 0x0080 (0x04F0 - 0x0470)
class ABaseAIController : public AAIController
{
public:
	TArray<class UBehaviorTree*>                       BehaviorTree;                                             // 0x0470(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              CheckPeriod;                                              // 0x0480(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RandomDeviation;                                          // 0x0484(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProtectCountdownTime;                                     // 0x0488(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SpawnEquipDelayTime;                                      // 0x048C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ProtectShootRadius;                                       // 0x0490(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnVelocity;                                             // 0x0498(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x049C(0x0004) MISSED OFFSET
	class UBehaviorTreeComponent*                      BehaviorComp;                                             // 0x04A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBlackboardComponent*                        BlackboardComp;                                           // 0x04A8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBackpackComponent*                          BackpackComponent;                                        // 0x04B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FAIControllerCachedData                     AIControllerCachedData;                                   // 0x04B8(0x0030)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BaseAIController");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BaseCharacterEffectCom
// 0x0010 (0x0108 - 0x00F8)
class UBaseCharacterEffectCom : public UActorComponent
{
public:
	class UParticleSystem*                             DeathFX;                                                  // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class ASTExtraBaseCharacter*                       OwningCharacter;                                          // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BaseCharacterEffectCom");
		return ptr;
	}


	void HandleOwnerDeath(class ASTExtraBaseCharacter* DeadCharacter, class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
};


// Class ShadowTrackerExtra.PickupProxy
// 0x0008 (0x0030 - 0x0028)
class UPickupProxy : public UObject
{
public:
	class AActor*                                      ProxyOwner;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickupProxy");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BaseCharacterPickupProxy
// 0x0008 (0x0038 - 0x0030)
class UBaseCharacterPickupProxy : public UPickupProxy
{
public:
	class ASTExtraBaseCharacter*                       ProxyOwnerCharacter;                                      // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BaseCharacterPickupProxy");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BaseFPPComponent
// 0x0070 (0x0168 - 0x00F8)
class UBaseFPPComponent : public UActorComponent
{
public:
	bool                                               bIsBoltAction;                                            // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	float                                              SpringArmLengthAtScoping;                                 // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0100(0x0010) MISSED OFFSET
	class ASTExtraPlayerCharacter*                     PlayerCharacter;                                          // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ScopeAimCameraSocketName;                                 // 0x0118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       FPPSocketName;                                            // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       BoltActionCurveName;                                      // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0130(0x0001) MISSED OFFSET
	bool                                               TempFPP;                                                  // 0x0131(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0132(0x0006) MISSED OFFSET
	float                                              BoltActionHoldTimeDefault;                                // 0x0138(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BoltActionFov;                                            // 0x013C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              X8CurAlpha;                                               // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              X8IndexFloat;                                             // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              X8LastIndex;                                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              X8Speed;                                                  // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 X8FovCurve;                                               // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 X8DisCurve;                                               // 0x0158(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurrentPlayAnimIndex;                                     // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0164(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BaseFPPComponent");
		return ptr;
	}


	void X8ZoomReload();
	void X8Zoom(float Alpha);
	void X8Transform(float* FOV, float* Length);
	void X8Tick(float DeltaTime);
	void TempTransformToFPP();
	void TempTransformFromFPP();
	void SwitchScopeMeshAnim(TEnumAsByte<EScopeMeshAnimType> Type);
	void SwitchPerson(TEnumAsByte<EPlayerCameraMode> Mode);
	void StopScopeOut();
	void StopScopeIn();
	void SetTagCulling(bool IsUse);
	void ScopingChange(bool InValue);
	void ScopeTimelineUpdate(float Alpha);
	void ScopeOutSpeedChange(class ASTExtraPlayerController* Controller, class UShootWeaponEntity* entity);
	void ScopeOutLogic();
	void ScopeOutEnd();
	void ScopeOutAfterTimeline();
	void ScopeOut(bool Teleport);
	void ScopeModeChangeByState(bool bIsCamTeleport);
	void ScopeInterrupt(bool Teleport);
	void ScopeInSpeedChange(class ASTExtraPlayerController* Controller, class UShootWeaponEntity* entity);
	void ScopeInLogic();
	void ScopeInEnd();
	void ScopeInAfterTimeline();
	void ScopeIn(bool Teleport);
	void PlayScopeInTimeline();
	TEnumAsByte<ESightType> GetSightType();
	float GetScopeFov(class ASTExtraShootWeapon* shootWeapon);
	void CameraActive(bool NewActive);
	void BoltAction(float DeltaSeconds);
	void AttachToSight();
	void ActiveComponentTickable();
};


// Class ShadowTrackerExtra.TslLPCGameMode
// 0x0360 (0x10C0 - 0x0D60)
class ATslLPCGameMode : public AUAEGameMode
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0D60(0x0018) MISSED OFFSET
	int                                                PostMatchWaitingTime;                                     // 0x0D78(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0D7C(0x0004) MISSED OFFSET
	TArray<struct FModeStringParameter>                ModeStringParameters;                                     // 0x0D80(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bStartPlayerAtMatchStart;                                 // 0x0D90(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0D91(0x0003) MISSED OFFSET
	int                                                TeamSize;                                                 // 0x0D94(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRandomWeather;                                        // 0x0D98(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCustomGame;                                            // 0x0D99(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEventMode;                                             // 0x0D9A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	ECameraViewBehaviour                               CameraViewBehaviour;                                      // 0x0D9B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0D9C(0x0004) MISSED OFFSET
	TMap<struct FString, class URewardData*>           RewardDataMap;                                            // 0x0DA0(0x0050) (Edit, ZeroConstructor)
	class URewardData*                                 RewardData;                                               // 0x0DF0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AMissionManager*                             MissionManager;                                           // 0x0DF8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0E00(0x0008) MISSED OFFSET
	struct FGameModePlayerParams                       DefaultUserData;                                          // 0x0E08(0x00A0) (Edit)
	unsigned char                                      UnknownData05[0x90];                                      // 0x0EA8(0x0090) MISSED OFFSET
	TMap<struct FString, class APlayerState*>          JoinedUserPlayerStateMap;                                 // 0x0F38(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x58];                                      // 0x0F88(0x0058) MISSED OFFSET
	class UDataTable*                                  BpRewardRuleDataTable;                                    // 0x0FE0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FString                                     BpRewardRowName;                                          // 0x0FE8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FTslBpRewardRule                            BpRewardRule;                                             // 0x0FF8(0x0060) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bAllowBpRewardInEventMode;                                // 0x1058(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowBpRewardInCustomGame;                               // 0x1059(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowJoinAnyMatchState;                                  // 0x105A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x5];                                       // 0x105B(0x0005) MISSED OFFSET
	class UTslXpRewardRuleAsset*                       XpRewardRuleDataAsset;                                    // 0x1060(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowXpRewardInEventMode;                                // 0x1068(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAllowXpRewardInCustomGame;                               // 0x1069(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x56];                                      // 0x106A(0x0056) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLPCGameMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BattleRoyaleGameMode
// 0x0280 (0x1340 - 0x10C0)
class ABattleRoyaleGameMode : public ATslLPCGameMode
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x10C0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameModeEnterFlying;                                    // 0x10C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameModeExitFlying;                                     // 0x10D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              Radius0;                                                  // 0x10E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius1;                                                  // 0x10EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius2;                                                  // 0x10F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius3;                                                  // 0x10F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MapCenter;                                                // 0x10F8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              PlaneSpeed;                                               // 0x1104(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PlaneHeight;                                              // 0x1108(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CanOpenParachuteHeight;                                   // 0x110C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceOpenParachuteHeight;                                 // 0x1110(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeight;                                     // 0x1114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleRadius;                                         // 0x1118(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x111C(0x000C) MISSED OFFSET
	EGameModeType                                      GameModeType;                                             // 0x1128(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x1129(0x0003) MISSED OFFSET
	int                                                StartReadyCountDownPlayerNum;                             // 0x112C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitAudioVisual;                                       // 0x1130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitAutoPick;                                          // 0x1131(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitHurtEffect;                                        // 0x1132(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bGunSamePriority;                                         // 0x1133(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bServerOpenPassWallCheck;                                 // 0x1134(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1B];                                      // 0x1135(0x001B) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                        // 0x1150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      NewAIControllerClass;                                     // 0x1158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BornLocation;                                             // 0x1160(0x000C) (Edit, IsPlainOldData)
	float                                              BornRadius;                                               // 0x116C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      LastCircleCountToDestroyActorOnServer;                    // 0x1170(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x1171(0x0003) MISSED OFFSET
	int                                                MaxDynamicLoadingWorldPlayer;                             // 0x1174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FString                                     GameModeDisplayName;                                      // 0x1178(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                bIsAutoReloadWeaponGameMode;                              // 0x1188(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                bIsPickUpFillBulletGameMode;                              // 0x118C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UGamemodeAIDataAsset*                        GamemodeAIDataAsset;                                      // 0x1190(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DragOnGroundDownTraceDistance;                            // 0x1198(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DragOnGroundUpTraceDistance;                              // 0x119C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bNeverDie;                                                // 0x11A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCheckGameEnd;                                            // 0x11A1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x16];                                      // 0x11A2(0x0016) MISSED OFFSET
	class UGameModeDataAsset*                          GameModeDataAsset;                                        // 0x11B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x11C0(0x0008) MISSED OFFSET
	float                                              OutBoundDamage;                                           // 0x11C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x11CC(0x0004) MISSED OFFSET
	class AActor*                                      PlanePawn;                                                // 0x11D0(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bCanJump;                                                 // 0x11D8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInitGlobalConfig;                                        // 0x11D9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x6];                                       // 0x11DA(0x0006) MISSED OFFSET
	class UGameModeState*                              CurrentState;                                             // 0x11E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGameModeState*                              GameModeStateActive;                                      // 0x11E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGameModeState*                              GameModeStateReady;                                       // 0x11F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGameModeState*                              GameModeStateFlying;                                      // 0x11F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGameModeState*                              GameModeStateFighting;                                    // 0x1200(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGameModeState*                              GameModeStateFinished;                                    // 0x1208(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      ChallengeLevelRulesClass;                                 // 0x1210(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UChallengeLevelRules*                        ChallengeLevelRules;                                      // 0x1218(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      LevelDirectorClass;                                       // 0x1220(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCircleMgrComponent*                         CircleMgrComponent;                                       // 0x1228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x80];                                      // 0x1230(0x0080) MISSED OFFSET
	class UAIActingComponent*                          AIActingComp;                                             // 0x12B0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AAIWorldVolume*                              AIWorldVolume;                                            // 0x12B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      WorldLoadedType;                                          // 0x12C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x12C1(0x0003) MISSED OFFSET
	int                                                MaxNoConsiderActorNum;                                    // 0x12C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MaxDestoryActorNumPerFrame;                               // 0x12C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               EditorGuidMode;                                           // 0x12CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x43];                                      // 0x12CD(0x0043) MISSED OFFSET
	int                                                bEnableAIPolicyDecisionLog;                               // 0x1310(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                bEnableAIPolicyDecisionLogShipping;                       // 0x1314(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AIPolicyDecisionTargetPlayerNum;                          // 0x1318(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIPolicyDecisionRelevantUpdateInterval;                   // 0x131C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RelevantPlayerAIPolicyDecisionCheckDistanceSqurad;        // 0x1320(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bVisibleCheck;                                            // 0x1324(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bReplacePistolWhenPickUpMainWeapon;                       // 0x1325(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      LastCircleCountToDestroyActorOnServerConfig;              // 0x1326(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x1327(0x0001) MISSED OFFSET
	int                                                MaxDynamicLoadingWorldPlayerConfig;                       // 0x1328(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              AirplaneUICheckDist;                                      // 0x132C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x5];                                       // 0x1330(0x0005) MISSED OFFSET
	bool                                               bCannotGoFinishState;                                     // 0x1335(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0xA];                                       // 0x1336(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameMode");
		return ptr;
	}


	void SpawnAI(int Num);
	void SetPlane(class AActor* Plane);
	void OnUpdateGamePhase(int PhaseIndex, bool bIsRelease);
	class AActor* GetPlane(class APlayerController* PC);
	class UChallengeLevelRules* GetChallengeLevelRules();
};


// Class ShadowTrackerExtra.BattleRoyalChallengeGameMode
// 0x0000 (0x1340 - 0x1340)
class ABattleRoyalChallengeGameMode : public ABattleRoyaleGameMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalChallengeGameMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BattleRoyaleGameModeTeam
// 0x0050 (0x1390 - 0x1340)
class ABattleRoyaleGameModeTeam : public ABattleRoyaleGameMode
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x1340(0x004C) MISSED OFFSET
	int                                                NumberPerTeam;                                            // 0x138C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameModeTeam");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BattleRoyaleGameModeGroup
// 0x00C0 (0x1450 - 0x1390)
class ABattleRoyaleGameModeGroup : public ABattleRoyaleGameModeTeam
{
public:
	TArray<int>                                        GenerateGodSon;                                           // 0x1390(0x0010) (Edit, ZeroConstructor)
	TMap<int, int>                                     TeamSpecialPlayerNum;                                     // 0x13A0(0x0050) (ZeroConstructor)
	TMap<int, int>                                     TeamLeftSpecialPlayerNum;                                 // 0x13F0(0x0050) (ZeroConstructor)
	TArray<int>                                        LoseTeamId;                                               // 0x1440(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyaleGameModeGroup");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BattleRoyalTrainingGameMode
// 0x0050 (0x1390 - 0x1340)
class ABattleRoyalTrainingGameMode : public ABattleRoyaleGameMode
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x1340(0x0048) MISSED OFFSET
	int                                                AboutToOverMsgID;                                         // 0x1388(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x138C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BattleRoyalTrainingGameMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslUserWidget
// 0x0048 (0x0248 - 0x0200)
class UTslUserWidget : public UUserWidget
{
public:
	class UInputComponent*                             InputComponentAxis;                                       // 0x0200(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	TArray<struct FTslActionInputCallbackConfig>       ActionInputCallbackConfigs;                               // 0x0208(0x0010) (Edit, ZeroConstructor)
	TArray<struct FTslAxisInputCallbackConfig>         AxisInputCallbackConfigs;                                 // 0x0218(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0228(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    WidgetDestroyEventDelegate;                               // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslUserWidget");
		return ptr;
	}


	void TslUserWidgetDestroyEvent__DelegateSignature();
	struct FEventReply STATIC_TransferUserFocusThroughReply(const struct FFocusEvent& AcceptedFocusEvent, class UWidget* FocusWidget, bool bInAllUsers, struct FEventReply* Reply);
	void StopListeningForAllInputAxises();
	void SetupInputForBlueprint();
	bool STATIC_NavigateUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	void ListenForInputAxis(const struct FName& AxisName, float Scale, bool bConsume, const struct FScriptDelegate& Callback);
	class UTslGameUserSettings* GetTslGameUserSettings();
	float GetRawKeyValue(const struct FKey& InKey);
	float GetAxisMultiplier();
	bool STATIC_ContainUserFocus(class ULocalPlayer* Player, class UWidget* Widget);
	bool ContainOwnerUserFocus();
	void STATIC_ClearUserFocus(class ULocalPlayer* Player);
};


// Class ShadowTrackerExtra.UmgBaseWidget
// 0x0078 (0x02C0 - 0x0248)
class UUmgBaseWidget : public UTslUserWidget
{
public:
	unsigned char                                      bUseEmergingAnimation : 1;                                // 0x0248(0x0001) (Edit)
	unsigned char                                      bUseVanishingAnimation : 1;                               // 0x0248(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Animation                  EmergingAnimationBinder;                                  // 0x0250(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FUmgWidgetBinder_Animation                  VanishingAnimationBinder;                                 // 0x0270(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0290(0x0018) MISSED OFFSET
	ESlateVisibility                                   PendingVisibility;                                        // 0x02A8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x02A9(0x0003) MISSED OFFSET
	float                                              VanishingStartTime;                                       // 0x02AC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02B0(0x0004) MISSED OFFSET
	int                                                Phase;                                                    // 0x02B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PhaseCount;                                               // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UmgBaseWidget");
		return ptr;
	}


	void RuntimeInitBP();
	bool IsMouseOn();
	void HandleMainPrepass(class UWidget* Widget);
	bool CheckWantRequestRender();
};


// Class ShadowTrackerExtra.BlockInputUserWidget
// 0x0050 (0x0310 - 0x02C0)
class UBlockInputUserWidget : public UUmgBaseWidget
{
public:
	bool                                               bWhiteList;                                               // 0x02C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActions;                                             // 0x02C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               BlockAxises;                                              // 0x02D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bGenerateEventOnOpen;                                     // 0x02E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLockMouseCursorInViewport;                               // 0x02E9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x02EA(0x0006) MISSED OFFSET
	TArray<struct FBlockAction>                        BlockActionsOnDemand;                                     // 0x02F0(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               BlockAxisesOnDemand;                                      // 0x0300(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BlockInputUserWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTDecorator_AttrObserver
// 0x0010 (0x0078 - 0x0068)
class UBTDecorator_AttrObserver : public UBTDecorator
{
public:
	TArray<struct FAIAttrObserver>                     AttrObserverList;                                         // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_AttrObserver");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTDecorator_NearTargetLoc
// 0x0008 (0x0070 - 0x0068)
class UBTDecorator_NearTargetLoc : public UBTDecorator
{
public:
	float                                              Range;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_NearTargetLoc");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTDecorator_NewSatisfyAttkDist
// 0x0010 (0x0078 - 0x0068)
class UBTDecorator_NewSatisfyAttkDist : public UBTDecorator
{
public:
	float                                              DefaultAttackDist;                                        // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInversed;                                              // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	float                                              ExtraDistance;                                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_NewSatisfyAttkDist");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTDecorator_Probability
// 0x0008 (0x0070 - 0x0068)
class UBTDecorator_Probability : public UBTDecorator
{
public:
	float                                              ExecuteProbability;                                       // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_Probability");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTDecorator_SatisfyAttkDist
// 0x0008 (0x0070 - 0x0068)
class UBTDecorator_SatisfyAttkDist : public UBTDecorator
{
public:
	float                                              AttackDist;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInversed;                                              // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTDecorator_SatisfyAttkDist");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_AdvancedShooting
// 0x0040 (0x00B0 - 0x0070)
class UBTService_AdvancedShooting : public UBTService
{
public:
	EAIWeaponShootType                                 WeaponShotType;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              DeviationScale;                                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   RandomShootFreqRange;                                     // 0x0078(0x0008) (Edit, IsPlainOldData)
	struct FBlackboardKeySelector                      ReloadBlackBoardKey;                                      // 0x0080(0x0028) (Edit)
	bool                                               bSetCanSeeTargetFlag;                                     // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_AdvancedShooting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_ChooseEnemy
// 0x0030 (0x00A0 - 0x0070)
class UBTService_ChooseEnemy : public UBTService
{
public:
	float                                              MaxRememberEnemyTimeInSeconds;                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxRememberLastAttackedMeTimeInSeconds;                   // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTraceLastAttackedMeDistance;                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeWhenCannotSeeTarget;                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTimeLockTarget;                                        // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SensedRadius;                                             // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponSensedRadius;                                  // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmergencyRadius;                                          // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FWeaponType2Range>                   WeaponType2Ranges;                                        // 0x0090(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_ChooseEnemy");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_ChooseFightbackEnemy
// 0x0010 (0x0080 - 0x0070)
class UBTService_ChooseFightbackEnemy : public UBTService
{
public:
	float                                              SensedRadius;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponSensedRadius;                                  // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmergencyRadius;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_ChooseFightbackEnemy");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_Cruising
// 0x0008 (0x0078 - 0x0070)
class UBTService_Cruising : public UBTService
{
public:
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_Cruising");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_DistantJudge
// 0x0040 (0x00B0 - 0x0070)
class UBTService_DistantJudge : public UBTService
{
public:
	struct FBlackboardKeySelector                      WatchTargetBlackBoardKey;                                 // 0x0070(0x0028) (Edit)
	TArray<struct FAIDistantJudgeNoftify>              DistantJudges;                                            // 0x0098(0x0010) (Edit, ZeroConstructor)
	bool                                               ResetModifyBBData;                                        // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_DistantJudge");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_FightDecisionSystem
// 0x0008 (0x0078 - 0x0070)
class UBTService_FightDecisionSystem : public UBTService
{
public:
	float                                              EnemyTraceRadius;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_FightDecisionSystem");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_Focus
// 0x0008 (0x00A8 - 0x00A0)
class UBTService_Focus : public UBTService_DefaultFocus
{
public:
	EAINewFocusPriority                                AIFocusPriority;                                          // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ResetFocus;                                               // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00A2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_Focus");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_SensedEnemy
// 0x0060 (0x00D0 - 0x0070)
class UBTService_SensedEnemy : public UBTService
{
public:
	float                                              SensedRadius;                                             // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EquipWeaponSensedRadius;                                  // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmergencyRadius;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TMap<int, float>                                   AISensedEnemyPoseRatio;                                   // 0x0080(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_SensedEnemy");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTService_Shooting
// 0x0008 (0x0078 - 0x0070)
class UBTService_Shooting : public UBTService
{
public:
	float                                              DeviationScale;                                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTService_Shooting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_ClearDelivery
// 0x0000 (0x0070 - 0x0070)
class UBTTask_ClearDelivery : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ClearDelivery");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_DealNextBuildingPathNode
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_DealNextBuildingPathNode : public UBTTask_BlackboardBase
{
public:
	float                                              findSpotXYOffset;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotZOffset;                                          // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_DealNextBuildingPathNode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_ShortDistanceMove
// 0x0048 (0x00E0 - 0x0098)
class UBTTask_ShortDistanceMove : public UBTTask_BlackboardBase
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EAIMoveType                                        MovePathType;                                             // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	int                                                SampleNumber;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ControllPoint1;                                           // 0x00A0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ControllPoint2;                                           // 0x00A8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00B0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00B8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00C0(0x0008) (Edit, IsPlainOldData)
	float                                              RePlanTime;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysSuccess;                                            // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopOnOverlap;                                            // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UsePathfinding;                                           // 0x00D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPartialPath;                                         // 0x00D6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ProjectDestinationToNavigation;                           // 0x00D7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExceptionRandomRadius;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DebugDrawPath;                                            // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ShortDistanceMove");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_Escape
// 0x0040 (0x0120 - 0x00E0)
class UBTTask_Escape : public UBTTask_ShortDistanceMove
{
public:
	float                                              TryLineTestZOffset;                                       // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TryLineTestDistance;                                      // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrySampleTimes;                                        // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTrySampleDistance;                                     // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinTryEscapeDistance;                                     // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EscapeStopDistance;                                       // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00F8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_Escape");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_MagicMove
// 0x0018 (0x00C8 - 0x00B0)
class UBTTask_MagicMove : public UBTTask_MoveTo
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GenerateNavRadius;                                        // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeLimit;                                                // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ForceSuccess;                                             // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               MoveWithOutPathFinding;                                   // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               GotoExceptionWhenFailed;                                  // 0x00C2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x00C3(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MagicMove");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_FindAndPickItem
// 0x0000 (0x00C8 - 0x00C8)
class UBTTask_FindAndPickItem : public UBTTask_MagicMove
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindAndPickItem");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_FindAndPickupEquip
// 0x0000 (0x00B0 - 0x00B0)
class UBTTask_FindAndPickupEquip : public UBTTask_MoveTo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindAndPickupEquip");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_FindNearestTombBoxTask
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_FindNearestTombBoxTask : public UBTTask_BlackboardBase
{
public:
	float                                              PlayerBackpackSearchRadius;                               // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirDropSearchRadius;                                      // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindNearestTombBoxTask");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_FindOcclusionPoint
// 0x0008 (0x00A0 - 0x0098)
class UBTTask_FindOcclusionPoint : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_FindOcclusionPoint");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_ModifyBlackboardData
// 0x0018 (0x00B0 - 0x0098)
class UBTTask_ModifyBlackboardData : public UBTTask_BlackboardBase
{
public:
	EModifyBlackboardDataValueType                     ValueType;                                                // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FString                                     SetValue;                                                 // 0x00A0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_ModifyBlackboardData");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_MoveToOcclusion
// 0x0038 (0x0100 - 0x00C8)
class UBTTask_MoveToOcclusion : public UBTTask_MagicMove
{
public:
	float                                              SearchRadius;                                             // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UseLastPointRadius;                                       // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NearDistanceValue;                                        // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PointInNearDistanceValue;                                 // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBlackboardKeySelector                      EnemyBlackboardKey;                                       // 0x00D8(0x0028) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MoveToOcclusion");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_MoveToSafeArea
// 0x0008 (0x00D0 - 0x00C8)
class UBTTask_MoveToSafeArea : public UBTTask_MagicMove
{
public:
	float                                              RadiusScale;                                              // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoCirlceRadius;                                           // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_MoveToSafeArea");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_PickUpItemAtTombBox
// 0x0008 (0x0078 - 0x0070)
class UBTTask_PickUpItemAtTombBox : public UBTTaskNode
{
public:
	float                                              DeltaTime;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxPickCount;                                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_PickUpItemAtTombBox");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_SpawnItem
// 0x0018 (0x00B0 - 0x0098)
class UBTTask_SpawnItem : public UBTTask_BlackboardBase
{
public:
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBase;                                       // 0x00A0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_SpawnItem");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_StrategyMove
// 0x0048 (0x00E0 - 0x0098)
class UBTTask_StrategyMove : public UBTTask_BlackboardBase
{
public:
	EAIMovePose                                        MoveType;                                                 // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	EAIMoveType                                        MovePathType;                                             // 0x0099(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	int                                                SampleNumber;                                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ControllPoint1;                                           // 0x00A0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ControllPoint2;                                           // 0x00A8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   DirectionAngleRange;                                      // 0x00B0(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   MoveTargetDistRange;                                      // 0x00B8(0x0008) (Edit, IsPlainOldData)
	struct FVector2D                                   ExecutionDuration;                                        // 0x00C0(0x0008) (Edit, IsPlainOldData)
	float                                              RePlanTime;                                               // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AlwaysSuccess;                                            // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              AcceptRadius;                                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               StopOnOverlap;                                            // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               UsePathfinding;                                           // 0x00D5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               AllowPartialPath;                                         // 0x00D6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               ProjectDestinationToNavigation;                           // 0x00D7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExceptionRandomRadius;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               DebugDrawPath;                                            // 0x00DC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_StrategyMove");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_TeleportToSpecLoc
// 0x0020 (0x00B8 - 0x0098)
class UBTTask_TeleportToSpecLoc : public UBTTask_BlackboardBase
{
public:
	float                                              RangeMin;                                                 // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RangeMax;                                                 // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyTeleportToLand;                                       // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              OriginCheckSquare;                                        // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DestCheckSquare;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TraceHeight;                                              // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceSuccess;                                            // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_TeleportToSpecLoc");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_TryFightback
// 0x0018 (0x00E0 - 0x00C8)
class UBTTask_TryFightback : public UBTTask_MagicMove
{
public:
	float                                              MaxTraceRadius;                                           // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxTraceTime;                                             // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckTargetVisableTimeIntervel;                           // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsCheckHasWeapon;                                        // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D5(0x0003) MISSED OFFSET
	float                                              MinEnemyInSightTime;                                      // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_TryFightback");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTask_WayPointListMove
// 0x0010 (0x00A8 - 0x0098)
class UBTTask_WayPointListMove : public UBTTask_BlackboardBase
{
public:
	bool                                               bAllowPartialPath;                                        // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              AcceptableRadius;                                         // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAllowStrafe;                                             // 0x00A0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bReachTestIncludesAgentRadius;                            // 0x00A1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bReachTestIncludesGoalRadius;                             // 0x00A2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bProjectGoalLocation;                                     // 0x00A3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUsePathfinding;                                          // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTask_WayPointListMove");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_CheckOcclusionSafe
// 0x0008 (0x00A0 - 0x0098)
class UBTTaskNode_CheckOcclusionSafe : public UBTTask_BlackboardBase
{
public:
	float                                              CheckRadius;                                              // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_CheckOcclusionSafe");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ClearFocus
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_ClearFocus : public UBTTaskNode
{
public:
	EAINewFocusPriority                                ClearedFocus;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ClearFocus");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_EquipItemDirectly
// 0x0018 (0x0088 - 0x0070)
class UBTTaskNode_EquipItemDirectly : public UBTTaskNode
{
public:
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<struct FAIEquipSpawnGroup>                  RandomSpawnEquipGroupSet;                                 // 0x0078(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_EquipItemDirectly");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_EquipOrUnWeapon
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_EquipOrUnWeapon : public UBTTaskNode
{
public:
	bool                                               Equip;                                                    // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               FailedWhenEquipSuccess;                                   // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0072(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_EquipOrUnWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindBuilding
// 0x0018 (0x00B0 - 0x0098)
class UBTTaskNode_FindBuilding : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               OnlySafeBuildings;                                        // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	float                                              MaxMoveSpeed;                                             // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotXYOffset;                                         // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              findSpotZOffset;                                          // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindBuilding");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindItemSpot
// 0x0000 (0x0098 - 0x0098)
class UBTTaskNode_FindItemSpot : public UBTTask_BlackboardBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindItemSpot");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_FindPosByTarget
// 0x0008 (0x00A0 - 0x0098)
class UBTTaskNode_FindPosByTarget : public UBTTask_BlackboardBase
{
public:
	float                                              SearchRadius;                                             // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNav;                                                  // 0x009C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_FindPosByTarget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ForceSuccess
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_ForceSuccess : public UBTTaskNode
{
public:
	bool                                               IsForceSuccess;                                           // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ForceSuccess");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_HumanAction
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_HumanAction : public UBTTaskNode
{
public:
	EAIPoseState                                       SetAction;                                                // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_HumanAction");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_MeleeAttack
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_MeleeAttack : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_MeleeAttack");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_NewParachuteJump
// 0x0028 (0x0098 - 0x0070)
class UBTTaskNode_NewParachuteJump : public UBTTaskNode
{
public:
	float                                              RandomStartJumpTime;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomEndJumpTime;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpRadius;                                               // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpHeight;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateStart;                                    // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAccelerateEnd;                                      // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OpenParachuteHeight;                                      // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckOpenParachuteFreq;                                   // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeight;                                     // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckCloseParachuteFreq;                                  // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_NewParachuteJump");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_ParachuteJump
// 0x0010 (0x0080 - 0x0070)
class UBTTaskNode_ParachuteJump : public UBTTaskNode
{
public:
	float                                              TimeLimit;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomRadius;                                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpStartTime;                                            // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpEndTime;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_ParachuteJump");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_PickItemsAtSpot
// 0x0008 (0x0078 - 0x0070)
class UBTTaskNode_PickItemsAtSpot : public UBTTaskNode
{
public:
	float                                              DeltaTime;                                                // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxPickCount;                                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_PickItemsAtSpot");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_RefreshWeaponBBD
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_RefreshWeaponBBD : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_RefreshWeaponBBD");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_StopShooting
// 0x0000 (0x0070 - 0x0070)
class UBTTaskNode_StopShooting : public UBTTaskNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_StopShooting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BTTaskNode_TakeMedicine
// 0x0018 (0x0088 - 0x0070)
class UBTTaskNode_TakeMedicine : public UBTTaskNode
{
public:
	int                                                MedicineIndex;                                            // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x0074(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BTTaskNode_TakeMedicine");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponLogicBaseComponent
// 0x0008 (0x0100 - 0x00F8)
class UWeaponLogicBaseComponent : public UActorComponent
{
public:
	class ASTExtraWeapon*                              ownerWeapon;                                              // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponLogicBaseComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.BulletHitInfoUploadComponent
// 0x0090 (0x0190 - 0x0100)
class UBulletHitInfoUploadComponent : public UWeaponLogicBaseComponent
{
public:
	float                                              UploadInterval;                                           // 0x0100(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0110(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BulletHitInfoUploadComponent");
		return ptr;
	}


	void HandleOnWeaponStopFire();
	void HandleOnWeaponStartFire();
	void AddHitData(const struct FBulletHitInfoUploadData& Data, const struct FLocalShootHitData& ShootData);
};


// Class ShadowTrackerExtra.BulletMovementComponent
// 0x0020 (0x01C8 - 0x01A8)
class UBulletMovementComponent : public UProjectileMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x01A8(0x0001) MISSED OFFSET
	bool                                               bNeedStopWhenImpact;                                      // 0x01A9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x01AA(0x0006) MISSED OFFSET
	class USceneComponent*                             LastUpdateComponentBeforeStop;                            // 0x01B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x01B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BulletMovementComponent");
		return ptr;
	}


	void ResumeMoveAfterImpactWithNoLost();
	void ForceStop();
};


// Class ShadowTrackerExtra.BulletTrackComponent
// 0x0980 (0x0A78 - 0x00F8)
class UBulletTrackComponent : public UActorComponent
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       OwnerCharacter;                                           // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerController*                    OwnerPlayerController;                                    // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x60];                                      // 0x0110(0x0060) MISSED OFFSET
	int                                                UseTss;                                                   // 0x0170(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x904];                                     // 0x0174(0x0904) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.BulletTrackComponent");
		return ptr;
	}


	void OnWeaponStopFire();
	void OnWeaponStartFire();
	void OnWeaponShoot();
	struct FVector GetCurRecoilInfo();
	float GetCurDeviation();
};


// Class ShadowTrackerExtra.CameraSettingComponentFromBP
// 0x0018 (0x0110 - 0x00F8)
class UCameraSettingComponentFromBP : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x00F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CameraSettingComponentFromBP");
		return ptr;
	}


	void SaveCurCameraSetting(class USpringArmComponent* SpringArm);
	void LerpCameraSettings(float LerpAlpha, class USpringArmComponent* SpringArm, struct FCameraSettings* CameraSetting);
};


// Class ShadowTrackerExtra.ChallengeLevelRules
// 0x0008 (0x0030 - 0x0028)
class UChallengeLevelRules : public UObject
{
public:
	class AUAELevelDirector*                           LevelDirector;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ChallengeLevelRules");
		return ptr;
	}


	void SpawnLevelDirector(class UClass* LevelDirectorClass);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.CharacterAvatarComponent
// 0x00B0 (0x0620 - 0x0570)
class UCharacterAvatarComponent : public UAvatarComponent
{
public:
	TArray<struct FMeshSynData>                        synData;                                                  // 0x0570(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FMeshSynData>                        defaultSynData;                                           // 0x0580(0x0010) (Net, ZeroConstructor, Transient)
	struct FMeshSynData                                ParachuteData;                                            // 0x0590(0x0020) (Net, Transient)
	unsigned char                                      UnknownData00[0x10];                                      // 0x05B0(0x0010) MISSED OFFSET
	TMap<int, class UBackpackAvatarHandle*>            loadedItemList;                                           // 0x05C0(0x0050) (ZeroConstructor)
	TArray<class UBattleItemHandleBase*>               itemHandleCache;                                          // 0x0610(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CharacterAvatarComponent");
		return ptr;
	}


	bool SetSkinMaterial(int slotID);
	void SetNormalMaterial(class UMeshComponent* meshComp, int slotID, struct FMeshPackage* meshPack);
	bool SetBodySuitsMaterial(class UMeshComponent* meshComp, struct FMeshPackage* meshPack);
	void SetAvatarVisibility(EAvatarSlotType slotType, bool visible, bool IsForCE);
	void SetAvatarGender(int AGender);
	void SetAllMeshCollisionState(bool IsEnable);
	void RemoveSyncSlot(int Slot);
	void RefreshAvatar();
	bool PutOnEquipmentByItemHandle(class UBattleItemHandleBase* ItemHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh);
	void OnRep_SetDefaultCfg();
	void OnRep_EquipParachute();
	void OnRep_AvatarMeshChanged();
	void OnMeshLoaded(const struct FSoftObjectPath& AssetList, class UBattleItemHandleBase* itemHandles, bool isReplaced);
	void OnItemHandleLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void OnDefaultItemLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void NetSyncDefData(int Slot, class UBattleItemHandleBase* Handle);
	void NetSyncData(int Slot, ESyncOperation Type, class UBattleItemHandleBase* Handle);
	void NetApplyHeadMesh(class UBattleItemHandleBase* Handle);
	void LoadMeshsAsync(class UBattleItemHandleBase* handleList, bool needDirectLoad);
	bool IsNeedReplaced(class UBackpackAvatarHandle* doReplaceHandle);
	void InitMasterComponent(int AGender);
	void InitialAvatarParam(int AGender);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	void InitDefaultAvatarByResID(int avatarGender, int Head, int Hair);
	void InitDefaultAvatar(class UBattleItemHandleBase* Handle);
	bool InitBodyMeshByHead(int Head);
	bool GetReplacedMeshResRef(class UBackpackAvatarHandle* Handle, struct FSoftObjectPath* AssetRef);
	bool GetMeshResRef(class UBackpackAvatarHandle* Handle, struct FSoftObjectPath* AssetRef);
	void ClearMeshBySlot(int Slot, bool putDefault);
	bool CheckShouldEquipDefaultItem(int Slot);
	bool CheckIsDefaultAvatar(const struct FItemDefineID& definedID);
	void CheckAlreadyEquipped(int slotID);
	bool ApplyStaticMeshByID(int Slot, class UStaticMesh* pSM, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
	bool ApplySkeletalMeshByID(int Slot, class USkeletalMesh* Mesh, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
	void ApplyMeshCompCollision(int slotID);
	void ApplyMaterial(class UBattleItemHandleBase* ItemHandle, class UMeshComponent* meshComp);
	void ApplyAnimation(int Slot, struct FMeshPackage* meshPack);
};


// Class ShadowTrackerExtra.CharacterInterpRotationComp
// 0x0048 (0x0140 - 0x00F8)
class UCharacterInterpRotationComp : public UActorComponent
{
public:
	float                                              LocomotionStateMinVelocity;                               // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnInterpSpeed_WalkAndRun;                               // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPTurnInterpSpeed_WalkAndRun;                            // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnInterpSpeed_Sprint;                                   // 0x0104(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnInterpSpeed_Prone;                                    // 0x0108(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnInterpSpeed_Idle;                                     // 0x010C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinTurnAngle;                                             // 0x0110(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnOneStepAngle;                                         // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               UseTurningOneStep;                                        // 0x0118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0119(0x0007) MISSED OFFSET
	class UCurveFloat*                                 Curve_TurningLerp;                                        // 0x0120(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerpLocomotion;                              // 0x0128(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0130(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CharacterInterpRotationComp");
		return ptr;
	}


	void BeginFire(class ASTExtraWeapon* Weapon);
};


// Class ShadowTrackerExtra.CharacterParachuteComponent
// 0x01B0 (0x02A8 - 0x00F8)
class UCharacterParachuteComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	float                                              CurrentDiveRate;                                          // 0x0100(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0104(0x0014) MISSED OFFSET
	float                                              FreeFall_InputTriggerThreshold;                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_AcceFall;                                        // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxFreeFallSpeed;                                // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxFallSpeedChangeAccel;                         // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_AcceForward;                                     // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxForwardSpeed;                                 // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxForwardExtraFallSpeed;                        // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_AcceRight;                                       // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxRightSpeed;                                   // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxRightExtraFallSpeed;                          // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxPitchForwardAngle;                            // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxPitchBackAngle;                               // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_RotationYawInterpSpeed;                          // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_RotationPitchInterpSpeed;                        // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MinDiveAngle;                                    // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_DiveExtraAcceFall;                               // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_MaxDiveExtraFallSpeed;                           // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeFall_RightRatio;                                      // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bOpened_EnableInputMode8Dirs;                             // 0x0160(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0161(0x0003) MISSED OFFSET
	float                                              Opened_AcceFall;                                          // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxFreeFallSpeed;                                  // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_AcceForward;                                       // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxForwardSpeed;                                   // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxBackwardSpeed;                                  // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxForwardExtraFallSpeed;                          // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxBackExtraFallSpeed;                             // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_GlidingSpeedRemainPercent;                         // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_AcceRight;                                         // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxRightSpeed;                                     // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxLeftRightExtraFallSpeed;                        // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxRollAngle;                                      // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxPitchForwardAngle;                              // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxPitchBackAngle;                                 // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_MaxYawAngleSpeed;                                  // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Opened_RotationInterpSpeed;                               // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurrentFallSpeed;                                         // 0x01A4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AllowMaxDiatanceSqAtServer;                               // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x01AC(0x0024) MISSED OFFSET
	float                                              FollowerDist;                                             // 0x01D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ReletiveStaticNearbyDistanceSquare;                       // 0x01D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ClientMoveSyncDuration;                                   // 0x01D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xCC];                                      // 0x01DC(0x00CC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CharacterParachuteComponent");
		return ptr;
	}


	bool VerifyClientTimeStamp(float Timestamp);
	void UpdateRotation(float DeltaTime, float ThrottleInput, float SteerInput, TEnumAsByte<EParachuteState> State);
	void UpdateParachuteOpenedRotation(float InputForward, float InputRight, float DeltaTime);
	void UpdateFreeFallRotation(float InputForward, float InputRight, float DeltaTime);
	void TickParachuteComponent(float DeltaTime, float ThrottleInput, float SteeringInput);
	void StopParachute();
	void StartParachute();
	void ResetVelocity();
	void PostNetReceiveNewState();
	void OnPreReconnectOnServer();
	void InvalidateAdjustFollowerLocation();
	float GetReplicatedRightInput();
	float GetReplicatedForwardInput();
	struct FVector CalParachuteOpenedVelocity(float InputForward, float InputRight, float DeltaTime);
	struct FVector CalFreeFallVelocity(float InputForward, float InputRight, float DeltaTime);
	float AngleInterpTo(float Current, float Target, float DeltaTime, float Speed);
	void AdjustFollowerLocation();
};


// Class ShadowTrackerExtra.ViewModeStudio
// 0x0068 (0x03D0 - 0x0368)
class AViewModeStudio : public AActor
{
public:
	class UCameraComponent*                            CameraComponent;                                          // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USceneCaptureComponent2D*                    SceneCaptureComponent;                                    // 0x0370(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0378(0x0008) MISSED OFFSET
	struct FTransform                                  DefaultCameraSocketTransform;                             // 0x0380(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x03B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxViewDistance;                                          // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ViewSlaveLocationDuration;                                // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewSlaveLocationDurationCheckTime;                       // 0x03C8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ViewModeStudio");
		return ptr;
	}


	void SetViewModeAbleActor(class AActor* Actor);
	void SetTextureRenderTarget(class UTextureRenderTarget2D* NewTextureTarget);
	void SetCameraSocketName(const struct FName& NewCameraSocketName);
	void AddYaw(float Value);
	void AddViewSlaveLocation(float Duration);
	void AddViewDistance(float Value);
	void AddRoll(float Value);
	void AddPitch(float Value);
};


// Class ShadowTrackerExtra.CharacterStudio
// 0x0010 (0x03E0 - 0x03D0)
class ACharacterStudio : public AViewModeStudio
{
public:
	class USpringArmComponent*                         SpringArmComponent;                                       // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CharacterStudio");
		return ptr;
	}


	void UpdateComponentToWorld(class UMeshComponent* Mesh);
	void SetMeshTransform(class UMeshComponent* Mesh);
	void SetItem(class ASTExtraWeapon* Item);
};


// Class ShadowTrackerExtra.WeaponManagerComponent
// 0x0460 (0x0558 - 0x00F8)
class UWeaponManagerComponent : public UActorComponent
{
public:
	TMap<struct FName, struct FName>                   LogicSocketToWeaponAttachSocketMap;                       // 0x00F8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       LeftLogicSocketName;                                      // 0x0148(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       RightLogicSocketName;                                     // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, struct FName>                   LogicSocketToWeaponAttachSocketMapNoBag;                  // 0x0158(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, struct FName>                   LogicSocketToWeaponAttachSocketMapFPP;                    // 0x01A8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, ESurviveWeaponPropSlot>         LogicSocketToPropSlotMap;                                 // 0x01F8(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TMap<struct FName, class UClass*>                  GrenadeLogicSocketToWeaponClassMap;                       // 0x0248(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                BagLevel1ID;                                              // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x029C(0x0004) MISSED OFFSET
	struct FName                                       CurUseWeaponLogicSocket;                                  // 0x02A0(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSwitching;                                             // 0x02A8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02A9(0x0007) MISSED OFFSET
	struct FName                                       LastUseNoneGrenadeLogicSlot;                              // 0x02B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       LastUseLogicSlot;                                         // 0x02B8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUIHasBoundDelegate;                                      // 0x02C0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bClientHasFinishedHandleSpawnWeapon;                      // 0x02C1(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x02C2(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    LocalBackpackCurerrentWeaponFinishDelegate;               // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangeCurrentUsingWeaponDelegate;                         // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ChangeInventoryDataDelegate;                              // 0x02E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LocalEquipWeaponFromBackpackFinishedDelegate;             // 0x02F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    SwapWeaponByPropSlotFinishedDelegate;                     // 0x0308(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0318(0x0010) MISSED OFFSET
	float                                              DelayTimeByWeaponChange;                                  // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTimeBySkillCasting;                                  // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<struct FName, class ASTExtraWeapon*>          InventoryData;                                            // 0x0330(0x0050) (ZeroConstructor)
	TMap<struct FName, struct FItemDefineID>           GrenadeLogicSlotAndDefineIDData;                          // 0x0380(0x0050) (ZeroConstructor)
	TArray<class ASTExtraWeapon*>                      BackpackPistolList;                                       // 0x03D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03E0(0x0008) MISSED OFFSET
	TArray<struct FItemDefineID>                       TargetCreateArray;                                        // 0x03E8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET
	TArray<struct FSpawnAndBackpackWeaponReplicatedData> WeaponCreatePool;                                         // 0x0400(0x0010) (ZeroConstructor)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSlot1;                    // 0x0410(0x0038) (BlueprintVisible, Net)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSlot2;                    // 0x0448(0x0038) (BlueprintVisible, Net)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientSubSlot;                  // 0x0480(0x0038) (BlueprintVisible, Net)
	struct FWeaponSystemDataOnSimulateClient           WeaponSystemDataOnSimulateClientMeleeSlot;                // 0x04B8(0x0038) (BlueprintVisible, Net)
	unsigned char                                      UnknownData06[0x8];                                       // 0x04F0(0x0008) MISSED OFFSET
	class ASTExtraWeapon*                              CurrentWeaponReplicated;                                  // 0x04F8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class ASTExtraWeapon*                              CurrentWeaponSimulate;                                    // 0x0500(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x40];                                      // 0x0508(0x0040) MISSED OFFSET
	class ASTExtraWeapon*                              OldGrenadeWeaponNeedDestroy;                              // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData)
	ESwitchWeaponProgress                              CurSwitchWeaponProgress;                                  // 0x0550(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x7];                                       // 0x0551(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponManagerComponent");
		return ptr;
	}


	void UpdateOwnerClientCreateWeapon();
	void SwitchWeaponBySlot(ESurviveWeaponPropSlot Slot, bool bUseAnimation);
	void SwitchWeaponByLogicSocket_IdleToBackpackFinished();
	void SwapWeaponByPropSlotFinishedDelegate__DelegateSignature(ESurviveWeaponPropSlot Slot1, ESurviveWeaponPropSlot Slot2);
	void SimulatedWeaponChangedDelegate__DelegateSignature();
	void OnRep_WeaponSystemDataOnSimulateMeleeSlot();
	void OnRep_WeaponSystemDataOnSimulateClientSubSlot();
	void OnRep_WeaponSystemDataOnSimulateClientSlot2();
	void OnRep_WeaponSystemDataOnSimulateClientSlot1();
	void OnRep_CurrentWeaponReplicated();
	void OnReconnectOnServer();
	void OnReconnectOnClient();
	void LogInventoryDataInfo();
	void LocalSwapWeaponByPropSlot(ESurviveWeaponPropSlot Slot1, ESurviveWeaponPropSlot Slot2, bool bForce);
	void LocalForceFinishSwitchWeapon();
	void LocalEquipWeaponFromBackpackFinishedDelegate__DelegateSignature();
	void LocalEquipWeaponFromBackpackFinishedCallback();
	void LocalBackpackCurerrentWeaponFinishedCallback();
	void LocalBackpackCurerrentWeaponFinishDelegate__DelegateSignature();
	ESurviveWeaponPropSlot GetTargetPropSlot();
	ESurviveWeaponPropSlot GetPropSlotByLogicSocket(const struct FName& LogicSocket);
	ESurviveWeaponPropSlot GetPrevWeaponPropSlot();
	ESurviveWeaponPropSlot GetNextWeaponPropSlot();
	struct FName GetLogicSocketBySlot(ESurviveWeaponPropSlot Slot);
	class ASTExtraWeapon* GetInventoryWeaponByPropSlot(ESurviveWeaponPropSlot Slot);
	class ASTExtraWeapon* GetInventoryWeaponByLogicSocket(const struct FName& LogicSocket);
	struct FName GetGrenadeSpecificSlotNameByWeapon(class ASTExtraWeapon* Weapon);
	struct FItemDefineID GetGrenadeDefindIDBySlot(const struct FName& LogicSlot);
	class ASTExtraWeapon* GetCurrentUsingWeapon();
	ESurviveWeaponPropSlot GetCurrentUsingPropSlot();
	struct FName GetCurrentUsingLogicSocketOnServer();
	struct FName GetCurrentUsingLogicSocket();
	int GetBagLevel();
	TArray<class ASTExtraWeapon*> GetAllInventoryWeaponList();
	void ForceBroadcastChangeAllInventoryDataEvent();
	void EnableAllBroadcast(bool bEnable);
	void DeleteGrenadeSlotAndDefindID(const struct FName& LogicSlot);
	void DebugReconnectToClientOnServer();
	void DebugDisconnetToServerOnClient();
	void ChangeInventoryDataDelegate__DelegateSignature(ESurviveWeaponPropSlot TargetChangeSlot);
	void ChangeCurrentUsingWeaponDelegate__DelegateSignature(ESurviveWeaponPropSlot TargetChangeSlot);
	void AddOrSetGrenadeSlotAndDefindID(const struct FName& LogicSlot, const struct FItemDefineID& ID);
};


// Class ShadowTrackerExtra.CharacterWeaponManagerComponent
// 0x0058 (0x05B0 - 0x0558)
class UCharacterWeaponManagerComponent : public UWeaponManagerComponent
{
public:
	float                                              AttachCheckInterval;                                      // 0x0558(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AttachCheckDistance;                                      // 0x055C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RefreshUIIntervalAfterReconnect;                          // 0x0560(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                RefreshUITimesAfterReconnect;                             // 0x0564(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerCharacter*                     OwnerCharacter;                                           // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0570(0x0018) MISSED OFFSET
	TArray<struct FWeaponReconnectReplicateDataWrapper> PreWeaponReconnectReplicateDataWrapperList;               // 0x0588(0x0010) (ZeroConstructor)
	TArray<struct FWeaponReconnectReplicateDataWrapper> WeaponReconnectReplicateDataWrapperList;                  // 0x0598(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x05A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CharacterWeaponManagerComponent");
		return ptr;
	}


	void UpdateDataWhenBagChangedOnServer(const struct FItemDefineID& DefineID, EBattleItemOperationType operationType, unsigned char Reason);
	void UpdateDataWhenBagChangedOnAutonomous();
	void OnRecoverOnServer();
	void OnReconnectOnServer();
	void OnReconnectOnClient();
	void OnDisconnectToClientOnServer();
	int GetBagLevel();
};


// Class ShadowTrackerExtra.ChasingBar
// 0x0060 (0x0310 - 0x02B0)
class UChasingBar : public UUAEUserWidget
{
public:
	float                                              ProgressBarCanvasXValue;                                  // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsNeedClearProgressBar;                                   // 0x02B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B5(0x0003) MISSED OFFSET
	float                                              BlueCircleAppearanceTime;                                 // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleMovingCountDownDuration;                        // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleRunStartTime;                                   // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleRunDuration;                                    // 0x02C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleChasingPercent;                                 // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProgressBarLength;                                        // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     OriginBlueCircle;                                         // 0x02D0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              CleaningTime;                                             // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraGameStateBase*                       STEGameStateBase;                                         // 0x02E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerController*                    STEPlayerController;                                      // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       BlueCircleMovingCountDownText;                            // 0x02F0(0x0018) (Edit, BlueprintVisible)
	float                                              PlayerEscapeProgress;                                     // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsPlayerOutBlueCircleCurrently;                           // 0x030C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x030D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ChasingBar");
		return ptr;
	}


	void UpdateCountDownText();
	void OnPlayerEnterExitBlueCircle();
	void OnCountDownTextInvisible();
	bool IsPlayerOutBlueCircle(class APawn* CurPawn);
	bool IsPlayerInWhiteCircle(class APawn* CurPawn);
	bool IsBlueCircleMoving();
	bool IsBlueCircleAppearAndCountDown();
	void ClearProgressBar();
	void CleanTheProgressBar();
	void CheckToCleanProgress();
	float CalPlayerEscapePercent();
	void BlueCirclePreMoveCountDown();
};


// Class ShadowTrackerExtra.ChatComponent
// 0x0148 (0x0240 - 0x00F8)
class UChatComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F8(0x0004) MISSED OFFSET
	int                                                end_time;                                                 // 0x00FC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Reason;                                                   // 0x0100(0x0010) (ZeroConstructor)
	TArray<struct FQuickChatIDAndAudio>                chatQuickList;                                            // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FQuickChatOption>                    allChatOption;                                            // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     TeammateColor;                                            // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     MyColor;                                                  // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TMap<struct FString, struct FIngameFriendChat>     FriendChatInfo;                                           // 0x0150(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FQuickChatFlag>                      ChatFlagList;                                             // 0x01A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	float                                              SendMsgCD;                                                // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              lastShowChatTime;                                         // 0x01B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShowChatDuration;                                         // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	TArray<struct FQuickGroundFlag>                    groundFlags;                                              // 0x01C0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     EndChar;                                                  // 0x01D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FString                                     ColonChar;                                                // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UPickupManagerComponent*                     PickupMgrComp;                                            // 0x01F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x38];                                      // 0x01F8(0x0038) MISSED OFFSET
	struct FString                                     CongregationPlayerKey;                                    // 0x0230(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ChatComponent");
		return ptr;
	}


	void UpdateQuickItemText(int msgID, int resID, int alternateMsgID);
	void ShowQuickPanel(bool bShow);
	void ServerSendMsg(const struct FInGameChatMsg& msgItem);
	void SendDirtyFilter(const struct FString& Name, const struct FString& Content, bool isMe);
	void OnInviteNextBattle(const struct FString& gid, const struct FString& Name);
	void OnFilterFinish(const struct FString& filterText);
	void NotifyFriendReplyInvite(const struct FString& str_gid, const struct FString& sender_name, bool bReply);
	void NotifyFriendInvite(const struct FString& str_gid, const struct FString& sender_name);
	void NotifyFriendChat(const struct FString& str_gid, const struct FString& sender_name, const struct FString& chat_content, bool self_msg);
	void InviteNextBattleReply(const struct FString& gid, const struct FString& Name, bool bReply);
	void CloseChatHistoryList();
	void ClientReceiveMsg(const struct FInGameChatMsg& msgItem, bool isMe);
	void AddQuickAudio(class UAkAudioEvent* audio, int chatID);
	void AddOneMsgToUI1(const struct FString& Name, const struct FString& Content, int msgID, bool isMe, bool PlaySound);
	void AddFriendChat(const struct FString& gid, const struct FString& Name, const struct FString& Content, bool isSelf);
};


// Class ShadowTrackerExtra.CircleMgrComponent
// 0x00F0 (0x0220 - 0x0130)
class UCircleMgrComponent : public UTimerRegistComponent
{
public:
	TArray<struct FCirCleCfg>                          CircleConfigs;                                            // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	float                                              DestinyThreshold;                                         // 0x0140(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x64];                                      // 0x0144(0x0064) MISSED OFFSET
	class ACirleAreaVolume*                            BindedCirleAreaVolume;                                    // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x70];                                      // 0x01B0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CircleMgrComponent");
		return ptr;
	}


	void SetGMCicleTime(float CDTime, float LastTime);
	void RetriveCircleInfo(struct FReConnectGameStateInfo* CurInfo);
};


// Class ShadowTrackerExtra.CirleAreaVolume
// 0x0038 (0x03A0 - 0x0368)
class ACirleAreaVolume : public AActor
{
public:
	class UBoxComponent*                               CircleBoxArea;                                            // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0370(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CirleAreaVolume");
		return ptr;
	}

};


// Class ShadowTrackerExtra.CoherentCommonBinder
// 0x0078 (0x00A0 - 0x0028)
class UCoherentCommonBinder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x0028(0x0060) MISSED OFFSET
	struct FString                                     DefaultLobbyUrl;                                          // 0x0088(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CoherentCommonBinder");
		return ptr;
	}


	void Test();
	void OnWebPageOnPlatformFailed();
	void BindUI();
	void BindDelegate();
};


// Class ShadowTrackerExtra.CommonBtnComponent
// 0x0020 (0x0118 - 0x00F8)
class UCommonBtnComponent : public UActorComponent
{
public:
	TArray<TWeakObjectPtr<class APUBGDoor>>            TriggeredDoors;                                           // 0x00F8(0x0010) (ZeroConstructor)
	struct FScriptMulticastDelegate                    OnDoorInteractable;                                       // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CommonBtnComponent");
		return ptr;
	}


	void SetAutoOpenDoorMode(int Mode);
	void SetAutoOpenDoorEnable(bool bEnable);
	bool IsAimingExtraDoor(class APUBGDoor* actionDoor);
	void DoorRequireRPC(class APUBGDoor* actionDoor, bool bAimingExtraDoor);
	void BP_SimulateUIClick(bool bExtraDoor);
	void BP_ShowDoorBtn(bool bShow, bool bOpen, int doorOpenMode);
};


// Class ShadowTrackerExtra.CrossHairComponent
// 0x00F8 (0x01F8 - 0x0100)
class UCrossHairComponent : public UWeaponLogicBaseComponent
{
public:
	TMap<struct FName, struct FString>                 CrossHairNameAndTextureMap;                               // 0x0100(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              PistolCenterDownDis;                                      // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugCrossHairCircleArea;                            // 0x0154(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	float                                              DrawDebugCrossHairCircleAreaSteps;                        // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugSpreadCircleArea;                               // 0x015C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	float                                              DrawDebugSpreadCircleAreaSteps;                           // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UShootWeaponEntity*                          ShootWeaponEntity;                                        // 0x0170(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBulletTrackComponent*                       BulletTrackComp;                                          // 0x0180(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTexture2D*                                  CrossHairTextureNormal;                                   // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairEmptyHand;                                       // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairPistolEdge;                                      // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairPistolCenter;                                    // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairShotGun;                                         // 0x01A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairRifleArrow;                                      // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x01B8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CrossHairComponent");
		return ptr;
	}


	void DrawSpreadEnd();
	void DrawDebugPointEnd();
};


// Class ShadowTrackerExtra.CustomParticleSystemComponent
// 0x0010 (0x08F0 - 0x08E0)
class UCustomParticleSystemComponent : public UParticleSystemComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x08E0(0x0008) MISSED OFFSET
	bool                                               bShowImpactInfo;                                          // 0x08E8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x08E9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CustomParticleSystemComponent");
		return ptr;
	}


	void AddCollisionIgnoreActor(class AActor* IgnoreActor);
};


// Class ShadowTrackerExtra.CustomScrollBox
// 0x0688 (0x0798 - 0x0110)
class UCustomScrollBox : public UPanelWidget
{
public:
	struct FScrollBoxStyle                             WidgetStyle;                                              // 0x0110(0x01E8) (Edit, BlueprintVisible)
	struct FScrollBarStyle                             WidgetBarStyle;                                           // 0x02F8(0x0440) (Edit, BlueprintVisible)
	class USlateWidgetStyleAsset*                      Style;                                                    // 0x0738(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class USlateWidgetStyleAsset*                      BarStyle;                                                 // 0x0740(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<EOrientation>                          Orientation;                                              // 0x0748(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ESlateVisibility                                   ScrollBarVisibility;                                      // 0x0749(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EConsumeMouseWheel                                 ConsumeMouseWheel;                                        // 0x074A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x074B(0x0001) MISSED OFFSET
	struct FVector2D                                   ScrollbarThickness;                                       // 0x074C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               AlwaysShowScrollbar;                                      // 0x0754(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               AllowOverscroll;                                          // 0x0755(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	EDescendantScrollDestination                       NavigationDestination;                                    // 0x0756(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0757(0x0001) MISSED OFFSET
	float                                              NavigationScrollPadding;                                  // 0x0758(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x075C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUserScrolled;                                           // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMoveOut;                                                // 0x0770(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0780(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CustomScrollBox");
		return ptr;
	}


	void SetScrollOffset(float NewScrollOffset);
	void SetScrollBarVisibility(ESlateVisibility NewScrollBarVisibility);
	void SetScrollbarThickness(const struct FVector2D& NewScrollbarThickness);
	void SetOrientation(TEnumAsByte<EOrientation> NewOrientation);
	void SetAlwaysShowScrollbar(bool NewAlwaysShowScrollbar);
	void SetAllowOverscroll(bool NewAllowOverscroll);
	void ScrollWidgetIntoView(class UWidget* WidgetToFind, bool AnimateScroll, EDescendantScrollDestination ScrollDesintion);
	void ScrollToStart();
	void ScrollToEnd();
	float GetScrollOffset();
	float GetMaxScrollOffset();
};


// Class ShadowTrackerExtra.CustomScrollBoxSlot
// 0x0020 (0x0058 - 0x0038)
class UCustomScrollBoxSlot : public UPanelSlot
{
public:
	struct FMargin                                     Padding;                                                  // 0x0038(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<EHorizontalAlignment>                  HorizontalAlignment;                                      // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF];                                       // 0x0049(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CustomScrollBoxSlot");
		return ptr;
	}


	void SetPadding(const struct FMargin& InPadding);
	void SetHorizontalAlignment(TEnumAsByte<EHorizontalAlignment> InHorizontalAlignment);
};


// Class ShadowTrackerExtra.CustomSpringArmComponent
// 0x0230 (0x0550 - 0x0320)
class UCustomSpringArmComponent : public USpringArmComponent
{
public:
	float                                              SpringArmLengthModifier1;                                 // 0x0320(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringArmLengthModifier2;                                 // 0x0324(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringArmLengthModifier3;                                 // 0x0328(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 SpringArmForwadOffsetByPitchCurve;                        // 0x0330(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugLineAndShap;                                    // 0x0338(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x13];                                      // 0x0339(0x0013) MISSED OFFSET
	float                                              ArmBlendScale;                                            // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SocketOffsetInterpSpeed;                                  // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TargetOffsetInterpSpeed;                                  // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ArmLengthInterpSpeed;                                     // 0x0358(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FCameraOffsetData                           CrouchCameraData;                                         // 0x035C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           ProneCameraData;                                          // 0x0378(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           IndoorCameraData;                                         // 0x0394(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           LeanLeftCameraData;                                       // 0x03B0(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           LeanRightCameraData;                                      // 0x03CC(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           InVehicleCameraData;                                      // 0x03E8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           NearDeathCameraData;                                      // 0x0404(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           PeekLeftCameraData;                                       // 0x0420(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           PeekRightCameraData;                                      // 0x043C(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           IndoorLowerCameraStand;                                   // 0x0458(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           IndoorLowerCameraCrouch;                                  // 0x0474(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           IndoorLowerCameraProne;                                   // 0x0490(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           ShoulderFiringCameraData;                                 // 0x04AC(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	struct FCameraOffsetData                           PeekLeftAndShoulderFiringCameraData;                      // 0x04C8(0x001C) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x34];                                      // 0x04E4(0x0034) MISSED OFFSET
	float                                              AdditionalSocketOffetZMax;                                // 0x0518(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AdditionalSocketOffetZPitch;                              // 0x051C(0x0008) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0524(0x0004) MISSED OFFSET
	float                                              DefaultArmLength;                                         // 0x0528(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x24];                                      // 0x052C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CustomSpringArmComponent");
		return ptr;
	}


	void SetCameraDataEnable(TEnumAsByte<ECameraDataType> CameraDataType, bool IsEnable);
	void DelayRotationLagEnabledEnd();
	void DelayRotationLagEnabled(bool bEnabled, float Time);
	void ClearCameraData();
};


// Class ShadowTrackerExtra.CustomUserWidget
// 0x0008 (0x02B8 - 0x02B0)
class UCustomUserWidget : public UUAEUserWidget
{
public:
	bool                                               bEnableGlobalTouch;                                       // 0x02B0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.CustomUserWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.DataTableManager
// 0x0038 (0x0060 - 0x0028)
class UDataTableManager : public UBlueprintFunctionLibrary
{
public:
	class UDataTable*                                  PickUpGlobalDataTable;                                    // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  PickUpGlobalIDAndWrapperDataTable;                        // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  WeaponDataTable;                                          // 0x0038(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  PlayerEquipmentDataTable;                                 // 0x0040(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  WeaponComponentDataTable;                                 // 0x0048(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ConsumeItemDataTable;                                     // 0x0050(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  AkEventDataTable;                                         // 0x0058(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.DataTableManager");
		return ptr;
	}


	class UDataTable* GetTableByType(TEnumAsByte<EDataTableType> TableType);
	class UDataTableManager* STATIC_GetInstance();
};


// Class ShadowTrackerExtra.DeathPlayback
// 0x00A0 (0x00C8 - 0x0028)
class UDeathPlayback : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	bool                                               bDeathPlaybackEnable;                                     // 0x0030(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3F];                                      // 0x0031(0x003F) MISSED OFFSET
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<struct FString, struct FDeathPlayCharacterTrans> CharacterTransMap;                                        // 0x0078(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.DeathPlayback");
		return ptr;
	}


	void StopRecordingReplay();
	void StopPlay();
	void StartRecordingReplay();
	void PlayReplay();
	bool IsInRecordState();
	bool IsInPlayState();
	bool HaveRecordingData();
	struct FString GetSpectatorName();
};


// Class ShadowTrackerExtra.DelayFlyProjMovementComponent
// 0x0030 (0x01D8 - 0x01A8)
class UDelayFlyProjMovementComponent : public UProjectileMovementComponent
{
public:
	float                                              ThrowLowGravityScale;                                     // 0x01A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ThrowHighGravityScale;                                    // 0x01AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              QA_Adjustment;                                            // 0x01B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTouchedWater;                                           // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsTouchedWater;                                          // 0x01C8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x01C9(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.DelayFlyProjMovementComponent");
		return ptr;
	}


	void StartFly(const struct FVector& flyVelocity, bool isThrowHigh);
	void OnTouchedWaterDelegate__DelegateSignature();
	void CheckWater();
};


// Class ShadowTrackerExtra.DrivingChallengeLevelRules
// 0x0018 (0x0048 - 0x0030)
class UDrivingChallengeLevelRules : public UChallengeLevelRules
{
public:
	TArray<class ATriggerItem_DrivingCheckPoint*>      DrivingCheckPointsArray;                                  // 0x0030(0x0010) (ZeroConstructor)
	int                                                CurrentUnpassIndex;                                       // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalPassNum;                                             // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.DrivingChallengeLevelRules");
		return ptr;
	}


	bool ValidNewCheckPoint();
	void SignCheckPointPassed(const struct FString& Msg);
	void SignAndSetDrivingCheckPoint(const struct FString& Msg);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.EffectComponent
// 0x0050 (0x0148 - 0x00F8)
class UEffectComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00F8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.EffectComponent");
		return ptr;
	}


	void S2Sim_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
	void S2C_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
	void S2A_EndEffectGraph(int UID);
	void C2S_CallRemoteEffect(int graphTid, int graphUid, int effectTid, class AActor* Source, class AActor* Target, TArray<unsigned char> Data);
};


// Class ShadowTrackerExtra.FakePlayerAIController
// 0x0040 (0x0530 - 0x04F0)
class AFakePlayerAIController : public ABaseAIController
{
public:
	class UClass*                                      CharacterClass;                                           // 0x04F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnEnterJumping;                                           // 0x04F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0508(0x0010) MISSED OFFSET
	class UNewPathFollowingComponent*                  newFollowingComponent;                                    // 0x0518(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bUseDynamicNAV;                                           // 0x0520(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0521(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.FakePlayerAIController");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponStateBase
// 0x0058 (0x0158 - 0x0100)
class UWeaponStateBase : public UWeaponLogicBaseComponent
{
public:
	bool                                               bNeedConditionGateCheck;                                  // 0x0100(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFreshWeaponStateType>                 FreshWeaponStateType;                                     // 0x0101(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x56];                                      // 0x0102(0x0056) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateBase");
		return ptr;
	}

};


// Class ShadowTrackerExtra.FireWeaponState
// 0x0028 (0x0180 - 0x0158)
class UFireWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       WeaponOwner;                                              // 0x0160(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xD];                                       // 0x0168(0x000D) MISSED OFFSET
	bool                                               OpenPressBtnStay;                                         // 0x0175(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0xA];                                       // 0x0176(0x000A) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.FireWeaponState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.FlareGunCrossHairComponent
// 0x0008 (0x0200 - 0x01F8)
class UFlareGunCrossHairComponent : public UCrossHairComponent
{
public:
	class UTexture2D*                                  DisableTexture;                                           // 0x01F8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.FlareGunCrossHairComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.FpsCountStatistics
// 0x0020 (0x0048 - 0x0028)
class UFpsCountStatistics : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.FpsCountStatistics");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameEventListener
// 0x0028 (0x0120 - 0x00F8)
class UGameEventListener : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnGameEventListener;                                      // 0x00F8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HeightCheck_High;                                         // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeightCheck_Mid;                                          // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeightCheck_Low;                                          // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	float                                              ScreenSizeCullingFactor;                                  // 0x0118(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              DistanceCullingFactor;                                    // 0x011C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameEventListener");
		return ptr;
	}


	void StarCalcJump();
	void OnChangeViewTarget();
	bool IsPlayerLanded();
	bool IsPlayerFlying();
	void HeightCheck();
	void GameEventReBirth();
	void GameEventPlane();
	void GameEventParachute();
	void GameEventLanded();
	void GameEventJump();
	void GameEventFighting();
	void GameEventDie(float currentHP, float ratioHP);
	void GameEventBirth();
};


// Class ShadowTrackerExtra.GameInstanceForLobbyLink
// 0x0000 (0x0028 - 0x0028)
class UGameInstanceForLobbyLink : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameInstanceForLobbyLink");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GamemodeAIDataAsset
// 0x0020 (0x0050 - 0x0030)
class UGamemodeAIDataAsset : public UDataAsset
{
public:
	TArray<struct FAIEquipSpawnGroupDataBase>          SpawnEquipDataBase;                                       // 0x0030(0x0010) (Edit, ZeroConstructor)
	float                                              RandomStartJumpTime;                                      // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomEndJumpTime;                                        // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CheckNoPlayerRadiusSquare;                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GamemodeAIDataAsset");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeDataAsset
// 0x0020 (0x0050 - 0x0030)
class UGameModeDataAsset : public UDataAsset
{
public:
	TArray<float>                                      Probabilities;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<struct FGameModeParam>                      GameModeParams;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeDataAsset");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeForLobbyLink
// 0x0000 (0x0028 - 0x0028)
class UGameModeForLobbyLink : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeForLobbyLink");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeState
// 0x0018 (0x0040 - 0x0028)
class UGameModeState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              StateTime;                                                // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0034(0x0004) MISSED OFFSET
	class AUAEGameMode*                                OwnerGameMode;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeState");
		return ptr;
	}


	void GotoNextState();
};


// Class ShadowTrackerExtra.GameModeState_Challenge
// 0x0000 (0x0040 - 0x0040)
class UGameModeState_Challenge : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeState_Challenge");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeState_Training
// 0x0018 (0x0058 - 0x0040)
class UGameModeState_Training : public UGameModeState
{
public:
	float                                              AboutToOverTime;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	int                                                AboutToOverMsgID;                                         // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET
	float                                              PostLoginMsgDelay;                                        // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                PostLoginMsgID;                                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeState_Training");
		return ptr;
	}


	void BroadcastAboutToOver();
};


// Class ShadowTrackerExtra.GameModeStateActive
// 0x0008 (0x0048 - 0x0040)
class UGameModeStateActive : public UGameModeState
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateActive");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateEmpty
// 0x0000 (0x0040 - 0x0040)
class UGameModeStateEmpty : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateEmpty");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFighting
// 0x0018 (0x0058 - 0x0040)
class UGameModeStateFighting : public UGameModeState
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	class APawn*                                       AirPlane;                                                 // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFighting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFightingWar
// 0x0008 (0x0060 - 0x0058)
class UGameModeStateFightingWar : public UGameModeStateFighting
{
public:
	float                                              RespawnTime;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFightingWar");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinished
// 0x0000 (0x0040 - 0x0040)
class UGameModeStateFinished : public UGameModeState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinished");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedTeam
// 0x0000 (0x0040 - 0x0040)
class UGameModeStateFinishedTeam : public UGameModeStateFinished
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedTeam");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedGroup
// 0x0000 (0x0040 - 0x0040)
class UGameModeStateFinishedGroup : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedGroup");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFinishedWar
// 0x0000 (0x0040 - 0x0040)
class UGameModeStateFinishedWar : public UGameModeStateFinishedTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFinishedWar");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFlying
// 0x0028 (0x0068 - 0x0040)
class UGameModeStateFlying : public UGameModeState
{
public:
	class UClass*                                      PlaneClass;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBehaviorTree*                               PlaneBT;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0050(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFlying");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFlyingTeam
// 0x0000 (0x0068 - 0x0068)
class UGameModeStateFlyingTeam : public UGameModeStateFlying
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFlyingTeam");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFlyingGroup
// 0x0000 (0x0068 - 0x0068)
class UGameModeStateFlyingGroup : public UGameModeStateFlyingTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFlyingGroup");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateFlyingWar
// 0x0000 (0x0068 - 0x0068)
class UGameModeStateFlyingWar : public UGameModeStateFlyingTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateFlyingWar");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GameModeStateReady
// 0x0030 (0x0070 - 0x0040)
class UGameModeStateReady : public UGameModeState
{
public:
	float                                              StopJoinTime;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ForceStartCountDownTime;                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GameModeStateReady");
		return ptr;
	}


	void StopJoin();
};


// Class ShadowTrackerExtra.GlobalLevelLogicActor
// 0x0030 (0x0398 - 0x0368)
class AGlobalLevelLogicActor : public AActor
{
public:
	bool                                               bEnableGroundWaterFogSwitch;                              // 0x0368(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	struct FName                                       GroundFogTag;                                             // 0x0370(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       WaterFogTag;                                              // 0x0378(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SeaLvel;                                                  // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class AExponentialHeightFog*                       GroundFog;                                                // 0x0388(0x0008) (ZeroConstructor, IsPlainOldData)
	class AExponentialHeightFog*                       WaterFog;                                                 // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GlobalLevelLogicActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerController
// 0x1568 (0x1DB0 - 0x0848)
class ASTExtraPlayerController : public AUAEPlayerController
{
public:
	unsigned char                                      UnknownData00[0x14];                                      // 0x0848(0x0014) MISSED OFFSET
	float                                              FreeCameraStartMinPitchMin;                               // 0x085C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FreeCameraStartMinPitchMax;                               // 0x0860(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bTrackingKillerEnabled;                                   // 0x0864(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0865(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData02[0x50];                                      // 0x0865(0x0050) UNKNOWN PROPERTY: SetProperty ShadowTrackerExtra.STExtraPlayerController.TouchIndexSet
	TEnumAsByte<ETouchIndex>                           OnFireTouchFingerIndex;                                   // 0x08B8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x08B9(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<ETouchIndex>>                   IgnoreCameraMovingIndexArray;                             // 0x08C0(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               bNeedSetFireTouchFingerIndex;                             // 0x08D0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETouchIndex>                           OnFreeCameraFingerIndex;                                  // 0x08D1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x08D2(0x0002) MISSED OFFSET
	float                                              FreeCameraSPL_Hor;                                        // 0x08D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCameraSPL_Ver;                                        // 0x08D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_MIN;                                       // 0x08DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_MAX;                                       // 0x08E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_PITCH_MIN;                                 // 0x08E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_PITCH_MAX;                                 // 0x08E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_PITCH_MIN_LIMITED;                         // 0x08EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCamera_FPP_PITCH_MAX_LIMITED;                         // 0x08F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCameraSPL_Hor_Parachute;                              // 0x08F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FreeCameraSPL_Ver_Parachute;                              // 0x08F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RecoverLagDelayTime;                                      // 0x08FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   StartPosition;                                            // 0x0900(0x0008) (IsPlainOldData)
	struct FVector2D                                   CurFreeCamPosition;                                       // 0x0908(0x0008) (IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0910(0x0008) MISSED OFFSET
	struct FString                                     FollowCandidateName;                                      // 0x0918(0x0010) (BlueprintVisible, ZeroConstructor)
	TMap<struct FString, bool>                         IsTeammatesAutoFollowing;                                 // 0x0928(0x0050) (BlueprintVisible, ZeroConstructor)
	struct FRotator                                    FreeCameraStartRotation;                                  // 0x0978(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x0984(0x000C) MISSED OFFSET
	struct FTransform                                  FPPModeSpringArmTrans;                                    // 0x0990(0x0030) (IsPlainOldData)
	TEnumAsByte<ETouchIndex>                           FreeCameraFigerIndex;                                     // 0x09C0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x09C1(0x0003) MISSED OFFSET
	int                                                WeaponReconnectOpIndex;                                   // 0x09C4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bHasInitUIFinished;                                       // 0x09C8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               isShowVaultEnable;                                        // 0x09C9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x09CA(0x0002) MISSED OFFSET
	int                                                DefaultParachuteItemID;                                   // 0x09CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UPlayerControllerStateMachine*               PlayerControllerStateMachine;                             // 0x09D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateActive;                              // 0x09D8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFlying;                              // 0x09E0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateJumping;                             // 0x09E8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateLanding;                             // 0x09F0(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFighting;                            // 0x09F8(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFinished;                            // 0x0A00(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FLinearColor                                CrossHairColor;                                           // 0x0A08(0x0010) (Edit, BlueprintVisible, IsPlainOldData)
	TEnumAsByte<EAutoAimType>                          AutoAimType;                                              // 0x0A18(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x31];                                      // 0x0A19(0x0031) MISSED OFFSET
	bool                                               bIsTrainingMode;                                          // 0x0A4A(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAutoAimTrainingMode;                               // 0x0A4B(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0A4C(0x0004) MISSED OFFSET
	struct FName                                       PlayerControllerState;                                    // 0x0A50(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FClientFatalDamageRecordData>        ClientFatalDamageRecords;                                 // 0x0A58(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FSensibilityConfig                          SensibilityConfig;                                        // 0x0A68(0x0054) (BlueprintVisible)
	int                                                UseMotionControlType;                                     // 0x0ABC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnCharacterNearDeathOrRescueingOtherNotifyDelegate;       // 0x0AC0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterFlying;                                      // 0x0AD0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerExitFlying;                                       // 0x0AE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterJumping;                                     // 0x0AF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerExitJumping;                                      // 0x0B00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterParachute;                                   // 0x0B10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerExitParachute;                                    // 0x0B20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterFighting;                                    // 0x0B30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerExitFighting;                                     // 0x0B40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterFinished;                                    // 0x0B50(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTeammateHPChangeDelegate;                               // 0x0B60(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterBreathChange;                                  // 0x0B70(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractableGroundItem;                                 // 0x0B80(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FKillOrPutDownMessage                       KillOrPutDownMessageData;                                 // 0x0B90(0x00C8) (BlueprintVisible, BlueprintReadOnly)
	struct FScriptMulticastDelegate                    OnStartFireEvent;                                         // 0x0C58(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnStopFireEvent;                                          // 0x0C68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReleaseFireBtn;                                         // 0x0C78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSwitchCameraModeStart;                                  // 0x0C88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSwitchCameraModeEnd;                                    // 0x0C98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPickUpActor;                                      // 0x0CA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPutDownActor;                                     // 0x0CB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPutDownAllProp;                                   // 0x0CC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSwitchWeapon;                                           // 0x0CD8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEquipWeaponDel;                                         // 0x0CE8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUnequipWeaponDel;                                       // 0x0CF8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseInventoryItem;                                       // 0x0D08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeBattleOwnerDel;                                   // 0x0D18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDamageToOther;                                          // 0x0D28(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLocalCharacterHPChangeDel;                              // 0x0D38(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameStartCountDownDelegate;                             // 0x0D48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRank;                                                   // 0x0D58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameStartDelegate;                                      // 0x0D68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerNameChange;                                       // 0x0D78(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUseMainSlot;                                            // 0x0D88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBackpackMainSlot;                                       // 0x0D98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRemoveMainSlot;                                         // 0x0DA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRepPlayerState;                                         // 0x0DB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRepTeammateChange;                                      // 0x0DC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0DD8(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMapMarkChangeDelegate;                                  // 0x0DE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShowSkillPrompt;                                        // 0x0DF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartAutoSprintCountDown;                               // 0x0E00(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShowAutoSprintButton;                                   // 0x0E10(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterruptAutoSprintCountDown;                           // 0x0E20(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAutoSprintActive;                                       // 0x0E30(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTakeDamagedDelegate;                                    // 0x0E40(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLostConnection;                                         // 0x0E50(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReconnected;                                            // 0x0E60(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnExitGame;                                               // 0x0E70(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSpectatorChange;                                        // 0x0E80(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterRecoveryHealth;                                // 0x0E90(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    RunOnNextFrameDelegate;                                   // 0x0EA0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UNewbieGuideComponent*                       NewbieComponent;                                          // 0x0EB0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3DC];                                     // 0x0EB8(0x03DC) MISSED OFFSET
	bool                                               EnableAsyncLoading;                                       // 0x1294(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               EnableNetCullingDistOnVeryLowDevice;                      // 0x1295(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x1296(0x0002) MISSED OFFSET
	float                                              PC_CameraMoveRateX;                                       // 0x1298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PC_CameraMoveRateY;                                       // 0x129C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Mobile_CameraMoveRateX;                                   // 0x12A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mobile_CameraMoveRateY;                                   // 0x12A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CameraMoveSpeedUpAdditionalRateCurveBaseXMoveDis;         // 0x12A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CameraMoveSpeedUpAdditionalRateCurveBaseXMoveSpeed;       // 0x12B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseDisCurve;                                             // 0x12B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x12B9(0x0003) MISSED OFFSET
	struct FCommonCameraModeData                       NormalCameraModeData;                                     // 0x12BC(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FCommonCameraModeData                       NearCameraModeData;                                       // 0x12E0(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector2D                                   NearCameraModeCameraMoveAdditionalRate;                   // 0x1304(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   NearCameraModeCameraMoveMaxSpeed;                         // 0x130C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FAimCameraModeData                          AimCameraModeData;                                        // 0x1314(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FVector2D                                   AimCameraModeCameraMoveAdditionalRate;                    // 0x1338(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   AimCameraModeCameraMoveMaxSpeed;                          // 0x1340(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FCommonCameraModeData                       PlaneCameraModeData;                                      // 0x1348(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData15[0x4];                                       // 0x136C(0x0004) MISSED OFFSET
	TMap<TEnumAsByte<ESTEPoseState>, struct FCameraViewPitchLimitData> CameraViewPitchLimitDataMap;                              // 0x1370(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              MoveCameraMinDistanceThreshold;                           // 0x13C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveCameraMinTimeThreshold;                               // 0x13C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShouldShowPawnDetailInfoOnHUD;                            // 0x13C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EPlayerCameraMode>                     CurCameraMode;                                            // 0x13C9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x6];                                       // 0x13CA(0x0006) MISSED OFFSET
	struct FName                                       AutoScopeAimCompName;                                     // 0x13D0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoScopeAimTraceDistance;                                // 0x13D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bMoveable;                                                // 0x13DC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMoveablePickup;                                          // 0x13DD(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMoveableAirborne;                                        // 0x13DE(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMoveableLandHard;                                        // 0x13DF(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveableLandHardTime;                                     // 0x13E0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CanMoveCDTime;                                            // 0x13E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CanSprintCDTime;                                          // 0x13E8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SwitchPoseCDTime;                                         // 0x13EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MovealbeSwitchPoseTime;                                   // 0x13F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoSprintRequestCD;                                      // 0x13F4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bCanGetTouchInput;                                        // 0x13F8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x13F9(0x0003) MISSED OFFSET
	struct FVector                                     CurScreenMoveSpeed;                                       // 0x13FC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              Mobile_CameraMoveAdjustSensitiveValue;                    // 0x1408(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBattleOwner;                                           // 0x140C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutoAimEnabled;                                        // 0x140D(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x2];                                       // 0x140E(0x0002) MISSED OFFSET
	class ASTExtraBaseCharacter*                       STExtraBaseCharacter;                                     // 0x1410(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               CharacterTouchMove;                                       // 0x1418(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsDeadForLogout;                                          // 0x1419(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x6];                                       // 0x141A(0x0006) MISSED OFFSET
	struct FServerHitEnemyReplicatedData               ServerHitEnemyReplicatedData;                             // 0x1420(0x0010) (BlueprintVisible, BlueprintReadOnly, Net)
	bool                                               bDebugShowYawInput;                                       // 0x1430(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bDebugBallistics;                                         // 0x1431(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bInfinityAmmo;                                            // 0x1432(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x1];                                       // 0x1433(0x0001) MISSED OFFSET
	float                                              AccumulateYawInput;                                       // 0x1434(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LandAfterJumpPlaneDelayMoveTime;                          // 0x1438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLandAfterJumpPlane;                                      // 0x143C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLandingOnGround;                                       // 0x143D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsNeedCheckPullPercentage;                               // 0x143E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData21[0x1];                                       // 0x143F(0x0001) MISSED OFFSET
	float                                              NoRespondArea;                                            // 0x1440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ComfortableSwipeAddition;                                 // 0x1444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsLeftScreenUseComfortableSwipe;                         // 0x1448(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsRightScreenUseComfortableSwipe;                        // 0x1449(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EnmSprintOptType>                      sprintOptType;                                            // 0x144A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData22[0x1];                                       // 0x144B(0x0001) MISSED OFFSET
	float                                              JoystickSprintDisThreshold;                               // 0x144C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JoystickSprintDisThresholdNew;                            // 0x1450(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JoystickSprintBtnHeight;                                  // 0x1454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JoystickSprintAngleThreshold;                             // 0x1458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsUseDisOrSpeedMove;                                     // 0x145C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EJoystickOperatingMode>                JoystickOperatingMode;                                    // 0x145D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0x2];                                       // 0x145E(0x0002) MISSED OFFSET
	float                                              EasyGoStraightAngle;                                      // 0x1460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsTouching;                                              // 0x1464(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0x3];                                       // 0x1465(0x0003) MISSED OFFSET
	TMap<TEnumAsByte<ETouchIndex>, float>              TouchForceMap;                                            // 0x1468(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              TouchForceFireThreshold;                                  // 0x14B8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DoubleClickFireTimeThreshold;                             // 0x14BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DoubleClickFireDistanceThreshold;                         // 0x14C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DoubleClickCancelDistanceThreshold;                       // 0x14C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TouchForceWatchFrame;                                     // 0x14C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseTouchForce;                                           // 0x14CC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData25[0x3];                                       // 0x14CD(0x0003) MISSED OFFSET
	float                                              InputTouchRepeatLastTime;                                 // 0x14D0(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ETouchFireType>                        TouchFireType;                                            // 0x14D4(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x3];                                       // 0x14D5(0x0003) MISSED OFFSET
	float                                              TestForce;                                                // 0x14D8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x4];                                       // 0x14DC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    On3DTouchForceChange;                                     // 0x14E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDoubleClickCheck;                                       // 0x14F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsAutoAimOnlyInTouch;                                    // 0x1500(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAutoAimOnlyOnFire;                                     // 0x1501(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMoveInMiniMap;                                           // 0x1502(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoSprint;                                              // 0x1503(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoSprintBtnTime;                                        // 0x1504(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoSprintWaitingTime;                                    // 0x1508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AutoSprintThreshold;                                      // 0x150C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              JoystickTriggerSprintDuration;                            // 0x1510(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InHouseSpringArmLengthModifier;                           // 0x1514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InHouseSpringArmLengthModifierChangeSpeed;                // 0x1518(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsPlayerUnableToDoAutoSprintOperation;                    // 0x151C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x3];                                       // 0x151D(0x0003) MISSED OFFSET
	float                                              CurrentCameraFOV;                                         // 0x1520(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultCameraFOV;                                         // 0x1524(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFovChangeView;                                         // 0x1528(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData29[0x4];                                       // 0x152C(0x0004) MISSED OFFSET
	struct FWeaponSystemReconnectReplicateData         WeaponSystemReconnectReplicateData;                       // 0x1530(0x0030) (Net)
	int                                                GameTipMsgID;                                             // 0x1560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x4];                                       // 0x1564(0x0004) MISSED OFFSET
	struct FString                                     GameTipParam1;                                            // 0x1568(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FString                                     GameTipParam2;                                            // 0x1578(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData31[0x50];                                      // 0x1588(0x0050) MISSED OFFSET
	float                                              AutoSprintCD;                                             // 0x15D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData32[0x4];                                       // 0x15DC(0x0004) MISSED OFFSET
	TArray<struct FTeamMateStateInfo>                  TeamMateStates;                                           // 0x15E0(0x0010) (ZeroConstructor)
	TMap<TEnumAsByte<ETouchIndex>, struct FTeamMateStateInfo> DoubleClickLastTouchInfoMap;                              // 0x15F0(0x0050) (ZeroConstructor)
	TMap<TEnumAsByte<ETouchIndex>, struct FTeamMateStateInfo> DoubleClickCurTouchInfoMap;                               // 0x1640(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData33[0xE8];                                      // 0x1690(0x00E8) MISSED OFFSET
	class UCurveFloat*                                 CurveFPPCameraLerp;                                       // 0x1778(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCameraComponent*                            CurrentActiveCameraCache;                                 // 0x1780(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         CurrentActiveSpringArmCache;                              // 0x1788(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData34[0x8];                                       // 0x1790(0x0008) MISSED OFFSET
	class APlayerTombBox*                              DeadTombBox;                                              // 0x1798(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	float                                              RescueRemainingSeconds;                                   // 0x17A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RescueTotalSeconds;                                       // 0x17A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsCurrentSpectatorFreeView;                               // 0x17A8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData35[0x3];                                       // 0x17A9(0x0003) MISSED OFFSET
	float                                              FreeViewUpRate;                                           // 0x17AC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      MaxTouchMoveDelayFrame;                                   // 0x17B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData36[0x3];                                       // 0x17B1(0x0003) MISSED OFFSET
	int                                                MaxCacheInputSpeedNum;                                    // 0x17B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               DiedisableInput;                                          // 0x17B8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0xB7];                                      // 0x17B9(0x00B7) MISSED OFFSET
	class ASTExtraBaseCharacter*                       closedAimTarget;                                          // 0x1870(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData38[0x98];                                      // 0x1878(0x0098) MISSED OFFSET
	class UBackpackComponent*                          BackpackComponent;                                        // 0x1910(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UChatComponent*                              ChatComponent;                                            // 0x1918(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGuideComponent*                             GuideComponent;                                           // 0x1920(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                ObservedTeammateId;                                       // 0x1928(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData39[0x4];                                       // 0x192C(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       CurViewTeammate;                                          // 0x1930(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x20];                                      // 0x1938(0x0020) MISSED OFFSET
	TArray<struct FBattleItemData>                     ObservedItemList;                                         // 0x1958(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData41[0x8];                                       // 0x1968(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAboutToChangeViewTarget;                                // 0x1970(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFinishedChangeViewTarget;                               // 0x1980(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<struct FPlayerBaseInfoInOB>                 TotalPlayers;                                             // 0x1990(0x0010) (Net, ZeroConstructor)
	TArray<struct FPlayerInfoInOB>                     TotalPlayerList;                                          // 0x19A0(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FPlayerInfoInOB>                     NearPlayerList;                                           // 0x19B0(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FPlayerInfoInOB>                     SameTeamPlayerList;                                       // 0x19C0(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FObservedData                               ObservedData;                                             // 0x19D0(0x0028) (BlueprintVisible)
	unsigned char                                      UnknownData42[0x8];                                       // 0x19F8(0x0008) MISSED OFFSET
	TArray<struct FAirDropBoxInOb>                     AirDropBoxList;                                           // 0x1A00(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	unsigned char                                      UnknownData43[0x4];                                       // 0x1A10(0x0004) MISSED OFFSET
	int                                                FireMode;                                                 // 0x1A14(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNotMoveFire;                                             // 0x1A18(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAlreadyFired;                                            // 0x1A19(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               WallFeedBack;                                             // 0x1A1A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData44[0x5];                                       // 0x1A1B(0x0005) MISSED OFFSET
	TArray<class ASTExtraBaseCharacter*>               nowNearCharacterList;                                     // 0x1A20(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class ASTExtraVehicleBase*>                 nowNearVehicleList;                                       // 0x1A30(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData45[0x10];                                      // 0x1A40(0x0010) MISSED OFFSET
	TArray<class ASTExtraShootWeapon*>                 nowShotWeaponList;                                        // 0x1A50(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData46[0x10];                                      // 0x1A60(0x0010) MISSED OFFSET
	TArray<class AActor*>                              nowGrenadeList;                                           // 0x1A70(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bIsLastTwoCircle;                                         // 0x1A80(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData47[0x7];                                       // 0x1A81(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    triggerVoiceCheckDelegate;                                // 0x1A88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    triggerMoveVoiceCheckDelegate;                            // 0x1A98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    triggerShotVoiceCheckDelegate;                            // 0x1AA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    triggerVehicleVoiceCheckDelegate;                         // 0x1AB8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    triggerGlassVoiceCheckDelegate;                           // 0x1AC8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData48[0x1];                                       // 0x1AD8(0x0001) MISSED OFFSET
	bool                                               bCanJump;                                                 // 0x1AD9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData49[0x6];                                       // 0x1ADA(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerCanJump;                                          // 0x1AE0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerCannotJump;                                       // 0x1AF0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bCanOpenParachute;                                        // 0x1B00(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData50[0x7];                                       // 0x1B01(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerCanOpenParachute;                                 // 0x1B08(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerCannotOpenParachute;                              // 0x1B18(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bCanCloseParachute;                                       // 0x1B28(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData51[0x3];                                       // 0x1B29(0x0003) MISSED OFFSET
	float                                              PlaneFlyHeightFromGameMode;                               // 0x1B2C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              CanOpenParachuteHeight;                                   // 0x1B30(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              ForceOpenParachuteHeight;                                 // 0x1B34(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              CloseParachuteHeight;                                     // 0x1B38(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              RealTimePawnHeight;                                       // 0x1B3C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ForceJumpLocation;                                        // 0x1B40(0x000C) (IsPlainOldData)
	struct FRotator                                    OB_DestControlRotation;                                   // 0x1B4C(0x000C) (Net, IsPlainOldData)
	unsigned char                                      UnknownData52[0xC];                                       // 0x1B58(0x000C) MISSED OFFSET
	float                                              OB_RotationLagSpeed;                                      // 0x1B64(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FItemDefineID>                       SpawnAndBackpackWeaponReplicatedDataArray;                // 0x1B68(0x0010) (Net, ZeroConstructor)
	class AActor*                                      ThePlane;                                                 // 0x1B78(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class AActor*                                      OwnerPlane;                                               // 0x1B80(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      PlaneActor;                                               // 0x1B88(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData53[0x4];                                       // 0x1B90(0x0004) MISSED OFFSET
	float                                              GameAssistantJoyStickOpacity;                             // 0x1B94(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData54[0x20];                                      // 0x1B98(0x0020) MISSED OFFSET
	class UClass*                                      KillerTrackerTemplate;                                    // 0x1BB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData55[0x8];                                       // 0x1BC0(0x0008) MISSED OFFSET
	struct FString                                     murderName;                                               // 0x1BC8(0x0010) (ZeroConstructor)
	bool                                               MurderIsAI;                                               // 0x1BD8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData56[0x7];                                       // 0x1BD9(0x0007) MISSED OFFSET
	class UVehicleUserComponent*                       VehicleUserComp;                                          // 0x1BE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UInteractionComponent*                       MyInteractionComp;                                        // 0x1BE8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData57[0xC];                                       // 0x1BF0(0x000C) MISSED OFFSET
	float                                              InteractableAngle;                                        // 0x1BFC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FPPInteractableAngle;                                     // 0x1C00(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OceanSideDetectDistance;                                  // 0x1C04(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OceanSideDetectInterval;                                  // 0x1C08(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CurrOBAirDropID;                                          // 0x1C0C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TMap<TEnumAsByte<ETouchIndex>, struct FString>     EndTouchScreenCommandMap;                                 // 0x1C10(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData58[0x13C];                                     // 0x1C60(0x013C) MISSED OFFSET
	float                                              CPPNavigatorTickRate;                                     // 0x1D9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                DisplayCharRotation;                                      // 0x1DA0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData59[0x4];                                       // 0x1DA4(0x0004) MISSED OFFSET
	float                                              MaxValidPing;                                             // 0x1DA8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData60[0x4];                                       // 0x1DAC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerController");
		return ptr;
	}


	void VisualizeItem();
	void ViewVehicle(float YawAdd, float PitchAdd, const struct FVector& Loc);
	void ViewPlane();
	void VersionCheck();
	void UpdatePoseState(TEnumAsByte<ESTEPoseState> PoseType);
	void UnreliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void UnreliablePing(int SeqID, int64_t DateTimeTick);
	void UnLoadAllCollision(bool Unload);
	void TouchMove(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void ToggleVehicleSync(bool Val);
	void ToggleUserCmdDeltaSendAck(bool Val);
	void ToggleUserCmdDeltaFlag(bool Val);
	void ToggleUserCmdDeltaCheckSum(bool Val);
	void ToggleUserCmdDelta(bool Val);
	void ToggleServerAcknowledgePossession(bool Val);
	void ToggleInventoryEx();
	void ToggleCheatLocation(bool Val);
	void TeamNoAlwaysRelevant();
	void TeamMateStateChanged(class ASTExtraPlayerState* STPlayerState, const struct FVector_NetQuantize100& Location, uint32_t View, unsigned char Roll, float Health, int VoiceID);
	void SwitchViewTarget();
	void SwitchToDeadBox();
	void SwitchPoseStateServer(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchPoseStateFailedResponse(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchPoseStateClient(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchCameraModeScope(TEnumAsByte<EPlayerCameraMode> Mode, class ASTExtraBaseCharacter* InCharacter);
	void SwitchCameraModeByOrder();
	void SwitchCameraMode(TEnumAsByte<EPlayerCameraMode> Mode, class ASTExtraBaseCharacter* InCharacter, bool IsUseLerpFPP);
	void SwapWeaponByPropSlotOnServer(ESurviveWeaponPropSlot Slot1, ESurviveWeaponPropSlot Slot2, bool bForce);
	void StartReadyCountDown();
	void StartOnePlane();
	void StartLandOnGroundAfterJumpPlane();
	void StartGame();
	void StartFreeCamera(TEnumAsByte<ETouchIndex> FigerIndex);
	void StartAirDropSpecified(float X, float Y);
	void StartAirDropCurrent();
	void StartAirDrop(int Index);
	void StartAirAttackSpecified(float X, float Y, float Radius);
	void StartAirAttack(int Index);
	void SpectatorCameraChange_Broadcast(bool bDie);
	void SpawnVehicleWithPath(const struct FString& Path);
	void SpawnVehicle();
	void SpawnObject(const struct FString& Path, float OffsetForward, float OffsetHeight);
	void SpawnAI(int Num);
	void SoftReconnectRecoverData(class AUAEPlayerController* PC);
	void ShowVaultEnable();
	void ShowPoints(TArray<struct FVector> Points);
	void ShowMovePath(TArray<struct FVector> Path);
	void ShowHealth();
	void ShowFireBtn(bool bShow);
	void ShowEmoteWheel();
	void ShowBulletShoot(const struct FVector& StartLoc, const struct FRotator& Rot);
	void ShowAllRoles();
	bool ShouldForceFPPView();
	void SetVirtualStickVisibility(bool bJSVisiable);
	void SetVirtualStickAutoSprintStatus(bool bVirtualstickAutoSprint);
	void SetTimeSpeedFactor(float Val);
	void SetTimeSpeedCheck(bool Val);
	void SetTimeSpeed(float Rate);
	void SetSpeed(float Modifier);
	void SetScopeFingerIndex(bool TouchBegin, TEnumAsByte<ETouchIndex> FingerIndex);
	void SetPlayerMark(const struct FVector& Loc);
	void SetPeekFingerIndex(bool TouchBegin, TEnumAsByte<ETouchIndex> FingerIndex, bool AutoCancelPeek);
	void SetParachuteDebugEnable(bool Val);
	void SetMaxHealth(float HP);
	void SetJoyStickScale(float JSScale);
	void SetJoystickOperatingMode(TEnumAsByte<EJoystickOperatingMode> OperatingMode, float GoStraightAngle);
	void SetJoyStickOpacity(float JSOpacity);
	void SetJoyStickInteractionSize(const struct FVector2D& JSInteractionSize);
	void SetJoyStickCenter(const struct FVector2D& JSCenter);
	void SetInvincible(bool Val);
	void SetInfinityAmmo(bool Val);
	void SetHPFull();
	void SetGameStateReconnectInfoToClient(const struct FReConnectGameStateInfo& ReConnectInfo);
	void SetForceRotation(bool Val);
	void SetEnableVoiceByPlayerKey(class ASTExtraPlayerState* State, bool Enable);
	void SetDefaultCameraFOV(float FOV);
	void SetDebugBallistics(bool Val);
	void SetCurrentCameraFOV_Server(float FOV, TEnumAsByte<EPlayerCameraMode> Mode);
	void SetControlRotation(const struct FRotator& NewRotation);
	void SetCirCenterFixed(bool Enable, float X, float Y);
	void SetAirDropEnable(bool Enable);
	void SetAirAttackEnable(bool Enable);
	void ServerUseItem(const struct FItemDefineID& DefineID, const struct FBattleItemUseTarget& Target, EBattleItemUseReason Reason);
	void ServerUnLoadAllCollision(bool Unload);
	void ServerTriggerSelectGrenade(int GrenadeID);
	void ServerTriggerCharacterEntryEvent(EUTSkillEntry EntryEvent);
	void ServerTriggerCharacterCustomEvent(TEnumAsByte<EUAESkillEvent> SkillEvent);
	void ServerSystemInfo(const struct FString& OsLanguage, const struct FString& GameLanguage, const struct FString& OsVersion, const struct FString& CpuName, const struct FString& GpuName, uint32_t RamInGB, const struct FString& BaseBoardModelName, const struct FString& BaseBoardSerial, TArray<struct FString> DiskModelNames, TArray<struct FString> DiskSerials, TArray<struct FString> MemoryModelNames, TArray<struct FString> MemorySerials, int ArpIpCount, TArray<struct FString> GatewayMacAddress, const struct FString& OsUserAccount, TArray<struct FString> MonitorModelNames, TArray<struct FString> MonitorSerials, bool bIsXenuineRunning, TArray<int> GraphicSettings);
	void ServerStopFire(class ASTExtraBaseCharacter* TargetCharacter, class ASTExtraShootWeapon* TargetWeapon, uint32_t CurClipID, int CurrentBullet);
	void ServerStat(TEnumAsByte<EServerStatType> StatType, const struct FString& Password);
	void ServerStartPreBarrel(class ASTExtraBaseCharacter* TargetCharacter, float HandledTime);
	void ServerStartOnPlaneSurvive(float P_PlaneFlyHeight, float P_PlaneStartDistance, float P_PlaneFlySpeed, float P_HaveToJumpDistance, const struct FVector& P_MapCenterLoc, const struct FVector& P_PlaneStartLoc, float P_PlaneStartYaw);
	void ServerStartFire(class ASTExtraBaseCharacter* TargetCharacter, class ASTExtraShootWeapon* TargetWeapon, uint32_t CurShootID, uint32_t CurClipID, int CurBulletNumInClip, TEnumAsByte<EShootWeaponShootMode> ShootMode);
	void ServerStartBarrel(class ASTExtraBaseCharacter* TargetCharacter);
	void ServerSetReloadMethod(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<EWeaponReloadMethod> reloadMethod);
	void ServerSetFreeCamera(const struct FRotator& InRotation);
	void ServerSetFireMode(class ASTExtraBaseCharacter* TargetCharacter, EGunFireMode NewFireMode);
	void ServerSetControlRotationOnVehicle(const struct FRotator& InRotation);
	void ServerSetControlRotation(const struct FRotator& NewRotation);
	void ServerSetClientFps(float Fps, int MinFps, int MaxFps, int UnderFps10, int UnderFps20, int UnderFps30, int UnderFps60);
	void ServerReplicateExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	void ServerOpenParachute();
	void ServerOnMsg(const struct FString& Msg);
	void ServerObserveCharacter(uint32_t InPlayerKey);
	void ServerObserveAirDropBox(int boxId);
	void ServerNotifyAutoFollowStatus(bool IsStartFollow, class ASTExtraBaseCharacter* Target);
	void ServerLeaveMatchIntentionally();
	void ServerJumpFromPlane();
	void ServerHearSound(int AkEventID, const struct FVector& AkLocation);
	void ServerHandleHitDataArray(class ASTExtraShootWeapon* TargetWeapon, TArray<struct FBulletHitInfoUploadData> DataArray, int ShootTimes, TArray<struct FLocalShootHitData> ShootHitData);
	void ServerFight();
	void ServerExitFreeCamera();
	void ServerDropItem(const struct FItemDefineID& DefineID, int Count, EBattleItemDropReason Reason);
	void ServerDisuseItem(const struct FItemDefineID& DefineID, EBattleItemDisuseReason Reason);
	void ServerCMD_RPC(const struct FString& Cmd);
	void ServerCMD(const struct FString& Cmd);
	void SendSystemMessage(ESystemMessageType MessageType, const struct FText& Message, float MessageDuration);
	void SendStringMsg(const struct FString& Message, int msgID);
	void SendResetCameraInResult();
	void SendMatchResult();
	void SendEndTouchScreenUICommand(struct FString* UIMsg);
	void S2C_ResponseSkillPrompt(bool bShow, float RemainingTime, const struct FString& PromptText, float TotalTime);
	void S2C_HelpOther(class ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
	void S2C_BeHelpedByOther(class ACharacter* ByWho, bool IsTurnInfo, float RemainingRescueTime);
	void RunOnNextFrameEvent();
	void RunOnNextFrame__DelegateSignature();
	void RPC_Server_ShootSpecialBullet(const struct FTransform& LaunchTrans, class ASTExtraShootWeapon* TargetWeapon);
	void RPC_Server_NotifyBreakWindow(class AUAEHouseActor* OwnerTarget, const struct FUAEWindowRepData& Window);
	void RPC_Server_NorifyServerClientHasFinishReconnectedWeaponSystem();
	void RPC_Server_NorifyServerClientHasFinishedHandleSpawnWeapon();
	void RPC_Server_ClientHasReactivated();
	void RPC_Server_ClientHasFinishedRecoverWeapon(class ASTExtraWeapon* Weapon, const struct FWeaponReconnectReplicateData& RecoverData);
	void RPC_OwnerClient_SwapWeaponByPropSlot(ESurviveWeaponPropSlot Slot1, ESurviveWeaponPropSlot Slot2, bool bForce);
	void RPC_OwnerClient_SetMurderInfo(const struct FString& murderName, bool IsAI);
	void RPC_OwnerClient_PlayerEnableAttrModifier(bool bEnable, const struct FAttrModifyItem& ItemData);
	void RPC_OwnerClient_PlayerConsumeItem(const struct FItemDefineID& ID, int Count);
	void RPC_OwnerClient_PlayerAddHealth(float AddVal, TEnumAsByte<ERecoveryReasonType> Reason);
	void RPC_OwnerClient_PlayerAddEnergy(float AddVal, TEnumAsByte<ERecoveryReasonType> Reason);
	void RPC_OwnerClient_NotifyClientEquipWeaponAttachment(ESurviveWeaponPropSlot WeaponPropSlot, const struct FItemDefineID& DefineID, bool bEquip);
	void RPC_OwnerClient_HandleAIShootBulletHit(const struct FVector& BulletStart, const struct FVector& BulletEnd);
	void RPC_OwnerClient_ClientPlayItemOperationSound(const struct FString& BankName, const struct FString& SoundName, class AActor* TargetActor);
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, const struct FName& CauserName);
	void RPC_Client_DestroyWeapon(const struct FName& LogicSocket, const struct FItemDefineID& ID, bool bEnableBroadcast);
	void RPC_Client_ClientDisplayScoreChangeTips(const struct FWarPlayerStateScore& ScoreStruct);
	void RPC_Client_CircleRun(int Index, int TotalNum);
	float RetriveMobileContentScaleFactor();
	void RestoreDefaultInteractionSize(int JSIndex);
	void RespawnRecoverData(class AUAEPlayerController* PC);
	void ResetMissingUIUpdate();
	void RequireNetCullingDistanceByDevice();
	void RequestPlayerNewbieInfo();
	void ReqSwitchPersonPerspective(bool IsNewFPP);
	void RemoveTouchMoveFinger(TEnumAsByte<ETouchIndex> FingerIndex);
	void RemoveAllDoors();
	void ReliablePong(int SeqID, int64_t DateTimeTickFromServer);
	void ReliablePing(int SeqID, int64_t DateTimeTick);
	void RefreshTopMostUIPanel(TEnumAsByte<ETopMostUIPanelType> Type);
	void ReceiveClientRestart();
	void ReceiveBackpackComponent();
	void PrintStringToScreen(const struct FString& inString, const struct FLinearColor& TextColor, float Duration);
	void PrintMovementLog(int PrintLog);
	void PressGrenade(bool isThrow);
	void PressFire(int FingerIndex);
	void PlaneJumpAll();
	void OpenParachute();
	void OnWeaponEquipAttachment(ESurviveWeaponPropSlot WeaponPropSlot, const struct FItemDefineID& DefineID, bool bEquip);
	void OnWallFeedBack(bool _WallFeedBack);
	void OnViewTargetDetachedFromVehicle();
	void OnViewTargetChangeVehicleSeat();
	void OnViewTargetAttachedToVehicle(class ASTExtraVehicleBase* InVehicle);
	void OnUseMainSlot__DelegateSignature(ESurviveWeaponPropSlot Slot);
	void OnUseInventoryItemDelegate__DelegateSignature();
	void OnUnequipWeaponDelegate__DelegateSignature();
	void OnTeammateHPChangeDelegate__DelegateSignature();
	void OnTakeDamaged__DelegateSignature(float DamageAngel);
	void OnSwitchWeaponDelegate__DelegateSignature();
	void OnSwitchCameraModeStartDelegate__DelegateSignature(TEnumAsByte<EPlayerCameraMode> CameraMode);
	void OnSwitchCameraModeEndDelegate__DelegateSignature(TEnumAsByte<EPlayerCameraMode> CameraMode);
	void OnStopFireDelegate__DelegateSignature();
	void OnStartFireDelegate__DelegateSignature();
	void OnStartAutoSprintCountDown__DelegateSignature();
	void OnSpectatorChange__DelegateSignature();
	void OnSpectatorCameraChange(bool bDie);
	void OnShowSkillPromptDelegate__DelegateSignature(bool IsShowPrompt, float LastTime, const struct FString& PromptText, float TotalTime);
	void OnShowAutoSprintButton__DelegateSignature(bool visible, const struct FVector2D& showPos, bool IsInside);
	void OnRepTeammateChange__DelegateSignature();
	void OnRepPlayerState__DelegateSignature();
	void OnRepNotify_SetBattleOwner();
	void OnRepNotify_ServerHitEnemyReplicatedData();
	void OnRep_WeaponSystemReconnectReplicateData();
	void OnRep_STExtraBaseCharacter();
	void OnRep_SpawnAndBackpackWeaponReplicatedDataArray();
	void OnRep_RefreshTotalPlayers();
	void OnRep_RefreshAirDropBox();
	void OnRep_PlayerControllerState();
	void OnRep_Plane();
	void OnRep_ObservedTeammateId();
	void OnRep_ObservedItemList();
	void OnRep_IsObserver();
	void OnRep_DeadTombBox();
	void OnRep_CurViewTeammate();
	void OnRep_CanOpenParachute();
	void OnRep_BackpackComponent();
	void OnRemoveMainSlot__DelegateSignature(ESurviveWeaponPropSlot Slot);
	void OnReleaseFireBtnDelegate__DelegateSignature();
	void OnReconnected__DelegateSignature();
	void OnRank__DelegateSignature(int Kills, int Rank);
	void OnPlayerUseRecoverItem();
	void OnPlayerStateChanged();
	void OnPlayerReConnected(int LostPlayerKey);
	void OnPlayerPutDownAllPropDelegate__DelegateSignature();
	void OnPlayerPutDownActorDelegate__DelegateSignature(class ASTExtraBaseCharacter* TargetPlayer, class AActor* TargetActor);
	void OnPlayerPickUpActorDelegate__DelegateSignature(TEnumAsByte<ESurvivePickUpGlobalCategory> SurvivePickUpGlobalCategory, int ID);
	void OnPlayerNameChange__DelegateSignature(const struct FString& changedplayername);
	void OnPlayerLostConnection(int LostPlayerKey);
	void OnPlayerHitFireBtn(bool bIsRightBtn);
	void OnPlayerClickDriveBtn();
	void OnPlayerCanGetInVehicle(bool CanGetInVehicle);
	void OnPickUpExpand();
	void OnPickUpCollapsed(bool isCollapsed);
	void OnObserverLevelLoaded();
	void OnObservedUsingWeaponChanged();
	void OnObservedItemsChanged();
	void OnObservedBulletNumChanged();
	void OnMapMarkChangeDelegate__DelegateSignature(int TeamMateSerialNumber);
	void OnLostConnection__DelegateSignature();
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
	void OnLandOnGroundAfterJumpPlaneEnd();
	void OnItemOperation(const struct FItemDefineID& DefineID, EBattleItemOperationType operationType, unsigned char Reason);
	void OnInterruptAutoSprintCountDown__DelegateSignature();
	void OnGameStartDelegate__DelegateSignature();
	void OnGameStartCountDownDelegate__DelegateSignature(float CountDownTime);
	void OnExitGame__DelegateSignature();
	void OnExecuteExitCommand();
	void OnEquipWeaponDelegate__DelegateSignature();
	void OnDoubleClickCheckDelegate__DelegateSignature(TEnumAsByte<ETouchIndex> FingerIndex);
	void OnDeadBoxExpand();
	void OnDeadBoxCollapsed(bool isCollpased);
	void OnDamageToOtherDelegate__DelegateSignature(float damageToOther);
	void OnControllerStateChange(const struct FName& LastestState);
	void OnCharacterVehicleCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraVehicleBase* nowVehicle, const struct FVector& posVector, float showTime);
	void OnCharacterShotCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraShootWeapon* nowWeapon, const struct FVector& posVector, float showTime, bool isslience);
	void OnCharacterRecoveryHealthEvent();
	void OnCharacterRecoveryHealth__DelegateSignature();
	void OnCharacterNearDeathOrRescueingOtherNotifyDelegate__DelegateSignature(bool IsNearDeath, bool IsRescueingOther);
	void OnCharacterMoveCheckVoiceTriggerDelegate__DelegateSignature(class ASTExtraBaseCharacter* nowCharacter, const struct FVector& posVector, float showTime);
	void OnCharacterGlassCheckVoiceTriggerDelegate__DelegateSignature(const struct FVector& posVector, float showTime);
	void OnCharacterCheckVoiceTriggerDelegate__DelegateSignature(class AActor* nowActor, float checkDis);
	void OnCharacterBreathChangeDelegate__DelegateSignature(float currentBR, float ratioBR, class ACharacter* OwnerCharacter, int HealthStatus);
	void OnChangeBattleOwnerDelegate__DelegateSignature();
	void OnBackpackMainSlot__DelegateSignature(ESurviveWeaponPropSlot Slot);
	void OnAutoSprintActive__DelegateSignature();
	void On3DTouchForceChangeDelegate__DelegateSignature();
	void ObserveCharacter(const struct FString& InPlayerName);
	void ObserveAirDropBox(int boxId);
	void NotifyInOutPickUpActorWrapperBP(bool bIsIn);
	void MoveUp(float Rate);
	void MoveToAI();
	void MoveTo(float X, float Y, float Z);
	void ModifyTouchIndex(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void MemberVoice(int member, int status);
	void MakeTestCrash();
	void LocalTeamNoAlwaysRelevant();
	void LocalStartReadyCountDown();
	void LocalStartAirDropSpecified(float X, float Y);
	void LocalStartAirDrop(int Index);
	void LocalStartAirAttackSpecified(float X, float Y, float Radius);
	void LocalStartAirAttack(int Index);
	void LocalSpawnVehicle(const struct FString& Path);
	void LocalSpawnAI(int Num);
	void LocalSetSpeed(float Modifier);
	void LocalSetMaxHealth(float HP);
	void LocalSetAirDropEnable(bool Enable);
	void LocalSetAirAttackEnable(bool Enable);
	void LocalRemoveAllDoors();
	void LocalMoveTo(float X, float Y, float Z);
	void LocalKillSomeOne(const struct FString& InPlayerName);
	void LocalKillAll();
	void LocalGotoFlying();
	void LocalGetGameStateReconnectInfo();
	void LocalGameModeGotoNextState();
	void LocalGameModeGotoFightingState();
	void LocalAddItem(int ID, int Count);
	void LoadAllLand(bool bLoadAll);
	void LerpFPPCamera();
	void KillSomeOne(const struct FString& InPlayerName);
	void KillSelf();
	void KillAll();
	void JumpWorld(float X, float Y);
	void JumpFromPlane();
	void JoystickTriggerSprint(bool bIsSprint);
	bool IsViewTarget(class AActor* pActor);
	bool IsUse3DTouch();
	bool IsSameTeam(class APawn* Other);
	bool IsRescueing();
	bool IsMoveable();
	bool IsLastBreathOrRescueingOther();
	bool IsInPlane();
	bool IsInParachute();
	bool IsInFreeCameraView();
	bool IsInDeathReplay();
	bool IsAllowActorTouchMove();
	bool IsAGMPlayer();
	void InsertGrenadeIDToName(int GrenadeID, const struct FName& Name);
	void InsertGrenadeIDInOrder(int GrenadeID);
	void InitNewbieComponent(TArray<int> FinishedGuide, TArray<int> FinishedCounts, int PlayerLevel, int PlayerExperienceType);
	void InitJoyStickAfterActivation();
	void HideEmoteWheel();
	void HandleLandOnGroundEnd();
	void HandleClipboard();
	void HandleClientHasReactivated();
	void HandleCameraModeChanged(TEnumAsByte<EPlayerCameraMode> NewMode, class ASTExtraBaseCharacter* InCharacter);
	int GotoSpectating(int TeammatePlayerid);
	void GotoFlying();
	void GMTeleport(const struct FName& Teleporter);
	void GMServerTeleport(const struct FName& Teleporter);
	int GetWriteCircleDistance();
	float GetViewPortDPIScale();
	bool GetUseMotionControlLog();
	bool GetUseMotionControlEnable();
	float GetTouchForce(TEnumAsByte<ETouchIndex> FingerIndex);
	class AActor* GetThePlane();
	class USpringArmComponent* GetTargetedSpringArm();
	int GetStatTriangles();
	struct FString GetStatMemory();
	int GetStatDrawCalls();
	struct FRotator GetSensibilityRate(bool bIsMotionControl);
	class ASTExtraBaseCharacter* GetPlayerCharacterSafety();
	struct FVector GetNewestAirDropBoxPos();
	TArray<struct FPlayerInfoInOB> GetNearPlayerList();
	struct FString GetMurderName();
	bool GetMurderIsAI();
	TArray<struct FBattleItemData> GetMultiItemFromItemList(TArray<int> ItemSpecifiedID);
	TEnumAsByte<ETouchIndex> GetMaxTouchForceFinger();
	void GetKeysForAction(const struct FName& ActionName, TArray<struct FInputActionKeyMapping>* Bindings);
	struct FVector2D GetJoyStickVisualSize();
	struct FVector2D GetJoyStickCenter();
	void GetGameStateReconnectInfoOnServer();
	void GetGameScreenSize();
	int GetFriendDistance();
	struct FVector GetFocalLocation();
	struct FString STATIC_GetCurrentBuildVersion();
	class ASTExtraPlayerState* GetCurPlayerState();
	int GetCurPlayerId();
	struct FVector GetCurPawnLocation();
	class APawn* GetCurPawn();
	float GetCurFPS();
	struct FRotator GetControlLookRotation();
	struct FVector GetControlLookPoint(int LineTraceRange, bool* HitTaget);
	class UChatComponent* GetChatComponent();
	class UBackpackComponent* GetBackpackComponent();
	class AActor* GetAirplaneActor();
	TArray<struct FSearchedTombBoxAndWrapperListResult> GenerateAirDropData(int boxId);
	void GameModeGotoNextState();
	void GameModeGotoFightingState();
	void FreeCameraTouchMove(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void ForceReleaseCurTouchMoveFinger();
	void FireTakeDamagedEvent(const struct FVector& CauserLocation);
	void Fight();
	void ExitFreeCamera(bool IsForceReset);
	void EndTouchScreen(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void EnablePlayerInHouse(bool bIsIn);
	void EnableMyLandscapeDraw();
	void EmoteWheelCalledWithNumberSelected(int Index);
	void DoUITouchMove(const struct FVector& Loc);
	void DoubleClickCancel(TEnumAsByte<ETouchIndex> FingerIndex);
	void DoTouchMove(float Yaw, float Pitch);
	void DisplayGameTipWithMsgIDAndString(int ID, const struct FString& param1, const struct FString& param2);
	void DisplayGameTipWithMsgID(int ID);
	void DisplayGameTipForLowFPSWarning(int ID, const struct FString& param1, const struct FString& param2);
	void DispatchPlayerRespawnedEvent(class AUAEPlayerController* PlayerController);
	void DispatchPlayerReconnectedEvent();
	void DispatchPlayerLostEvent();
	void DispatchPlayerExitEvent();
	void DispatchPlayerAboutToRespawnEvent(class AUAEPlayerController* PlayerController);
	void DisableMyLandscapeDraw();
	void DelayForceExitFreeCamera();
	void DebugSetUIVisibility(bool bUIVisibility);
	void DealGetAllNearShotWeapon(float disRate);
	void DealGetAllNearMoveVehicle(float checkDis, float minSpeed);
	void DealGetAllNearMoveCharacter(float checkDis);
	void CloseKickPlayerWarningPopup(EPopupButtonID ButtonID);
	void ClientWasWarnedTobeKickedTP(const struct FText& KickReason);
	void ClientWasKickedToLobbyTP(const struct FText& KickReason);
	void ClientWasKickedAndExitTP(const struct FText& KickReason);
	void ClientStartOnlineGame();
	void ClientSendRoundEndEvent(bool bIsWinner, int ExpendedTimeInSeconds);
	void ClientOnMsg(const struct FString& Msg);
	void ClientOnHurt();
	void ClientOnDamageToOther(float _DamageToOther);
	void ClientObserveCharacter(uint32_t InPlayerKey, bool IsOnPlane);
	void ClientInitIngameUIAfterRespawn();
	void ClientHearSound(int AkEventID, const struct FVector& AkLocation);
	void ClientGameStarted();
	void ClientEnterViewBox(int boxId);
	void ClientEndOnlineGame();
	void ClientDisplayGameTipWithMsgID(int ID);
	struct FVector2D ClampFreeCamIconOffset(const struct FGeometry& MyGeometry);
	void ChangeSpectatorStateToFreeView();
	bool CanTarget();
	void CanSeeAllUI(bool bUIVisibility);
	void CallTeamMateStateChanged(class ASTExtraPlayerState* STPlayerState, const struct FVector& Location, const struct FRotator& Rotation, float Health, int VoiceID);
	void CallShowTouchInterface(bool InShow);
	void CalInputFromRotaionRate(const struct FVector& CurMotionData, float PitchReverce, float MotionTouchRate_Pitch, float MotionTouchAimRate_Pitch, float MotionRate_Pitch, float MotionAimRate_Pitch, float MotionTouchRate_Yaw, float MotionTouchAimRate_Yaw, float MotionRate_Yaw, float MotionAimRate_Yaw, float MotionRate_Pitch_Threshold, float MotionRate_Yaw_Threshold, float Left, float Right, bool bLandScapeOrientation, float* OutPitch, float* OutYaw, bool* bIsAddPitch, bool* bIsAddYaw);
	struct FVector2D CalcAttactBtnPos(float locX, float locY, float SizeX, float SizeY);
	void C2S_RequestSkillPrompt();
	void C2S_RequestBeingRescuedRemainingTime();
	void BroadcastFatalDamageToClient(const struct FString& CauserName, const struct FString& VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int Relationship, int PreviousHealthStatus, const struct FString& realKillerName, int realKillerNewKillNum);
	void BroadcastClientsSpawnExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	bool BPGetIsAndroidSimulator();
	void BP_OceanSideDetected(const struct FVector& OceansideLocation, bool bDetectedRiver);
	void BeginTouchScreen(const struct FVector& Loc, TEnumAsByte<ETouchIndex> FingerIndex);
	void BackToGameDataRefresh();
	bool AutoSelectViewTarget();
	void AddTouchMoveFinger(TEnumAsByte<ETouchIndex> FingerIndex, unsigned char Priority, const struct FVector& TouchLoc);
	void AddItem(int ID, int Count);
	void AddEmote(int ID);
	void AddAvatar(int AvatarID);
	void ActivateTouchInterface(class UTouchInterface* NewTouchInterface);
};


// Class ShadowTrackerExtra.GMCheatManager
// 0x0000 (0x0078 - 0x0078)
class UGMCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GMCheatManager");
		return ptr;
	}


	void ToggleShootVertify();
	void TogglePawnInfo();
	void TestWeaponAttachment(bool bEquip);
	void TestLineTrace(float X, float Y, float Z);
	void TestGameplayDataRecord(int UID, int RecordType);
	void TeleportTo(float X, float Y, float Z);
	void StartMainTriggerClock();
	void SpawnLevelDirector();
	void SpawnFakePlayer(int Num);
	void SpawnBotForTest(int Num);
	void SetViewFPP(bool IsFPP);
	void SetTouchMoveLog(bool Enable);
	void SetTouchMoveDelay(int DelayFrame);
	void SetRateScore(float RankScore);
	void SetGVMemberID(int memberID);
	void SetDeliver();
	void SetCameraLagEnable(bool Enable);
	void SetCacheInputNum(int CacheNum);
	void SetAnimEnable(bool Enable);
	void PrintWeaponAllState();
	void PrintMainCharAllAvatar();
	void PrintAllAnim();
	void PauseAnim(bool bPause);
	void GotoSpectating();
	void GMSuicide();
	void GMSpeedUp();
	void GMSetSpeed(float WalkSpeed);
	void GMSetJoystickEightDirection(bool IsNeedEightDirection);
	void GMSetJoystickActivatedRange(bool IsNeedActivatedRange, float ActivatedRange);
	void GMSetHealth(float Val);
	void GMSetCircleTime(float CDTime, float LastTime);
	void GMIOSFrameRateLock(int FrameRateLock);
	void GMInvincible(bool IsInvincible);
	void GMFollow(const struct FString& TargetName);
	void GMDecreaseHealth();
	void GetGVMemberID(int memberID);
	void ForceGC();
	void ForceEndInputForAppWillDeactivate();
	void FallKill(int Type);
	void DebugStopCapture();
	void AutoSetPlayerLocation(bool bEnable);
	void AddScore(int Score);
};


// Class ShadowTrackerExtra.GrenadePredictLine
// 0x00D8 (0x0440 - 0x0368)
class AGrenadePredictLine : public AActor
{
public:
	struct FVector                                     HighThrowOffset;                                          // 0x0368(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     LowThrowOffset;                                           // 0x0374(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	TEnumAsByte<EThrowGrenadeMode>                     ThrowMode;                                                // 0x0380(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0381(0x0003) MISSED OFFSET
	float                                              PredictLineVelocityScale;                                 // 0x0384(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxSimTime;                                               // 0x0388(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x038C(0x0004) MISSED OFFSET
	struct FGrenadePredictResult                       GrenadePredictResult;                                     // 0x0390(0x0030) (BlueprintVisible, BlueprintReadOnly)
	float                                              GrenadeRadius;                                            // 0x03C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PredictLineStartLocation;                                 // 0x03C4(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     PredictLineStartVelocity;                                 // 0x03D0(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData02[0x64];                                      // 0x03DC(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GrenadePredictLine");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GroundFlagWidget
// 0x0060 (0x0310 - 0x02B0)
class UGroundFlagWidget : public UUAEUserWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x02B0(0x0010) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x02C0(0x0010) (Edit, IsPlainOldData)
	struct FVector2D                                   UIOffset;                                                 // 0x02D0(0x0008) (Edit, IsPlainOldData)
	TArray<float>                                      flagDuration;                                             // 0x02D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	int                                                rightPlus;                                                // 0x02E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              opacityFactor;                                            // 0x02EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x02F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TeammateDistText;                                         // 0x02F8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0300(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0308(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GroundFlagWidget");
		return ptr;
	}


	void SetWorldPos(const struct FVector& Loc);
};


// Class ShadowTrackerExtra.STNewbieGuideSuccessListenerBase
// 0x0010 (0x0038 - 0x0028)
class USTNewbieGuideSuccessListenerBase : public UObject
{
public:
	TWeakObjectPtr<class AController>                  OwnerController;                                          // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DelayTime;                                                // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STNewbieGuideSuccessListenerBase");
		return ptr;
	}


	bool ReconnectRecover();
	bool GuideFinishedByPlayer();
	bool EnableListener();
	bool DisableListener();
};


// Class ShadowTrackerExtra.GSListener_FireBtnHitted
// 0x0008 (0x0040 - 0x0038)
class UGSListener_FireBtnHitted : public USTNewbieGuideSuccessListenerBase
{
public:
	bool                                               bIsListenRightFire;                                       // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_FireBtnHitted");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_GunReload
// 0x0000 (0x0038 - 0x0038)
class UGSListener_GunReload : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_GunReload");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_IsInControllerState
// 0x0008 (0x0040 - 0x0038)
class UGSListener_IsInControllerState : public USTNewbieGuideSuccessListenerBase
{
public:
	struct FName                                       CheckControllerState;                                     // 0x0038(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_IsInControllerState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_JoystickActive
// 0x0018 (0x0050 - 0x0038)
class UGSListener_JoystickActive : public USTNewbieGuideSuccessListenerBase
{
public:
	bool                                               CheckX;                                                   // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              XValueThreshold;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               CheckY;                                                   // 0x0040(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              YValueThreshold;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_JoystickActive");
		return ptr;
	}


	void ReceiveJoystickInput(const struct FVector2D& JSInput, const struct FVector2D& Size);
};


// Class ShadowTrackerExtra.GSListener_PickUpExpand
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PickUpExpand : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PickUpExpand");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerClickDriveBtn
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerClickDriveBtn : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerClickDriveBtn");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerEnterSafeZone
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerEnterSafeZone : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerEnterSafeZone");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerExpandDeadBox
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerExpandDeadBox : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerExpandDeadBox");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerLeaveKillZone
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerLeaveKillZone : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerLeaveKillZone");
		return ptr;
	}

};


// Class ShadowTrackerExtra.GSListener_PlayerUseRecoverItem
// 0x0000 (0x0038 - 0x0038)
class UGSListener_PlayerUseRecoverItem : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_PlayerUseRecoverItem");
		return ptr;
	}


	void OnPlayerUseRecoverItem();
};


// Class ShadowTrackerExtra.GSListener_ShakeCamera
// 0x0000 (0x0038 - 0x0038)
class UGSListener_ShakeCamera : public USTNewbieGuideSuccessListenerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_ShakeCamera");
		return ptr;
	}


	void ReceiveCameraShake();
};


// Class ShadowTrackerExtra.GSListener_SwitchToMainWeapon
// 0x0008 (0x0040 - 0x0038)
class UGSListener_SwitchToMainWeapon : public USTNewbieGuideSuccessListenerBase
{
public:
	ESurviveWeaponPropSlot                             CheckWeaponSlot;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GSListener_SwitchToMainWeapon");
		return ptr;
	}


	void OnCurUsingWeaponChange(ESurviveWeaponPropSlot targetSlot);
};


// Class ShadowTrackerExtra.GuideComponent
// 0x0028 (0x0120 - 0x00F8)
class UGuideComponent : public UActorComponent
{
public:
	TArray<struct FGuideInfo>                          widgetList;                                               // 0x00F8(0x0010) (BlueprintVisible, ZeroConstructor)
	TWeakObjectPtr<class UWidget>                      MaskWidget;                                               // 0x0108(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0110(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.GuideComponent");
		return ptr;
	}


	void SetMaskWidgetOnTop(bool bTop);
	void CreateGuideUI();
};


// Class ShadowTrackerExtra.HackReporterComponent
// 0x0268 (0x0360 - 0x00F8)
class UHackReporterComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x268];                                     // 0x00F8(0x0268) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.HackReporterComponent");
		return ptr;
	}


	void ServerOnWallHackDetected(class ASTExtraBaseCharacter* Victim, float Distance);
	void ServerOnTamperDetected(uint64_t tp_base, uint32_t tp_size);
	void ServerOnHookDetected(int Type, int Count, const struct FString& ObjectName);
};


// Class ShadowTrackerExtra.IdleWeaponState
// 0x0010 (0x0168 - 0x0158)
class UIdleWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0160(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.IdleWeaponState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.InactiveWeaponState
// 0x0000 (0x0158 - 0x0158)
class UInactiveWeaponState : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.InactiveWeaponState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.InGameReconnectingInterface
// 0x0000 (0x0028 - 0x0028)
class UInGameReconnectingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.InGameReconnectingInterface");
		return ptr;
	}


	void RetriveDataAfterReconnecting();
	void RecoverStatusAfterReconnecting();
};


// Class ShadowTrackerExtra.InteractionComponent
// 0x00F0 (0x01E8 - 0x00F8)
class UInteractionComponent : public UActorComponent
{
public:
	float                                              CheckDuration;                                            // 0x00F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInteract;                                               // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInteractableItem;                                       // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ASTExtraPlayerController*                    PC;                                                       // 0x0120(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<bool>                                       InteractStates;                                           // 0x0128(0x0010) (ZeroConstructor)
	TArray<bool>                                       ActiveStates;                                             // 0x0138(0x0010) (ZeroConstructor)
	TArray<int>                                        Priorities;                                               // 0x0148(0x0010) (ZeroConstructor)
	struct FSearchedPickUpItemResult                   SearchResult;                                             // 0x0158(0x0040) (Transient)
	struct FSearchedPickUpItemResult                   EmptyResult;                                              // 0x0198(0x0040)
	unsigned char                                      UnknownData01[0x10];                                      // 0x01D8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.InteractionComponent");
		return ptr;
	}


	void OnShowSkillPrompt(bool IsShowPrompt, float LastTime, const struct FString& PromptText, float TotalTime);
	void OnRescueTargetChange(bool HasTarget);
	void OnRescueStatusChange(class ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
	void OnPlayerEnterParachute();
	void OnPlayerEnterJumping();
	void OnPlayerCanOpenParachute();
	void OnPlayerCannotOpenParachute();
	void OnPlayerCannotJump();
	void OnPlayerCanJump();
	void OnInteractionUnblocked();
	void OnInteractableGroundItem(const struct FSearchedPickUpItemResult& InteractableItem);
	void OnExitVehicle();
	void OnEnterVehicle();
	void OnDoorInteractable(bool bShow, bool bShouldOpen);
	void OnCurrentClosestVehicleChanged(class ASTExtraVehicleBase* ClosestVehicle, bool CanEnterDriverSeat, bool CanEnterPassengerSeat);
};


// Class ShadowTrackerExtra.ItemGeneratorBase
// 0x0058 (0x03C0 - 0x0368)
class AItemGeneratorBase : public AActor
{
public:
	class UCurveFloat*                                 UpdateOverlapCurve;                                       // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShowWrapperMeshDistance;                                  // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IsGenerateOverlapEventsForceUpdateTime;                   // 0x0374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     BoxOverlapCheckExtent;                                    // 0x0378(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowCheckPropsMeshVisibleBox;                            // 0x0384(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0385(0x0003) MISSED OFFSET
	float                                              ShowCheckPropsMeshVisibleBoxTime;                         // 0x0388(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x038C(0x0014) MISSED OFFSET
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x18];                                      // 0x03A8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ItemGeneratorBase");
		return ptr;
	}


	void ForceUpdate();
};


// Class ShadowTrackerExtra.ItemStudio
// 0x0000 (0x03D0 - 0x03D0)
class AItemStudio : public AViewModeStudio
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ItemStudio");
		return ptr;
	}


	void UpdateComponentToWorld(class UMeshComponent* Mesh);
	void SetMeshTransform(class UMeshComponent* Mesh);
	void SetItem(class ASTExtraWeapon* Item);
};


// Class ShadowTrackerExtra.KillerTracker
// 0x0078 (0x03E0 - 0x0368)
class AKillerTracker : public AActor
{
public:
	class AActor*                                      TargetKiller;                                             // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      ReturnActor;                                              // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0378(0x0020) MISSED OFFSET
	class USpringArmComponent*                         CameraSpringArm;                                          // 0x0398(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ObservingCamera;                                          // 0x03A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnTrackingEnd;                                            // 0x03A8(0x0010) (ZeroConstructor, InstancedReference)
	float                                              MinMovingSpeed;                                           // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxMovingTime;                                            // 0x03BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ObservingTime;                                            // 0x03C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrackingDelay;                                            // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExpectedMinObservingDistance;                             // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraAdjustSpeed;                                        // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.KillerTracker");
		return ptr;
	}

};


// Class ShadowTrackerExtra.LagCompensationComponent
// 0x11D0 (0x12C8 - 0x00F8)
class ULagCompensationComponent : public UActorComponent
{
public:
	TArray<struct FServerCheckBox>                     PoseCheckBoxesCfg;                                        // 0x00F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	bool                                               bDebugShoot;                                              // 0x0108(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyShootPoint;                                        // 0x0109(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyInParachuteShootPoint;                             // 0x010A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x010B(0x0001) MISSED OFFSET
	float                                              TolerateShootPointDistanceSqured;                         // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateShootPointDistanceVehicleSqured;                  // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateSimulatedDelayTime;                               // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyBulletFlyTime;                                     // 0x0118(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyShooterMuzzle;                                     // 0x0119(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyMuzzle;                                            // 0x011A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyShootRange;                                        // 0x011B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyShootDir;                                          // 0x011C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyBulletImpactOffset;                                // 0x011D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bVerifyCharacterImpactOffset;                             // 0x011E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x011F(0x0001) MISSED OFFSET
	float                                              BulletFlyTimeVerifyMinTime;                               // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateBulletFlyTimePercentage;                          // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateMuzzleDistanceSqured;                             // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateMuzzleDistanceVehicleSqured;                      // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateShootHitAngle;                                    // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateBulletImpactOffsetDistSqured;                     // 0x0134(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateBulletDirOffsetSquared;                           // 0x0138(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           TolerateCharacterImpactOffsetDistSqured;                  // 0x013C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateShootRange;                                       // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EObjectTypeQuery>>              TraceObjectTypes;                                         // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x1170];                                    // 0x0158(0x1170) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LagCompensationComponent");
		return ptr;
	}


	float SimulatedCharacterServerTime();
};


// Class ShadowTrackerExtra.LandScapeLODByHeight
// 0x0030 (0x0128 - 0x00F8)
class ULandScapeLODByHeight : public UActorComponent
{
public:
	TArray<struct FHeightLOD>                          heightLODMapping;                                         // 0x00F8(0x0010) (Edit, ZeroConstructor)
	int                                                CheckInternal;                                            // 0x0108(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CurrentGroundHeight;                                      // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	class APlayerController*                           Player;                                                   // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0120(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LandScapeLODByHeight");
		return ptr;
	}


	void Stop();
	void Start();
	void MappingLODByHeight();
};


// Class ShadowTrackerExtra.LoadingScreenDataTable
// 0x0000 (0x0080 - 0x0080)
class ULoadingScreenDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LoadingScreenDataTable");
		return ptr;
	}

};


// Class ShadowTrackerExtra.LobbyCharacter
// 0x00B0 (0x0830 - 0x0780)
class ALobbyCharacter : public ACharacter
{
public:
	struct FScriptMulticastDelegate                    OnReady;                                                  // 0x0780(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHost;                                                   // 0x0790(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRankEmblem;                                             // 0x07A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLobbySceneChanged;                                      // 0x07B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x07C0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCharacterAvatarComponent*                   AvatarComponent;                                          // 0x07C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsReady : 1;                                             // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsHost : 1;                                              // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsLogout : 1;                                            // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsInCustomizationScene : 1;                              // 0x07D0(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07D1(0x0003) MISSED OFFSET
	struct FRotator                                    ToRotate;                                                 // 0x07D4(0x000C) (Transient, IsPlainOldData)
	TArray<int>                                        PrevItemIds;                                              // 0x07E0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x40];                                      // 0x07F0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LobbyCharacter");
		return ptr;
	}


	void UpdateEquipedWeapon(int ItemID);
	void ShowHUD();
	void SetState(bool bShow);
	void SetReady(bool bReady);
	void SetRankEmblem(ERatingRankType NewRankType);
	void SetNickName(const struct FString& NewNickName);
	void SetLogout();
	void SetHost(bool bHost);
	void ResetAnimPose();
	void OnMontageEnded(int EmoteID);
	bool IsLogout();
	bool IsInCustomizationScene();
	void HideHUD();
	void HideEquippedWeapon(bool InVal);
	int GetSlotId();
	ERatingRankType GetRankType();
	struct FString GetNickName();
	struct FString GetNetId();
	void DestroyLobbyWeapon();
};


// Class ShadowTrackerExtra.TslBaseHUD
// 0x0120 (0x0570 - 0x0450)
class ATslBaseHUD : public AHUD
{
public:
	class UClass*                                      MainUMGHudClass;                                          // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<class UAkAudioBank*>                        AutoLoadAudioBanks;                                       // 0x0458(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0468(0x0008) MISSED OFFSET
	TArray<class UActionInputEventHolder*>             ActionInputEventHolderArray;                              // 0x0470(0x0010) (ZeroConstructor, Transient)
	TMap<struct FString, struct FTslWidgetState>       WidgetStateMap;                                           // 0x0480(0x0050) (ZeroConstructor, Transient)
	class UUserWidget*                                 MainUMGHud;                                               // 0x04D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UBlockInputUserWidget*>               BlockInputWidgetList;                                     // 0x04D8(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<struct FString>                             UseMouseWidgetStack;                                      // 0x04E8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               IsTimelineMaximize;                                       // 0x04F8(0x0001) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x77];                                      // 0x04F9(0x0077) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBaseHUD");
		return ptr;
	}


	void WidgetToggle(const struct FString& WidgetName);
	void WidgetShow(const struct FString& WidgetName, EWidgetShowType ShowType, class UObject* OptionalParam);
	void WidgetCreate(const struct FString& WidgetName, const struct FTslWidgetConfig& Config);
	void UpdateHud();
	void UnbindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent);
	void TestShowDialog(const struct FString& Message);
	void ShowDefaultHud();
	void PrintShowWidgetList();
	void PrintCreatedWidgetList();
	bool IsWidgetShow(const struct FString& WidgetName);
	bool IsMouseUse();
	bool HideWidgetByEscape();
	void HidePopupDialog(const struct FString& PopupWidgetName);
	class UUserWidget* GetWidget(const struct FString& WidgetName);
	class UUserWidget* GetMainUMGHud();
	void DestroyAllWidgets();
	void BindActionKeyDelegateEvent(const struct FName& ActionName, TEnumAsByte<EInputEvent> InputEvent, const struct FScriptDelegate& ActionKeyDelegate);
};


// Class ShadowTrackerExtra.LobbyHUD
// 0x03B0 (0x0920 - 0x0570)
class ALobbyHUD : public ATslBaseHUD
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0570(0x0008) MISSED OFFSET
	bool                                               bResetRotation;                                           // 0x0578(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0579(0x0003) MISSED OFFSET
	float                                              ResetStartTime;                                           // 0x057C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnShowCurtain;                                            // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideCurtain;                                            // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x05A0(0x0008) MISSED OFFSET
	struct FAvatarCostumeData                          TestCostumeData;                                          // 0x05A8(0x0030) (Edit)
	struct FScriptMulticastDelegate                    OnRequestSystemMenu;                                      // 0x05D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x05E8(0x0010) MISSED OFFSET
	class UCurveFloat*                                 CameraTransitionCurve;                                    // 0x05F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraTransitionElapsedTime;                              // 0x0600(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsCameraTransitionPlaying;                               // 0x0604(0x0001) (ZeroConstructor, IsPlainOldData)
	ELobbyCameraStates                                 LastCameraState;                                          // 0x0605(0x0001) (ZeroConstructor, IsPlainOldData)
	ELobbyCameraStates                                 FromCameraState;                                          // 0x0606(0x0001) (ZeroConstructor, IsPlainOldData)
	ELobbyCameraStates                                 ToCameraState;                                            // 0x0607(0x0001) (ZeroConstructor, IsPlainOldData)
	TMap<int, class ACameraActor*>                     LobbyCameras;                                             // 0x0608(0x0050) (ZeroConstructor)
	struct FName                                       MainMenuStreamingLevelName;                               // 0x0658(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       CustomizationStreamingLevelName;                          // 0x0660(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FTransform>                          CachedLobbyCharacterTransforms;                           // 0x0668(0x0010) (ZeroConstructor)
	unsigned char                                      bIsInCustomizationScene : 1;                              // 0x0678(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData04[0x7];                                       // 0x0679(0x0007) MISSED OFFSET
	class UClass*                                      ViewModeStudioClass;                                      // 0x0680(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       CameraSocketName;                                         // 0x0688(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ViewModeInterpSpeed;                                      // 0x0690(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0694(0x0004) MISSED OFFSET
	class AViewModeStudio*                             ViewModeStudio;                                           // 0x0698(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      ViewModeActor;                                            // 0x06A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AActor*                                      ViewModeActor_Character;                                  // 0x06A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UMeshComponent*                              VIewModeMeshCom;                                          // 0x06B0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	EViewModeCategory                                  LastViewModeCategory;                                     // 0x06B8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x7];                                       // 0x06B9(0x0007) MISSED OFFSET
	class AActor*                                      CachedViewModePivot;                                      // 0x06C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    ViewModeCurrentRotation;                                  // 0x06C8(0x000C) (Transient, IsPlainOldData)
	struct FRotator                                    ViewModeTargetRotation;                                   // 0x06D4(0x000C) (Transient, IsPlainOldData)
	float                                              ViewModeCurrentScale;                                     // 0x06E0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ViewModeTargetScale;                                      // 0x06E4(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLightingChannels                           ViewModeLightingChannels;                                 // 0x06E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x3];                                       // 0x06E9(0x0003) MISSED OFFSET
	struct FFloatInterval                              ViewModeScaleRange;                                       // 0x06EC(0x0008) (Edit, EditConst)
	float                                              MaxRotationValue;                                         // 0x06F4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ComputeValue;                                             // 0x06F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x06FC(0x0004) MISSED OFFSET
	TArray<struct FString>                             TeamNickNames;                                            // 0x0700(0x0010) (ZeroConstructor)
	int                                                HostSlotIndex;                                            // 0x0710(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0714(0x0004) MISSED OFFSET
	class UCurveFloat*                                 FadeInOutCurve;                                           // 0x0718(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FadeInOutEffectElapsedTime;                               // 0x0720(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsFadeInOutEffectPlaying;                                // 0x0724(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0725(0x0003) MISSED OFFSET
	struct FTimerHandle                                TimerHandle_FadeInOut;                                    // 0x0728(0x0008)
	float                                              CachedDOFFarBlueSize;                                     // 0x0730(0x0004) (ZeroConstructor, IsPlainOldData)
	ELobbyBlurChangingStates                           BlurChangingState;                                        // 0x0734(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInitCameraTransition;                                    // 0x0735(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x2];                                       // 0x0736(0x0002) MISSED OFFSET
	int                                                RollbackStreamingBoost;                                   // 0x0738(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x073C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCreateCharacter;                                        // 0x0740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDestroyCharacter;                                       // 0x0750(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHostChanged;                                            // 0x0760(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     StartURL;                                                 // 0x0770(0x0010) (Edit, ZeroConstructor)
	TArray<class UCoherentCommonBinder*>               CommonBinders;                                            // 0x0780(0x0010) (ZeroConstructor, Transient)
	class UAkComponent*                                AkSound;                                                  // 0x0790(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class ACameraActor*                                MainCamera;                                               // 0x0798(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x20];                                      // 0x07A0(0x0020) MISSED OFFSET
	unsigned char                                      UnknownData14[0x28];                                      // 0x07A0(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.LobbyHUD.LobbyCharacterClass
	unsigned char                                      UnknownData15[0xA0];                                      // 0x07E8(0x00A0) MISSED OFFSET
	bool                                               bSaveIsGenderMale;                                        // 0x0888(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0889(0x0003) MISSED OFFSET
	struct FViewTargetTransitionParams                 ViewTargetTransitionParams;                               // 0x088C(0x0010) (Edit)
	bool                                               bSaveBlur;                                                // 0x089C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x089D(0x0003) MISSED OFFSET
	class ULobbySceneManagerComponent*                 LobbySceneManagerComponent;                               // 0x08A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData18[0x40];                                      // 0x08A8(0x0040) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCameraTransitionSolo;                                   // 0x08E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCameraTransitionCustomApperance;                        // 0x08F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCameraTransitionCustomWardrobe;                         // 0x0908(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0918(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LobbyHUD");
		return ptr;
	}


	void UpdateStatTrak(uint32_t Value, int NumKills);
	void TickFadeInOutEffect(float DeltaTime);
	void TickCameraTransition(float DeltaTime);
	void TestLobbyCharacterReady(uint32_t SlotIndex, bool bReady);
	void TestLobbyCharacterHost(uint32_t SlotIndex);
	void TestLobbyCharacterAddAngle(int SlotIndex, float InYawInDegree);
	void TestLobbyCamera_TeleportTo(int Index);
	void TestLobbyCamera_StartTransitionTo(int ToIndex);
	void TestLobbyCamera_StartTransitionFromTo(int FromIndex, int ToIndex);
	void TestLobbyCamera_SpawnCharacters(int Num);
	void TestLobbyCamera_Init();
	void Test_UpdateLobbyCharacter(uint32_t SlotIndex);
	void Test_RemoveLobbyItem(const struct FString& ItemID);
	void Test_RemoveAllLobbyItem();
	void Test_PrintWeaponItem(uint32_t SlotIndex);
	void Test_PrintSkinItem(uint32_t SlotIndex);
	void Test_ForceLodLevel(int ForceLodLevel);
	void Test_AddLobbyItem(const struct FString& ItemID);
	void TeleportCameraTo(ELobbyCameraStates InCameraState);
	void StopFadeInOutEffect();
	void StopCameraTransition();
	void StartFadeInOutEffect();
	void StartCameraTransitionTo(ELobbyCameraStates InToCameraState);
	void StartCameraTransitionFromTo(ELobbyCameraStates InFromCameraState, ELobbyCameraStates InToCameraState);
	void SpawnViewModeWeapon(const struct FString& WeaponId, const struct FString& SkinItemId);
	void SpawnViewModeParachute(const struct FString& ParachuteId, const struct FString& SkinItemId);
	void ShowWeaponOrGearViewMode(const struct FString& SceneName, uint32_t ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemId);
	void ShowViewMode(uint32_t ViewModeCategory, const struct FString& TargetId, const struct FString& SkinItemId);
	void SetWidgetForBinding(int ViewIndex, class UCoherentUIGTWidget* Widget);
	void SetViewModeActor(class AActor* Actor);
	void STATIC_SetPlayedFirstHUD();
	void SetLocalUserData(const struct FString& Key, const struct FString& Value);
	void SetLobbyCharacterHiddenInGame(uint32_t SlotIndex, bool bNewHidden);
	void SetLobbyCharacterBlur(bool bBlur);
	void ResetViewMode();
	void RequestSystemMenu();
	void PlayEmoteAnimation(const struct FName& InEmoteName);
	void OnViewModeStudioSpawnCallback(class AActor* ViewModeStudio);
	void OnStartRotation();
	void NotifyLobbySceneChanged(bool bIsCustomizationScene);
	void NotifyLobbyConnecting();
	void NotifyLobbyCharacterCreated(int InSlotIndex);
	void LeaveCustomizationMenu(ELobbyCameraStates InFromCameraState, ELobbyCameraStates InToCameraState);
	bool STATIC_IsPlayedFirstHUD();
	bool IsCameraHasBlurEffect(ELobbyCameraStates InLobbyCameraState);
	bool IsAlone();
	void InitLobbyTransition();
	void InitFadeInOutEffect();
	void InitCameraTransition();
	void HideViewMode();
	void HideCharacterPreview();
	EViewModeCategory GetViewModeCategory();
	int GetUsableViewIndex();
	struct FString GetTeamNickName(int SlotIndex);
	struct FString GetStartUrl();
	class ALobbyCharacter* GetMainLobbyCharacter();
	int GetLobbyCharacterNum();
	class ALobbyCharacter* GetLobbyCharacter(int SlotIndex);
	ELobbyCameraStates GetLobbyCameraState();
	class ACameraActor* GetLobbyCamera(ELobbyCameraStates InLobbyCameraState);
	struct FString GetHostNickName();
	float GetCurveDuration(class UCurveFloat* InCurve);
	void EnterCustomizationMenu(ELobbyCameraStates InFromCameraState, ELobbyCameraStates InToCameraState);
	void EnableSystemMenuButton();
	void DisableSystemMenuButton();
	ELobbyBlurChangingStates DecideBlurChangingState(ELobbyCameraStates InFromState, ELobbyCameraStates InToState);
	void CreateTestCharacter();
	void ClearWidget(int Index);
	void ClearForSolo();
	void ClearAllWidget();
	void ChangeSceneFromName(const struct FString& SceneName);
	void CacheSubLevelNames();
	void CachePostProcessEffectFromLevel();
	void CacheMainCameraFromLevel();
	void CacheLobbyCharacterTransforms();
	void CacheLobbyCamarasFromLevel();
	void AddLobbyViewModeScale(int ViewModeCategory, float Value);
	void AddLobbyViewModeAngleXYFromEnum(EViewModeCategory ViewModeCategory, float XAngleInDegree, float YAngleInDegree);
	void AddLobbyViewModeAngleXY(int ViewModeCategory, float XAngleInDegree, float YAngleInDegree);
	void AddLobbyViewModeAngle(uint32_t ViewModeCategory, float AngleInDegree);
	void AddLobbyCharacterAngle(int SlotIndex, float AngleInDegree);
};


// Class ShadowTrackerExtra.LobbyLink
// 0x00B0 (0x00D8 - 0x0028)
class ULobbyLink : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA8];                                      // 0x0028(0x00A8) MISSED OFFSET
	bool                                               bResponsePrepareUsers;                                    // 0x00D0(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LobbyLink");
		return ptr;
	}

};


// Class ShadowTrackerExtra.LobbySceneManagerComponent
// 0x0160 (0x0258 - 0x00F8)
class ULobbySceneManagerComponent : public UActorComponent
{
public:
	class UDataTable*                                  SceneDataTable;                                           // 0x00F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  ViewModeSceneDataTable;                                   // 0x0100(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UDataTable*                                  SceneTravelDatatable;                                     // 0x0108(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       MainCameraTag;                                            // 0x0110(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSceneTravel;                                         // 0x0118(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       DefaultSceneTravel;                                       // 0x0120(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0128(0x0050) MISSED OFFSET
	TMap<struct FString, class ACameraActor*>          CachedCameraActors;                                       // 0x0178(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x50];                                      // 0x01C8(0x0050) MISSED OFFSET
	class ATslPostProcessEffect*                       MainMenuPPE;                                              // 0x0218(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CachedDOFFarBlueSize;                                     // 0x0220(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0224(0x0004) MISSED OFFSET
	struct FString                                     CurrentSceneName;                                         // 0x0228(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	class ATslBaseLobbySceneTravel*                    LobbySceneTravel;                                         // 0x0240(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsInitScene;                                             // 0x0248(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0249(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LobbySceneManagerComponent");
		return ptr;
	}


	void OnUpdateWhenSceneVisibility(const struct FTslLobbySceneDataPair& SceneDataPair);
	void OnUpdateScene(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
	void OnFinishTravel(class ATslBaseLobbySceneTravel* TslBaseLobbySceneTravel);
};


// Class ShadowTrackerExtra.MeleeWeaponToSkillInterface
// 0x0000 (0x0028 - 0x0028)
class UMeleeWeaponToSkillInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MeleeWeaponToSkillInterface");
		return ptr;
	}


	EUTSkillEntry GetSkillEntryForMeleeWeapon(bool IsPressed);
};


// Class ShadowTrackerExtra.LobbyPlayerController
// 0x0000 (0x06D0 - 0x06D0)
class ALobbyPlayerController : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.LobbyPlayerController");
		return ptr;
	}

};


// Class ShadowTrackerExtra.MINIMapWidget
// 0x00D8 (0x0388 - 0x02B0)
class UMINIMapWidget : public UUAEUserWidget
{
public:
	struct FVector2D                                   PlayerCoords;                                             // 0x02B0(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   WhiteCircleCenter;                                        // 0x02B8(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   BlueCircleCenter;                                         // 0x02C0(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              WhiteCircleRadius;                                        // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlueCircleRadius;                                         // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinimapWindowExtent;                                      // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LevelLandScapeExtent;                                     // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MapImageExtent;                                           // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LevelToMapScale;                                          // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MapCenterToPlayerMarker;                                  // 0x02E0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     MapCenterToBlueCircleCenter;                              // 0x02EC(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     LevelLandScapeCenter;                                     // 0x02F8(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     MapCenterToWhiteCircleCenter;                             // 0x0304(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     MapCenterToPinMarker;                                     // 0x0310(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	TEnumAsByte<EPlayerOperation>                      PlayerOperation;                                          // 0x031C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x031D(0x0003) MISSED OFFSET
	class UImage*                                      PinMarker;                                                // 0x0320(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanelSlot*                            MapCanvasPanelSlot;                                       // 0x0328(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanelSlot*                            PlayerMarkerPanelSlot;                                    // 0x0330(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PlayerMarkerImage;                                        // 0x0338(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      PinMarkerPanelSlot;                                       // 0x0340(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               IsDrawInMiniMap;                                          // 0x0348(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EGameMap>                              TestMap;                                                  // 0x0349(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x26];                                      // 0x034A(0x0026) MISSED OFFSET
	class ASTExtraGameStateBase*                       GameStateBase;                                            // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       STExtraPlayerCharacter;                                   // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0380(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MINIMapWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.MissionManager
// 0x0018 (0x0380 - 0x0368)
class AMissionManager : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	TArray<class ATslSpecificLocationMarker*>          SpecificLocationMarkers;                                  // 0x0370(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MissionManager");
		return ptr;
	}


	void OnRedZoneStarted();
	void OnRedZoneEnded();
	void CheckIfDrivingInRedZone();
};


// Class ShadowTrackerExtra.MoveAntiCheatComponent
// 0x0198 (0x0290 - 0x00F8)
class UMoveAntiCheatComponent : public UActorComponent
{
public:
	unsigned char                                      bUseMoveAntiCheatCheck : 1;                               // 0x00F8(0x0001) (Edit, BlueprintVisible, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	float                                              MinMoveAntiCheatCheckIntervel;                            // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxCheatTimes;                                            // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              TolerateDistanceFractor;                                  // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxPacketLossRate;                                        // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinDistanceSqAtStaticColliderCheck;                       // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxTotalMoveCheatTimes;                                   // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxTotalPassWallTimes;                                    // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinMoveAntiCheatCheckIntervel2;                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsForceAdjustZWhenExceed;                                // 0x011C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	struct FMoveCheatAntiStrategy                      MoveCheatAntiStrategy3;                                   // 0x0120(0x0080) (Config)
	struct FMoveCheatAntiStrategy2                     MoveCheatAntiStrategy4;                                   // 0x01A0(0x0058) (Config)
	struct FCharacterZMoveDistanceCheck                CharacterZMoveDistanceCheck;                              // 0x01F8(0x0034) (Config)
	unsigned char                                      UnknownData02[0x64];                                      // 0x022C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MoveAntiCheatComponent");
		return ptr;
	}


	void Ping2Server(float ServerTime, float ClientTime, const struct FVector_NetQuantize100& ClientLoc, float MaxSpeed);
	void Ping2Client(float ServerTime);
	void OnPreReconnectOnServer();
	void DebugDrawLine(const struct FVector& Start, const struct FVector& End);
};


// Class ShadowTrackerExtra.MiniMapStandardPoint
// 0x0008 (0x0370 - 0x0368)
class AMiniMapStandardPoint : public AActor
{
public:
	float                                              LevelBoundExtent;                                         // 0x0368(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x036C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MiniMapStandardPoint");
		return ptr;
	}

};


// Class ShadowTrackerExtra.MyLandscape
// 0x0098 (0x0400 - 0x0368)
class AMyLandscape : public AActor
{
public:
	class URuntimeMeshComponent*                       Mesh;                                                     // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UMyLandscapeGeometry*                        LandscapeGeometry;                                        // 0x0370(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UMaterial*                                   LandscapeMat;                                             // 0x0378(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x80];                                      // 0x0380(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MyLandscape");
		return ptr;
	}


	void GameEventFighting();
	void AboutToSwitchViewTargetPlayer();
};


// Class ShadowTrackerExtra.MultipleBattleLogicManager
// 0x0050 (0x0148 - 0x00F8)
class UMultipleBattleLogicManager : public UActorComponent
{
public:
	TMap<int, class AActor*>                           BattleDataMap;                                            // 0x00F8(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MultipleBattleLogicManager");
		return ptr;
	}

};


// Class ShadowTrackerExtra.MyTslUserWidget
// 0x0000 (0x0248 - 0x0248)
class UMyTslUserWidget : public UTslUserWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MyTslUserWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NetworkOnlineDriver
// 0x0000 (0x0368 - 0x0368)
class ANetworkOnlineDriver : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NetworkOnlineDriver");
		return ptr;
	}


	void SwitchPoseStateServer(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void SwitchPoseStateClient(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<ESTEPoseState> PoseState);
	void ServerStopFire(class ASTExtraBaseCharacter* TargetCharacter, int CurrentBullet);
	void ServerStartFire(class ASTExtraBaseCharacter* TargetCharacter, int BurstShootBulletsLimit, float BurstShootTimeLimit, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget, const struct FVector2D& ClientScreenSize);
	void ServerStartBarrel(class ASTExtraBaseCharacter* TargetCharacter);
	void ServerSetReloadMethod(class ASTExtraBaseCharacter* TargetCharacter, TEnumAsByte<EWeaponReloadMethod> reloadMethod);
	void ServerSetFireMode(class ASTExtraBaseCharacter* TargetCharacter, EGunFireMode FireMode);
	void ServerReplicateExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
	void BroadcastClientsSpawnExplosionEffect(class UClass* Template, const struct FTransform& Trans, class AActor* ActorOwner, class APawn* InstigatorPawn, ESpawnActorCollisionHandlingMethod method);
};


// Class ShadowTrackerExtra.STNewbieGuideConditionBase
// 0x0008 (0x0030 - 0x0028)
class USTNewbieGuideConditionBase : public UObject
{
public:
	TWeakObjectPtr<class AController>                  OwnerController;                                          // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STNewbieGuideConditionBase");
		return ptr;
	}


	bool ReconnectRecover();
	bool IsOK();
};


// Class ShadowTrackerExtra.MyLandscapeGeometry
// 0x00E8 (0x0118 - 0x0030)
class UMyLandscapeGeometry : public UDataAsset
{
public:
	TArray<struct FVector>                             Vertex;                                                   // 0x0030(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVector>                             Normals;                                                  // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<struct FVector2D>                           UV;                                                       // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<int>                                        Indices;                                                  // 0x0060(0x0010) (Edit, ZeroConstructor)
	TMap<struct FIntPoint, int>                        ComponentIndexOffset;                                     // 0x0070(0x0050) (Edit, ZeroConstructor)
	int                                                ComponentIndexCount;                                      // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ComponentVertexCount;                                     // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TMap<struct FString, struct FSubLevelComponentMapValue> SubLevelComponentMap;                                     // 0x00C8(0x0050) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.MyLandscapeGeometry");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NewbieGuideComponent
// 0x0058 (0x0150 - 0x00F8)
class UNewbieGuideComponent : public UActorComponent
{
public:
	int                                                CurTipsID;                                                // 0x00F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsStartShowingGuide;                                      // 0x00FC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               OpenNewbieGuideSwitch;                                    // 0x00FD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FE(0x0002) MISSED OFFSET
	float                                              GuideInterval;                                            // 0x0100(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxGuideLevel;                                            // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FNewbieGuideItem>                    Items;                                                    // 0x0108(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class ASTExtraPlayerController*                    OwnerController;                                          // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        FinishedTips;                                             // 0x0120(0x0010) (ZeroConstructor)
	TArray<int>                                        FinishedCounts;                                           // 0x0130(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0140(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NewbieGuideComponent");
		return ptr;
	}


	void SendNewbieMsg(int tipsID, bool isStart, int tipsIndex);
	void InitComponent(class ASTExtraPlayerController* _OwnerController, TArray<int> _FinishedTips, TArray<int> _FinishedCounts, TEnumAsByte<ENewbieGuidePlayerCategory> curPlayerCategory);
};


// Class ShadowTrackerExtra.NewFakePlayerAIController
// 0x00F8 (0x0628 - 0x0530)
class ANewFakePlayerAIController : public AFakePlayerAIController
{
public:
	unsigned char                                      UnknownData00[0x80];                                      // 0x0530(0x0080) MISSED OFFSET
	int                                                CanEquipGrenadeNum;                                       // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                nowEquipGrenadeNum;                                       // 0x05B4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CanhaveMedicalCapacity;                                   // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              nowMedicalCapacity;                                       // 0x05BC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxWeaponAIFullVaule;                                     // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NowWeaponFullVaue;                                        // 0x05C4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxEquipWeaponFullVaue;                                   // 0x05C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05CC(0x0004) MISSED OFFSET
	TArray<int>                                        nowWeaponList;                                            // 0x05D0(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                CanHaveWeaponPartsVaules;                                 // 0x05E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NowWeaponPartsVaules;                                     // 0x05E4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               isHasMeleeWeapon;                                         // 0x05E8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x05E9(0x0003) MISSED OFFSET
	int                                                MaxEquipAIFullVaule;                                      // 0x05EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BackPackFullVaule;                                        // 0x05F0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                HeadFullVaule;                                            // 0x05F4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BodyFullVaule;                                            // 0x05F8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet9Num;                                               // 0x05FC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet7PointNum;                                          // 0x0600(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Bullet5PointNum;                                          // 0x0604(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint12Num;                                         // 0x0608(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint45Num;                                         // 0x060C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BulletPoint300Num;                                        // 0x0610(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ArrowNum;                                                 // 0x0614(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AutoOpenDoorRange;                                        // 0x0618(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x061C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NewFakePlayerAIController");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NewPathFollowingComponent
// 0x0020 (0x03D0 - 0x03B0)
class UNewPathFollowingComponent : public UPathFollowingComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B0(0x0004) MISSED OFFSET
	float                                              maxCheckDis;                                              // 0x03B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              maxCheckDisTime;                                          // 0x03B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03BC(0x0004) MISSED OFFSET
	bool                                               isUseFixedPos;                                            // 0x03C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03C1(0x0003) MISSED OFFSET
	float                                              PlayerHalfHeight;                                         // 0x03C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlayerNewHalfHeight;                                      // 0x03C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxTransferDis;                                           // 0x03CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NewPathFollowingComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsElapseXsAfterJump
// 0x0008 (0x0038 - 0x0030)
class UNGCondition_IsElapseXsAfterJump : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsElapseXsAfterJump");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NGCondition_IsHoldingGun
// 0x0000 (0x0030 - 0x0030)
class UNGCondition_IsHoldingGun : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NGCondition_IsHoldingGun");
		return ptr;
	}

};


// Class ShadowTrackerExtra.NoBulletWeaponState
// 0x0000 (0x0158 - 0x0158)
class UNoBulletWeaponState : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.NoBulletWeaponState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.OBModePositionWidget
// 0x00C0 (0x0370 - 0x02B0)
class UOBModePositionWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            OBCanvasPanelSlot;                                        // 0x02B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                OBPanel;                                                  // 0x02B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraBaseCharacter*                       CachedCharacter;                                          // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerState*                         CachedPlayerState;                                        // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FPlayerInfoInOB                             CachedPlayerInfo;                                         // 0x02D0(0x0040) (BlueprintVisible)
	struct FVector4                                    Limit;                                                    // 0x0310(0x0010) (Edit, IsPlainOldData)
	int                                                heightPlus;                                               // 0x0320(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                rightPlus;                                                // 0x0324(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   UIOffset;                                                 // 0x0328(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     LocOffset;                                                // 0x0330(0x000C) (Edit, IsPlainOldData)
	float                                              CachedHealth;                                             // 0x033C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CachedBreathPercent;                                      // 0x0340(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0344(0x001C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0360(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.OBModePositionWidget");
		return ptr;
	}


	void SetPlayerCharacter(class ASTExtraPlayerController* Controller, int idx);
	void RefreshPlayerHealth(float hpRatio, float breathRatio, bool IsNearDeath);
	void OnItemClicked();
};


// Class ShadowTrackerExtra.ObserverCameraComponent
// 0x0030 (0x0850 - 0x0820)
class UObserverCameraComponent : public UCameraComponent
{
public:
	float                                              SpringArmLengthModifier1;                                 // 0x0820(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0824(0x001C) MISSED OFFSET
	float                                              FreeCameraOffsetRadius;                                   // 0x0840(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0844(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ObserverCameraComponent");
		return ptr;
	}


	void GetCameraView(float DeltaTime, struct FMinimalViewInfo* DesiredView);
};


// Class ShadowTrackerExtra.OnTimeSpawnChallengeLevelRules
// 0x0010 (0x0040 - 0x0030)
class UOnTimeSpawnChallengeLevelRules : public UChallengeLevelRules
{
public:
	TArray<class ATriggerItem_TriggerClock*>           TriggerClockArray;                                        // 0x0030(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.OnTimeSpawnChallengeLevelRules");
		return ptr;
	}


	void SpawnLevelDirector(class UClass* LevelDirectorClass);
	void OnReceiveTriggerMsg(class UTriggerAction* TriggerAction, const struct FString& Msg);
	void InitLevel();
};


// Class ShadowTrackerExtra.ParachuteFollowComponent
// 0x0000 (0x00F8 - 0x00F8)
class UParachuteFollowComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ParachuteFollowComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.ParachutingWidget
// 0x00A8 (0x0358 - 0x02B0)
class UParachutingWidget : public UUAEUserWidget
{
public:
	float                                              AirborneAltitude;                                         // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeBarLength;                                        // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ParachuteBarLength;                                       // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeBarYPosition;                                     // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HeightAndSpeedBoxXPosition;                               // 0x02C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02C4(0x0004) MISSED OFFSET
	struct FString                                     SpeedText;                                                // 0x02C8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UHorizontalBox*                              HeightAndSpeedBox;                                        // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanelSlot*                            HeightAndSpeedBoxPanelSlot;                               // 0x02E0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ParachuteBarImage;                                        // 0x02E8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      HeightBarImage;                                           // 0x02F0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ACharacter*                                  AirbornePawn;                                             // 0x02F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerController*                    AirborneController;                                       // 0x0300(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   HeightAndSpeedBoxPosition;                                // 0x0308(0x0008) (Edit, BlueprintVisible, IsPlainOldData)
	class UCanvasPanelSlot*                            ParachuteBarCanvasSlot;                                   // 0x0310(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanelSlot*                            HeightBarCanvasSlot;                                      // 0x0318(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSpeedValueChangeDelegate;                               // 0x0320(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bUseAccelerationUpdating;                                 // 0x0330(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	float                                              UpdateAccleratingThreshold;                               // 0x0334(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CalAcceleratingPeriod;                                    // 0x0338(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseMultiFramePastUpdate;                                 // 0x033C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	int                                                UpdateSpeedTextFrameThreshold;                            // 0x0340(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x14];                                      // 0x0344(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ParachutingWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PickupInterface
// 0x0000 (0x0028 - 0x0028)
class UPickupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickupInterface");
		return ptr;
	}

};


// Class ShadowTrackerExtra.OBModeAirDropWidget
// 0x0070 (0x0320 - 0x02B0)
class UOBModeAirDropWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            OBCanvasPanelSlot;                                        // 0x02B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                OBPanel;                                                  // 0x02B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AAirDropBoxActor*                            CachedAirDrop;                                            // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET
	struct FVector4                                    Limit;                                                    // 0x02D0(0x0010) (Edit, IsPlainOldData)
	int                                                heightPlus;                                               // 0x02E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                rightPlus;                                                // 0x02E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   UIOffset;                                                 // 0x02E8(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     LocOffset;                                                // 0x02F0(0x000C) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x02FC(0x001C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.OBModeAirDropWidget");
		return ptr;
	}


	void SetAirDrop(class AAirDropBoxActor* DropBox);
	void OnItemClicked();
};


// Class ShadowTrackerExtra.PickUpWrapperActor
// 0x0090 (0x0408 - 0x0378)
class APickUpWrapperActor : public AUAENetActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0378(0x0010) MISSED OFFSET
	struct FItemDefineID                               DefineID;                                                 // 0x0388(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	int                                                Count;                                                    // 0x03A0(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasBeenPickedUp;                                         // 0x03A4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsInBox;                                                 // 0x03A5(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bDropedByPlayer;                                          // 0x03A6(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x03A7(0x0001) MISSED OFFSET
	struct FName                                       OwnerName;                                                // 0x03A8(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	class AActor*                                      AttachedActor;                                            // 0x03B0(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FBattleItemAdditionalData>           SavedAdditionalDataList;                                  // 0x03B8(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	bool                                               bIsTrainingMode;                                          // 0x03C8(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	float                                              TrainingModePickUpColdCD;                                 // 0x03CC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TrainingModeDropLifeTime;                                 // 0x03D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAirDropBox;                                             // 0x03D4(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	int                                                AvatarID;                                                 // 0x03D8(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x03DC(0x000C) MISSED OFFSET
	class UBoxComponent*                               BoxComponent;                                             // 0x03E8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData05[0x8];                                       // 0x03F0(0x0008) MISSED OFFSET
	class ASTExtraBaseCharacter*                       TargetPlayer;                                             // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                CreatorTeamId;                                            // 0x0400(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0404(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickUpWrapperActor");
		return ptr;
	}


	void ShowMesh(bool bShow);
	void ShowActor();
	void SetDefineID(const struct FItemDefineID& DID);
	void SetCountOnServerAfterSpawn(int _Count);
	void RPC_Broadcast_NotifyAllClientsModifySavedAdditionalDataList(TArray<struct FBattleItemAdditionalData> DataList);
	void RPC_Broadcast_NotifyAllClientsHideActorForSomeTime(float Time);
	void OnRep_AvaterID();
	void OnRep_AttachmentReplication();
	void OnRep_AttachedActor();
	void ModifyData(int _Count);
	void MarkIsDropedByPlayerOnServer(bool Ret);
	void InitData(class USpotSceneComponent* GenerateSpotComponent, int ItemCount);
	int GetNetGUIDOffsetValue();
	TArray<struct FPickUpItemData> GetDataList();
	void ForceNetUpdate();
	void FinishPickedUp(class AActor* OwnerTarget, int AdditionalParam, const struct FName& EquipSlotName, int PickUpCount);
	bool CheckPickUpDataIsWeapon();
	void BroadcastDataToAllClients(int Count_New);
	void AddAdditionalDataListOnServerAfterSpawn(TArray<struct FBattleItemAdditionalData> DataList);
};


// Class ShadowTrackerExtra.PickUpListWrapperActor
// 0x0028 (0x0430 - 0x0408)
class APickUpListWrapperActor : public APickUpWrapperActor
{
public:
	TArray<struct FPickUpItemData>                     PickUpDataList;                                           // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0418(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickUpListWrapperActor");
		return ptr;
	}


	void RPC_Broadcast_NotifyAllClientsModifyCount(int ItemInstanceID, int RetCount);
	void RPC_Broadcast_ForceSyncAllData(TArray<struct FPickUpItemData> DataList);
	void OnBoxEmptyDelegate__DelegateSignature(int boxId);
	TArray<struct FPickUpItemData> GetDataList();
	void FinishPickedUp(class AActor* OwnerTarget, int AdditionalParam, const struct FName& EquipSlotName, int PickUpCount);
};


// Class ShadowTrackerExtra.PickUpPropContainerComponent
// 0x0010 (0x0108 - 0x00F8)
class UPickUpPropContainerComponent : public UActorComponent
{
public:
	TArray<class AActor*>                              InventoryData;                                            // 0x00F8(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickUpPropContainerComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PickupProxyFactory
// 0x0000 (0x0028 - 0x0028)
class UPickupProxyFactory : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickupProxyFactory");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlaneComponent
// 0x0020 (0x0118 - 0x00F8)
class UPlaneComponent : public UActorComponent
{
public:
	TArray<struct FPlaneData>                          PlayersOnPlaneDataList;                                   // 0x00F8(0x0010) (ZeroConstructor)
	class UClass*                                      PlaneClass;                                               // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UBehaviorTree*                               PlaneBT;                                                  // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlaneComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlaneViewerPawn
// 0x0018 (0x03E0 - 0x03C8)
class APlaneViewerPawn : public APawn
{
public:
	class UCapsuleComponent*                           CapsuleComponent;                                         // 0x03C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         CameraBoom;                                               // 0x03D0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            FollowCamera;                                             // 0x03D8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlaneViewerPawn");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerState
// 0x0010 (0x0038 - 0x0028)
class UPlayerControllerState : public UObject
{
public:
	class UPlayerControllerStateMachine*               OwnerStateMachine;                                        // 0x0028(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateActive
// 0x0000 (0x0038 - 0x0038)
class UPlayerControllerStateActive : public UPlayerControllerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateActive");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateFighting
// 0x0000 (0x0038 - 0x0038)
class UPlayerControllerStateFighting : public UPlayerControllerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateFighting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateFinished
// 0x0010 (0x0048 - 0x0038)
class UPlayerControllerStateFinished : public UPlayerControllerState
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              TimeInterval;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateFinished");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateFlying
// 0x0000 (0x0038 - 0x0038)
class UPlayerControllerStateFlying : public UPlayerControllerState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateFlying");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateJumping
// 0x0010 (0x0048 - 0x0038)
class UPlayerControllerStateJumping : public UPlayerControllerState
{
public:
	float                                              JumpRadius;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpHeight;                                               // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateJumping");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateLanding
// 0x0020 (0x0058 - 0x0038)
class UPlayerControllerStateLanding : public UPlayerControllerState
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	float                                              ForwardDiffHeightThreshold;                               // 0x0050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateLanding");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerControllerStateMachine
// 0x0098 (0x00C0 - 0x0028)
class UPlayerControllerStateMachine : public UObject
{
public:
	class ASTExtraPlayerController*                    OwnerPlayerController;                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPlayerControllerState*                      CurrentState;                                             // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateActive;                              // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFlying;                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateJumping;                             // 0x0048(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateLanding;                             // 0x0050(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFighting;                            // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UPlayerControllerState*                      PlayerControllerStateFinished;                            // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<struct FName, class UPlayerControllerState*>  PlayerControllerStateList;                                // 0x0068(0x0050) (ExportObject, ZeroConstructor)
	struct FName                                       CurrentStateName;                                         // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerControllerStateMachine");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraProp
// 0x0068 (0x03D0 - 0x0368)
class ASTExtraProp : public AActor
{
public:
	bool                                               bKeepRelevantWhenHiddenInGame;                            // 0x0368(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0369(0x0007) MISSED OFFSET
	class ASTExtraBaseCharacter*                       OwnerPlayer;                                              // 0x0370(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       LastOwnerPlayer;                                          // 0x0378(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  OriginTrans;                                              // 0x0380(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FName                                       PropAttachSocket;                                         // 0x03B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               EquipSound;                                               // 0x03B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               UnEquipSound;                                             // 0x03C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraProp");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerEquipmentProp
// 0x0000 (0x03D0 - 0x03D0)
class APlayerEquipmentProp : public ASTExtraProp
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerEquipmentProp");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PlayerGunCollosionComp
// 0x00A0 (0x0198 - 0x00F8)
class UPlayerGunCollosionComp : public UActorComponent
{
public:
	float                                              DetectInterval;                                           // 0x00F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                DetectThreshold;                                          // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FoldFactor;                                               // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       pCharOwner;                                               // 0x0108(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0110(0x0008) MISSED OFFSET
	struct FVector                                     BoxHalfSize;                                              // 0x0118(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekLeftOnVehicle;                                // 0x0124(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekRightOnVehicle;                               // 0x0130(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekLeft;                                         // 0x013C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekRight;                                        // 0x0148(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              StaticTraceLengthOffset;                                  // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     QEoffsetPeekStandAdd;                                     // 0x0158(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekCrouchAdd;                                    // 0x0164(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     QEoffsetPeekProneAdd;                                     // 0x0170(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	int                                                FoldFactorDelt;                                           // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                FoldFactorDeltChange;                                     // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                TraceDis;                                                 // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TickDeltTime;                                             // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsDrawDebugLine;                                          // 0x018C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x018D(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerGunCollosionComp");
		return ptr;
	}


	void SetEffect(bool Visbile, const struct FVector& EffectLoc);
	void CheckCollision(int InFoldFactor, const struct FVector& FoldPoint, const struct FVector& FoldNormal);
};


// Class ShadowTrackerExtra.PlayerSecurityInfoCollector
// 0x0620 (0x0718 - 0x00F8)
class UPlayerSecurityInfoCollector : public UActorComponent
{
public:
	TArray<int>                                        EnergyItemIDList;                                         // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<int>                                        EnergySpeedUpPhaseIndexList;                              // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bEnableDetailFlowLog;                                     // 0x0118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnableDetailHurtFlowLog;                                 // 0x0119(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x011A(0x0006) MISSED OFFSET
	struct FClientCircleFlow                           CurCircleFlow;                                            // 0x0120(0x0128)
	struct FClientCircleFlow                           CollectCircleFlow;                                        // 0x0248(0x0128)
	struct FHurtFlow                                   CurHurtFlow;                                              // 0x0370(0x0120)
	struct FClientJumpFlow                             JumpFlow;                                                 // 0x0490(0x0080)
	unsigned char                                      UnknownData01[0x208];                                     // 0x0510(0x0208) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerSecurityInfoCollector");
		return ptr;
	}


	void StartOnPlane();
	void PlayerCanJump();
	void HandleSyncCircleInfo(int Index);
	void HandleCharacterSafeZoneTips(float SafeZoneTime);
	void HandleCharacterCircleWaveOver(int Index);
	void HandleCharacterCircleSizeAndPosition(const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int Index);
	void HandleCharacterBlueCircleRun(float BlueCircleRunTime);
	void HandleCharacterBlueCirclePreWarning(float BlueCirclePreWarningTime);
	void HandleCharacterAttrChangedWithDetail(class AActor* nowActor, const struct FString& AttrName, float ValueDelta, float ResultValue);
	void ExitParachute();
	void EnterParachute();
	void EnterJumping();
};


// Class ShadowTrackerExtra.PickupManagerComponent
// 0x0088 (0x0180 - 0x00F8)
class UPickupManagerComponent : public UActorComponent
{
public:
	float                                              CheckPickUpInterval;                                      // 0x00F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PickUpZLimit;                                             // 0x00FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bApplyVisibleTrace;                                       // 0x0100(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET
	TArray<struct FVector2D>                           FindPutDownPointSearchRadiusGroupArray;                   // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                FindPutDownPointCircleSplitNum;                           // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FindPutDownPointZThreshold;                               // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FindPutDownPointZTraceOffset;                             // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   RegionXRange;                                             // 0x0124(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   RegionYRange;                                             // 0x012C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugSearchLine;                                     // 0x0134(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawDebugSearchedPutDownPointsSphere;                    // 0x0135(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0136(0x0002) MISSED OFFSET
	struct FVector                                     DebugSearchedPutDownPointsBoxExtent;                      // 0x0138(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              DebugSearchedPutDownPointsSphereRadius;                   // 0x0144(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DebugSearchedPutDownPointsPointSize;                      // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DrawTime;                                                 // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugGetLocWithOutClamp;                                 // 0x0150(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
	TArray<TWeakObjectPtr<class AActor>>               PickupAvailableActorPool;                                 // 0x0158(0x0010) (ZeroConstructor)
	TArray<class AActor*>                              ConfirmedPickupActorPool;                                 // 0x0168(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0178(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PickupManagerComponent");
		return ptr;
	}


	void ServerPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void ServerPutDownTarget(class AActor* Target);
	void ServerPickUpTarget(class AActor* Target, int AdditionalParam, const struct FName& EquipSlotName, int PickUpCount);
	void PutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void PutDownTarget(class AActor* Target);
	void PickUpTarget(class AActor* Target, int AdditionalParam, const struct FName& EquipSlotName, int PickUpCount);
	void NotifyMissPickupAvailableActor(class AActor* Target);
	void NotifyMeetPickupAvailableActor(class AActor* Target);
	struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);
	void GetConfirmedPickupAvailableActors();
	void ControlClientPutDownTargetWithLocation(class AActor* Target, const struct FVector& Loc);
	void ControlClientPutDownTarget(class AActor* Target);
	void ControlClientPickUpTarget(class AActor* Target, int AdditionalParam);
	void ClampWorldLocation(struct FVector* OutVector);
};


// Class ShadowTrackerExtra.PlayerSwimComponent
// 0x0010 (0x0108 - 0x00F8)
class UPlayerSwimComponent : public UActorComponent
{
public:
	float                                              downWaterHeight;                                          // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00FC(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerSwimComponent");
		return ptr;
	}


	void UpdateSwimMove_BluePrint();
	void UpdatePlayerState_BluePrint();
	void UpdateCameraState_BluePrint();
	void UpdateBreath_BluePrint();
	void SyncWaterObject_BluePrint();
	void SetDeltTime_BluePrint(float DeltaTime);
	class AActor* GetWaterObject();
};


// Class ShadowTrackerExtra.PlayerVaultComponent
// 0x0000 (0x00F8 - 0x00F8)
class UPlayerVaultComponent : public UActorComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PlayerVaultComponent");
		return ptr;
	}


	bool VaultFromCPP();
	void UpdateVault_BluePrint();
};


// Class ShadowTrackerExtra.PostureRecognitionComponent
// 0x0080 (0x0320 - 0x02A0)
class UPostureRecognitionComponent : public USceneComponent
{
public:
	struct FScriptMulticastDelegate                    OnAccelerateMoveUpdate;                                   // 0x02A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDecelerateMoveUpdate;                                   // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUniformMoveUpdate;                                      // 0x02C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangeMovingState;                                      // 0x02D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MinAccelerationThreshold;                                 // 0x02E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDccelerationThreshold;                                 // 0x02E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CurMoveSpeed;                                             // 0x02E8(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     CurMoveAcc;                                               // 0x02F4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	TEnumAsByte<EObjectMovingType>                     CurMovingType;                                            // 0x0300(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0301(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PostureRecognitionComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.PUBGDoor
// 0x0070 (0x03E8 - 0x0378)
class APUBGDoor : public AUAENetActor
{
public:
	bool                                               bDebugDraw;                                               // 0x0378(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              autoOpenDistanceSquared;                                  // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              autoOpenAngel;                                            // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              forwardSpeedRatio;                                        // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DoorState;                                                // 0x0388(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               DoorBroken;                                               // 0x038C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x038D(0x0003) MISSED OFFSET
	class UStaticMeshComponent*                        doorMesh;                                                 // 0x0390(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              InteractValidAngle;                                       // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UBoxComponent*                               interactionBox;                                           // 0x03A0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bDoubleDoor;                                              // 0x03A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x03A9(0x0003) MISSED OFFSET
	int                                                DoorStateEx;                                              // 0x03AC(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               DoorBrokenEx;                                             // 0x03B0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x03B1(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        doorMeshEx;                                               // 0x03B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               interactionBoxEx;                                         // 0x03C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              InteractDelay;                                            // 0x03C8(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x03CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoOpenTriggered;                                       // 0x03D0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAutoOpenStated;                                          // 0x03D1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bTriggeredDoor;                                           // 0x03D2(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAutoOpenTriggeredEx;                                     // 0x03D3(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bAutoOpenStatedEx;                                        // 0x03D4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bTriggeredDoorEx;                                         // 0x03D5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x03D6(0x0002) MISSED OFFSET
	class ACharacter*                                  PlayerCharacter;                                          // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              autoOpenAngelCosinValue;                                  // 0x03E0(0x0004) (ZeroConstructor, IsPlainOldData)
	bool                                               IsInDoorCollisionBox;                                     // 0x03E4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               IsInDoorCollisionBoxEx;                                   // 0x03E5(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x2];                                       // 0x03E6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.PUBGDoor");
		return ptr;
	}


	void SetDoorBroken(bool bExtraDoor);
	void RefreshUIOnClient();
	void OpenDoorBy(class ACharacter* Character, bool extraDoor);
	void OnRep_RepDoorStateEx();
	void OnRep_RepDoorState();
	void OnRep_RepDoorBrokenEx();
	void OnRep_RepDoorBroken();
	void OnEndOverlapEx(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnEndOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
	void OnDoorRPC(class ACharacter* Character, bool bAimingExtraDoor);
	void OnBeginOverlapEx(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnBeginOverlap(class UPrimitiveComponent* activatedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool IsAimingExtraDoor(class ACharacter* Character);
	void Init(class UBoxComponent* interactionBox, class UStaticMeshComponent* doorMesh, bool inDoubleDoor, class UBoxComponent* interactionBoxEx, class UStaticMeshComponent* doorMeshEx);
	void ForceNetUpdate();
	void CloseDoorBy(class ACharacter* Character, bool extraDoor);
	void BP_DoorBroken(bool isBeginPlay, bool bExtraDoor);
	void ActionDoorOnClient(int doorStateDst, bool bExtraDoor);
	void ActionDoorImmediatly(int doorStateDst, bool bExtraDoor);
};


// Class ShadowTrackerExtra.RadiationCircle
// 0x0038 (0x03A0 - 0x0368)
class ARadiationCircle : public AActor
{
public:
	class UStaticMeshComponent*                        CylinderMesh;                                             // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        CylinderMeshBase;                                         // 0x0370(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraGameStateBase*                       SGameStatNew;                                             // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0380(0x0010) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData)
	class UMaterialInstanceDynamic*                    DynamicMatBase;                                           // 0x0398(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.RadiationCircle");
		return ptr;
	}


	void InitRadiationCircle();
	void HandleOnSafeZoneTips(float Val);
};


// Class ShadowTrackerExtra.ReloadWeaponState
// 0x0008 (0x0160 - 0x0158)
class UReloadWeaponState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ReloadWeaponState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.RespawnItemConfig
// 0x0010 (0x0040 - 0x0030)
class URespawnItemConfig : public UDataAsset
{
public:
	TArray<struct FRespawnItemMajorGroup>              MajorGroupList;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.RespawnItemConfig");
		return ptr;
	}

};


// Class ShadowTrackerExtra.ReticlePostprocessData
// 0x0090 (0x00C0 - 0x0030)
class UReticlePostprocessData : public UDataAsset
{
public:
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0030(0x0090) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ReticlePostprocessData");
		return ptr;
	}


	struct FWeaponPPSettings GetPostprocessData();
};


// Class ShadowTrackerExtra.RewardData
// 0x0028 (0x0058 - 0x0030)
class URewardData : public UDataAsset
{
public:
	float                                              DefaultScoreMultiplierByDamage;                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DefaultScoreMultiplierByKill;                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      ScoreByReverseRanking;                                    // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<float>                                      ScoreMultiplierByRanking;                                 // 0x0048(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.RewardData");
		return ptr;
	}

};


// Class ShadowTrackerExtra.SceneCaptureCharacter
// 0x0040 (0x07C0 - 0x0780)
class ASceneCaptureCharacter : public ACharacter
{
public:
	class UCharacterAvatarComponent*                   AvatarComponent;                                          // 0x0780(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCharacterWeaponManagerComponent*            WeaponManagerComponent;                                   // 0x0788(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0790(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SceneCaptureCharacter");
		return ptr;
	}


	class ASTExtraWeapon* SpawnAndBackpackWeaponOnServer(class UClass* Template, const struct FItemDefineID& ID, const struct FName& LogicSocket, bool bAutoUse, bool bResetBulletNum);
	class UWeaponManagerComponent* GetWeaponManager();
	int GetSlotId();
	struct FString GetNickName();
	struct FString GetNetId();
};


// Class ShadowTrackerExtra.SecurityLogWeaponCollector
// 0x01D0 (0x02C8 - 0x00F8)
class USecurityLogWeaponCollector : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x1D0];                                     // 0x00F8(0x01D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SecurityLogWeaponCollector");
		return ptr;
	}


	void OnCharacterWeaponShootHit(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
	void OnCharacterUsingWeaponChanged(ESurviveWeaponPropSlot TargetChangeSlot);
	void OnCharacterShootTarget(class AActor* InHitActor, const struct FSecurityLogHitTargetInfo& TargetInfo);
	void OnCharacterAimModeChanged(TEnumAsByte<EPlayerCameraMode> Mode);
	bool IsInADSAimState();
};


// Class ShadowTrackerExtra.SecuryInfoComponent
// 0x00C8 (0x01C0 - 0x00F8)
class USecuryInfoComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0xC8];                                      // 0x00F8(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SecuryInfoComponent");
		return ptr;
	}


	void ReportJumpFlow(const struct FClientJumpFlow& JumpFlow);
	void ReportHurtFlow(const struct FHurtFlow& HurtFlow);
	void ReportGameStartFlow(const struct FClientGameStartFlow& GameStartFlow);
	void ReportGameEndFlow(const struct FClientGameEndFlow& GameEndFlow);
	void ReportGameBaseInfo(const struct FGameBaseInfo& BaseInfo);
	void ReportCircleFlow(const struct FClientCircleFlow& CircleFlow);
	void ReportAttackFlow(const struct FAttackFlow& AttackFlow);
	void ReportAimFlow(const struct FAimFlow& AimFlow);
};


// Class ShadowTrackerExtra.ServerSwitchComponent
// 0x0058 (0x0150 - 0x00F8)
class UServerSwitchComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnFPSMonitorConfigSwitchRecv;                             // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnFPSLowWarning;                                          // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FFPSMonitorConfigSwitch                     FPSMonitorConfigSwitch;                                   // 0x0118(0x0014) (Config)
	float                                              LowFPSWarningTipsLastTime;                                // 0x012C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLocalSwitcherFPSLowWarning;                              // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0131(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ServerSwitchComponent");
		return ptr;
	}


	void RequireConfigRPC();
	void OnUserQualitySettingChanged(int renderlevel);
	void CountingDown();
	void AnswerconfigRPC(const struct FFPSMonitorConfigSwitch& configswitch);
};


// Class ShadowTrackerExtra.ShootingPracticeTarget
// 0x0060 (0x03C8 - 0x0368)
class AShootingPracticeTarget : public AActor
{
public:
	float                                              MaxHealth;                                                // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UpDownChangeSpeed;                                        // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    HorizontalMeshRelativeRot;                                // 0x0370(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    VerticalMeshRelativeRot;                                  // 0x037C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              ResetAndGetUpTimeAfterShootDown;                          // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurHealth;                                                // 0x038C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUp;                                                    // 0x0390(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bHasActivatedMove;                                        // 0x0391(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0392(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    DestroyShootingPracticeTargetDelegate;                    // 0x0398(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference)
	class UStaticMeshComponent*                        StaticMeshComp;                                           // 0x03A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USmoothActorMoveComponent*                   MoveComp;                                                 // 0x03B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x03B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ShootingPracticeTarget");
		return ptr;
	}


	void SetUpOrDownOnServer(bool bUp);
	void RPC_NetMulticast_SetUpOrDownOnServer(bool bUp);
	void RPC_NetMulticast_NotifyBroken();
	void ResetAndGetUpOnServer();
	void OnRep_bIsUp();
	void OnRep_bHasActivatedMove();
	void HandleBroken(bool bFromClientBeginPlay);
};


// Class ShadowTrackerExtra.ShootingUIWidget
// 0x00B8 (0x0368 - 0x02B0)
class UShootingUIWidget : public UUAEUserWidget
{
public:
	float                                              ReloadingCD;                                              // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	struct FText                                       ReloadCountDownText;                                      // 0x02B8(0x0018) (Edit, BlueprintVisible)
	struct FText                                       GunBulletText;                                            // 0x02D0(0x0018) (Edit, BlueprintVisible)
	struct FText                                       BulletLeftCount;                                          // 0x02E8(0x0018) (Edit, BlueprintVisible)
	class UImage*                                      ReloadCDMask;                                             // 0x0300(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ReloadBtnBG;                                              // 0x0308(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     SprintBtn;                                                // 0x0310(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UButton*                                     ReloadBtn;                                                // 0x0318(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      FireBtn;                                                  // 0x0320(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraBaseCharacter*                       CurPlayerBaseCharacter;                                   // 0x0328(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnReloadCountDownChangeDelegate;                          // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGunBulletNumChangeDelegate;                             // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBulletLeftNumChangeDelegate;                            // 0x0350(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0360(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ShootingUIWidget");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponEffectComponent
// 0x0060 (0x0160 - 0x0100)
class UWeaponEffectComponent : public UWeaponLogicBaseComponent
{
public:
	TMap<TEnumAsByte<EWeaponAction>, class UAkAudioEvent*> SoundDataMap;                                             // 0x0100(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	class UAkAudioEvent*                               ShellDropSound;                                           // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SilencerShootSound;                                       // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponEffectComponent");
		return ptr;
	}


	void HandleWeaponAction(TEnumAsByte<EWeaponAction> Action);
};


// Class ShadowTrackerExtra.ShootWeaponEffectComponent
// 0x0168 (0x02C8 - 0x0160)
class UShootWeaponEffectComponent : public UWeaponEffectComponent
{
public:
	class UClass*                                      CameraShakeTemplate_NormalCameraMode;                     // 0x0160(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CameraShakeTemplate_NearCameraMode;                       // 0x0168(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      CameraShakeTemplate_AimCameraMode;                        // 0x0170(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraShakeInnerRadius;                                   // 0x0178(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraShakeOuterRadius;                                   // 0x017C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CameraShakFalloff;                                        // 0x0180(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	class UParticleSystem*                             MuzzleFX;                                                 // 0x0188(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocalMuzzelFXScale;                                       // 0x0190(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteMuzzleFX;                                           // 0x01A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RemoteMuzzelFXScale;                                      // 0x01A8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FFXDistancaScaleStruct                      RemoteMuzzleFXDistanceScale;                              // 0x01B4(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalSilencerMuzzleFX;                                    // 0x01C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocalSilencerMuzzelFXScale;                               // 0x01D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteSilencerMuzzleFX;                                   // 0x01E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RemoteSilencerMuzzelFXScale;                              // 0x01E8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FFXDistancaScaleStruct                      RemoteSilencerMuzzleFXDistanceScale;                      // 0x01F4(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalFiringSuppressorMuzzleFX;                            // 0x0208(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocalFiringSuppressorMuzzelFXScale;                       // 0x0210(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteFiringSuppressorMuzzleFX;                           // 0x0220(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RemoteFiringSuppressorMuzzelFXScale;                      // 0x0228(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FFXDistancaScaleStruct                      RemoteSuppressorMuzzleFXDistanceScale;                    // 0x0234(0x0010) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	class UParticleSystem*                             LocalCompensatorMuzzleFX;                                 // 0x0248(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LocalCompensatorMuzzelFXScale;                            // 0x0250(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	class UParticleSystem*                             RemoteCompensatorMuzzleFX;                                // 0x0260(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RemoteCompensatorMuzzelFXScale;                           // 0x0268(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsActiveShellDropFXWhenShoot;                            // 0x0274(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0275(0x0003) MISSED OFFSET
	class UParticleSystem*                             ShellDropFX;                                              // 0x0278(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ShellDropFXScale;                                         // 0x0280(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	class UParticleSystemComponent*                    MuzzleFXComp;                                             // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FVector                                     MuzzleFXOriginalScale;                                    // 0x02A0(0x000C) (IsPlainOldData)
	float                                              MuzzleFXPrevDistanceScaler;                               // 0x02AC(0x0004) (ZeroConstructor, IsPlainOldData)
	class UParticleSystemComponent*                    ShellDropFXComp;                                          // 0x02B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData10[0x10];                                      // 0x02B8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponEffectComponent");
		return ptr;
	}


	void OnWeaponUnEquiped();
	void OnWeaponEuiped();
	void HandleWeaponAction(TEnumAsByte<EWeaponAction> Action);
	void ActiveLocalShellDropFX();
};


// Class ShadowTrackerExtra.WeaponEntity
// 0x0280 (0x0380 - 0x0100)
class UWeaponEntity : public UWeaponLogicBaseComponent
{
public:
	int                                                WeaponId;                                                 // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EWeaponType                                        WeaponType;                                               // 0x0104(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponHoldType>                       WeaponHoldType;                                           // 0x0105(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	struct FName                                       WeaponAttachSocket;                                       // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseCustomWeaponBackpackAttachSocket;                     // 0x0110(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	struct FName                                       CustomWeaponBackpackAttachSocket;                         // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<TEnumAsByte<EWeaponComponentType>, bool>      PlugComponentSlotMap;                                     // 0x0120(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	TMap<TEnumAsByte<EWeaponComponentType>, struct FWeaponComponentItemData> PlugComponentSlotDataMap;                                 // 0x0170(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              SwitchFromIdleToBackpackTime;                             // 0x01C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwitchFromBackpackToIdleTime;                             // 0x01C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x01C8(0x0008) MISSED OFFSET
	struct FTransform                                  AttachToBackRelativeTransform_NoBagL;                     // 0x01D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_NoBagR;                     // 0x0200(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv1BagL;                    // 0x0230(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv1BagR;                    // 0x0260(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv2BagL;                    // 0x0290(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv2BagR;                    // 0x02C0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv3BagL;                    // 0x02F0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  AttachToBackRelativeTransform_Lv3BagR;                    // 0x0320(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UStaticMesh*                                 LODStaticMesh;                                            // 0x0350(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMesh*                               LODSkeletalMesh;                                          // 0x0358(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UMaterialInstance*                           WeaponMaterialUsedForDisplay;                             // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class UTslWeaponAttachmentData*>            ArrTslWeaponAttachmentData;                               // 0x0368(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0378(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponEntity");
		return ptr;
	}


	bool HasPlugComponentSlot(TEnumAsByte<EWeaponComponentType> Slot);
	EWeaponType GetWeaponType();
	TEnumAsByte<EWeaponHoldType> GetWeaponHoldType();
};


// Class ShadowTrackerExtra.ShootWeaponEntity
// 0x0300 (0x0680 - 0x0380)
class UShootWeaponEntity : public UWeaponEntity
{
public:
	float                                              BulletFireSpeed;                                          // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxBulletNumInOneClip;                                    // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ExtendMaxBulletNumInOneClip;                              // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ShootInterval;                                            // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasSingleFireMode;                                       // 0x0390(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasAutoFireMode;                                         // 0x0391(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasBurstFireMode;                                        // 0x0392(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0393(0x0001) MISSED OFFSET
	int                                                BurstShootBulletsNum;                                     // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BurstShootInterval;                                       // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                BulletNumSingleShot;                                      // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MuzzleSocketName;                                         // 0x03A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DefaultMuzzleSocketName;                                  // 0x03A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       SilencerSocketName;                                       // 0x03B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       FiringSuppressorSocketName;                               // 0x03B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ShellDropSocketName;                                      // 0x03C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ImpactEffectSkipDistance;                                 // 0x03C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxImpactEffectSkipTime;                                  // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                ShootTotalType;                                           // 0x03D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ADSManualStop;                                            // 0x03D4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03D5(0x0003) MISSED OFFSET
	struct FWeaponHitPartCoff                          WeaponHitPartCoff;                                        // 0x03D8(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              BaseImpactDamage;                                         // 0x03FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BulletRange;                                              // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class UClass*                                      ImpactActorTemplate;                                      // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EBulletImpactDir>                      ImpactDirType;                                            // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0411(0x0007) MISSED OFFSET
	TArray<struct FSRangeAttenuateConfig>              RangeAttenuate;                                           // 0x0418(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              RangeModifier;                                            // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReferenceDistance;                                        // 0x042C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FItemDefineID                               BulletType;                                               // 0x0438(0x0018) (Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                               bHasInfiniteClips;                                        // 0x0450(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bClipHasInfiniteBullets;                                  // 0x0451(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x0452(0x0002) MISSED OFFSET
	int                                                InitBulletInClip;                                         // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAutoReload;                                              // 0x0458(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0459(0x0003) MISSED OFFSET
	float                                              TraceDistance;                                            // 0x045C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxValidHitTime;                                          // 0x0460(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EWeaponReloadType>                     ReloadType;                                               // 0x0464(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0465(0x0003) MISSED OFFSET
	float                                              PreFireTime;                                              // 0x0468(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PostFireTime;                                             // 0x046C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadDurationStart;                                      // 0x0470(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadDurationLoop;                                       // 0x0474(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadTime;                                               // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadTimeTactical;                                       // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadTimeMagOut;                                         // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadTimeMagIn;                                          // 0x0484(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ReloadAllTIDName;                                         // 0x0488(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ReloadTacticalTIDName;                                    // 0x0490(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FAutoAimingConfig                           AutoAimingConfig;                                         // 0x0498(0x0064) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET
	struct FSRecoilInfo                                RecoilInfo;                                               // 0x0500(0x0070) (Edit, BlueprintVisible)
	float                                              AccessoriesVRecoilFactor;                                 // 0x0570(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccessoriesHRecoilFactor;                                 // 0x0574(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccessoriesRecoveryFactor;                                // 0x0578(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FSDeviation                                 DeviationInfo;                                            // 0x057C(0x0040) (Edit, BlueprintVisible)
	float                                              ShotGunSpread;                                            // 0x05BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GameDeviationFactor;                                      // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GameDeviationAccuracy;                                    // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AccessoriesDeviationFactor;                               // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CrossHairType;                                            // 0x05CC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x05CD(0x0003) MISSED OFFSET
	float                                              CrossHairInitialSize;                                     // 0x05D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairBurstSpeed;                                      // 0x05D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrossHairBurstIncreaseSpeed;                              // 0x05D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x05DC(0x0004) MISSED OFFSET
	struct FName                                       DefaultScopeSocket;                                       // 0x05E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DefaultGripSocket;                                        // 0x05E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DefaultGunStockSocket;                                    // 0x05F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       DefaultMagSocket;                                         // 0x05F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponBodyLength;                                         // 0x0600(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x0604(0x0004) MISSED OFFSET
	TArray<struct FName>                               OpticalSightAttachmentSocketNameList;                     // 0x0608(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0618(0x0004) MISSED OFFSET
	float                                              WeaponAimFOV;                                             // 0x061C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponAimInTime;                                          // 0x0620(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponAimPitchRate;                                       // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponAimYawRate;                                         // 0x0628(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GameMotionYawRate;                                        // 0x062C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              GameMotionPitchRate;                                      // 0x0630(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ForegripParam;                                            // 0x0634(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SensitiveFireYawRate;                                     // 0x0638(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SensitiveFirePitchRate;                                   // 0x063C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESightType>                            SightType;                                                // 0x0640(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0641(0x0007) MISSED OFFSET
	struct FItemDefineID                               DefaultScopeID;                                           // 0x0648(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	float                                              MaxBulletImpactFXClampDistance;                           // 0x0660(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxBulletImpactFXSpawnNum;                                // 0x0664(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RecoilKickADS;                                            // 0x0668(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtraHitPerformScale;                                     // 0x066C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HUDAlphaDecreaseSpeedScale;                               // 0x0670(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bAutoExitScopeAfterFire;                                  // 0x0674(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EReleaseToFireType                                 ReleaseFireType;                                          // 0x0675(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bLock90DirWhenPitchAbove75;                               // 0x0676(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData13[0x1];                                       // 0x0677(0x0001) MISSED OFFSET
	float                                              LockAnimPitchDegree;                                      // 0x0678(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LockAnimPitchDegreeCrouch;                                // 0x067C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponEntity");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponStateManager
// 0x0060 (0x0160 - 0x0100)
class UWeaponStateManager : public UWeaponLogicBaseComponent
{
public:
	class UWeaponStateBase*                            CurrentState;                                             // 0x0100(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UWeaponStateBase*                            DefaultState;                                             // 0x0108(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0110(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateManager");
		return ptr;
	}


	class UWeaponStateBase* GetCurrentState();
	TEnumAsByte<EFreshWeaponStateType> GetCurrentFreshWeaponStateType();
};


// Class ShadowTrackerExtra.ShootWeaponStateManager
// 0x0000 (0x0160 - 0x0160)
class UShootWeaponStateManager : public UWeaponStateManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ShootWeaponStateManager");
		return ptr;
	}

};


// Class ShadowTrackerExtra.SkillUtils
// 0x0000 (0x0028 - 0x0028)
class USkillUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SkillUtils");
		return ptr;
	}


	bool STATIC_IsCurUseGrenade(class ASTExtraBaseCharacter* pChar);
	class ASTExtraPlayerController* STATIC_GetPlayerController(class APawn* OwnerPawn);
	void STATIC_GetParticleComps(class AActor* UserActor, const struct FName& ParticleTagName, TArray<class UParticleSystemComponent*>* OutParArr);
	class UMeshComponent* STATIC_GetMeshCompFromCharacter(class ASTExtraBaseCharacter* pChar, const struct FName& MeshTagName);
};


// Class ShadowTrackerExtra.SmoothActorMoveComponent
// 0x0020 (0x0118 - 0x00F8)
class USmoothActorMoveComponent : public UActorComponent
{
public:
	TArray<struct FSegamentData>                       MoveData;                                                 // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	bool                                               bAutoMoveWhenStart;                                       // 0x0108(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ELoopMoveMode                                      LoopMoveMode;                                             // 0x0109(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving;                                                // 0x010A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xD];                                       // 0x010B(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SmoothActorMoveComponent");
		return ptr;
	}


	void StopMove();
	void StartMove();
};


// Class ShadowTrackerExtra.SRadarChartUserWidget
// 0x0060 (0x0158 - 0x00F8)
class USRadarChartUserWidget : public UWidget
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	class USlateBrushAsset*                            RadarBrush;                                               // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UImage*                                      CenterPointImg;                                           // 0x0110(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FColor>                              VertexColor;                                              // 0x0118(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UImage*>                              VertexFarPointImg;                                        // 0x0128(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)
	TArray<float>                                      VertexScale;                                              // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FVector2D>                           VertexUV;                                                 // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SRadarChartUserWidget");
		return ptr;
	}


	void OnHide();
	void FreshChartDataToContent();
};


// Class ShadowTrackerExtra.StaticMeshActorFM
// 0x0008 (0x0370 - 0x0368)
class AStaticMeshActorFM : public AActor
{
public:
	class UHierarchicalInstancedStaticMeshComponent*   InstancedMeshComponent;                                   // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.StaticMeshActorFM");
		return ptr;
	}

};


// Class ShadowTrackerExtra.StaticMeshSpawnActor
// 0x0008 (0x0370 - 0x0368)
class AStaticMeshSpawnActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0368(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.StaticMeshSpawnActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STBuffAction_PlaySCAppearance
// 0x0028 (0x0170 - 0x0148)
class USTBuffAction_PlaySCAppearance : public UUTSkillAction
{
public:
	struct FString                                     AppearanceKeyString;                                      // 0x0148(0x0010) (Edit, ZeroConstructor)
	class UMaterialInterface*                          AppearanceMaterial;                                       // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LifeSpan;                                                 // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x0168(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STBuffAction_PlaySCAppearance");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STCharacterFollowComp
// 0x0098 (0x0190 - 0x00F8)
class USTCharacterFollowComp : public UActorComponent
{
public:
	class UTargetJumpOperation*                        CurRecordingVaultOperation;                               // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTargetJumpOperation*                        CurPlayingVaultOperation;                                 // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              CanFollowDist;                                            // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuitFollowAngleInput;                                     // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              QuitFollowDist;                                           // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PointDensityTimeInterval;                                 // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistThrehold;                                             // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PawnOwner;                                                // 0x012C(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	class USTCharacterNearDeathComp*                   ParentNDComp;                                             // 0x0138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x38];                                      // 0x0140(0x0038) MISSED OFFSET
	TArray<class UTargetKeyOperation*>                 TargetOps;                                                // 0x0178(0x0010) (ZeroConstructor)
	class UTargetKeyOperation*                         CurOp;                                                    // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STCharacterFollowComp");
		return ptr;
	}


	bool WaitingConfirmState_IsConditionSatisfied();
	void WaitingConfirmState_ActOnUnsatisfied();
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);
	class UTargetJumpOperation* TargetStartVault(const struct FVector& vaultStartPos);
	void SetInterruptAutoFollowByInput(int InterrupteReason);
	void SelectedPickedTargetChangeNotifyHUD(class APawn* previousTarget);
	bool PlayerStopFollow();
	bool PlayerConfirmToFollow();
	void InitializeOwner(class APawn* _TempPawn);
	void FollowingTargetChangeNotifyHUD(class APawn* previousTarget);
	bool FollowingState_IsConditionSatisfied();
	void FollowingState_ActOnUnsatisfied();
	void FollowingState_ActOnSatisfied(float DeltaTime);
};


// Class ShadowTrackerExtra.STCharacterMovementComponent
// 0x02C0 (0x09F0 - 0x0730)
class USTCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	float                                              RadiusScaleWhenCheckPassWall;                             // 0x0730(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	bool                                               StopTick;                                                 // 0x0734(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0735(0x0003) MISSED OFFSET
	float                                              TimeSpeedFactor;                                          // 0x0738(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               CheatCheckSumFailed;                                      // 0x073C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanSendCmdAck;                                           // 0x073D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheatClientLocation;                                     // 0x073E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x073F(0x0001) MISSED OFFSET
	float                                              MaxPenetrationAdjustmentSize;                             // 0x0740(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WaveRidingSmoothingFactor;                                // 0x0744(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxZSpeedOutOfWaterModifier;                              // 0x0748(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationUnderwaterSwimming;                    // 0x074C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxUnderwaterSwimAcceleration;                            // 0x0750(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimAcceleration;                                      // 0x0754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDecideClientTimeSpeedDeltaTime;                        // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTimeSpeedAntiCheatCheck : 1;                          // 0x075C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseUserCmdDeltaCompress : 1;                             // 0x075C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x075D(0x0003) MISSED OFFSET
	float                                              SimulatedNearDistanceSqAtClient;                          // 0x0760(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimulatedNearTickIntervalAtClient;                        // 0x0764(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimulatedMiddleDistanceSqAtClient;                        // 0x0768(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimulatedMiddleTickIntervalAtClient;                      // 0x076C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimulatedFarDistanceSqAtClient;                           // 0x0770(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SimulatedFarTickIntervalAtClient;                         // 0x0774(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkSpeedCurveScale;                                      // 0x0778(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 MaxWalkSpeedCurve;                                        // 0x0780(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkSpeedModifierUnit;                                    // 0x0788(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinWalkSpeedModifier;                                     // 0x078C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ProneFloorAngle;                                          // 0x0790(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ProneFloorZ;                                              // 0x0794(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              JumpFloorAngle;                                           // 0x0798(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              JumpFloorZ;                                               // 0x079C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF4];                                      // 0x07A0(0x00F4) MISSED OFFSET
	bool                                               bFixParachuteEnabled;                                     // 0x0894(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0895(0x0003) MISSED OFFSET
	float                                              CheckDistanceAhead;                                       // 0x0898(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x089C(0x000C) MISSED OFFSET
	struct FMovementData                               StandMovement;                                            // 0x08A8(0x0040) (Edit, DisableEditOnInstance)
	struct FMovementData                               ProneMovement;                                            // 0x08E8(0x0040) (Edit, DisableEditOnInstance)
	struct FMovementData                               CrouchMovement;                                           // 0x0928(0x0040) (Edit, DisableEditOnInstance)
	float                                              GroggySpeed;                                              // 0x0968(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMovementStates                             MovementStates;                                           // 0x096C(0x0003) (Net, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x096F(0x0001) MISSED OFFSET
	float                                              MaxDesiredAccel;                                          // 0x0970(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDesiredAccel;                                          // 0x0974(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDesiredGroundFriction;                                 // 0x0978(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDesiredGroundFriction;                                 // 0x097C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinDesiredGroundFrictionSprint;                           // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProneWalkableFloorZ;                                      // 0x0984(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x18];                                      // 0x0988(0x0018) MISSED OFFSET
	float                                              PronedHalfHeight;                                         // 0x09A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PronedRadius;                                             // 0x09A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinimumHighAltitude;                                      // 0x09A8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x44];                                      // 0x09AC(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STCharacterMovementComponent");
		return ptr;
	}


	void UpdateMovementState_Server(const struct FMovementStates& Src, const struct FStanceUpdateCaller& Caller);
	void ToggleUserCmdDelta(bool Val);
	void TimeSpeedCheck(bool Val);
	void SpeedHackDetected(EStance Stance, TEnumAsByte<EMovementMode> MoveMode, TEnumAsByte<EMovementMode> PrevMovementMode, float OverAvgSpeed, float DetectionTime, float MaxContinuousTime, int Ping);
	void SeverAddRotationVelocity(const struct FVector& RotationVelocity);
	void SetProneFloorZ(float InProneFloorZ);
	void SetProneFloorAngle(float InProneFloorAngle);
	void SetJumpFloorZ(float InJumpFloorZ);
	void SetJumpFloorAngle(float InJumpFloorAngle);
	void ServerUserMoveCmdOld(int ClientApplySequence, TArray<unsigned char> UserCmdDelta);
	void ServerUserMoveCmdDual(uint32_t Sequence, uint32_t Checksum, class UPrimitiveComponent* ClientMovementBase, TArray<unsigned char> UserCmd, TArray<unsigned char> UserCmdDelta);
	void ServerUserMoveCmd(uint32_t Sequence, uint32_t Checksum, class UPrimitiveComponent* ClientMovementBase, TArray<unsigned char> UserCmd);
	void Ping2Server(float ServerTime, float ClientTime);
	void Ping2Client(float ServerTime);
	void PhysicsFlyDistance(float DeltaTime, const struct FVector& flyVelocity);
	void OnRecoverOnServer();
	void OnPreReconnectOnServer();
	void OnClientCloseUserCmdDelta();
	float K2_GetProneFloorZ();
	float K2_GetProneFloorAngle();
	float K2_GetJumpFloorZ();
	float K2_GetJumpFloorAngle();
	bool IsWalkable(const struct FHitResult& Hit);
	bool IsVaulting();
	float GetLastServerMoveTime();
	bool DragOnGround(float DeltaTime);
	void ClientUserMoveCmdAck(int Sequence);
};


// Class ShadowTrackerExtra.STCharacterRescueOtherComp
// 0x00A8 (0x01A0 - 0x00F8)
class USTCharacterRescueOtherComp : public UActorComponent
{
public:
	int                                                WanderingRadius;                                          // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FanPickerData                               FanData;                                                  // 0x00FC(0x0010) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x010C(0x001C) MISSED OFFSET
	class ASTExtraBaseCharacter*                       RescueWho;                                                // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnRescueTargetChange;                                     // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              RescueingStatusStartTimeSeconds;                          // 0x0140(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0144(0x001C) MISSED OFFSET
	TArray<struct FRestoringDurationWithGameModeStruct> RestoringDurationArray;                                   // 0x0160(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              RestoringDuration;                                        // 0x0170(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PawnOwner;                                                // 0x0174(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	class USTCharacterNearDeathComp*                   ParentNDComp;                                             // 0x0180(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0188(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STCharacterRescueOtherComp");
		return ptr;
	}


	bool WaitingConfirmState_IsConditionSatisfied();
	void WaitingConfirmState_ActOnUnsatisfied();
	void WaitingConfirmState_ActOnSatisfied(float DeltaTime);
	void TickAsHelper(float DeltaTime);
	void ServerPlayerConfirm(class ASTExtraBaseCharacter* _RescueWho);
	void SelectedPickedTargetChangeNotifyHUD(class APawn* previousTarget);
	bool RescueingState_IsConditionSatisfied();
	void RescueingState_ActOnUnsatisfied();
	void RescueingState_ActOnSatisfied(float DeltaTime);
	void RescueingProcessFinished();
	bool PlayerConfirmToRescueClientSide();
	bool PickTargetsAsHelper(TArray<class ASTExtraBaseCharacter*>* pickedTargets);
	void OnRep_IsRescueingOtherStatusChange();
	bool IsInRescueingStatus();
	void InitializeOwner(class APawn* _TempPawn, class USTCharacterNearDeathComp* _Outer);
	float GetRestoringDuration();
	void DrawDebugFan();
};


// Class ShadowTrackerExtra.STEActorCacheComponent
// 0x0058 (0x0150 - 0x00F8)
class USTEActorCacheComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x00F8(0x0050) MISSED OFFSET
	int                                                PoolSizeLimit_Bullet;                                     // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PoolSizeLimit_BulletImpactEffect;                         // 0x014C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STEActorCacheComponent");
		return ptr;
	}


	bool PushActorToPool(TEnumAsByte<EActorCacheID> ID, class ASTECachableActor* Target);
	class ASTECachableActor* GetActorFromPool(TEnumAsByte<EActorCacheID> ID);
};


// Class ShadowTrackerExtra.STECachableActor
// 0x0008 (0x0370 - 0x0368)
class ASTECachableActor : public AActor
{
public:
	class USTEActorCacheComponent*                     ActorCacheComponent;                                      // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STECachableActor");
		return ptr;
	}


	void RegisterCachePool(class USTEActorCacheComponent* Pool);
	bool PushToPool(TEnumAsByte<EActorCacheID> ID);
};


// Class ShadowTrackerExtra.STExtraShootWeaponComponent
// 0x01C0 (0x02C0 - 0x0100)
class USTExtraShootWeaponComponent : public UWeaponLogicBaseComponent
{
public:
	struct FName                                       NormalBulletsTrackCompTag;                                // 0x0100(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScopeBulletsTrackCompTag;                                 // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawShootLine;                                           // 0x0110(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              DrawShootLineTime;                                        // 0x0114(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawShootPointOnScreen;                                  // 0x0118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	float                                              DrawShootPointOnScreenTime;                               // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DrawShootPointOnScreenSize;                               // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DrawShootPoint3DSize;                                     // 0x0124(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UBulletTrackComponent*                       ShootWeaponBulletsTrackComponent;                         // 0x0128(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBulletTrackComponent*                       ShootWeaponScopeBulletsTrackComponent;                    // 0x0130(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UShootWeaponEntity*                          ShootWeaponEntityComponent;                               // 0x0138(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bIsContinuousShooting;                                    // 0x0140(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	int                                                ContinuousShootingBulletsNum;                             // 0x0144(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnShoot;                                                  // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x160];                                     // 0x0160(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeaponComponent");
		return ptr;
	}


	void ShootDelegate__DelegateSignature();
	void OnWeaponClipMaxBulletChanged();
	void OnWeaponBulletChanged();
	void OnContinuousShootStateChangedDelegate__DelegateSignature(bool bIsContinuousShooting);
	void OnContinuousShootDelegate__DelegateSignature(int BulletsNum);
};


// Class ShadowTrackerExtra.STEShootWeaponProjectComponent
// 0x0010 (0x02D0 - 0x02C0)
class USTEShootWeaponProjectComponent : public USTExtraShootWeaponComponent
{
public:
	TArray<class AActor*>                              BulletCacheList;                                          // 0x02C0(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponProjectComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STEFlareGuntProjectComponent
// 0x0000 (0x02D0 - 0x02D0)
class USTEFlareGuntProjectComponent : public USTEShootWeaponProjectComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STEFlareGuntProjectComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STEShootWeaponBulletImpactEffect
// 0x0508 (0x0870 - 0x0368)
class ASTEShootWeaponBulletImpactEffect : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	class UParticleSystem*                             DefaultFX;                                                // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ConcreteFX;                                               // 0x0378(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             DirtFX;                                                   // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WaterFX;                                                  // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             MetalFX;                                                  // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             WoodFX;                                                   // 0x0398(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             GlassFX;                                                  // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             GrassFX;                                                  // 0x03A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             FleshFX;                                                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SteelFX;                                                  // 0x03B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SandbagFX;                                                // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SandFX;                                                   // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             ClothFX;                                                  // 0x03D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PlasticFX;                                                // 0x03D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             LeatherFX;                                                // 0x03E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             CeramicsFX;                                               // 0x03E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PaperFX;                                                  // 0x03F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             StoneFX;                                                  // 0x03F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SnowFX;                                                   // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PopCanFX;                                                 // 0x0408(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             PyreflyFX;                                                // 0x0410(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             LeafFX;                                                   // 0x0418(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             CarFX;                                                    // 0x0420(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             AsphaltFX;                                                // 0x0428(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             SteelFX_NoDecal;                                          // 0x0430(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bForceDefaultFX;                                          // 0x0438(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0439(0x0007) MISSED OFFSET
	class UAkAudioEvent*                               DefaultSound;                                             // 0x0440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ConcreteSound;                                            // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               DirtSound;                                                // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               WaterSound;                                               // 0x0458(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MetalSound;                                               // 0x0460(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               WoodSound;                                                // 0x0468(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GlassSound;                                               // 0x0470(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               GrassSound;                                               // 0x0478(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               FleshSound;                                               // 0x0480(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SteelSound;                                               // 0x0488(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SandbagSound;                                             // 0x0490(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SandSound;                                                // 0x0498(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ClothSound;                                               // 0x04A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PlasticSound;                                             // 0x04A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LeatherSound;                                             // 0x04B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               CeramicsSound;                                            // 0x04B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PaperSound;                                               // 0x04C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               StoneSound;                                               // 0x04C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SnowSound;                                                // 0x04D0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PopCanSound;                                              // 0x04D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PyreflySound;                                             // 0x04E0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LeafSound;                                                // 0x04E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               CarSound;                                                 // 0x04F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               AsphaltSound;                                             // 0x04F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FDecalData                                  DefaultDecal;                                             // 0x0500(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  ConcreteDecal;                                            // 0x0520(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  DirtDecal;                                                // 0x0540(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  WaterDecal;                                               // 0x0560(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  MetalDecal;                                               // 0x0580(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  WoodDecal;                                                // 0x05A0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  GrassDecal;                                               // 0x05C0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  GlassDecal;                                               // 0x05E0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  FleshDecal;                                               // 0x0600(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  SteelDecal;                                               // 0x0620(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  SandbagDecal;                                             // 0x0640(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  SandDecal;                                                // 0x0660(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  ClothDecal;                                               // 0x0680(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  PlasticDecal;                                             // 0x06A0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  LeatherDecal;                                             // 0x06C0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  CeramicsDecal;                                            // 0x06E0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  PaperDecal;                                               // 0x0700(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  StoneDecal;                                               // 0x0720(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  SnowDecal;                                                // 0x0740(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  PopCanDecal;                                              // 0x0760(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  PyreflyDecal;                                             // 0x0780(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  LeafDecal;                                                // 0x07A0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  CarDecal;                                                 // 0x07C0(0x0020) (Edit, DisableEditOnInstance)
	struct FDecalData                                  AsphaltDecal;                                             // 0x07E0(0x0020) (Edit, DisableEditOnInstance)
	struct FBulletHitInfoUploadData                    SurfaceHit;                                               // 0x0800(0x0064) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bAudioOnly;                                               // 0x0864(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0865(0x0003) MISSED OFFSET
	class USceneComponent*                             TargetImpactComp;                                         // 0x0868(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponBulletImpactEffect");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STEShootWeaponInstantComponent
// 0x0000 (0x02C0 - 0x02C0)
class USTEShootWeaponInstantComponent : public USTExtraShootWeaponComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STEShootWeaponInstantComponent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraAirborne
// 0x0160 (0x08E0 - 0x0780)
class ASTExtraAirborne : public ACharacter
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0780(0x0008) MISSED OFFSET
	struct FVector                                     CurrentForwardSpeedV2;                                    // 0x0788(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData)
	struct FVector                                     CurrentTurnSpeedV2;                                       // 0x0794(0x000C) (Edit, BlueprintVisible, Net, IsPlainOldData)
	struct FAirborneSpeed                              FallSpeed2;                                               // 0x07A0(0x0040) (Edit, BlueprintVisible)
	struct FAirborneSpeed                              OpenSpeed2;                                               // 0x07E0(0x0040) (Edit, BlueprintVisible)
	TEnumAsByte<EAirborne2>                            AirborneState2;                                           // 0x0820(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0821(0x0003) MISSED OFFSET
	float                                              CurrentAltitude2;                                         // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FCameraSettings                             FreefallCameraSetting2;                                   // 0x0828(0x0014) (Edit, BlueprintVisible)
	struct FCameraSettings                             OpeningCameraSetting2;                                    // 0x083C(0x0014) (Edit, BlueprintVisible)
	class UAkComponent*                                AkComponent;                                              // 0x0850(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USpringArmComponent*                         SpringArmFromBP;                                          // 0x0858(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTimelineComponent*                          LerpCameraTimeline;                                       // 0x0860(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCurveFloat*                                 CameraCurve;                                              // 0x0868(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0870(0x0010) MISSED OFFSET
	class UCameraSettingComponentFromBP*               CameraSettingComponentFromBP;                             // 0x0880(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               FreeFallAkEvent;                                          // 0x0888(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               OpeningAkEvent;                                           // 0x0890(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCameraAnim*                                 AirborneCameraAnim;                                       // 0x0898(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAirborneJump;                                           // 0x08A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class APawn*                                       GroundPawnFromBP;                                         // 0x08B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HaveToOpenAltitude;                                       // 0x08B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x08BC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    AirborneStateChangeDelegate;                              // 0x08C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x08D0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraAirborne");
		return ptr;
	}


	void SwitchCameraFromBP(struct FCameraSettings* CameraSetting);
	void StateChangeServerFromBP();
	void StateChangeClientFromBP();
	void ServerSetStateFromBP(TEnumAsByte<EAirborne2> AirborneStateBP);
	void ServerAndAirbornAfterLand();
	void RotateMulticastFromBP(const struct FRotator& Rotator);
	void OnStateChangeServerFromBP();
	void OnStateChangeMultiCastFromBP();
	void OnRep_AirbornStateChange();
	void OnCameraSettingLerp(float LerpAlpha);
	struct FVector NormalSpeedFromBP();
	void MoveRight(float Rate);
	void MoveForward(float Rate);
	bool IsAutonomousFromBP();
	struct FVector GetVerticalSpeed2();
	struct FVector GetAirborneVelocity2();
	void DoMoveRight(float Rate);
	void DoMoveForward(float Rate);
	void ChangeCurForwardSpeedVFromBP(const struct FVector& Speed);
};


// Class ShadowTrackerExtra.STExtraWeapon
// 0x0298 (0x0600 - 0x0368)
class ASTExtraWeapon : public AActor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET
	struct FTransform                                  FPPWeaponOffset;                                          // 0x0370(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  FPPWeaponOffsetNonShooting;                               // 0x03A0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FTransform                                  FPPWeaponOffsetSprint;                                    // 0x03D0(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FName                                       WeaponStaticMeshCompTag;                                  // 0x0400(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UWeaponOwnerProxy*                           OwnerProxy;                                               // 0x0408(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    WeaponEffectActionDelegate;                               // 0x0410(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnShootWeaponChangeState;                                 // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponMeshChangedDelegate;                              // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UWeaponEntity*                               WeaponEntityComp;                                         // 0x0440(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TEnumAsByte<EFreshWeaponStateType>                 CurFreshWeaponState;                                      // 0x0448(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0449(0x0007) MISSED OFFSET
	class UWeaponAvatarComponent*                      WeaponAvatarComponent;                                    // 0x0450(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0458(0x0008) MISSED OFFSET
	struct FWeaponReconnectReplicateData               WeaponReconnectReplicateData;                             // 0x0460(0x0060) (BlueprintVisible, Net)
	unsigned char                                      UnknownData03[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET
	TArray<class USceneComponent*>                     UpdateOptimizationList;                                   // 0x04C8(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	bool                                               bEnableCompUpdateOptimization;                            // 0x04D8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x7];                                       // 0x04D9(0x0007) MISSED OFFSET
	struct FSpawnAndBackpackWeaponReplicatedData       OwnerClientCreateWeaponData;                              // 0x04E0(0x0058) (Net)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0538(0x0010) MISSED OFFSET
	class USkeletalMeshComponent*                      PawnMesh;                                                 // 0x0548(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	int                                                WeaponAvatarID;                                           // 0x0550(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0554(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      WeaponMeshComp;                                           // 0x0558(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        WeaponStaticMeshComp;                                     // 0x0560(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TEnumAsByte<EWeaponState>                          CurWeaponState;                                           // 0x0568(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x0569(0x0007) MISSED OFFSET
	class AActor*                                      SimulatedOwnerActor;                                      // 0x0570(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class APawn*                                       SimulatedOwnerPawn;                                       // 0x0578(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0580(0x0008) MISSED OFFSET
	class USkeletalMesh*                               OriginalSkeletalMesh;                                     // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      OriginalSkeletalMeshAnimClass;                            // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStaticMesh*                                 OriginalStaticMesh;                                       // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerController*                    CachePlayerController;                                    // 0x05A0(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<class USceneComponent*, struct FSceneCompUpdateOptimizationItem> SceneCompsUpdateOpCatche;                                 // 0x05A8(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData09[0x8];                                       // 0x05F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraWeapon");
		return ptr;
	}


	void WeaponNotifyChangeStateDelegate__DelegateSignature(TEnumAsByte<EFreshWeaponStateType> State);
	void WeaponEffectActionDelegate__DelegateSignature(TEnumAsByte<EWeaponAction> Action);
	void SetWeaponAvatarMaterial(class UMaterialInstance* InAvatarMaterial);
	void ServerUpdateAvatar();
	void ServerLogFireWeapon(const struct FAttackId& AttackId);
	void ServerCleanAvatar();
	void RPC_ClientSyncPostFireHandledTime(float InPostFireHandledTime);
	void RPC_ClientChangeFreshWeaponState(TEnumAsByte<EFreshWeaponStateType> State);
	void PlayLocalShellDropFX();
	void OnWeaponMeshChangedDelegate__DelegateSignature();
	void OnUserQualitySettingChanged(int renderlevel);
	void OnShootWeaponChangeStateDelegate__DelegateSignature(TEnumAsByte<EFreshWeaponStateType> State);
	void OnRep_WeaponReconnectReplicateData();
	void OnRep_WeaponAvatarID();
	void OnRep_SimulatedOwnerPawn();
	void OnRep_OwnerClientCreateWeaponData();
	void OnRep_AttachmentReplication();
	void OnReleaseTrigger();
	void OnPushTrigger();
	bool JudgeHasEquipedComponentSlot(TEnumAsByte<EWeaponComponentType> Slot);
	bool HasComponentSlot(TEnumAsByte<EWeaponComponentType> Slot);
	class UStaticMeshComponent* GetWeaponStaticMeshComponent();
	class USkeletalMeshComponent* GetWeaponSkeletalMeshComponent();
	struct FString GetWeaponName();
	class UMeshComponent* GetWeaponMeshComponent();
	class UWeaponEntity* GetWeaponEntityComponent();
	struct FName GetWeaponAttachSocket();
	class UWeaponSpecificHandler* GetSpecificHandler();
	class APlayerController* GetOwnerPlayerController();
	class APawn* GetOwnerPawn();
	struct FString GetOwnerName();
	class AController* GetOwnerController();
	class AActor* GetOwnerActor();
	struct FItemDefineID GetItemDefineID();
	struct FWeaponComponentItemData GetComponentSlotTarget(TEnumAsByte<EWeaponComponentType> Slot);
	class UItemHandleBase* GetBackpackItemHandle();
	void ChangeSequenceState(TEnumAsByte<EFreshWeaponStateType> StateType);
};


// Class ShadowTrackerExtra.STExtraShootWeapon
// 0x03C0 (0x09C0 - 0x0600)
class ASTExtraShootWeapon : public ASTExtraWeapon
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0600(0x0008) MISSED OFFSET
	float                                              voiceCheckCD;                                             // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              voiceCheckShowCD;                                         // 0x060C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               isDefaultSlienceWeapon;                                   // 0x0610(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1A];                                      // 0x0611(0x001A) MISSED OFFSET
	bool                                               bIsPistol;                                                // 0x062B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsAIOwner;                                               // 0x062C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x062D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnShootWeaponAutoReloadDel;                               // 0x0630(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCurBulletChange;                                        // 0x0640(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartFireDelegate;                                      // 0x0650(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStopFireDelegate;                                       // 0x0660(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponShootDelegate;                                    // 0x0670(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponShootHitDelegate;                                 // 0x0680(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponReloadStartDelegate;                              // 0x0690(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponReloadEndDelegage;                                // 0x06A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponEquipDelegate;                                    // 0x06B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponUnEquipDelegate;                                  // 0x06C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBulletNumChangeDelegate;                                // 0x06D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x06E0(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnWeaponSecurityLogShootActorDelegate;                    // 0x06F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UTslBallisticsComp*                          TslBallisticsComp;                                        // 0x0700(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	class USTExtraShootWeaponComponent*                ShootWeaponComponent;                                     // 0x0708(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	int                                                CurBulletNumInClip;                                       // 0x0710(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CurMaxBulletNumInOneClip;                                 // 0x0714(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                CurBulletNumInBarrel;                                     // 0x0718(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EShootWeaponShootMode>                 ShootMode;                                                // 0x071C(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	EGunFireMode                                       FireMode;                                                 // 0x071D(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x071E(0x0002) MISSED OFFSET
	int                                                TotalFireMode;                                            // 0x0720(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	EGunFireMode                                       InitialFireMode;                                          // 0x0724(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0725(0x0003) MISSED OFFSET
	float                                              VoiceCheckDis;                                            // 0x0728(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SilenceVoiceCheckDis;                                     // 0x072C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              nowVoiceCheckDis;                                         // 0x0730(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ShootTargetLoc;                                           // 0x0734(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0740(0x0004) MISSED OFFSET
	TEnumAsByte<ECollisionChannel>                     TraceChannel;                                             // 0x0744(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0745(0x0003) MISSED OFFSET
	struct FVector                                     LastImpactEffectLocation;                                 // 0x0748(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              LastImpactEffectTime;                                     // 0x0754(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x0758(0x0004) MISSED OFFSET
	int                                                CurBurstShootIndex;                                       // 0x075C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FTransform                                  BoltActionTransform;                                      // 0x0760(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHasFinishConfirmedFromServer;                            // 0x0790(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0791(0x0003) MISSED OFFSET
	int                                                ClientShootTimes;                                         // 0x0794(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               BulletFlySound;                                           // 0x0798(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               LoadBulletSound;                                          // 0x07A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ChangeMagazineSound;                                      // 0x07A8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MagazineINSound;                                          // 0x07B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MagazineOUTSound;                                         // 0x07B8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PullBoltSound;                                            // 0x07C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ToggleFiringMode;                                         // 0x07C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     BulletDecalScale;                                         // 0x07D0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x07DC(0x0004) MISSED OFFSET
	struct FName                                       MagTag;                                                   // 0x07E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       PlayerMagTag;                                             // 0x07E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                CurBulletNumInClipOnSimulatedClients;                     // 0x07F0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x07F4(0x0004) MISSED OFFSET
	class UAttrModifyComponent*                        AttrModifierCompoment;                                    // 0x07F8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FWeaponAttrModifyConfig>             WeaponAttrModifyConfigList;                               // 0x0800(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TEnumAsByte<EShootWeaponState>                     CurShootWeaponState;                                      // 0x0810(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x7];                                       // 0x0811(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        DefaultScopeComponent;                                    // 0x0818(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        DefaultGripComponent;                                     // 0x0820(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        DefaultGunstockComponent;                                 // 0x0828(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        DefaultMagComponent;                                      // 0x0830(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UStaticMeshComponent*                        DefaultPlayerMagComponent;                                // 0x0838(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData13[0x10];                                      // 0x0840(0x0010) MISSED OFFSET
	class UStaticMesh*                                 DefaultMagMesh;                                           // 0x0850(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0858(0x0008) MISSED OFFSET
	class UShootWeaponEntity*                          ShootWeaponEntityComp;                                    // 0x0860(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FWeaponPPSettings                           WeaponGunPostprocessSettings;                             // 0x0868(0x0090) (Edit, DisableEditOnInstance)
	class UReticlePostprocessData*                     ReticlePostprocessData;                                   // 0x08F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0900(0x0004) MISSED OFFSET
	int                                                CurrentZeroLevel;                                         // 0x0904(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x10];                                      // 0x0908(0x0010) MISSED OFFSET
	bool                                               IsEquipSilencer;                                          // 0x0918(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               IsEquipFiringSuppressor;                                  // 0x0919(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               IsEquipCompensator;                                       // 0x091A(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x1];                                       // 0x091B(0x0001) MISSED OFFSET
	struct FVector                                     OffsetFPPLocation;                                        // 0x091C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    OffsetFPPRotation;                                        // 0x0928(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     OffsetFPPCrouchLocation;                                  // 0x0934(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    OffsetFPPCrouchRotation;                                  // 0x0940(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     OffsetFPPProneLocation;                                   // 0x094C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    OffsetFPPProneRotation;                                   // 0x0958(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    OffsetFPPScopeRotation;                                   // 0x0964(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               DefaultScopeVisiable;                                     // 0x0970(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x7];                                       // 0x0971(0x0007) MISSED OFFSET
	TArray<struct FItemDefineID>                       AttachedAttachmentID;                                     // 0x0978(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData19[0x10];                                      // 0x0988(0x0010) MISSED OFFSET
	TArray<struct FMeshSynData>                        synData;                                                  // 0x0998(0x0010) (Net, ZeroConstructor, Transient)
	TArray<struct FBulletHitInfoUploadData>            HitDataArray;                                             // 0x09A8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData20[0x8];                                       // 0x09B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeapon");
		return ptr;
	}


	void ZeroingLevelUp();
	void ZeroingLevelDown();
	bool StopFireFilter();
	void StopFire(TEnumAsByte<EFreshWeaponStateType> ToState);
	int StartReload();
	bool StartFireFilter();
	void StartFire();
	void StartDoPreBarrel(float HandledTime);
	void StartDoBarrel();
	void ShowDefaultScope(bool bShow);
	void ShowDefaultAttachmentComponentByType(EWeaponAttachmentSocketType Type, bool bVisible);
	void SetWeaponAttrModifierEnable(const struct FString& AttrModifierID, bool Enable);
	bool SetFireMode(EGunFireMode NewFireMode);
	void SetCurrentBulletNumInClipOnServer(int Count);
	void SetCurrentBulletNumInClipOnClient(int Count);
	void SetCurReloadMethod(TEnumAsByte<EWeaponReloadMethod> method);
	void SetAvailableWeaponAttachmentSocketTypeList(TArray<EWeaponAttachmentSocketType>* List);
	void RPC_ClientSetCurReloadMethod(TEnumAsByte<EWeaponReloadMethod> method);
	void RPC_Client_SetBulletNumInClip(int Count);
	void ResetZeroingLevel();
	void ResetInitialBulletNumInClip(bool bSetZero);
	void ResetGunAimingParameters();
	void OnWeaponUnEquipDelegate__DelegateSignature();
	void OnWeaponShootHitDelegate__DelegateSignature(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
	void OnWeaponShootDelegate__DelegateSignature();
	void OnWeaponSecurityLogShootActorDelegate__DelegateSignature(class AActor* InHitActor, const struct FSecurityLogHitTargetInfo& TargetInfo);
	void OnWeaponReloadStartDelegate__DelegateSignature();
	void OnWeaponReloadEndDelegage__DelegateSignature();
	void OnWeaponEquipDelegate__DelegateSignature();
	void OnStopFireDelegate__DelegateSignature();
	void OnStartFireDelegate__DelegateSignature();
	void OnShootWeaponAutoReloadDelegate__DelegateSignature();
	void OnRep_HitDataArray();
	void OnRep_CurMaxBulletNumChange();
	void OnRep_CurBulletNumInClipOnSimulatedClients();
	void OnRep_AvatarMeshChanged();
	void OnMaxBulletChange__DelegateSignature();
	void OnCurBulletChange__DelegateSignature();
	void OnBulletNumChangeDelegate__DelegateSignature();
	void NotifyServerNoneShootAction();
	void NotifyClientNoneShootAction();
	void LocalSetBulletNumInClip(int Count);
	bool IsInPreFire();
	bool IsAttachmentSlotAlreadyAttachedToWeapon(EWeaponAttachmentSlotID slotID);
	TEnumAsByte<EWeaponReloadType> GetWeaponReloadType();
	struct FWeaponPPSettings GetWeaponPostprocessSettings();
	struct FWeaponPPSettings GetWeaponOrScopePostprocessSettings();
	int GetWeaponID();
	float GetWeaponBodyLength();
	float GetTraceDistanceFromEntity();
	struct FName GetSilencerSocketNameFromEntity();
	class UShootWeaponEntity* GetShootWeaponEntityComponent();
	float GetShootIntervalFromEntity();
	struct FName GetShellDropSocketNameFromEntity();
	int GetScopeID();
	class UMeshComponent* GetScopeAimCameraTransform(const struct FName& SocketName, int SocketIndex);
	float GetReloadTimeMagOutFromEntity();
	float GetReloadTimeFromEntity();
	struct FName GetReloadTIDName(TEnumAsByte<EWeaponReloadMethod> method);
	float GetReloadTacticalTimeFromEntity();
	float GetReloadDurationStartFromEntity();
	float GetReloadDurationLoopFromEntity();
	struct FTransform GetRelativeMuzzleTransform();
	float GetReferenceDistance();
	float GetRangeModifier();
	TArray<struct FSRangeAttenuateConfig> GetRangeAttenuateFromEntity();
	float GetPreFireTimeFromEntity();
	float GetPostFireTimeFromEntity();
	struct FTransform GetMuzzleTransform();
	struct FName GetMuzzleSocketNameFromEntity();
	float GetMaxValidHitTimeFromEntity();
	float GetMaxImpactEffectSkipTimeFromEntity();
	int GetMaxBulletNumInOneClipFromEntity();
	float GetImpactEffectSkipDistanceFromEntity();
	struct FWeaponHitPartCoff GetHitPartCoff();
	float GetGameDeviationFactor();
	struct FName GetFiringSuppressorSocketNameFromEntity();
	float GetFireSensitiveYawRate();
	float GetFireSensitivePitchRate();
	EGunFireMode GetFireModeFromEntity();
	class UStaticMeshComponent* GetDefaultAttachmentComponentByType(EWeaponAttachmentSocketType Type);
	float GetDefaultADSFOV();
	TEnumAsByte<ESightType> GetCurSightType();
	int GetCurrentZeroingLevel();
	int GetCurrentZeroingDistance();
	float GetCurReloadTime();
	TEnumAsByte<EWeaponReloadMethod> GetCurReloadMethod();
	float GetCrossHairInitSize();
	float GetCrossHairBurstSpeed();
	float GetCrossHairBurstIncreaseSpeed();
	bool GetClipHasInfiniteBulletsFromEntity();
	class UMeshComponent* GetChildMeshComp(const struct FName& compTag);
	float GetBurstShootIntervalFromEntity();
	int GetBurstShootBulletsNumFromEntity();
	struct FItemDefineID GetBulletTypeFromEntity();
	float GetBulletRangeEntity();
	unsigned char GetBulletNumSingleShotFromEntity();
	float GetBulletFireSpeedFromEntity();
	float GetBaseImpactDamageEntity();
	TArray<EWeaponAttachmentSocketType> GetAvailableWeaponAttachmentSocketTypeList();
	bool GetAutoReloadFromEntity();
	bool GetADSManualStop();
	float GetAccessoriesVRecoilFactor();
	float GetAccessoriesRecoveryFactor();
	float GetAccessoriesHRecoilFactor();
	float GetAccessoriesDeviationFactor();
	void EnableInfiniteBullets(bool bEnable);
	void ClearWeaponAttrModifier();
};


// Class ShadowTrackerExtra.STExtraAIShootWeapon
// 0x0000 (0x09C0 - 0x09C0)
class ASTExtraAIShootWeapon : public ASTExtraShootWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraAIShootWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraAnimInstance
// 0x0530 (0x08F0 - 0x03C0)
class USTExtraAnimInstance : public UAnimInstance
{
public:
	struct FScriptMulticastDelegate                    LandHeavy;                                                // 0x03C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    LandExtreme;                                              // 0x03D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRotator                                    OwnerAimRotation;                                         // 0x03E0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	int                                                AnimInstanceIndex;                                        // 0x03EC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PeekFrameRate;                                            // 0x03F0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F4(0x0008) MISSED OFFSET
	float                                              PeekSpeed;                                                // 0x03FC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               C_NoAimOffset;                                            // 0x0400(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_Move;                                                   // 0x0401(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsSwimUp;                                               // 0x0402(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_MovementChanged;                                        // 0x0403(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_UseHairAnimDynamics;                                    // 0x0404(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_Scoping;                                                // 0x0405(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_ShoulderFiring;                                         // 0x0406(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_ReloadProne;                                            // 0x0407(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsObstructed;                                           // 0x0408(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsPeeking;                                              // 0x0409(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_SightSlow;                                              // 0x040A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsPistolPeekAim;                                        // 0x040B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsOnVehicle;                                            // 0x040C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x040D(0x0003) MISSED OFFSET
	float                                              SwimRotateX;                                              // 0x0410(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsCastingGenerate;                                      // 0x0414(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_Hurting;                                                // 0x0415(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsNearDeathStatus;                                      // 0x0416(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_ShouldPauseAnim;                                        // 0x0417(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsJumping;                                              // 0x0418(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_JumpForward;                                            // 0x0419(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsTurning;                                              // 0x041A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IsHealing;                                              // 0x041B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_IdleAddtiveValid;                                       // 0x041C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_ForegripAnimValid;                                      // 0x041D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x041E(0x0002) MISSED OFFSET
	float                                              C_FireAlpha;                                              // 0x0420(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_SwimSpeed;                                              // 0x0424(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_ProneHandleAlpha;                                       // 0x0428(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_MaxFallingSpeed;                                        // 0x042C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_HandleFolderFactor;                                     // 0x0430(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_CharacterYawRotateRate;                                 // 0x0434(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_ForegripAnimParam;                                      // 0x0438(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              C_RecoilPlayStartTime;                                    // 0x043C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              C_RecoilBlendInTime;                                      // 0x0440(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              KickModifierHip;                                          // 0x0444(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              KickModifierShoulderFiring;                               // 0x0448(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              KickModifierIronsight;                                    // 0x044C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_UsingBoltAction;                                        // 0x0450(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_PlayIdle;                                               // 0x0451(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x0452(0x0006) MISSED OFFSET
	TEnumAsByte<EMovementMode>                         C_LastMovementMode;                                       // 0x0458(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	ECharacterPoseType                                 C_PoseType;                                               // 0x0459(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EWeaponType                                        C_WeaponType;                                             // 0x045A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_UseShootWeapon;                                         // 0x045B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EFreshWeaponStateType>                 C_WeaponState;                                            // 0x045C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParachuteState>                       C_ParachuteState;                                         // 0x045D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EWeaponHoldType>                       C_WeaponHoldType;                                         // 0x045E(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x045F(0x0001) MISSED OFFSET
	struct FVector                                     HandWeaponOffset_CP;                                      // 0x0460(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     HandWeaponOffsetTarget;                                   // 0x046C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              HandWeaponOffsetInterpSpeed;                              // 0x0478(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintWeaponLoweringAlpha_CP;                             // 0x047C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintWeaponLoweringScalar_CP;                            // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HandWeaponOffsetAlpha_CP;                                 // 0x0484(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsArmedWithGun_CP;                                       // 0x0488(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0489(0x0003) MISSED OFFSET
	float                                              RecoilRollValue_CP;                                       // 0x048C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilTimer_CP;                                           // 0x0490(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilRollRand_CP;                                        // 0x0494(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilPlayStartTime_CP;                                   // 0x0498(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RecoilBlendInTime_CP;                                     // 0x049C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RecoilADSRotation_CP;                                     // 0x04A0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              RecoilTimerScale_CP;                                      // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 RecoilRollCurve_CP;                                       // 0x04B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponStabilityAlpha_CP;                                  // 0x04B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponStabilityRefSpeed_CP;                               // 0x04BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapIn_CP;                               // 0x04C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   WeaponStabilityRefMapOut_CP;                              // 0x04C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponStabilityInterpSpeed_CP;                            // 0x04D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x04D4(0x000C) MISSED OFFSET
	struct FTransform                                  WeaponInertia_CP;                                         // 0x04E0(0x0030) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              WeaponInertia_Yaw_CP;                                     // 0x0510(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponInertia_Pitch_CP;                                   // 0x0514(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponInertia_Roll_CP;                                    // 0x0518(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_YawScalar_CP;                    // 0x051C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_CP;                                 // 0x0520(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_CP;                                 // 0x0524(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_CP;                         // 0x0528(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_CP;                                  // 0x052C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_CP;                                  // 0x0530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_CP;                               // 0x0534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_CP;                              // 0x0538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_InerpSpeed_ADS_CP;                          // 0x053C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertia_YawToRollScalar_ADS_CP;                     // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaRoll_Clamp_ADS_CP;                           // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Scalar_ADS_CP;                             // 0x0548(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Scalar_ADS_CP;                             // 0x054C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaX_Clamp_ADS_CP;                              // 0x0550(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponInertiaY_Clamp_ADS_CP;                              // 0x0554(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FRotator                                    C_OwnerRotation;                                          // 0x0558(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_ControlRotation;                                        // 0x0564(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_ViewRotation;                                           // 0x0570(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_ScopeAimOffsetStand;                                    // 0x057C(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_FPPStandOffsetRotation;                                 // 0x0588(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_FPPCrouchOffsetRotation;                                // 0x0594(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FRotator                                    C_FPPProneOffsetRotation;                                 // 0x05A0(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_MoveVelocity;                                           // 0x05AC(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_MoveVelocityInWorldSpace;                               // 0x05B8(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_MoveDir;                                                // 0x05C4(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_HurtDir;                                                // 0x05D0(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_FPPStandOffsetLocation;                                 // 0x05DC(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_FPPCrouchOffsetLocation;                                // 0x05E8(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_FPPProneOffsetLocation;                                 // 0x05F4(0x000C) (BlueprintVisible, IsPlainOldData)
	struct FVector                                     C_MagOffsetLocation;                                      // 0x0600(0x000C) (BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x060C(0x0004) MISSED OFFSET
	class ASTExtraBaseCharacter*                       C_OwnerCharacter;                                         // 0x0610(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAimOffsetBlendSpace*                        C_AimBlendSpace;                                          // 0x0618(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_MovementBSCache;                                        // 0x0620(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_HitBlendSpace;                                          // 0x0628(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_MovementBSCache_Dest;                                   // 0x0630(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_MovementBSStand;                                        // 0x0638(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_MovementBSCrouch;                                       // 0x0640(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_MovementBSProne;                                        // 0x0648(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace*                                 C_ObstructedAnim;                                         // 0x0650(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               C_FallingBS;                                              // 0x0658(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               C_PeekAnim;                                               // 0x0660(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UBlendSpace1D*                               C_ForegripAnim;                                           // 0x0668(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAimOffsetBlendSpace*                        C_PeekAnimLeftRight;                                      // 0x0670(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_TurnAnim;                                               // 0x0678(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_JumpStart;                                              // 0x0680(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_LandLight;                                              // 0x0688(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_LandHeavy;                                              // 0x0690(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAnimSequence*                               C_IdleAddtive;                                            // 0x0698(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x06A0(0x0004) MISSED OFFSET
	bool                                               bLocalFPP_CP;                                             // 0x06A4(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x06A5(0x0003) MISSED OFFSET
	float                                              LocalFPPAlpha_CP;                                         // 0x06A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLocalPlayer;                                           // 0x06AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x06AD(0x0003) MISSED OFFSET
	float                                              SprintLocoAlpha_CP;                                       // 0x06B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintLocoTimeMultiplier;                                 // 0x06B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoTimeMultiplier_FPP;                             // 0x06B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Yaw_CP;                                                   // 0x06BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationYaw_CP;                                           // 0x06C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Pitch_CP;                                                 // 0x06C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalized_CP;                                         // 0x06C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawInterpolationSpeed;                                    // 0x06CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalizedInterpolated_CP;                             // 0x06D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YawNormalizedCombat_CP;                                   // 0x06D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DesiredPitch_CP;                                          // 0x06D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AimDirectionCardinal_CP;                                  // 0x06DC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x06DD(0x0003) MISSED OFFSET
	struct FRotator                                    AORot_CP;                                                 // 0x06E0(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    AORotBackwards_CP;                                        // 0x06EC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              SwimmingPitch_CP;                                         // 0x06F8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceAddAimOffset_CP;                                     // 0x06FC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RiderLookLeft;                                            // 0x0700(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RiderLookRight;                                           // 0x0704(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationHipLeft_CP;                            // 0x0708(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationHipRight_CP;                           // 0x0709(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalForceRotationAimed_CP;                              // 0x070A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x070B(0x0001) MISSED OFFSET
	float                                              RotationPlayrateAimed_CP;                                 // 0x070C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationPlayrateAimedAdditiveSpine_CP;                    // 0x0710(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LastRotation_CP;                                          // 0x0714(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Freelook_Body_CP;                                         // 0x0720(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    Freelook_Delta_CP;                                        // 0x072C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	float                                              LocomotionSpeed_CP;                                       // 0x0738(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionSpeed2D_CP;                                     // 0x073C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsMoving_CP;                                             // 0x0740(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0741(0x0003) MISSED OFFSET
	float                                              LocomotionDirection_CP;                                   // 0x0744(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionDirectionClamped_CP;                            // 0x0748(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LocomotionJumpDirection_CP;                               // 0x074C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanYaw_CP;                                               // 0x0750(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    LastAbsoluteDirection_CP;                                 // 0x0754(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotation_CP;                                       // 0x0760(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotationFPP_CP;                                    // 0x076C(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    CameraFPPRotation_CP;                                     // 0x0778(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    ControlRotationLastMovement_CP;                           // 0x0784(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FRotator                                    CharacterRotation_CP;                                     // 0x0790(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bIsAimingBackward_CP;                                     // 0x079C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsAffectedByStatus_CP;                                   // 0x079D(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFreelooking_CP;                                        // 0x079E(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x079F(0x0001) MISSED OFFSET
	float                                              PickingUpAlpha_CP;                                        // 0x07A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x07A4(0x0004) MISSED OFFSET
	class UAnimMontage*                                PickupMontage_CP;                                         // 0x07A8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       EmoteMontageSlotName_CP;                                  // 0x07B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ReloadAlpha_CP;                                           // 0x07B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReloading_CP;                                          // 0x07BC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsJumping_CP;                                            // 0x07BD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsFalling_CP;                                            // 0x07BE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWasFalling_CP;                                           // 0x07BF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FallingAlpha_CP;                                          // 0x07C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   FallingMap2D;                                             // 0x07C4(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   FallingMapZ;                                              // 0x07CC(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x07D4(0x0004) MISSED OFFSET
	class UAnimMontage*                                MontageFallingRifle_CP;                                   // 0x07D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAnimMontage*                                MontageFallingUnarmed_CP;                                 // 0x07E0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPSprintAnimScalar;                                      // 0x07E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsUpperbody_CP;                                          // 0x07EC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0x3];                                       // 0x07ED(0x0003) MISSED OFFSET
	float                                              LocomotionDirectionInterp;                                // 0x07F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawGlobalMultiplier;                                  // 0x07F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawClamp;                                             // 0x07F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawInterpSpeedMin;                                    // 0x07FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanYawInterpSpeedMax;                                    // 0x0800(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsRescueingOther;                                         // 0x0804(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEquippingPistol_CP;                                    // 0x0805(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData18[0x2];                                       // 0x0806(0x0002) MISSED OFFSET
	class UAnimMontage*                                PistolEquipMontageRefCP;                                  // 0x0808(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoStandLimit_High;                                // 0x0810(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoCrouchLimit_High;                               // 0x0814(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoStandLimit_Low;                                 // 0x0818(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintLocoCrouchLimit_Low;                                // 0x081C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintAlphaSprintLimit_High;                              // 0x0820(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaSprintLimit_Low;                               // 0x0824(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintLocoLimitInterpSpeed;                               // 0x0828(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintAlpha_CP;                                           // 0x082C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SprintAlphaPitchComponent_CP;                             // 0x0830(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsTransitioning_CP;                                      // 0x0834(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData19[0x3];                                       // 0x0835(0x0003) MISSED OFFSET
	float                                              WeaponIKLH_CP;                                            // 0x0838(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponIKRH_CP;                                            // 0x083C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TargetIKRH_CP;                                            // 0x0840(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TargetIKLH_CP;                                            // 0x0844(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MontageIKLH_CP;                                           // 0x0848(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MontageIKRH_CP;                                           // 0x084C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponCollisionReloadAlpha_CP;                            // 0x0850(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IgnoreWeaponTransform_CP;                                 // 0x0854(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPreparingThrow_CP;                                     // 0x0858(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLocalQuickThrowHigh_CP;                                  // 0x0859(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x2];                                       // 0x085A(0x0002) MISSED OFFSET
	float                                              ThrowStateSwitchInterpSpeed;                              // 0x085C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LocalThrowModeSwitchAlpha_CP;                             // 0x0860(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ECharacterPoseType                                 Stance_CP;                                                // 0x0864(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ECharacterPoseType                                 LastStance_CP;                                            // 0x0865(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bWeaponObstructedHigh_CP;                                 // 0x0866(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x1];                                       // 0x0867(0x0001) MISSED OFFSET
	float                                              WeaponCollisionAlpha_CP;                                  // 0x0868(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ForceBasePose_CP;                                         // 0x086C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CurveAimState_CP;                                         // 0x0870(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bIsSprintingFast_CP;                                      // 0x0878(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x3];                                       // 0x0879(0x0003) MISSED OFFSET
	float                                              WeaponAimState_CP;                                        // 0x087C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WeaponAimStateInterpolated_CP;                            // 0x0880(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              UseProceduralAimOffset_CP;                                // 0x0884(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PickupIKAlpha_CP;                                         // 0x0888(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                IdleIndex_CP;                                             // 0x088C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                LastIdleIndex_CP;                                         // 0x0890(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTimer_CP;                                             // 0x0894(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTriggerRandom;                                        // 0x0898(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              IdleTriggerTimeMin_CP;                                    // 0x089C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IdleTriggerTimeVariation_CP;                              // 0x08A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SprintAlphaModifier_CP;                                   // 0x08A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanLeftAlpha_CP;                                         // 0x08A8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanRightAlpha_CP;                                        // 0x08AC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanTwoSideAlpha_CP;                                      // 0x08B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanLeftApplyTranslation_CP;                              // 0x08B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LeanInterpSpeed_CP;                                       // 0x08B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanInterpSpeedCollisionClamp_CP;                         // 0x08BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLinearLeanInterp;                                     // 0x08C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData23[0xB];                                       // 0x08C1(0x000B) MISSED OFFSET
	float                                              FallHeight_CP;                                            // 0x08CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LandingAlpha_CP;                                          // 0x08D0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeavyFallVerticalVelocityThreshold;                       // 0x08D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtremeFallVerticalVelocityThreshold;                     // 0x08D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeavyFallMovementStopTime;                                // 0x08DC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ExtremeFallMovementStopTime;                              // 0x08E0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData24[0xC];                                       // 0x08E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraAnimInstance");
		return ptr;
	}


	void TryToFireFlareGun();
	void StanceSwitch();
	void SetUseFlareGun(bool IsCanFire);
	void SetCharacterVehParamList(const struct FAnimVehParamList& NewAnimVehParamList);
	void SetC_ViewRotation(const struct FRotator& NewRotator);
	void SetC_PoseType(ECharacterPoseType NewECharacterPoseType);
	void SetC_IsonVehicle(bool NewIsonVehicle);
	void ResetIdle();
	void RandomizeIdleIndex_CP(bool ExludeLastIndex);
	void OnHitReaction(EAnimWeaponType WeaponType, const struct FName& BoneName, const struct FVector& Direction);
	void LpcPlayMontage(class UAnimMontage* MontageToPlay, float InPlayRate, EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, float InBlendIn);
	void HandleWeaponOnShot();
	void HandleOwnerAnimEvent(const struct FName& EventMsg);
	void HandleAnimCurves();
	float GetAnimSpeed_TS(TEnumAsByte<EAnimBluePrintType> BPType, ECharacterPoseType AnimStance, float Direction, float InSpeed, bool bIsSprinting, float* PlayRate, float* SprintAlpha);
	float FindPositionFromDistanceCurve(float Distance, class UAnimSequenceBase* InAnimSequence);
	void EvaluateWeaponStates();
	void EvaluateWeaponStability();
	void EvaluateWeaponInertia();
	void EvaluateWeaponCollision();
	void EvaluateRecoilRoll();
	void EvaluateLeaning();
	void EvaluateIdle();
	void EvaluateFPP();
	void EvaluateFallingAndLanding();
	void EvaluateCharacterStates();
	void EvaluateCharacterState();
	void EvaluateCasting();
	void EvaluateAimStates();
	void EvaluateAimOffsets();
	void CacheParamList(float DeltaSeconds);
	void CacheAnimVarList();
};


// Class ShadowTrackerExtra.STExtraBaseCharacter
// 0x1340 (0x1B20 - 0x07E0)
class ASTExtraBaseCharacter : public AUAECharacter
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x07E0(0x0028) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerTeleport;                                         // 0x0808(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDeath;                                                  // 0x0818(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPawnHPChange;                                     // 0x0828(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBulletChange;                                           // 0x0838(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPoseChange;                                       // 0x0848(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerEnterRescueingStatus;                             // 0x0858(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerPickUp;                                           // 0x0868(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerWeaponChangeState;                                // 0x0878(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWeaponFireModeChangeDelegate;                           // 0x0888(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHideUIAfterPlayerDeadDelegate;                          // 0x0898(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerHandFoldedChanged;                                // 0x08A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    IsEnterNearDeathDelegate;                                 // 0x08B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterAimModeChanged;                                // 0x08C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDoSomethingDelaySomeFrames;                             // 0x08D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnReconnectNotifyDelegate;                                // 0x08E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStartInitDelegate;                                      // 0x08F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHit;                                                    // 0x0908(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    CharacterAnimEventDelegate;                               // 0x0918(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x138];                                     // 0x0928(0x0138) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnCharacterStartFireDelegate;                             // 0x0A60(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnCharacterStopFireDelegate;                              // 0x0A70(0x0010) (ZeroConstructor, InstancedReference)
	struct FScriptMulticastDelegate                    OnCharacterShootDelegate;                                 // 0x0A80(0x0010) (ZeroConstructor, InstancedReference)
	class UAkAudioEvent*                               DeathSound;                                               // 0x0A90(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               PickupSound;                                              // 0x0A98(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               ThrowawayWeaponSound;                                     // 0x0AA0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SwitchFireModeSound;                                      // 0x0AA8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               SwitchSightSound;                                         // 0x0AB0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkAudioEvent*                               MountAccessoriesSound;                                    // 0x0AB8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      IsInvincible : 1;                                         // 0x0AC0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowName : 1;                                            // 0x0AC0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowDamageToOther : 1;                                   // 0x0AC0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0AC1(0x0003) MISSED OFFSET
	float                                              NetDelayMinAniCompensate;                                 // 0x0AC4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Money;                                                    // 0x0AC8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDead : 1;                                                // 0x0ACC(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0ACD(0x0003) MISSED OFFSET
	bool                                               bHasHandleDead;                                           // 0x0AD0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0AD1(0x0003) MISSED OFFSET
	unsigned char                                      bDying : 1;                                               // 0x0AD4(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreInput : 1;                                         // 0x0AD4(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0AD5(0x0003) MISSED OFFSET
	TEnumAsByte<ETeamNumber>                           TeamNum;                                                  // 0x0AD8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               FriendThread;                                             // 0x0AD9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSameTeamDamage;                                       // 0x0ADA(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1];                                       // 0x0ADB(0x0001) MISSED OFFSET
	float                                              MaxSwimSprintSpeed;                                       // 0x0ADC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      IsFiveTimesWalkSpeed : 1;                                 // 0x0AE0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0AE1(0x0003) MISSED OFFSET
	bool                                               bIsDrawLocation;                                          // 0x0AE4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsGunADS;                                                // 0x0AE5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x2];                                       // 0x0AE6(0x0002) MISSED OFFSET
	float                                              PreviousValueToSetForHealthPredict;                       // 0x0AE8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ValueLimitForHealthPredict;                               // 0x0AEC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       HeadSocketName;                                           // 0x0AF0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UMoveAntiCheatComponent*                     MoveAntiCheatComponent;                                   // 0x0AF8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ULagCompensationComponent*                   LagCompensationComponent;                                 // 0x0B00(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UBaseCharacterEffectCom*                     EffectComponent;                                          // 0x0B08(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEffectComponent*                            NewEffectComponent;                                       // 0x0B10(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCharacterParachuteComponent*                ParachuteComponent;                                       // 0x0B18(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UNavigationInvokerComponent*                 NavigationInvokerComponent;                               // 0x0B20(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bIsWeaponFiring;                                          // 0x0B28(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0B29(0x0003) MISSED OFFSET
	struct FRotator                                    ServerControlRotation;                                    // 0x0B2C(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	TEnumAsByte<ESTEPoseState>                         PoseState;                                                // 0x0B38(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ESTEPoseState>                         LastPoseState;                                            // 0x0B39(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x0B3A(0x0002) MISSED OFFSET
	float                                              AnimDeathLifeSpan;                                        // 0x0B3C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AutoEquipWeaponTemplate;                                  // 0x0B40(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FWeaponSlotSwitchTimeData>           SwitchSlotTimeDataList;                                   // 0x0B48(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<class AActor*>                              PlayerSlotData;                                           // 0x0B58(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class AActor*>                              InventoryData;                                            // 0x0B68(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData11[0x58];                                      // 0x0B78(0x0058) MISSED OFFSET
	class UAkComponent*                                FootstepSound_Comp;                                       // 0x0BD0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               FootstepSound;                                            // 0x0BD8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UAkComponent*                                WeaponSound_Comp;                                         // 0x0BE0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkComponent*                                AmbientSound_Comp;                                        // 0x0BE8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UAkAudioEvent*                               AmbientSound;                                             // 0x0BF0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class USceneComponent*                             MeshContainer;                                            // 0x0BF8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USTBaseBuffSystemComponent*                  BuffSystemComponent;                                      // 0x0C00(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bVaultIsOpen;                                             // 0x0C08(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               UseShootVerifyEx;                                         // 0x0C09(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<EHitPartJugementType>                  ClientHitPartJudgment;                                    // 0x0C0A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<EHitPartJugementType>                  DSHitPartJudgment;                                        // 0x0C0B(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0C0C(0x0004) MISSED OFFSET
	class USTCharacterNearDeathComp*                   NearDeatchComponent;                                      // 0x0C10(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USTCharacterRescueOtherComp*                 RescueOtherComponent;                                     // 0x0C18(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class USTCharacterFollowComp*                      AutoFollowComponent;                                      // 0x0C20(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               IsRescueingOther;                                         // 0x0C28(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               IsBeingRescued;                                           // 0x0C29(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x2];                                       // 0x0C2A(0x0002) MISSED OFFSET
	float                                              EnterNearDeathCDTimeInitValue;                            // 0x0C2C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x0C30(0x0004) MISSED OFFSET
	struct FBodyTypeDef                                ProneBodyDef;                                             // 0x0C34(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                StandBodyDef;                                             // 0x0C3C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                CrouchBodyDef;                                            // 0x0C44(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                DyingBodyDef;                                             // 0x0C4C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FBodyTypeDef                                VechicleBodyDef;                                          // 0x0C54(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FVector                                     NewStandHitBodyBoxScale;                                  // 0x0C5C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NewProneHitBodyBoxScale;                                  // 0x0C68(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0C74(0x0004) MISSED OFFSET
	TMap<struct FString, EAvatarDamagePosition>        NewHitBodyPosMap;                                         // 0x0C78(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FVector                                     ScopeNewIdleLoc;                                          // 0x0CC8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ScopeNewAimLoc;                                           // 0x0CD4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeMoveInOutSpeed;                                      // 0x0CE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ScopeAimShootSpreadDir;                                   // 0x0CE4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadAddDirValSpeed;                        // 0x0CF0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadDecDirValSpeed;                        // 0x0CF4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadDirValMax;                             // 0x0CF8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x0CFC(0x0004) MISSED OFFSET
	struct FRotator                                    ScopeAimShootSpreadRot;                                   // 0x0D00(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadAddRotValSpeed;                        // 0x0D0C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadDecRotValSpeed;                        // 0x0D10(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimShootSpreadRotValMax;                             // 0x0D14(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0D18(0x0004) MISSED OFFSET
	float                                              ScopeLagScale;                                            // 0x0D1C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScopeAimCrosshairUIScale;                                 // 0x0D20(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x0D24(0x0004) MISSED OFFSET
	class UClass*                                      DeadInventoryBoxTemplate;                                 // 0x0D28(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadInventoryBoxOverrideFindPutDownPointZThreshold;       // 0x0D30(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WataerSurfaceZOffset;                                     // 0x0D34(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FirstDamageTypeSpesificID;                                // 0x0D38(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RefreshUITimeAfterSpawn;                                  // 0x0D3C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RefreshUITimeAfterSpawnInterval;                          // 0x0D40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0D44(0x0008) MISSED OFFSET
	struct FVector                                     ScopeNewTargetLoc;                                        // 0x0D4C(0x000C) (BlueprintVisible, IsPlainOldData)
	bool                                               bMarkScopeLocDirty;                                       // 0x0D58(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x0D59(0x0007) MISSED OFFSET
	class UCustomSpringArmComponent*                   SpringArmComp;                                            // 0x0D60(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCameraComponent*                            ThirdPersonCameraComponent;                               // 0x0D68(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               bHasStuckOperation;                                       // 0x0D70(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x0D71(0x0003) MISSED OFFSET
	struct FSyncAKEvent                                SyncAKEvent;                                              // 0x0D74(0x0010) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData22[0x4];                                       // 0x0D84(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnJoyStickInteruptDelegate;                               // 0x0D88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerAttrChangeDelegate;                               // 0x0D98(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterAttrChangedWithDetail;                         // 0x0DA8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsDelayingMove;                                          // 0x0DB8(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData23[0x7];                                       // 0x0DB9(0x0007) MISSED OFFSET
	class UCapsuleComponent*                           ProneBoxComponent;                                        // 0x0DC0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<struct FDamageCauserRecordData>             DamageCauserRecords;                                      // 0x0DC8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class USTCharacterMovementComponent*               STCharacterMovement;                                      // 0x0DD8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              PickUpRadius;                                             // 0x0DE0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentReticleBrightness;                                 // 0x0DE4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                CurrentReticleShapeIndex;                                 // 0x0DE8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FSimViewData                                SimulateViewData;                                         // 0x0DEC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData24[0x8];                                       // 0x0DF0(0x0008) MISSED OFFSET
	struct FVector_NetQuantizeNormal                   AimOffsets;                                               // 0x0DF8(0x000C) (Net, Transient)
	unsigned char                                      UnknownData25[0xC];                                       // 0x0E04(0x000C) MISSED OFFSET
	class UTslBreatheComp*                             BreatheComp;                                              // 0x0E10(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FKilledTipsBlock                            BlockData;                                                // 0x0E18(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	class UClass*                                      FPPAnimClass;                                             // 0x0E50(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData26[0x8];                                       // 0x0E58(0x0008) MISSED OFFSET
	bool                                               IsFPP;                                                    // 0x0E60(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bShowSkillPrompt;                                         // 0x0E61(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData27[0x1E];                                      // 0x0E62(0x001E) MISSED OFFSET
	int                                                SkillPromptItemID;                                        // 0x0E80(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData28[0x4];                                       // 0x0E84(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    FFailSkillPromptConditionEvent;                           // 0x0E88(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsInWater;                                                // 0x0E98(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAutoFollow;                                             // 0x0E99(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData29[0x6];                                       // 0x0E9A(0x0006) MISSED OFFSET
	class ASTExtraBaseCharacter*                       WhoFollowMe;                                              // 0x0EA0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData30[0x10];                                      // 0x0EA8(0x0010) MISSED OFFSET
	bool                                               bWeaponObstruct;                                          // 0x0EB8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData31[0x3];                                       // 0x0EB9(0x0003) MISSED OFFSET
	float                                              FallHeight_CP;                                            // 0x0EBC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LandPredictedLocation_CP;                                 // 0x0EC0(0x000C) (Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     CurInputVector;                                           // 0x0ECC(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	class UStaticMeshComponent*                        ScopComp;                                                 // 0x0ED8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TMap<int, int>                                     CachedReticleShapeIndexMap;                               // 0x0EE0(0x0050) (ZeroConstructor)
	TMap<int, float>                                   CachedReticleBrightnessMap;                               // 0x0F30(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData32[0x1C];                                      // 0x0F80(0x001C) MISSED OFFSET
	float                                              MinTurnAngleHip;                                          // 0x0F9C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnLinearEndThreshold;                                   // 0x0FA0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bNonLinearTurn;                                           // 0x0FA4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData33[0x3];                                       // 0x0FA5(0x0003) MISSED OFFSET
	float                                              TurnNonLinearEndThreshold;                                // 0x0FA8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCollisionDebug;                                          // 0x0FAC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData34[0xB];                                       // 0x0FAD(0x000B) MISSED OFFSET
	float                                              HeavyFallVerticalVelocityThreshold;                       // 0x0FB8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtremeFallVerticalVelocityThreshold;                     // 0x0FBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HeavyFallMovementStopTime;                                // 0x0FC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ExtremeFallMovementStopTime;                              // 0x0FC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData35[0x18];                                      // 0x0FC8(0x0018) MISSED OFFSET
	float                                              voiceCheckCD;                                             // 0x0FE0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              voiceCheckShowCD;                                         // 0x0FE4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VoiceCheckDis;                                            // 0x0FE8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData36[0x1C];                                      // 0x0FEC(0x001C) MISSED OFFSET
	class UPlayerGunCollosionComp*                     PlayerGunCollosionComp;                                   // 0x1008(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UAttrModifyComponent*                        AttrModifyComp;                                           // 0x1010(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraPlayerState*                         STExtraPlayerState;                                       // 0x1018(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMovementMode>                         MovementModeBeforeNearDeath;                              // 0x1020(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData37[0x7];                                       // 0x1021(0x0007) MISSED OFFSET
	class ASTExtraPlayerState*                         WhoKillMeRecord;                                          // 0x1028(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                HandFolderRatio;                                          // 0x1030(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              SwimUpRate;                                               // 0x1034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsSwimUpWater;                                            // 0x1038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData38[0x3];                                       // 0x1039(0x0003) MISSED OFFSET
	float                                              UpWaterHeight;                                            // 0x103C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterHeightOffset;                                        // 0x1040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnderwaterSwimGapFromSurface;                             // 0x1044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurfaceWhenSwimming;             // 0x1048(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableCharacterLengthOnSurface;                         // 0x104C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimableWaterDepth;                                       // 0x1050(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WaterFloorDetectionLength;                                // 0x1054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UPlayerSwimComponent*                        swimComponet;                                             // 0x1058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData39[0x28];                                      // 0x1060(0x0028) MISSED OFFSET
	bool                                               bSwitchingToGrenade;                                      // 0x1088(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData40[0x3];                                       // 0x1089(0x0003) MISSED OFFSET
	struct FVector                                     MoveInputState;                                           // 0x108C(0x000C) (Net, IsPlainOldData)
	unsigned char                                      UnknownData41[0x40];                                      // 0x1098(0x0040) MISSED OFFSET
	bool                                               hHasCallGameModeKill;                                     // 0x10D8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData42[0x1F];                                      // 0x10D9(0x001F) MISSED OFFSET
	struct FPoseChangeTime                             SwitchPoseTime;                                           // 0x10F8(0x0018) (Edit, DisableEditOnInstance)
	struct FTransform                                  HitBoxLeanTransL;                                         // 0x1110(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FTransform                                  HitBoxLeanTransR;                                         // 0x1140(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData43[0x18];                                      // 0x1170(0x0018) MISSED OFFSET
	class UWeaponOwnerProxy*                           WeaponOwnerProxy;                                         // 0x1188(0x0008) (ZeroConstructor, IsPlainOldData)
	class UBaseCharacterPickupProxy*                   PickupProxy;                                              // 0x1190(0x0008) (ZeroConstructor, IsPlainOldData)
	class UCharacterWeaponManagerComponent*            WeaponManagerComponent;                                   // 0x1198(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              DelayHideDuration;                                        // 0x11A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LeanLeftTraceOffset;                                      // 0x11A4(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     LeanRightTraceOffset;                                     // 0x11B0(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData44[0x4];                                       // 0x11BC(0x0004) MISSED OFFSET
	struct FPlayerAnimList                             CurPlayerAnimList;                                        // 0x11C0(0x00F0) (BlueprintVisible, BlueprintReadOnly)
	struct FAnimParamList                              CurAnimParamList;                                         // 0x12B0(0x00D8) (BlueprintVisible, BlueprintReadOnly)
	struct FPlayerVehAnimList                          CurPlayerVehAnimList;                                     // 0x1388(0x0040) (BlueprintVisible, BlueprintReadOnly)
	struct FAnimVehParamList                           CurAnimVehParamList;                                      // 0x13C8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FAnimStatusKeyList                          LastUpdateStatusKeyList;                                  // 0x13E0(0x0020)
	struct FAnimStatusKeyList                          CurUpdateStatusKeyList;                                   // 0x1400(0x0020)
	TEnumAsByte<EThrowGrenadeMode>                     ThrowGrenadeMode;                                         // 0x1420(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData45[0xF];                                       // 0x1421(0x000F) MISSED OFFSET
	bool                                               IsPeekLeft;                                               // 0x1430(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsPeekRight;                                              // 0x1431(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               IsEnablePeek;                                             // 0x1432(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData46[0x1];                                       // 0x1433(0x0001) MISSED OFFSET
	float                                              PeekCheckCollisionTimer_Local;                            // 0x1434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData47[0xC];                                       // 0x1438(0x000C) MISSED OFFSET
	bool                                               PeekHasCollision;                                         // 0x1444(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData48[0x3];                                       // 0x1445(0x0003) MISSED OFFSET
	float                                              AutoScopeDelayTimeWhenPeek;                               // 0x1448(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                IsEnableReportPlayerBehavior;                             // 0x144C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData49[0x8];                                       // 0x1450(0x0008) MISSED OFFSET
	float                                              LeanOffset_Stand;                                         // 0x1458(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanOffset_Crouch;                                        // 0x145C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LeanOffset_Prone;                                         // 0x1460(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData50[0x10];                                      // 0x1464(0x0010) MISSED OFFSET
	float                                              Health;                                                   // 0x1474(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              HealthPredict;                                            // 0x1478(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	float                                              HealthMax;                                                // 0x147C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BreathAmount;                                             // 0x1480(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldDrowningHurt;                                      // 0x1484(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData51[0x3];                                       // 0x1485(0x0003) MISSED OFFSET
	float                                              SpeedDynamicScale;                                        // 0x1488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurnInPlaceAngel;                                         // 0x148C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ECharacterHealthStatus>                HealthStatus;                                             // 0x1490(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData52[0x7];                                       // 0x1491(0x0007) MISSED OFFSET
	TMap<EAvatarDamagePosition, struct FBodyPartCfg>   BodyPartConfigMap;                                        // 0x1498(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bIsLastTwoCircle;                                         // 0x14E8(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData53[0x3];                                       // 0x14E9(0x0003) MISSED OFFSET
	float                                              PawnBackpackCapacity;                                     // 0x14EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FCharacterEnergyData                        Energy;                                                   // 0x14F0(0x0038) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	bool                                               bCheckRelevantWithFOV;                                    // 0x1528(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData54[0x3];                                       // 0x1529(0x0003) MISSED OFFSET
	float                                              FarDistanceAimFOV;                                        // 0x152C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarRelevantDistanceSqured;                                // 0x1530(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MiddleDistanceAimFOV;                                     // 0x1534(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MiddleRelevantDistanceSqured;                             // 0x1538(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData55[0x4];                                       // 0x153C(0x0004) MISSED OFFSET
	float                                              VerticalSpeedFallingDamageThrehod;                        // 0x1540(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VerticalFallingDamageCoefficient;                         // 0x1544(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HorizontalSpeedFallingDamageThrehod;                      // 0x1548(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData56[0x4];                                       // 0x154C(0x0004) MISSED OFFSET
	class UCurveFloat*                                 CurveHorizontalSpeedFallingDamage;                        // 0x1550(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StandHalfHeight;                                          // 0x1558(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CrouchHalfHeight;                                         // 0x155C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ProneHalfHeight;                                          // 0x1560(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData57[0x4];                                       // 0x1564(0x0004) MISSED OFFSET
	class UTslPlayerDamageConfig*                      DamageConfig;                                             // 0x1568(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FHealthPredictShowData>              HealthPredictShowDataList;                                // 0x1570(0x0010) (ZeroConstructor)
	class USecuryInfoComponent*                        SecuryComponent;                                          // 0x1580(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData58[0x10];                                      // 0x1588(0x0010) MISSED OFFSET
	bool                                               bWasOnVehicle;                                            // 0x1598(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData59[0x7];                                       // 0x1599(0x0007) MISSED OFFSET
	class ASTExtraVehicleBase*                         CurrentVehicle;                                           // 0x15A0(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraVehicleBase*                         LatestVehicle;                                            // 0x15A8(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                VehicleSeatIdx;                                           // 0x15B0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData60[0x8];                                       // 0x15B4(0x0008) MISSED OFFSET
	float                                              LeaveVehicleVelocityKeepTime;                             // 0x15BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData61[0x18];                                      // 0x15C0(0x0018) MISSED OFFSET
	class UCharacterAvatarComponent*                   AvatarComponent;                                          // 0x15D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnAttachedToVehicle;                                      // 0x15E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDetachedFromVehicle;                                    // 0x15F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnChangedVehicleSeat;                                     // 0x1600(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StateEnterHandler;                                        // 0x1610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StateLeaveHandler;                                        // 0x1620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData62[0x70];                                      // 0x1630(0x0070) MISSED OFFSET
	struct FScriptMulticastDelegate                    StateInterruptedHandlerBP;                                // 0x16A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	int                                                LocalSimulateStates;                                      // 0x16B0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                PrevServerSimulateStates;                                 // 0x16B4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ServerSimulateStates;                                     // 0x16B8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData63[0xBC];                                      // 0x16BC(0x00BC) MISSED OFFSET
	class ASTExtraWeapon*                              CurrentReloadWeapon;                                      // 0x1778(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData64[0x10];                                      // 0x1780(0x0010) MISSED OFFSET
	bool                                               EnableStatesInterruptRPC;                                 // 0x1790(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               EnableSprintSync;                                         // 0x1791(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData65[0x2];                                       // 0x1792(0x0002) MISSED OFFSET
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x1794(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData66[0x4];                                       // 0x1798(0x0004) MISSED OFFSET
	struct FSTParachuteState                           STReplicateParchuteState;                                 // 0x179C(0x000C) (Net, Transient, IsPlainOldData)
	struct FSTReplicatedMoveState                      STReplicatedParachuteMoveState;                           // 0x17A8(0x0024) (Net, Transient)
	bool                                               bReplicatedIsStartParachute;                              // 0x17CC(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData67[0x3];                                       // 0x17CD(0x0003) MISSED OFFSET
	float                                              MoveForwardInputValue;                                    // 0x17D0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MoveRightInputValue;                                      // 0x17D4(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Head;                                                     // 0x17D8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    BlendTargetViewRotation;                                  // 0x17DC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUsingFreeCamera;                                         // 0x17E8(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData68[0x17];                                      // 0x17E9(0x0017) MISSED OFFSET
	float                                              FreeCameraRestoreTime;                                    // 0x1800(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FPPSkillPromptRotationPitchMax;                           // 0x1804(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPSwimRotationPitchMax;                                  // 0x1808(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPSkillPromptRotationYawMax;                             // 0x180C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FPPFreeCameraRotationYawMax;                              // 0x1810(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData69[0x1C];                                      // 0x1814(0x001C) MISSED OFFSET
	struct FVector_NetQuantizeNormal                   LastAimOffsets;                                           // 0x1830(0x000C)
	float                                              AimoffsetsLastRepTime;                                    // 0x183C(0x0004) (ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerp;                                        // 0x1840(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_TurningLerpLocomotion;                              // 0x1848(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotion;                         // 0x1850(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionSprint;                   // 0x1854(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CapsuleTurnInterpSpeedLocomotionProne;                    // 0x1858(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TurnSpeedHip;                                             // 0x185C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimStateDefaultTime;                                      // 0x1860(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimStateReturnTime;                                       // 0x1864(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AimStateDrawTime;                                         // 0x1868(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData70[0x8];                                       // 0x186C(0x0008) MISSED OFFSET
	float                                              TargetPlayerAIPolicyDecisionLogInterval;                  // 0x1874(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RelevantPlayerAIPolicyDecisionLogInterval;                // 0x1878(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData71[0x4];                                       // 0x187C(0x0004) MISSED OFFSET
	class UParachuteFollowComponent*                   ParachuteFollowComp;                                      // 0x1880(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class ASTExtraBaseCharacter*>               FlyingTeam;                                               // 0x1888(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	class ASTExtraBaseCharacter*                       Leader;                                                   // 0x1898(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	EFollowState                                       FollowState;                                              // 0x18A0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData72[0x7];                                       // 0x18A1(0x0007) MISSED OFFSET
	TArray<struct FParachuteFollowState>               TeammateParachuteFollowState;                             // 0x18A8(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	TArray<class ASTExtraBaseCharacter*>               Inviters;                                                 // 0x18B8(0x0010) (ZeroConstructor)
	bool                                               bPressedSprint;                                           // 0x18C8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsPressedWalk;                                            // 0x18C9(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData73[0x6];                                       // 0x18CA(0x0006) MISSED OFFSET
	float                                              maxShowAlpha;                                             // 0x18D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MoveMaxShowDis;                                           // 0x18D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponMaxShowDis;                                         // 0x18D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleMaxShowDis;                                        // 0x18DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData74[0x40];                                      // 0x18E0(0x0040) MISSED OFFSET
	float                                              FPPPutDownWeaponCoolingStart;                             // 0x1920(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FPPPutDownWeaponCoolingEnd;                               // 0x1924(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FPPSprintWeaponSmoothTime;                                // 0x1928(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData75[0x128];                                     // 0x192C(0x0128) MISSED OFFSET
	int                                                IsEnableReportRoute;                                      // 0x1A54(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData76[0x4];                                       // 0x1A58(0x0004) MISSED OFFSET
	float                                              InteractAngleThreshold;                                   // 0x1A5C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData77[0x8];                                       // 0x1A60(0x0008) MISSED OFFSET
	class UTslEmoteComponent*                          EmoteComponent;                                           // 0x1A68(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       EmoteSlots;                                               // 0x1A70(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData78[0x10];                                      // 0x1A78(0x0010) MISSED OFFSET
	int                                                CurrentEmoteIndex;                                        // 0x1A88(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                CurrentEmoteID;                                           // 0x1A8C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    EmoteMontageFinishedEvent;                                // 0x1A90(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData79[0x28];                                      // 0x1AA0(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.STExtraBaseCharacter.TempEmoteResource
	unsigned char                                      UnknownData80[0x40];                                      // 0x1AC8(0x0040) MISSED OFFSET
	struct FVector                                     EmoteColBox;                                              // 0x1B08(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData81[0x4];                                       // 0x1B14(0x0004) MISSED OFFSET
	class UHackReporterComponent*                      HackReporterComponent;                                    // 0x1B18(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBaseCharacter");
		return ptr;
	}


	void ZeroingLevelUp();
	void ZeroingLevelDown();
	void VaultStartPosNotifyBPToCpp(bool isvaultting, bool IsValidVault, class ASTExtraBaseCharacter* vaultCharacter, const struct FVector& startPos);
	void VaultFailPawnCPP(const struct FString& Content);
	void VaultFailPawnBluePrint(const struct FString& Content);
	void UserCancelRescue();
	void UpdateDeathReplayInitTrans(float DeltaTime);
	void UnequipWeaponFinish();
	void UnequipWeapon(ESurviveWeaponPropSlot Slot, bool bSwitchWeapon);
	void TryToBroadcastFatalDamageEvent(class AController* causer, int HSChangeMargin, const struct FDamageEvent& DamageEvent, bool IsHeadshot, class AActor* DamageCauser);
	void TryPeek(bool IsLeft, bool ButtonDown);
	void TriggerEntryEvent_Implementation(EUTSkillEntry EntryEvent);
	void TriggerCustomEvent_Implementation(TEnumAsByte<EUAESkillEvent> EventType);
	void ToggleThrowGrenadeMode();
	void TickWeaponInertia(float DeltaSeconds);
	void TakeDamageWhenThrowedDelegate__DelegateSignature();
	void SyncDeadTombBoxToController(class APlayerTombBox* _DeadTombBox);
	void SwitchWeaponBySlot(ESurviveWeaponPropSlot Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void SwitchToLastWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void SwitchToLastNoneGrenageWeapon(bool bUseAnimation, bool bForceFinishPreviousSwitch);
	bool SwitchToGrenadeSlot(TEnumAsByte<EGrenadeType> grenadeType);
	bool SwitchPoseState(TEnumAsByte<ESTEPoseState> State, bool bIgnoreCD, bool bIgnoreCheck, bool ShouldShowPrompt, bool IsTriggerByPressBtn);
	void SwapMainWeapon();
	void STServerUpdateState(float InThrottleInput, float InSteeringInput, int8_t State);
	bool StopFireFilter();
	void StopFire();
	void StopDeathPlaybackRecording();
	void StopCurrentSkill_Server();
	void StartFireSimple();
	bool StartFireFilter();
	void StartFire(int BurstShootBulletsLimit, float BurstShootTimeLimit, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget);
	void SpawnBulletPassByEffect(const struct FVector& Location, float BulletVelocity);
	void SpawnAndSwithToGrenadeServerCall(TEnumAsByte<EGrenadeType> grenadeType);
	class ASTExtraWeapon* SpawnAndSwitchToGrenadeOnServer(const struct FName& SpesificLogicGrenadeSlot);
	class ASTExtraWeapon* SpawnAndSwitchToGrenadeOnClient(const struct FName& SpesificLogicGrenadeSlot);
	class ASTExtraWeapon* SpawnAndBackpackWeaponOnServer(class UClass* Template, const struct FItemDefineID& ID, const struct FName& LogicSocket, bool bAutoUse, bool bResetBulletNum);
	void ShowDebugRole();
	void ShowDebugRecordData();
	void ShowDebugPickUpFlow();
	void ShowDebugEquipOrUnequipFlow();
	bool ShouldUpdateHPOnUI();
	bool ShouldAutoScopeWhenPeek();
	void SetWeaponObstruct(bool bObstruct);
	void SetWeaponInertia(const struct FRotator& InInertia);
	void SetThrowGrenadeMode(TEnumAsByte<EThrowGrenadeMode> ThrowMode);
	bool SetShootWeaponFireMode(EGunFireMode NewFireMode);
	void SetServiveHUDVisibility(bool bVisibility);
	void SetReloadMethod(TEnumAsByte<EWeaponReloadMethod> reloadMethod);
	void SetIsAutoFollow(bool Val, class ASTExtraBaseCharacter* IFollowWho);
	void SetHealthSafety(float NewHealth, TEnumAsByte<ERecoveryReasonType> Reason);
	void SetHandFoldRatio(int Ratio);
	void SetDelayStateSwitchTime(float DelayTime);
	bool SetCurrentPersonPerspective(bool IsNewFPP, bool IsInitSetting);
	void SetComponentsActive(class UClass* ComponentClass, bool IsActive);
	void SetCheatSpeedModifier(float NewModifier);
	void SetAnimParamIsRescueing(bool Val);
	void SetAnimParamIsNearDeathStatus(bool Val);
	void ServerTriggerJump();
	void ServerSetPeekState(bool IsLeft, bool ButtonDown);
	void ServerSetPeekCollision(bool HasCollision);
	void ServerSetMovementState(const struct FVector& Input);
	void ServerSetAimOffsets(const struct FVector_NetQuantizeNormal& NewAimOffsets);
	void ServerResponseInvite(class ASTExtraBaseCharacter* SomeOne, EInviteResponceType res);
	void ServerOnThrowableDetachedFromHand(const struct FVector& RelDetachedHandPosition);
	void ServerLogFireWeapon(const struct FAttackId& AttackId, int ItemDefineID);
	void ServerInviteTeammate(TArray<struct FString> Names);
	void ServerInterrupt(int stateID);
	void ServerFollowTeammate(const struct FString& Name);
	void ServerChangeThrowGrenadeMode(TEnumAsByte<EThrowGrenadeMode> ThrowMode);
	void ServerCancelFollow();
	void ServerAddOrUpdateReticleShapeIndex(int ScopeTypeSpecificID, int NextShapeIndex);
	void ServerAddOrUpdateReticleBrightness(int ScopeTypeSpecificID, float NextBrightness);
	void SendServerMoveToClientUnreliaby(float Timestamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	void SendClientMoveToServerUnreliaby(float Timestamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	void SendClientMoveToServerReliaby(float Timestamp, const struct FVector& Position, const struct FRotator& Rotation, const struct FVector& Velocity);
	TArray<struct FSearchedTombBoxAndWrapperListResult> SearchTombBoxes();
	TArray<struct FSearchedPickUpItemResult> SearchPickUpWrapperActors(bool bIncludeWrapprsOnGround, bool bIncludeWrapprsInBox);
	void SaveMeshUpdateFlag();
	void S2C_SetSkillPrompt(bool bSkillPrompt, float LastTime, const struct FString& PromptText, float TotalTime);
	void S2C_InterruptState(int stateID, int interruptedBy);
	void S2C_FailSkillPrompt();
	void RPC_Server_SwitchWeapon(ESurviveWeaponPropSlot Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void RPC_Server_SwapMainWeapon();
	void RPC_Server_SpawnAndSwitchToGrenade(const struct FName& SpesificLogicGrenadeSlot);
	void RPC_Server_SetHandFoldRatio(int Ratio);
	void RPC_Server_EnableCurrentWeaponInfiniteBullets(bool bEnable);
	void RPC_Server_DestroyGrenadeAndSwitchBackToPreviousWeapon();
	void RPC_NetMulticast_HandlePlayerPickUpActor(float TargetZLoc);
	void RPC_Client_SwitchWeapon(ESurviveWeaponPropSlot Slot, bool bUseAnimation, bool bForceFinishPreviousSwitch);
	void RPC_Client_SwapMainWeapon();
	void RPC_Client_StopCurrentSkill();
	void RPC_Client_SpawnAndSwitchToGrenade(const struct FName& SpesificLogicGrenadeSlot);
	void RPC_Client_ShootVertifyRes(TEnumAsByte<EShootVertifyRes> VertifyRes, const struct FBulletHitInfoUploadData& HistoryShootData, const struct FCharacterHistoryData& HistoryChData);
	void RPC_Client_SetReloadCurWeapon(class ASTExtraWeapon* Weapon);
	void RPC_Client_OnDeathStopRecordingNotify(const struct FName& SpectatorName);
	void RPC_Client_OnDamageNotifyRecord(int DamagerID, float fHealth, int OtherHealthStatus, float ShootDistance, int DamageType, const struct FName& CauserName);
	void RPC_Client_EnableCurrentWeaponInfiniteBullets(bool bEnable);
	void RPC_Client_DestroyGrenadeAndSwitchBackToPreviousWeapon();
	void ReticleBrightnessUp();
	void ReticleBrightnessDown();
	void RestoreMeshUpdateFlag();
	void ResponceInvite(class ASTExtraBaseCharacter* SomeOne, EInviteResponceType res);
	void ResetZeroingLevel();
	void ResetValueLimitForHealthPredict();
	void ResetGunAimingParameters();
	void ResetCamera();
	void RequestUserCancleRescue();
	void RequestCancelUseConsumeable();
	void ReqStartPlayEmote(int EmoteID);
	void ReqInteruptPlayEmote(int EmoteID);
	void ReqEmotePlayFinished(int EmoteID);
	void ReportAntiCheatInfo();
	bool RemoveBuff(const struct FName& BuffName, bool RemoveLayerOnly);
	bool ReloadWeaponFilter();
	void ReloadFail_Client();
	void ReloadFail();
	bool ReloadCurrentWeapon();
	void RefreshMoveAttrModifier();
	void PrintAIPolicyDecisionData();
	void PostGetPlayerAnimation();
	void PlayToggleFiringModeSound();
	void PlaySwitchSightSound();
	void PlaySwitchFireModeSound();
	void PlaySelfThrowAwayWeaponSound();
	void PlayPullBoltSound();
	void PlayOperateItemSound(const struct FString& BankName, const struct FString& SoundName);
	void PlayMountAccessoriesSound();
	void PlayMagOUTSound();
	void PlayMagINSound();
	void PlayLocalShellDropFX();
	void PlayLoadBulletSound();
	void PlayFootstepSound(TEnumAsByte<EFootStepState> FootStepState);
	bool PlayerConfirmToRescue();
	void PlayEmote(int EmoteID);
	void PlayChangeMagazineSound();
	void PlayAmbientSound();
	void PickUpWrapperActor(class AActor* Target, const struct FPickUpItemData& ItemData, const struct FName& EquipSlotName, int PickUpCount);
	bool PickUpGroundItem(float InValidAngle);
	void PickUpActor(class AActor* Target, int AdditionalParam, const struct FName& EquipSlotName, int PickUpCount);
	void PeekRight(bool ButtonDown);
	void PeekLeft(bool ButtonDown);
	void PawnVaultServerCPP(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& startPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& hitpoint, class AActor* WindowActor, const struct FRotator& MoveDir, float ArrivalHeight);
	void PawnVaultServerBluePrint(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& startPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& hitpoint, class AActor* WindowActor, const struct FRotator& MoveDir, float ArrivalHeight);
	void PawnVaultAllCPP(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& startPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& hitpoint, const struct FRotator& MoveDir, float ArrivalHeight);
	void PawnVaultAllBluePrint(float dis, float Height, float Length, const struct FString& VaultKey, const struct FVector& startPos, class AActor* checkActor, float crossblockMaxFall, float crossblockMaxDis, const struct FVector& hitpoint, const struct FRotator& MoveDir, float ArrivalHeight);
	void OnUserQualitySettingChanged(int renderlevel);
	void OnUnEquipWeapon();
	void OnThrowableDetachedFromHand();
	void OnStopFreeCamera();
	void OnStopFire();
	void OnStateLeave(EPawnState EnteredState);
	void OnStateEnter(EPawnState EnteredState);
	void OnStartFreeCamera();
	void OnStartFire(EGunFireMode isAuto);
	void OnShowName(bool _IsShow, const struct FString& _Name);
	void OnScopeTempTransformToFPP();
	void OnScopeTempTransformFromFPP();
	void OnScopeInterrupt(bool bTeleport);
	void OnScopeIn(bool bTeleport);
	void OnRep_VehicleSeatIdx();
	void OnRep_ThrowGrenadeMode();
	void OnRep_StatusChanged(TEnumAsByte<ECharacterHealthStatus> prevStatus);
	void OnRep_ReplicatedParachuteState();
	void OnRep_ReplicatedMoveState();
	void OnRep_ReplicatedIsStartParachute();
	void OnRep_PoseStateNotify(TEnumAsByte<ESTEPoseState> LastState);
	void OnRep_PlayerKey();
	void OnRep_PeekHasCollision();
	void OnRep_ParseEmoteSlotNames();
	void OnRep_MoneyNotify();
	void OnRep_KillTipsNotify();
	void OnRep_IsRescueingOtherStatusChange();
	void OnRep_IsFPPChanged();
	void OnRep_IsBeingRescuedStatusChange();
	void OnRep_InitialItemList();
	void OnRep_HealthPredict();
	void OnRep_Health();
	void OnRep_HandFolderRatio();
	void OnRep_FollowState();
	void OnRep_EnergyChange();
	void OnRep_CurrentVehicle(class ASTExtraVehicleBase* LastVehicle);
	void OnRep_CurrentStates(int prevStates);
	void OnRep_CurrentReticleShapeIndex();
	void OnRep_CurrentReticleBrightness();
	void OnRep_BreathAmmountChange();
	void OnRep_AKEventNotify();
	void OnRep_AimOffsets(const struct FVector_NetQuantizeNormal& PrevAimOffsets);
	void OnReleasedWalk();
	void OnReleasedSprint();
	void OnReconnect();
	void OnPressedWalk();
	void OnPressedSprint();
	void OnPoseStateChange(TEnumAsByte<ESTEPoseState> LastState, TEnumAsByte<ESTEPoseState> CurState);
	void OnParachutingLeaderChange();
	void OnNotifyHurt();
	void OnHoldBreathReleased();
	void OnHoldBreathPressed();
	void OnFollowStateChange();
	void OnEquipWeapon();
	void OnCurEquipedShootWeaponChangeState(TEnumAsByte<EFreshWeaponStateType> State);
	void OnBPMoneyChange();
	void OnBPHealthChange();
	void OnBeforeGetUp();
	void OnActorHitHandle(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NM_SetPeekState(bool Enable, bool IsLeft);
	bool NeedWeaponReplacement(TEnumAsByte<EWeaponSlotType> InSlotType);
	bool NeedAvatarReplacement(EAvatarSlotType InSlotType);
	void MulticastStartPlayEmote(int EmoteID);
	void MulticastSetFireMode(EGunFireMode NewFireMode);
	void MulticastInteruptPlayEmoteOnServer(int EmoteID);
	void MulticastInteruptPlayEmote(int EmoteID);
	void MeleeServer();
	void MeleeReleased();
	void MeleeLocal();
	void MeleeBroadcastOtherClients();
	void Melee(bool IsForCE);
	void LogWeaponsDataInWeaponManagerAndBackpack();
	void LocalUnEquipWeapon(class ASTExtraWeapon* Weapon);
	bool LocalSwitchPersonPerspective(bool IsNewFPP);
	bool LocalStartPlayEmote(int EmoteID);
	bool LocalInteruptPlayEmote(int EmoteID);
	void LocalEquipWeapon(class ASTExtraWeapon* Weapon);
	void LeaveState(EPawnState State);
	void LeaveServerState(EPawnState State);
	bool IsUsingGrenade();
	bool IsUsingFreeCamera();
	bool IsUpperCollision();
	bool IsUnderwater();
	bool IsTargeting();
	bool IsSameTeamWithPlayerState(class APlayerState* otherPS);
	bool IsSameTeam(class APawn* Other);
	bool IsProneMove();
	bool IsPreesedWalking();
	bool IsPreesedSprinting();
	bool IsOnVehicle();
	bool IsNowUpWater();
	bool IsNearDeath();
	bool IsLookingBrightAdjustableReticle();
	bool IsLocalViewed();
	bool IsInFlyingTeam();
	bool IsInEditor();
	bool IsInConsumableUsingState();
	bool IsHealthyAlive();
	bool IsHandleInFold();
	bool IsGroggying();
	bool IsForceRotation();
	bool IsFloating();
	bool IsFirstPerson();
	bool IsFallingFromHighAltitude();
	bool IsDeathPlayViewTarget();
	bool IsCharacterSprinting();
	bool IsBoxItem(float InValidAngle);
	bool IsAllowScopeIn();
	bool IsAlive();
	bool IsAbleGrenadeByType(TEnumAsByte<EGrenadeType> grenadeType);
	bool IsAbleFragGrenade();
	void InviteTeammate(TArray<struct FString> Names);
	void InterruptCurrentEmote();
	void InterruptConsumeableByVehicleAction();
	void InsertDelayStateRelation(EPawnState OldState, EPawnState NewState);
	void InitBodyBoneMap();
	void HidePlayerMagOnGunReload();
	bool HasState(EPawnState State);
	bool HasBuff(const struct FName& BuffName);
	void HandleWeaponOnShoot();
	void HandlePlayOperateItemSoundOnServer(const struct FString& BankName, const struct FString& SoundName);
	void HandlePlayerPoseChanged(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	void HandlePlayerPickUpActor(class AActor* WrapperActor, float TargetZLoc);
	void HandleOnCharAnimLoadingFinished();
	void HandleConsumeItemSkillBreak();
	void HandleAutoSwitchWeaponDelay();
	void GrenadeBackToWeaponServerCall();
	void GMShowName();
	class UWeaponManagerComponent* GetWeaponManager();
	struct FRotator GetWeaponInertiaRecoil();
	struct FRotator GetWeaponInertia();
	float GetWeaponGunCollisionAlpha();
	struct FRotator GetViewRotation();
	float GetValueLimitForHealthPredict();
	class ATslLPCPlayerState* GetTslPlayerStateSafety();
	ECharacterAnimType GetToggleFiringModeAnimTypeByFireMode(EGunFireMode FireMode);
	TEnumAsByte<EThrowGrenadeMode> GetThrowGrenadeMode();
	int GetTeammateIndex(class ASTExtraBaseCharacter* Teammate);
	struct FString GetShootWeaponNameByWeapon(int ItemDefineID);
	struct FVector GetRandomPutDownLocation(float OverrideFindPutDownPointZThreshold);
	EGunFireMode GetPlayerWeaponFireMode();
	ESurviveWeaponPropSlot GetPlayerWeaponEquipSlot();
	struct FAnimVehParamList GetPlayerVehAnimParam(float DeltaTime);
	struct FPlayerVehAnimList GetPlayerVehAnimation();
	int GetPlayerTeamIndex();
	class ASTExtraPlayerState* GetPlayerStateSafety();
	struct FString GetPlayerNameSafety();
	TEnumAsByte<ECharacterJumpType> GetPlayerJumpType();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	class ASTExtraPlayerController* GetPlayerControllerInDeathReplay();
	struct FAnimParamList GetPlayerAnimParam(float DeltaTime);
	struct FPlayerAnimData GetPlayerAnimationByEventType(TEnumAsByte<ECharAnimEventType> AnimEventType);
	struct FPlayerAnimList GetPlayerAnimation();
	TEnumAsByte<EGrenadeType> GetNextGrenadeType();
	float GetLeanRightAlpha();
	float GetLeanLeftAlpha();
	class ASTExtraBaseCharacter* GetLatestInviter();
	struct FRotator GetLastMoveRotation();
	bool GetIsPlayingEmote();
	struct FSearchedPickUpItemResult GetInteractableGroundItem(float InValidAngle);
	class UPrimitiveComponent* GetHitBoxByState(EPawnState InPoseState);
	EAvatarDamagePosition GetHitBodyTypeByHitPos(const struct FVector& InHitPos);
	EAvatarDamagePosition GetHitBodyTypeByBoneName(const struct FString& InBoneName);
	EAvatarDamagePosition GetHitBodyType(const struct FVector& InHitPos, const struct FString& InBoneName);
	struct FVector GetHeadLocation(bool bUseHeadBone);
	TEnumAsByte<EGrenadeType> GetGrenadeTypeByItemID(int ItemID);
	struct FString GetGrenadeNameByGrenadeType(TEnumAsByte<EGrenadeType> grenadeType);
	TArray<struct FBattleItemData> GetGrenadeList();
	struct FBattleItemData GetGrenadeBattleDataByGrenadeType(TEnumAsByte<EGrenadeType> grenadeType);
	struct FVector GetFollowerLocOffset(class ASTExtraBaseCharacter* follower);
	struct FVector GetFollowerLoc(class ASTExtraBaseCharacter* follower);
	class ASTExtraWeapon* GetCurrentWeapon();
	float GetCurrentWaterSurfaceZ();
	class ASTExtraVehicleBase* GetCurrentVehicle();
	struct FRotator GetCurrentSway();
	struct FString GetCurrentSkillName();
	class ASTExtraShootWeapon* GetCurrentShootWeapon();
	int GetCurrentReticleShapeIndex();
	float GetCurrentReticleBrightness();
	float GetCurrentHeightFromWaterFloor();
	TEnumAsByte<EGrenadeType> GetCurrentGrenadeType();
	TEnumAsByte<EHitPartJugementType> GetCurHitPartJugementType();
	float GetCharacterXYPlaneVelocity();
	struct FCharacterEnergyData GetCharacterEnergy();
	float GetCharacterAttributeValue(const struct FString& AttrName);
	struct FRotator GetCachedControlRotation();
	class UTslBreatheComp* GetBreatheComponent();
	float GetAimStateAlpha();
	struct FRotator GetAimOffsets();
	class USpringArmComponent* GetActiveSpringArm();
	void ForcePlayerUpdateAnimation();
	void ForceCorrectClient(const struct FVector& Postion, const struct FRotator& Rotation, const struct FVector& Velocity);
	void FollowTeammate(const struct FString& Name);
	void FillPlayerAnimRate(struct FPlayerAnimList* InAnimList);
	int ExtractDamageParams(const struct FDamageEvent& DamageEvent, class AActor* DamagetCauser, int* DamageType);
	void ExecFollowTeammate(const struct FString& Name);
	void EquipWeaponFinish();
	void EquipWeapon(ESurviveWeaponPropSlot Slot, bool bSwitchWeapon);
	bool EnterState(EPawnState State);
	void EnterServerState(EPawnState State);
	void EndCurrentEmote(int EmoteIndex);
	void EnableCurrentWeaponInfiniteBullets(bool bEnable);
	void DisappearOnDeath();
	void DettachWeapon();
	bool DestroyWeaponOnServerByPropSlot(ESurviveWeaponPropSlot Slot, bool bEnableBroadcast);
	bool DestroyWeaponOnServer(const struct FName& LogicSocket, bool bEnableBroadcast);
	void DestroyWeaponInventoryOnServer();
	void DestroyGrenadeAndSwitchBackToPreviousWeaponOnServer();
	void DelayMoveEnd();
	void DelayMove(float Time);
	void DelayHidden();
	void DelayCustomDepth(float Time);
	ECharacterAnimType ConvertWeaponSlotToCharacterAnimType(ESurviveWeaponPropSlot WeaponSlot);
	ECharacterAnimType ConvertWeaponFireModeToWeaponAnimType(EGunFireMode FireMode);
	ECharacterPoseType ConvertCharacterPoseStateToPoseType(TEnumAsByte<ESTEPoseState> InPoseState);
	void ClientSomeOneResponseMe(class ASTExtraBaseCharacter* BeInvitedPlayer, EInviteResponceType res);
	void ClientSomeOneInviteMe(class ASTExtraBaseCharacter* SomeOne);
	void ClientSetLeaveVehicleLocation(const struct FVector& LeaveLocation);
	void ClientOnPossessBy(class AController* NewController);
	void ClientNotifyCrack(const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void ClearOnDeath(class AController* EventInstigater);
	void ClearHPUI();
	void CheckSprint();
	bool CheckPlayerNeedUpdateAnimation();
	void CharacterMovementUpdatedCallback(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void ChangeReticleShapeToPrev();
	void ChangeReticleShapeToNext();
	bool CanUseItem();
	bool CanSwim();
	bool CanEnterState(EPawnState NewState);
	void CancleVault();
	bool CanChangeThrowModePC();
	bool CanChangeThrowMode();
	void CancelRescue();
	void CancelFollow();
	void BulletChange();
	void BroadcastOtherClientsDie(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, const struct FDamageEvent& DamageEvent, bool bIsPointDamage);
	void BroadcastFatalDamageInfoWrapper(class AUAECharacter* causer, class AUAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int PreviousHealthStatus, class AUAECharacter* WhoKillMe, int KillerKillCount);
	void BroadcastFatalDamageInfo(class AUAECharacter* causer, class AUAECharacter* VictimName, int DamageType, int AdditionalParam, bool IsHeadshot, int ResultHealthStatus, int PreviousHealthStatus, class AUAECharacter* WhoKillMe, int KillerKillCount);
	void BroadcastClientsSimulateVehicleDamage(float BaseDamage, const struct FVehicleDamageEvent& VehicleDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateRadialDamage(float BaseDamage, const struct FRadialDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulatePoisonDamage(float BaseDamage, const struct FPoisonDamageEvent& PoisonDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulatePointDamage(float BaseDamage, const struct FSTPointDamageEvent& PointDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHeath, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateMeleeDamage(float BaseDamage, const struct FMeleeDamageEvent& MeleeDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateFallingDamage(float BaseDamage, const struct FFallingDamageEvent& FallingDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateDrowningDamage(float BaseDamage, const struct FDrowningDamageEvent& DrowningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateBurningDamage(float BaseDamage, const struct FSTBurningDamageEvent& BurningDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	void BroadcastClientsSimulateAirAttackDamage(float BaseDamage, const struct FSTAirAttackRadialDamageEvent& AirAttackDamageEvent, class APawn* DamageInstigatorPawn, float ServerCurHealth, bool _isFatalHealthCost, bool IsHeadShotDamage);
	float BPTakeDamage(float Damage, class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent);
	void BPResetCharacter();
	void BPReceiveRadialDamage(float DamageReceived, class UDamageType* DamageType, const struct FVector& Origin, float Radius, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void BPReceivePointDamage(float Damage, class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void BPReceiveMeleeDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BPReceiveDamage(float Damage, class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void BPNotifyStartDying(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPNotifyDeathEnd(class AController* Killer, class AActor* DamageCauser, const struct FHitResult& KillingHitInfo, const struct FVector& KillingHitImpulseDir, class UClass* KillingHitDamageType);
	void BPDie(float KillingDamage, class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent);
	void AutoScopeWhenPeek();
	void AttachWeapon();
	bool AllowStateCompare(int ComparedState, EPawnState inState, bool withLog);
	bool AllowState(EPawnState State, bool withLog);
	void AIStartFireOnServer(int BurstShootBulletsLimit, float BurstShootTimeLimit, TEnumAsByte<EShootWeaponShootMode> ShootMode, const struct FVector& SimpleShootTarget);
	void AddOneDamageCauserRecord(class AController* causer, int HSChangeMargin, const struct FDamageEvent& DamageEvent, bool IsHeadshot, class AActor* DamageCauser);
	void AddMoveOffSet(float Forward, float Right, float Up);
	bool AddHealthSafety(float AddVal, class AController* DamageInstigator, bool IsDamageFromVehicleExplode);
	int AddBuff(const struct FName& BuffName, class AController* BuffCauser, int LayerCount, class AActor* BuffApplierActor);
};


// Class ShadowTrackerExtra.STExtraBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USTExtraBlueprintFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBlueprintFunctionLibrary");
		return ptr;
	}


	struct FRotator STATIC_Vector2Rotator(const struct FVector& ver);
	bool STATIC_TraceGround(class UObject* ContextObject, const struct FVector& AboveGroundLoc, float TraceDeepDis, bool bForceStatic, struct FHitResult* HitInfo);
	bool STATIC_TraceBlock(class UObject* ContextObject, const struct FVector& Start, const struct FVector& End, TArray<class AActor*> IgnoreActors, bool bForceStatic, struct FHitResult* HitInfo);
	class UCustomParticleSystemComponent* STATIC_SpawnCustomEmitterAttached(class UParticleSystem* EmitterTemplate, class USceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<EAttachLocation> LocationType, bool bAutoDestroy);
	class UCustomParticleSystemComponent* STATIC_SpawnCustomEmitterAtLocation(class UObject* WorldContextObject, class UParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, bool bAutoDestroy);
	void STATIC_SetUpPostProcessSetting(class APostProcessVolume* PostProcessVolume, TArray<class UMaterialInstanceDynamic*>* Blends);
	void STATIC_SetPostProcessBlendEffectWeightByIndex(class APostProcessVolume* PostProcessVolume, unsigned char Index, float weight);
	void STATIC_SetCollisionResponseForBodies(class USkeletalMeshComponent* SkelMesh, TEnumAsByte<ECollisionChannel> Channel, TEnumAsByte<ECollisionResponse> NewResponse, TArray<struct FName> BodyNames);
	struct FVector STATIC_LimitVector(const struct FVector& CurVec, const struct FVector& MaxVec);
	struct FRotator STATIC_LimitRotator(const struct FRotator& CurRot, const struct FRotator& MaxRot);
	bool STATIC_IsPlayerCantBlock(class AActor* DamageCauser, struct FHitResult* HitResult);
	bool STATIC_HasTeammateAlive(class ASTExtraPlayerState* PS);
	bool STATIC_GetWorldToUIShowLocationRect(class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector4& Limit, const struct FVector2D& UIOffset, struct FVector2D* OutPosition, float* Angle);
	float STATIC_GetUIShowLocationAngle(class UObject* WorldContextObject, const struct FVector2D& InPosition, const struct FVector4& Limit);
	TArray<class AActor*> STATIC_GetSphereOverlappingActors(class UObject* WorldContextObject, float Radius, float CollisionFreeRadius, const struct FVector& Origin, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, bool DrawVisibleTraceDebugLine);
	float STATIC_GetRadialDamageImpulseAtLocation(const struct FVector& Location, class UDamageType* DamageType, const struct FVector& Origin, float Radius);
	struct FWeightedBlendable STATIC_GetPostProcessBlendEffectWeightByIndex(class APostProcessVolume* PostProcessVolume, unsigned char Index);
	struct FString STATIC_GetDeviceName();
	class UChatComponent* STATIC_GetChatComponentFromController(class AController* Controller);
	class UChatComponent* STATIC_GetChatComponentFromCharacter(class ACharacter* Character);
	class UBackpackComponent* STATIC_GetBackpackComponentFromController(class AController* Controller);
	class UBackpackComponent* STATIC_GetBackpackComponentFromCharacter(class ACharacter* Character);
	void STATIC_GetAssetByAssetReferenceAsyncWithID(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& AssetLoadSuccessDelegate, int resID);
	void STATIC_GetAssetByAssetReferenceAsync(const struct FSoftObjectPath& AssetReference, const struct FScriptDelegate& AssetLoadSuccessDelegate);
	class UObject* STATIC_GetAssetByAssetReference(const struct FSoftObjectPath& AssetReference);
	TArray<struct FVector> STATIC_Generate3StageBezierPointsSrcToDst(const struct FVector& Src, const struct FVector& Ctl, const struct FVector& Dst, int Num);
	bool STATIC_CreateMyLandscape(class UObject* WorldContextObject, const struct FString& MatPath, const struct FString& GeoPath);
	bool STATIC_ComponentIsVisibleFromExplosion(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, TArray<class AActor*> IgnoreActors, TEnumAsByte<ECollisionChannel> TraceChannel, bool DrawVisibleTraceDebugLine);
	bool STATIC_ApplyRadiusDamageSTEWithMomentum(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, float BaseMomentumMag, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, float CollisionFreeRadius, float AddtionalDamage, bool IsVehicleExplode, bool DrawVisibleTraceDebugLine);
	bool STATIC_ApplyRadiusDamageSTE(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AActor*> IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, float CollisionFreeRadius, bool DrawVisibleTraceDebugLine);
	void STATIC_AddDistributedImpulseAtLocation(class USkeletalMeshComponent* SkelMesh, const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName, float DistriburedImpulseScale);
};


// Class ShadowTrackerExtra.STExtraBuffAction_AdjustStunPostMat
// 0x0040 (0x0188 - 0x0148)
class USTExtraBuffAction_AdjustStunPostMat : public UUTSkillAction
{
public:
	float                                              FadeInDuration;                                           // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsUseBreathPercentageAsAlpha;                             // 0x014C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	float                                              FadeOutDuration;                                          // 0x0150(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               ResetOnRemove;                                            // 0x0154(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	class UMaterialInterface*                          ParentMaterial;                                           // 0x0158(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ShaderUniformName;                                        // 0x0160(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	class UMaterialInstanceDynamic*                    DynamicMat;                                               // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               IsUniqueEffect;                                           // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0179(0x0007) MISSED OFFSET
	class UStaticMeshComponent*                        CameraStaticMeshCom;                                      // 0x0180(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_AdjustStunPostMat");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Attachment
// 0x0010 (0x0158 - 0x0148)
class USTExtraBuffAction_Attachment : public UUTSkillAction
{
public:
	TArray<struct FUTBuffAttachment>                   Attachments;                                              // 0x0148(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Attachment");
		return ptr;
	}

};


// Class ShadowTrackerExtra.DamageType_BuffDot
// 0x0000 (0x0040 - 0x0040)
class UDamageType_BuffDot : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.DamageType_BuffDot");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Dot
// 0x0018 (0x0160 - 0x0148)
class USTExtraBuffAction_Dot : public UUTSkillAction
{
public:
	float                                              IntervalTime;                                             // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DotValue;                                                 // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 CurveLayeredDamage;                                       // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Dot");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_DrowningDamage
// 0x0010 (0x0158 - 0x0148)
class USTExtraBuffAction_DrowningDamage : public UUTSkillAction
{
public:
	float                                              IntervalTime;                                             // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DotValue;                                                 // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BreathAmountThrehold;                                     // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_DrowningDamage");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction
// 0x0000 (0x0148 - 0x0148)
class UUAESkillAction : public UUTSkillAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_EnableAttrModifier
// 0x0010 (0x0158 - 0x0148)
class USTExtraBuffAction_EnableAttrModifier : public UUAESkillAction
{
public:
	struct FString                                     AttrConfigItemName;                                       // 0x0148(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_EnableAttrModifier");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_Log
// 0x0010 (0x0158 - 0x0148)
class USTExtraBuffAction_Log : public UUTSkillAction
{
public:
	struct FString                                     LogString;                                                // 0x0148(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_Log");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_PeriodAction
// 0x0018 (0x0160 - 0x0148)
class USTExtraBuffAction_PeriodAction : public UUTSkillAction
{
public:
	class UUTSkillAction*                              Action;                                                   // 0x0148(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              Interval;                                                 // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CurrentTickDeltaTime;                                     // 0x0154(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_PeriodAction");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_PlayAnimation
// 0x00D0 (0x0218 - 0x0148)
class USTExtraBuffAction_PlayAnimation : public UUTSkillAction
{
public:
	struct FBuffAnimationItem                          BuffAnimations;                                           // 0x0148(0x00A8) (Edit, BlueprintVisible)
	struct FBuffAnimationTagItem                       BuffAnimationTags;                                        // 0x01F0(0x0028) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_PlayAnimation");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffAction_StopMovement
// 0x0000 (0x0148 - 0x0148)
class USTExtraBuffAction_StopMovement : public UUTSkillAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffAction_StopMovement");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffApplierComponent
// 0x0058 (0x0150 - 0x00F8)
class USTExtraBuffApplierComponent : public UActorComponent
{
public:
	struct FString                                     OverlapCheckComponnentName;                               // 0x00F8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FBuffApplierConditionPair>           BuffConditionArray;                                       // 0x0108(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bLooping;                                                 // 0x0118(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0119(0x001F) MISSED OFFSET
	class UShapeComponent*                             OverlapCheckComponnent;                                   // 0x0138(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0140(0x0002) MISSED OFFSET
	bool                                               IsIgnoreThrower;                                          // 0x0142(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD];                                       // 0x0143(0x000D) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffApplierComponent");
		return ptr;
	}


	void SetIsEnableChecking(bool Enable);
	void OverlapCheckerOverlapeed(class AActor* OtherActor);
};


// Class ShadowTrackerExtra.STExtraBuffStatusType_CanMove
// 0x0000 (0x0028 - 0x0028)
class USTExtraBuffStatusType_CanMove : public USTBaseBuffStatusType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffStatusType_CanMove");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraBuffStatusType_CanAttack
// 0x0000 (0x0028 - 0x0028)
class USTExtraBuffStatusType_CanAttack : public USTBaseBuffStatusType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraBuffStatusType_CanAttack");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraDelegateMgr
// 0x0090 (0x00B8 - 0x0028)
class USTExtraDelegateMgr : public UBlueprintFunctionLibrary
{
public:
	struct FScriptMulticastDelegate                    OnPlayerStateNameChange;                                  // 0x0028(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHPChange;                                               // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCanRescueOtherChange;                                   // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnRescueingStatusChangeChange;                            // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBreathChange;                                           // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnKilledTips;                                             // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnVehicleHPChange;                                        // 0x0088(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterStateChangeDelegate;                           // 0x0098(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnterBornIsland;                                        // 0x00A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraDelegateMgr");
		return ptr;
	}


	class USTExtraDelegateMgr* STATIC_STExtraDelegateMgrInstance();
};


// Class ShadowTrackerExtra.STExtraExplosionEffect
// 0x0028 (0x0390 - 0x0368)
class ASTExtraExplosionEffect : public AActor
{
public:
	class UParticleSystem*                             FarComplexEffect;                                         // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NearSimpleEffect;                                         // 0x0370(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NearToFarDistance;                                        // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class UAkAudioEvent*                               ExplosionSound;                                           // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0388(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraExplosionEffect");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraExplosiveActor
// 0x0030 (0x0398 - 0x0368)
class ASTExtraExplosiveActor : public AActor
{
public:
	float                                              BaseDamage;                                               // 0x0368(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumDamage;                                            // 0x036C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageInnerRadius;                                        // 0x0370(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageOuterRadius;                                        // 0x0374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageFreeRadius;                                         // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageTypeClass;                                          // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ExplosionEffectTemplate;                                  // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               DrawExplodeVisibleTraceDebugLine;                         // 0x0390(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0391(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraExplosiveActor");
		return ptr;
	}


	void Explode(class APawn* InstigatorPawn, class AActor* DamageCauser, TArray<class AActor*> IgnoreActors, const struct FVector& Origin, bool bReplicateToClients);
};


// Class ShadowTrackerExtra.STExtraFlareGunBullet
// 0x0078 (0x03E0 - 0x0368)
class ASTExtraFlareGunBullet : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBulletMovementComponent*                    PMComp;                                                   // 0x0370(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UParticleSystemComponent*                    ParticleComp;                                             // 0x0378(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              CallSuperAirDropHeight;                                   // 0x0380(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LifeTime;                                                 // 0x0384(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LaunchGravityScale;                                       // 0x0388(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Phase1LastTime;                                           // 0x038C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Phase2FallZSpeed;                                         // 0x0390(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CallSuperAirSropRadius;                                   // 0x0394(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParticleScaleParamByDistanceToCamera;                     // 0x0398(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class ASTExtraShootWeapon*                         OwningShootWeapon;                                        // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLaunchBullet;                                           // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03B8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraFlareGunBullet");
		return ptr;
	}


	void RPC_Multicast_StartLaunch(const struct FVector& Velocity, float Gravity);
	void RPC_Multicast_EnterPhase2();
	void OnBounce(const struct FHitResult& _ImpactResult, const struct FVector& _ImpactVelocity);
	void LaunchBulletDelegate__DelegateSignature();
};


// Class ShadowTrackerExtra.STExtraFlareGunShootWeapon
// 0x0000 (0x09C0 - 0x09C0)
class ASTExtraFlareGunShootWeapon : public ASTExtraShootWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraFlareGunShootWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraVehicleBase
// 0x02A8 (0x0670 - 0x03C8)
class ASTExtraVehicleBase : public APawn
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x03C8(0x0008) MISSED OFFSET
	ESTExtraVehicleType                                VehicleType;                                              // 0x03D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03D1(0x0007) MISSED OFFSET
	class UMaterialInterface*                          BrokenMat;                                                // 0x03D8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UParticleSystem*                             PS_Explosion;                                             // 0x03E0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UParticleSystem*                             PS_OnHitObstacles;                                        // 0x03E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  VehicleIcon;                                              // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumptionModifierBoost;                             // 0x03F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCanBoostSpeed;                                           // 0x03FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSyncAtClient;                                         // 0x03FD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckOnGround;                                           // 0x03FE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x03FF(0x0001) MISSED OFFSET
	float                                              LanscapeCheckDistance;                                    // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInvulnerableWhenHasRiders;                               // 0x0404(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0405(0x0003) MISSED OFFSET
	float                                              NetCullingDistanceOnVeryLowDevice;                        // 0x0408(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              voiceCheckCD;                                             // 0x040C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              voiceCheckShowCD;                                         // 0x0410(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VoiceCheckDis;                                            // 0x0414(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              voiceUsingHornCheckDis;                                   // 0x0418(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              voiceCheckSpeed;                                          // 0x041C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x0420(0x001C) MISSED OFFSET
	bool                                               bDebugDrawEnterVehicle;                                   // 0x043C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2B];                                      // 0x043D(0x002B) MISSED OFFSET
	ESTExtraVehicleHealthState                         VehicleHealthState;                                       // 0x0468(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsEngineStarted;                                         // 0x0469(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUsingHorn;                                             // 0x046A(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsBoosting;                                              // 0x046B(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BloodEffectScale;                                         // 0x046C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0478(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleSeatComponent*                       VehicleSeats;                                             // 0x0480(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleDamageComponent*                     VehicleDamage;                                            // 0x0488(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleCommonComponent*                     VehicleCommon;                                            // 0x0490(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UBuoyancyForceComponent*                     BuoyancyForceComponent;                                   // 0x0498(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	class UVehicleSyncComponent*                       VehicleSyncComponent;                                     // 0x04A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	float                                              VehicleHitThreshold;                                      // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleHitCharacterThreshold;                             // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0xC];                                       // 0x04B0(0x000C) MISSED OFFSET
	float                                              AndroidGLES2TailLightScale;                               // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x10];                                      // 0x04C0(0x0010) MISSED OFFSET
	float                                              VehicleEnterDistance;                                     // 0x04D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TickEnterSphereInterval;                                  // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              EnterSphereExtraHeight;                                   // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x9];                                       // 0x04DC(0x0009) MISSED OFFSET
	bool                                               bPeneTerrainProtectionEnabled;                            // 0x04E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x2];                                       // 0x04E6(0x0002) MISSED OFFSET
	float                                              PeneTerrainProtectionInterval;                            // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SaveValidTransformInterval;                               // 0x04EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PeneTerrainProtectionFixOffset;                           // 0x04F0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData10[0x24];                                      // 0x04FC(0x0024) MISSED OFFSET
	class UAkAudioEvent*                               Sfx_EngineLoop;                                           // 0x0520(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Boost;                                                // 0x0528(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_FireLoop;                                             // 0x0530(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Landing;                                              // 0x0538(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Explosion;                                            // 0x0540(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_HitBody;                                              // 0x0548(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_HitMetal;                                             // 0x0550(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Horn;                                                 // 0x0558(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Throttle;                                             // 0x0560(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x58];                                      // 0x0568(0x0058) MISSED OFFSET
	float                                              RPMSfxScale;                                              // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ThrottleSfxMinSpeed;                                      // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x10];                                      // 0x05C8(0x0010) MISSED OFFSET
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x05D8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FVehicleSimViewData                         SimulateViewData;                                         // 0x05DC(0x0004) (Net)
	class UVehicleSpringArmComponent*                  VehicleSpringArmComp;                                     // 0x05E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnVehicleHealthStateChanged;                              // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bAlwaysIgnoreRideCheck;                                   // 0x05F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x3];                                       // 0x05F9(0x0003) MISSED OFFSET
	float                                              MinRideAngleDgree;                                        // 0x05FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bShouldRespawnSelfWhenUnusable;                           // 0x0600(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0601(0x0003) MISSED OFFSET
	float                                              RespawnWaitingTime;                                       // 0x0604(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              RespawnTickInterval;                                      // 0x0608(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData15[0x44];                                      // 0x060C(0x0044) MISSED OFFSET
	float                                              MoveValue;                                                // 0x0650(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x1C];                                      // 0x0654(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleBase");
		return ptr;
	}


	void VehicleBeenDestroyedCleanInfoDisplay(ESTExtraVehicleHealthState InVehicleHealthState);
	void ServerSetUsingHorn(bool bUse);
	void ServerSetBoosting(bool bEnalbed);
	void PlaySfxOneShot(class UAkAudioEvent* AkEvent);
	void OnUserQualitySettingChanged(int renderlevel);
	void OnUpdateEffects();
	void OnSetTailLightValue(float LightValue);
	void OnRep_VehicleHealthState();
	void OnRep_SimulateViewData();
	void OnRep_IsEngineStarted();
	void OnRep_IsBoosting();
	void OnEngineStop();
	void OnEngineStart();
	void OnBoostingChanged();
	bool IsInWater();
	void InitVehicle(int FuelPercent, bool bEngineOn);
	void HandleOnVehicleHealthStateChanged(ESTExtraVehicleHealthState InVehicleHealthState);
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	struct FVector GetRotationInputDir();
	float GetForwardSpeed();
	void ClearInputs();
	bool CanRide();
	void BroadcastClientVehicleExplosionEffect();
};


// Class ShadowTrackerExtra.STExtraFloatingVehicle
// 0x0010 (0x0680 - 0x0670)
class ASTExtraFloatingVehicle : public ASTExtraVehicleBase
{
public:
	class USTExtraFloatingVehicleMovementComponent*    FloatingVehicleMovement;                                  // 0x0670(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0678(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraFloatingVehicle");
		return ptr;
	}


	void HandleOnMeshAwake(class UPrimitiveComponent* WakingComponent, const struct FName& BoneName);
	struct FVector GetRotationInputDir();
};


// Class ShadowTrackerExtra.STExtraFloatingVehicleMovementComponent
// 0x0050 (0x01D0 - 0x0180)
class USTExtraFloatingVehicleMovementComponent : public UPawnMovementComponent
{
public:
	float                                              MaxAcceleration;                                          // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartAccelerationRate;                                    // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StopAccelerationRate;                                     // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxRotationYawAngle;                                      // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RotationYawRate;                                          // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BackwardForceScale;                                       // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x0198(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RotationYawAngle;                                         // 0x019C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       ApplyForceSocketName;                                     // 0x01A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 SlideCompensationCurve;                                   // 0x01A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x01B0(0x0010) MISSED OFFSET
	float                                              STThrottleInput;                                          // 0x01C0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              STSteeringInput;                                          // 0x01C4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	class UBuoyancyForceComponent*                     buoyancyForce;                                            // 0x01C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraFloatingVehicleMovementComponent");
		return ptr;
	}


	void ServerUpdateInput(float InSteeringInput, float InThrottleInput);
	float GetThrottleInput();
	float GetSteeringInput();
};


// Class ShadowTrackerExtra.STExtraFPPAnimInstance
// 0x0040 (0x0930 - 0x08F0)
class USTExtraFPPAnimInstance : public USTExtraAnimInstance
{
public:
	struct FTransform                                  C_FPPWeaponOffset;                                        // 0x08F0(0x0030) (BlueprintVisible, IsPlainOldData)
	float                                              C_FPPAimOffsetRotateRate;                                 // 0x0920(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               C_HoldingGrenade;                                         // 0x0924(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0925(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraFPPAnimInstance");
		return ptr;
	}


	void CacheParamList(float DeltaSeconds);
};


// Class ShadowTrackerExtra.STExtraGameInstance
// 0x0580 (0x08B0 - 0x0330)
class USTExtraGameInstance : public UUAEGameInstance
{
public:
	struct FScriptMulticastDelegate                    OnUserQualitySettingChanged;                              // 0x0330(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FRenderQualitySettings                      renderQualitySettingsLastSet;                             // 0x0340(0x0003)
	struct FRenderQualitySettings                      renderQualitySettingsApplying;                            // 0x0343(0x0003)
	struct FRenderQualitySettings                      renderQualitySettingsInit;                                // 0x0346(0x0003)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET
	struct FUserDetailSetting                          UserDetailSetting;                                        // 0x034C(0x0058)
	bool                                               LobbyRenderSwitch;                                        // 0x03A4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               LobbyRenderSwitchLow;                                     // 0x03A5(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               LobbyRenderSwitchMid;                                     // 0x03A6(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               LobbyRenderSwitchHigh;                                    // 0x03A7(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FRenderItem>                         LobbyBackupRenderSettings;                                // 0x03A8(0x0010) (ZeroConstructor)
	TArray<struct FRenderItem>                         LobbyRenderSettings;                                      // 0x03B8(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         LowFPSBackupRenderSettings;                               // 0x03C8(0x0010) (ZeroConstructor)
	TArray<struct FRenderItem>                         LowFPSRenderSettingProfileHigh;                           // 0x03D8(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         LowFPSRenderSettingProfileMid;                            // 0x03E8(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobileHDROpenConfig;                                      // 0x03F8(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobileHDRCloseConfig;                                     // 0x0408(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobileMSAAOpenConfig;                                     // 0x0418(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         Mobile2xMSAAOpenConfig;                                   // 0x0428(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobileMSAACloseConfig;                                    // 0x0438(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobilePPOpenConfig;                                       // 0x0448(0x0010) (ZeroConstructor, Config)
	TArray<struct FRenderItem>                         MobilePPCloseConfig;                                      // 0x0458(0x0010) (ZeroConstructor, Config)
	bool                                               AutoTestTriggle;                                          // 0x0468(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0469(0x0007) MISSED OFFSET
	struct FString                                     AutoTestMissionType;                                      // 0x0470(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FVector2D                                   FOVRange;                                                 // 0x0480(0x0008) (Config, IsPlainOldData)
	struct FVector2D                                   FOVScreenSizeCullingFactorRange;                          // 0x0488(0x0008) (Config, IsPlainOldData)
	bool                                               bFOVChanged;                                              // 0x0490(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0491(0x0003) MISSED OFFSET
	float                                              SwimRotateX;                                              // 0x0494(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnSearchGameCompleteDel;                                  // 0x0498(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0xF0];                                      // 0x04A8(0x00F0) MISSED OFFSET
	class UWonderfulRecordingCut*                      WonderfulRecordingCut;                                    // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData)
	class UDeathPlayback*                              DeathPlayback;                                            // 0x05A0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x05A8(0x0004) MISSED OFFSET
	int                                                PlayerNum;                                                // 0x05AC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bBattleHasStarted;                                        // 0x05B0(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeedJumpPlane;                                           // 0x05B1(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x46];                                      // 0x05B2(0x0046) MISSED OFFSET
	class ULobbyLink*                                  LobbyLink;                                                // 0x05F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTslStartParameter                          StartParamter;                                            // 0x0600(0x0080)
	unsigned char                                      UnknownData06[0x170];                                     // 0x0680(0x0170) MISSED OFFSET
	class UFpsCountStatistics*                         FpsCountStatstics;                                        // 0x07F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData07[0x28];                                      // 0x07F8(0x0028) MISSED OFFSET
	struct FString                                     SelectedModeNameInLobby;                                  // 0x0820(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData08[0x80];                                      // 0x0830(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameInstance");
		return ptr;
	}


	void UserQualitySettingChanged__DelegateSignature(int UserQualitySettingLevel);
	void StopStat(TEnumAsByte<EServerStatType> StatType);
	bool StartStat(TEnumAsByte<EServerStatType> StatType);
	void StartSinglePlayerGame(const struct FString& MapName);
	void StartMultiplayerPlayerGame(const struct FString& MapName);
	void ShowSessionStatus();
	void ShowLoadingScreen();
	void SetWorldCompositionRelativeDistance(int LODIndex, float Distance);
	void SetUserSetingShadowQuality(int shadowQuality);
	void SetUserSetingMobilceContentSCale(float mcs);
	void SettingNetIdForLocalPlayer();
	void SetRenderQuality(const struct FRenderQualitySettings& RenderQualitySettings);
	void SetFOVScreenSizeCullingFactor(float FOV);
	void STATIC_SetAutoMissionType();
	void SearchGames();
	void ReSetFOVScreenSizeCullingFactor();
	void RenderForLowFPS();
	void RefuseRenderForLowFPS();
	void QuitGame();
	void PreSetRenderQuality(const struct FRenderQualitySettings& RenderQualitySettings, bool* renderLevelChanged);
	void OnSearchGameCompleteDelegate__DelegateSignature(bool bRet);
	void OnSearchGameComplete(bool bRet);
	void OnCreatePresenceSessionComplete(bool bWasSuccessful);
	void JoinGameByName(const struct FString& TargetSessionOwnerID);
	bool IsSupportTagCulling();
	bool IsSupportSwitchRenderLevelRuntime();
	bool IsSupportMSAA();
	bool IsSupportLDR();
	bool IsOpenHDR();
	bool IsNetworkCompatible(uint32_t LocalNetworkVersion, uint32_t RemoteNetworkVersion);
	bool STATIC_IsAutoRunTestGame();
	bool STATIC_IsAutoRunRoomOwner();
	void GMStandalone(const struct FString& Map);
	class UWonderfulRecordingCut* GetWonderfulRecordingCut();
	int GetUserQualitySettingLevel();
	int GetUnderFpsCount(int Fps, int DuringSeconds);
	struct FString GetStartParameterStringValue(const struct FString& Key, const struct FString& NotFoundValue);
	TArray<struct FString> GetSearchGameResults();
	struct FRenderQualitySettings GetRenderQualityLastSet();
	struct FRenderQualitySettings GetRenderQualityApplying();
	int GetMinFps(int DuringSeconds);
	int GetMaxFps(int DuringSeconds);
	int GetDeviceUpdateVersionFlag();
	TEnumAsByte<ERenderQuality> GetDeviceMaxSupportLevel();
	int GetDeviceMaxFPSByDeviceLevel(TEnumAsByte<ERenderQuality> renderlevel);
	int GetDeviceLimit();
	int GetDeviceLevel();
	class UDeathPlayback* GetDeathPlayback();
	int STATIC_GetAutoRunTestServerIdx();
	struct FString STATIC_GetAutoRunPassWD();
	struct FString STATIC_GetAutoRunAccount();
	void ExitGame();
	void ExecuteCMD(const struct FString& CMDkey, const struct FString& CMDvalue);
	void EnableStreamingLevelLOD(bool bEnable);
	bool DeleteSavedFiles(bool allfilesSaved);
	void ClearSession();
	void CancelSearchGame();
	void AutoActiveLDR();
	void ActiveStyle_PP(TEnumAsByte<ERenderStyle> Level);
	void ActiveStyle(TEnumAsByte<ERenderStyle> Level);
	void ActiveMSAA(bool bOpenMSAA);
};


// Class ShadowTrackerExtra.STExtraGameMode
// 0x0060 (0x0DC0 - 0x0D60)
class ASTExtraGameMode : public AUAEGameMode
{
public:
	float                                              PlaneFlyHeight;                                           // 0x0D60(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlaneStartDistance;                                       // 0x0D64(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlaneFlySpeed;                                            // 0x0D68(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PlaneFlyPathRandomRadius;                                 // 0x0D6C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HaveToJumpDistance;                                       // 0x0D70(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              PrachuteHaveToOpeningHeight;                              // 0x0D74(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ParachuteHaveToLandHeight;                                // 0x0D78(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0D7C(0x0004) MISSED OFFSET
	struct FString                                     MapName;                                                  // 0x0D80(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0D90(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameMode");
		return ptr;
	}


	void OnGameEnd();
};


// Class ShadowTrackerExtra.STExtraGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class USTExtraGameplayStatics : public UGameplayStatics
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameplayStatics");
		return ptr;
	}


	void STATIC_StopSyncSound(class AActor* pSouceActor);
	float STATIC_STApplyPointDamage(class AActor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FHitResult& HitInfo, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass);
	bool STATIC_SetWorldOriginByDistance(class APlayerController* Controller, float NecessaryDistanceToWorldShifting);
	void STATIC_SetWorldOrigin(class APlayerController* Controller);
	void STATIC_SetAnimationAkSwitch(class ACharacter* Character, const struct FString& SwitchGroup, const struct FString& SwitchState);
	void STATIC_SetAnimationAkRTPC(class ACharacter* Character, const struct FString& RTPCName, float RTPCValue);
	struct FVector STATIC_ProjectPointToFloor(class UObject* WorldContextObject, const struct FVector& Origin, float Length, bool* bOutHit);
	struct FVector STATIC_ProjectPointsToHighFloor(class UObject* WorldContextObject, const struct FVector& Origin, float AroundLength, float RayLength, bool* bOutHit);
	void STATIC_PostSyncAkEvent(int AkEventID, class AActor* pSouceActor, const struct FVector& AkLocation, bool IsFireSound);
	bool STATIC_IsShipping();
	bool STATIC_IsServerActor(class AActor* Actor);
	bool STATIC_IsPIE(class UObject* WorldContextObject);
	bool STATIC_IsEditor();
	bool STATIC_IsClientActor(class AActor* Actor);
	class ASTExtraBaseCharacter* STATIC_GetSTExtraCharacter(class UObject* WorldContextObject);
	bool STATIC_ConeVolumeLineTraceTest(class UObject* WorldContextObject, const struct FVector& Origin, float HalfConeAngle, float RayLength);
	bool STATIC_ConeVolumeLineTraceSingle(class UObject* WorldContextObject, const struct FVector& Origin, float HalfConeAngle, float RayLength, struct FVector* OutHitPoint);
	int STATIC_ConeVolumeLineTraceMulti(class UObject* WorldContextObject, const struct FVector& Origin, int SamplingNum, float HalfConeAngle, float RayLength, TArray<struct FVector>* OutHitPoints);
};


// Class ShadowTrackerExtra.STExtraGameSession
// 0x0370 (0x06F0 - 0x0380)
class ASTExtraGameSession : public AGameSession
{
public:
	unsigned char                                      UnknownData00[0x370];                                     // 0x0380(0x0370) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameSession");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraGameStateBase
// 0x02D0 (0x06A8 - 0x03D8)
class ASTExtraGameStateBase : public AUAEGameState
{
public:
	unsigned char                                      UnknownData00[0x9];                                       // 0x03D8(0x0009) MISSED OFFSET
	bool                                               IsTest;                                                   // 0x03E1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x03E2(0x0002) MISSED OFFSET
	struct FVector                                     BlueCircle;                                               // 0x03E4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     WhiteCircle;                                              // 0x03F0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03FC(0x0004) MISSED OFFSET
	struct FAirAttackOrder                             AirAttackOrder;                                           // 0x0400(0x0028)
	struct FVector                                     AirAttackArea;                                            // 0x0428(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0434(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSafeZoneTips;                                           // 0x0438(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBlueCirclePreWarning;                                   // 0x0448(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBlueCircleRun;                                          // 0x0458(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBlueCircleSizeAndPosition;                              // 0x0468(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterCircleWaveOver;                                // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterLastCircle;                                    // 0x0488(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0498(0x0010) MISSED OFFSET
	int                                                PlayerNum;                                                // 0x04A8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsUseGameStartCountDown;                                  // 0x04AC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x04AD(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlayerNumChange;                                        // 0x04B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBeKilledNumChange;                                      // 0x04C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnGameEnd;                                                // 0x04D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bIsTrainingMode;                                          // 0x04E0(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitAudioVisual;                                       // 0x04E1(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitAutoPick;                                          // 0x04E2(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bForbitHurtEffect;                                        // 0x04E3(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bGunSamePriority;                                         // 0x04E4(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x04E5(0x0003) MISSED OFFSET
	int                                                TrainingCountdownTimer;                                   // 0x04E8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsWeaponAutoReloadMode;                                  // 0x04EC(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bIsPickUpFillBulletMode;                                  // 0x04ED(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAutoAimTrainingMode;                               // 0x04EE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bEnablePickUpTrainingMode;                                // 0x04EF(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrainingModePickUpColdCD;                                 // 0x04F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TrainingModeDropLifeTime;                                 // 0x04F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDebugEnableDamageEffectInTrainingMode;                   // 0x04F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x7];                                       // 0x04F9(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAirAttack;                                              // 0x0500(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               IsFPPGameMode;                                            // 0x0510(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	bool                                               bReadyStateCountingDown;                                  // 0x0511(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xE];                                       // 0x0512(0x000E) MISSED OFFSET
	int                                                ReadyStateTime;                                           // 0x0520(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x4];                                       // 0x0524(0x0004) MISSED OFFSET
	struct FName                                       GameModeState;                                            // 0x0528(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FAirplanePath                               AirplanePath;                                             // 0x0530(0x0030) (Net)
	struct FScriptMulticastDelegate                    ReConnectGameStateInfoNotify;                             // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     GameModeDisplayName;                                      // 0x0570(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	int                                                CurCircleWave;                                            // 0x0580(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x44];                                      // 0x0584(0x0044) MISSED OFFSET
	int                                                AlivePlayerNum;                                           // 0x05C8(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                AliveTeamNum;                                             // 0x05CC(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NumTeams;                                                 // 0x05D0(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                PlayerNumOnPlane;                                         // 0x05D4(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	EGameModeType                                      GameModeType;                                             // 0x05D8(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x3];                                       // 0x05D9(0x0003) MISSED OFFSET
	int                                                PlayerNumPerTeam;                                         // 0x05DC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             OpenTagCullingMaps;                                       // 0x05E0(0x0010) (ZeroConstructor, Config)
	TMap<struct FString, float>                        BeInvitedPlayers;                                         // 0x05F0(0x0050) (ZeroConstructor)
	float                                              InviteCountDownTime;                                      // 0x0640(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	TArray<struct FCircleDataMining>                   CircleDataMining;                                         // 0x0648(0x0010) (ZeroConstructor)
	class ULevelEventCenter*                           LevelEventCenter;                                         // 0x0658(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x20];                                      // 0x0660(0x0020) MISSED OFFSET
	struct FString                                     MatchId;                                                  // 0x0680(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient)
	struct FString                                     MatchShortGuid;                                           // 0x0690(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	int                                                NumJoinPlayers;                                           // 0x06A0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumStartPlayers;                                          // 0x06A4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGameStateBase");
		return ptr;
	}


	void SyncAirplaneRoute(const struct FVector& StartLoc, const struct FVector& StopLoc, const struct FVector& CanJumpLoc, const struct FVector& ForceJumpLoc);
	void SimulateAirAttackOver();
	void SetTagCulling(bool IsUse);
	void SetReConnectGameStateInfo(const struct FReConnectGameStateInfo& ReConnectInfo);
	void SetCurAirAttackWave(int AirAttackWave);
	void SetCurAirAttackType(TEnumAsByte<EAirAttackInfo> airattacktype);
	void OnRep_ReadyStateTime();
	void OnRep_ReadyStateCountingDown();
	void OnRep_PlayerNumOnPlane();
	void OnRep_PlayerNumChange();
	void OnRep_MatchId();
	void OnRep_IsTrainingMode();
	void OnRep_IsFPPMode();
	void OnRep_GameModeState();
	void OnRep_AliveTeamNum();
	void OnRep_AlivePlayerNum();
	void OnRep_AirplanePath();
	void OnGameModeDisplayNameChange();
	float GetRepServerWorldTimeSeconds();
	struct FReConnectGameStateInfo GetReConnectGameStateInfo();
	struct FName GetGameModeState();
	struct FVector GetForceJumpLoc();
	int GetCurCircleWave();
	TEnumAsByte<ECircleInfo> GetCurCircleState();
	struct FVector GetCanJumpLoc();
	struct FVector GetAirplaneStopLoc();
	struct FVector GetAirplaneStartLoc();
	void BroadcastRoute(const struct FVector& StartLoc, const struct FVector& StopLoc, const struct FVector& CanJumpLoc, const struct FVector& ForceJumpLoc);
	void BroadcastLastCircle(const struct FVector& FinalWhiteCircle);
	void BroadcastCircleWaveOver(int Index);
	void BroadcastCircleSizeAndPosition(const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int Index);
	void BroadcastCircleInfo(TEnumAsByte<ECircleInfo> circleInfo, float Time, const struct FVector& BlueCircleSync, const struct FVector& WhiteCircleSync, int CircleInvertedIndex);
	void BroadcastAirAttackWarning(const struct FVector& airAttackAreaSrc, int waveindex);
	void BroadcastAirAttackOrder(const struct FAirAttackOrder& airAttackOrderSrc, int waveindex);
};


// Class ShadowTrackerExtra.STExtraGlobalData
// 0x0008 (0x0030 - 0x0028)
class USTExtraGlobalData : public UBlueprintFunctionLibrary
{
public:
	struct FGM                                         GMData;                                                   // 0x0028(0x0004) (Edit, BlueprintVisible)
	TEnumAsByte<EGameMap>                              GameMap;                                                  // 0x002C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsUpdateRCityWeather;                                    // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraGlobalData");
		return ptr;
	}


	class USTExtraGlobalData* STATIC_STExtraGlobalDataInstance();
	struct FString CurVersionNumber();
};


// Class ShadowTrackerExtra.STExtraHouseActor
// 0x0040 (0x0490 - 0x0450)
class ASTExtraHouseActor : public AUAEHouseActor
{
public:
	TArray<struct FVector>                             itemSpotPosList;                                          // 0x0450(0x0010) (ZeroConstructor, Transient)
	TArray<struct FBuildingSearchPath>                 searchPathList;                                           // 0x0460(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             cornerPointList;                                          // 0x0470(0x0010) (ZeroConstructor, Transient)
	struct FVector                                     centerPoint;                                              // 0x0480(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x048C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraHouseActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraInputInterface
// 0x0000 (0x0028 - 0x0028)
class USTExtraInputInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraInputInterface");
		return ptr;
	}


	void MoveUp(float Rate);
	void MoveRight(float Rate);
	void MoveForward(float Rate);
};


// Class ShadowTrackerExtra.STExtraMapFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USTExtraMapFunctionLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraMapFunctionLibrary");
		return ptr;
	}


	void STATIC_UpdateTeamMateLocAndRot(TArray<class ASTExtraPlayerState*> TeamMateStateArray, TArray<class UPanelWidget*> TeamMateInfoGridArray, TArray<class UImage*> TeamMateInfoImageArray, const struct FVector& LevelLandScapeCenter, float CorrectMapScale, float RotateAngle, class ASTExtraPlayerState* myPS, TArray<class UImage*> ArrowImageArray, const struct FVector2D& MapAdjustOffset, float MapWindowHalfExtent, TArray<int>* OutOfRangeTeammateIndex);
	void STATIC_SetLeftRouteLength(class UCanvasPanelSlot* LeftRouteSlot, class UCanvasPanelSlot* PassedRouteSlot, float FlyingProcess, float RouteTotalLengthInMap, float MapScale, float TopOffset, float BottomOffset, bool bIsWar);
	void STATIC_RnederThreadSetBigCore(bool isbig);
	class USTExtraMapFunctionLibrary* STATIC_MapFuncLibInstance();
	struct FVector STATIC_MapCenterToPointVector(const struct FVector& PointLocationInLevel, const struct FVector& LevelLandScapeCenter, float LevelToMapScale);
	bool STATIC_IsPlayerOutSafeZone(class APlayerController* PC, class ASTExtraGameStateBase* GS);
	bool IsNeedDrawGuideLine(float WhiteCircleRadius, const struct FVector2D& PlayerCoord, const struct FVector2D& WhiteCircleCoord);
	bool STATIC_IsInLevelBound(class UObject* WorldContextObject, const struct FVector& Target);
	struct FVector2D STATIC_GetRotatedVector2D(const struct FVector2D& InputVector, float RotateAngle);
	class AMiniMapStandardPoint* STATIC_GetMapStandardPoint(class UObject* WorldContextObject);
	struct FMapRealTimeInfo GetMapRealTimeInfo(class ASTExtraPlayerController* PC, class ASTExtraGameStateBase* GS, const struct FVector& LevelLandScapeCenter, float LevelToMapScale, float RotateAngle, const struct FMapRealTimeInfo& CacheMapInfo, bool isEntireMap);
	float STATIC_GetLevelLandscapeBounds(class UObject* WorldContextObject);
	struct FVector2D STATIC_GetLandscapeMidPoint(class UObject* WorldContextObject);
	int STATIC_GetAlivePlayerNumber();
	void STATIC_GameThreadSetBigCore(bool isbig);
	void STATIC_DrawPlayerMarkerInGrid(class ASTExtraPlayerController* PC, class UGridSlot* PlayerMarkerPanelSlot, const struct FVector2D& PlayerCoord, class UPanelWidget* PlayerMarkerImagePanel, TEnumAsByte<EPlayerOperation> PlayerOperation, float RotateAngle);
	void STATIC_DrawPlayerMarker(class ASTExtraPlayerController* PC, class UPanelWidget* PlayerMarkerPanel, const struct FVector2D& PlayerCoord, TEnumAsByte<EPlayerOperation> PlayerOperation, float RotateAngle, class UPanelWidget* selfArrow, bool isEntireMap);
	void DrawGuideLine(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector2D& WhiteCircleCenter, const struct FVector2D& PlayerCoord, TEnumAsByte<EMapType> MapType, float LineThickness, bool bAntiAlias);
	void DrawGridLine(const struct FPaintContext& InContext, float MapImageExtent, const struct FLinearColor& LargeGridLineColor, const struct FLinearColor& SmallGridLineColor, float LargeGridLineThickness, float SmallGridLineThickness, bool bDrawSmallGridLine, bool bAntiAlias);
	void DrawCircle(const struct FPaintContext& InContext, const struct FVector2D& CircleCenter, const struct FLinearColor& CircleColor, float CircleRadius, float MapWindowExtent, const struct FVector2D& PlayerCoord, TEnumAsByte<EMapType> MapType, bool bAntiAlias);
	void DrawAirplaneRouteInMiniMap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, const struct FVector& MapCenterToPlayer, const struct FVector2D& EndCoord, const struct FVector2D& PlayerCoord, const struct FVector2D& RouteVelocity, float LineThickness, bool bAntiAlias);
	void DrawAirplaneRouteInEntiremap(const struct FPaintContext& InContext, float DashSize, const struct FLinearColor& DashColor, float MapWindowExtent, float MapImageExtent, float MinimapWindowExtent, float MiniMapImageExtent, const struct FVector& MapCenterToPlayer, const struct FVector2D& StartCoord, const struct FVector2D& EndCoord, float LineThickness, bool bAntiAlias);
	float STATIC_CalPlayerToMarkerDist(class APlayerController* PC, float LevelLandScapeExtent, const struct FVector2D& MarkerInMap, const struct FVector& LevelLandScapeCenter);
	void STATIC_CalPlayerToMarkerDelYawAndDist(class APlayerController* PC, const struct FVector& MarkerAlign, float LevelLandScapeExtent, const struct FVector& LandscapeCenter, float* DelYaw, float* Dist);
	float CalPlayerRotationToPointDelYaw(class APlayerController* PC, const struct FVector& TargetPoint);
	struct FVector2D STATIC_AdjustMapPosition(class UCanvasPanelSlot* MapCanvas, const struct FVector2D& MapCenterToPlayer, float RotateAngle, float MiniMapWindowHalfSize, float MapImageSize);
};


// Class ShadowTrackerExtra.STExtraOBState
// 0x0010 (0x0408 - 0x03F8)
class ASTExtraOBState : public AUAEOBState
{
public:
	TArray<struct FPlayerStaticInfoInOB>               TotalPlayers;                                             // 0x03F8(0x0010) (Net, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraOBState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraOnlineSession
// 0x0000 (0x0028 - 0x0028)
class USTExtraOnlineSession : public UOnlineSession
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraOnlineSession");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerCharacter
// 0x0210 (0x1D30 - 0x1B20)
class ASTExtraPlayerCharacter : public ASTExtraBaseCharacter
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x1B20(0x0028) UNKNOWN PROPERTY: SoftClassProperty ShadowTrackerExtra.STExtraPlayerCharacter.SettleAccountUI
	struct FScriptMulticastDelegate                    OnHasPickupPropsAvailableChanged;                         // 0x1B48(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnHasTombBoxesAvailableChanged;                           // 0x1B58(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSkillFinishedDelegate;                                  // 0x1B68(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UWeaponAutoAimingComponent*                  AutoAimComp;                                              // 0x1B78(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class USTScreenAppearanceComponent*                ScreenAppearaceComp;                                      // 0x1B80(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UBoxComponent*                               BoxEar;                                                   // 0x1B88(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCharacterInterpRotationComp*                InterpRotationComp;                                       // 0x1B90(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	float                                              IndoorCheckDistance;                                      // 0x1B98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IndoorCheckTime;                                          // 0x1B9C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IndoorLowerCameraHeight;                                  // 0x1BA0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x1BA4(0x0018) MISSED OFFSET
	float                                              IndoorCheckHalfConeAngle;                                 // 0x1BBC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              IndoorCheckSuccessRate;                                   // 0x1BC0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                IndoorCheckSamplingQueueSize;                             // 0x1BC4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                IndoorCheckAccuracyMultiplier;                            // 0x1BC8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x1BCC(0x001C) MISSED OFFSET
	float                                              FootSoundObstructionCheckInterval;                        // 0x1BE8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FootSoundObstructionCheckMaxDistance;                     // 0x1BEC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x1BF0(0x0008) MISSED OFFSET
	bool                                               bIsStillParachuting;                                      // 0x1BF8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParachuteState>                       ParachuteState;                                           // 0x1BF9(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EParachuteState>                       LastParachuteState;                                       // 0x1BFA(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x1BFB(0x0001) MISSED OFFSET
	struct FCameraSettings                             FreefallCameraSetting;                                    // 0x1BFC(0x0014) (Edit, BlueprintVisible)
	struct FCameraSettings                             OpeningCameraSetting;                                     // 0x1C10(0x0014) (Edit, BlueprintVisible)
	bool                                               bInputMoveForward;                                        // 0x1C24(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInputMoveRight;                                          // 0x1C25(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x1C26(0x0002) MISSED OFFSET
	struct FParachuteStateParams                       ParachuteFreeFallingParams;                               // 0x1C28(0x0034) (Edit, BlueprintVisible, IsPlainOldData)
	struct FParachuteStateParams                       ParachuteOpeningParams;                                   // 0x1C5C(0x0034) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              HaveToOpenHeightToGround;                                 // 0x1C90(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HaveToLandHeightToGround;                                 // 0x1C94(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SwimZDir;                                                 // 0x1C98(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               Indoor;                                                   // 0x1C9C(0x0001) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x1C9D(0x0003) MISSED OFFSET
	float                                              SwimRotateX_Ex;                                           // 0x1CA0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VehicleForwardInputRate;                                  // 0x1CA4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VehicleRightInputRate;                                    // 0x1CA8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawBoxEarBulletOverlapRay;                              // 0x1CAC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x1CAD(0x0003) MISSED OFFSET
	struct FBulletFlySoundReplicatedData               BulletFlySoundReplicatedData;                             // 0x1CB0(0x0018) (Edit, BlueprintVisible, Net)
	class ASTExtraPlayerController*                    STPlayerController;                                       // 0x1CC8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData08[0x30];                                      // 0x1CD0(0x0030) MISSED OFFSET
	class UAimingComp*                                 AimingComponent;                                          // 0x1D00(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x18];                                      // 0x1D08(0x0018) MISSED OFFSET
	TArray<struct FString>                             CurrentVisitingLocationNames;                             // 0x1D20(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerCharacter");
		return ptr;
	}


	void WriteGameLogForRideParachute();
	void WriteGameLogForLeaveParachute();
	void UpdateIndoorState(bool IsIndoor);
	void TouchCancelSkillLock();
	void SyncDeadTombBoxToController(class APlayerTombBox* _DeadTombBox);
	bool ShouldTriggerEntryEvent(EUTSkillEntry EntryEvent);
	bool ShouldDropBagItem(const struct FItemDefineID& SkillItemID);
	void SetSwimRotateX_Ex(float NewSwimRotateX);
	void SetParachuteState(TEnumAsByte<EParachuteState> State);
	void SetAnimationAkSwitch(const struct FString& SwitchGroup, const struct FString& SwitchState);
	void SetAnimationAkRTPC(const struct FString& RTPCName, float RTPCValue);
	void ServerSetBulletFlySoundData(class ASTExtraPlayerCharacter* PlayerCharacter, class ASTExtraShootWeapon* InstigateWeapon, const struct FVector& FlySoundPos);
	void ReleaseTrigger(EControllerHand Hand);
	void PushTrigger(EControllerHand Hand);
	void ProneWithTerrain(const struct FRotator& CharacterRotation, bool isMoving, float Offset, float deap);
	void OnSkillFinishedDelegate__DelegateSignature(EUTSkillStopReason StopReason);
	void OnRep_TriggerEarSoundNotify();
	void OnRep_ParachuteState(TEnumAsByte<EParachuteState> State);
	void OnRank(int Kills, int Rank);
	void OnHasTombBoxesAvailableChanged__DelegateSignature(bool bIsAvailable);
	void OnHasPickupPropsAvailableChanged__DelegateSignature(bool bIsAvailable);
	void OnAvatarEquippedSucc(EAvatarSlotType slotType, bool isEquipped);
	bool IsUnderRoof();
	bool IsIndoor();
	bool IsGrenadeEmpty();
	bool IsAudioTestEnabled();
	void HandleParachuteStateChanged(TEnumAsByte<EParachuteState> NewState);
	void HandleBulletOverlap(class AActor* BulletActor, const struct FHitResult& HitResult, TArray<struct FHitResult> HitResults);
	class USpringArmComponent* GetThirdPersonSpringArm();
	class UCameraComponent* GetThirdPersonCamera();
	float GetSwimRotateX_Ex();
	class USpringArmComponent* GetScopeSpringArm();
	class UCameraComponent* GetScopeCamera();
	class ASTExtraPlayerController* GetPlayerControllerSafety();
	float GetIndoorFactor();
	class USpringArmComponent* GetFPPSpringArm();
	class UCameraComponent* GetFPPCamera();
	class USpringArmComponent* GetFirstPersonSpringArm();
	class UCameraComponent* GetFirstPersonCamera();
	struct FVector GetBonePos(const struct FName& BoneName);
	int FindWeaponAvatarIDFromWeaponAvatarList(int weaponItemID);
	int FindEquipmentAvatarIDFromEquipmentAvatarList(int equipmentItemID);
	void DoMoveRight(float Rate);
	void DoMoveForward(float Rate);
	void DoDoorInteractNetwork(class APUBGDoor* Door, bool IsExtraDoor);
	bool DoDoorInteractAction();
	void ClearHPUI();
	void CheckScopePP();
	void AddControllerYawInput(float Val);
	void AddControllerPitchInput(float Val);
};


// Class ShadowTrackerExtra.STExtraPlayerStart
// 0x0008 (0x03A0 - 0x0398)
class ASTExtraPlayerStart : public APlayerStart
{
public:
	bool                                               bUseAsReSpawn;                                            // 0x0398(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseAsFirstSpawn;                                         // 0x0399(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bMarkOccupied;                                            // 0x039A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x039B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerStart");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraPlayerState
// 0x0140 (0x0648 - 0x0508)
class ASTExtraPlayerState : public AUAEPlayerState
{
public:
	ExtraPlayerLiveState                               LiveState;                                                // 0x0508(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0509(0x0007) MISSED OFFSET
	struct FCharacterAutoFollowStruct                  AutoFollowInfo;                                           // 0x0510(0x0010) (BlueprintVisible, BlueprintReadOnly, Net)
	class ASTExtraBaseCharacter*                       CharacterOwner;                                           // 0x0520(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PlayerHealth;                                             // 0x0528(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PlayerHealthMax;                                          // 0x052C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FCharacterLocAndRot                         SelfLocAndRot;                                            // 0x0530(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FVector                                     PlayerDeadLocation;                                       // 0x0548(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, IsPlainOldData)
	struct FVector                                     MapMark;                                                  // 0x0554(0x000C) (BlueprintVisible, Net, IsPlainOldData)
	int                                                AirDropBoxFirstPickUpNum;                                 // 0x0560(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0564(0x0004) MISSED OFFSET
	TArray<TWeakObjectPtr<class ASTExtraPlayerState>>  TeamMatePlayerStateList;                                  // 0x0568(0x0010) (Net, ZeroConstructor)
	int                                                TeamMatePlayerStateIndex;                                 // 0x0578(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	int                                                Breath;                                                   // 0x057C(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FDriveCarNotify                             DriveCarNotify;                                           // 0x0580(0x0018) (Edit, BlueprintVisible, EditConst)
	float                                              EnegyBuffStage1;                                          // 0x0598(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage2;                                          // 0x059C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage3;                                          // 0x05A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage4;                                          // 0x05A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffReduceSpeedPerSec;                               // 0x05A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CurEnegyBuff;                                             // 0x05AC(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage1RecoverHealthTime;                         // 0x05B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage1RecoverHealthVal;                          // 0x05B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage2RecoverHealthTime;                         // 0x05B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage2RecoverHealthVal;                          // 0x05BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage3RecoverHealthTime;                         // 0x05C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage3RecoverHealthVal;                          // 0x05C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage4RecoverHealthTime;                         // 0x05C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnegyBuffStage4RecoverHealthVal;                          // 0x05CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnLocalCharacterHPChangeDel;                              // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPlayerKillsChangeDelegate;                              // 0x05E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x10];                                      // 0x05F0(0x0010) MISSED OFFSET
	bool                                               IsShowingRescueingUI;                                     // 0x0600(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xB];                                       // 0x0601(0x000B) MISSED OFFSET
	bool                                               isReconnected;                                            // 0x060C(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	bool                                               isLostConnection;                                         // 0x060D(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x2];                                       // 0x060E(0x0002) MISSED OFFSET
	TArray<int>                                        TeamMatesExitState;                                       // 0x0610(0x0010) (BlueprintVisible, Net, ZeroConstructor)
	bool                                               bGodSon;                                                  // 0x0620(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0621(0x0007) MISSED OFFSET
	int                                                PlayersCountOnPlane;                                      // 0x0628(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x1C];                                      // 0x062C(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraPlayerState");
		return ptr;
	}


	void RespondToPawnRescueingStatusChange(class ACharacter* _helpWho, class ACharacter* _ownerPawn, bool IsTurningInto, float RemainingRescueTime, bool IsFirstPlayerHelper);
	void RespondToPawnCanRescueOtherStatusChange(class ASTExtraBaseCharacter* _helpWho, class ASTExtraBaseCharacter* _ownerPawn, bool IsTurningInto);
	void RespondToPawnBreathChange(float _health, TEnumAsByte<ECharacterHealthStatus> _healthStatus, class ASTExtraBaseCharacter* param2);
	void RefreshFollowMark();
	int PlayersCountOnMyPlane();
	void OnRep_TeamMatePlayerStateList();
	void OnRep_TeamMatePlayerStateIndex();
	void OnRep_PlayersCountOnPlane();
	void OnRep_PlayerReconnectEvent();
	void OnRep_PlayerName();
	void OnRep_PlayerLostConnectionEvent();
	void OnRep_PlayerLiveState();
	void OnRep_PlayerKillsChange();
	void OnRep_PlayerIsFollowing();
	void OnRep_PlayerExitGameEvent();
	void OnRep_MapMarkNotify();
	void OnRep_HPChanged();
	void OnRep_BreathChanged();
	void OnRep_BPS();
	void OnPlayerKillsChangeDelegate__DelegateSignature();
	void OnLocalCharacterHPChangeDelegate__DelegateSignature(float currentHP, float ratioHP);
	bool IsSurvivedAloneInTheTeam();
	bool IsSinglePlayer();
	bool IsAlive();
	uint32_t GetUserIDByMemberID(int memberID);
	void GetTeamMatePlayerStateList(bool ExcludeMyself, TArray<class ASTExtraPlayerState*>* OutList);
	int GetTeammateIndex(class ASTExtraPlayerState* Teammate);
	int GetPlayerTeamIndex();
	float GetPlayerMaxHealth();
	float GetPlayerHealth();
	class ASTExtraBaseCharacter* GetPlayerCharacter();
	float GetMaxEnegyBuff();
	float GetBreathPercentage();
	TEnumAsByte<EPlayerEnegyStage> CalculateEnegyStage();
	void AddEnegySafety(float AddVal);
};


// Class ShadowTrackerExtra.STExtraShootWeaponBulletBase
// 0x0100 (0x0468 - 0x0368)
class ASTExtraShootWeaponBulletBase : public AActor
{
public:
	class UBulletMovementComponent*                    PMComp;                                                   // 0x0368(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bLaunchWithGravity;                                       // 0x0370(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	int                                                MaxNoGravityRange;                                        // 0x0374(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LaunchGravityScale;                                       // 0x0378(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                PunctureTimes;                                            // 0x037C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      ImpactActorTemplate;                                      // 0x0380(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0388(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UParticleSystem*                             NormalTailFX;                                             // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowNormalTailFXImpactInfo;                              // 0x0398(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawImpactNormal;                                        // 0x0399(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x039A(0x0006) MISSED OFFSET
	class UParticleSystem*                             BeamTailFX;                                               // 0x03A0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     RootScale;                                                // 0x03A8(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     ShootDir;                                                 // 0x03B4(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	unsigned char                                      UnknownData02[0x20];                                      // 0x03C0(0x0020) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnResetBullet;                                            // 0x03E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnBulletImpact;                                           // 0x03F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLaunchBullet;                                           // 0x0400(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UParticleSystemComponent*                    BeamTailFXComp;                                           // 0x0410(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class ASTExtraShootWeapon*                         OwningShootWeapon;                                        // 0x0418(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ASTExtraBaseCharacter*                       InstigatorCharacter;                                      // 0x0420(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x40];                                      // 0x0428(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraShootWeaponBulletBase");
		return ptr;
	}


	void ResetBulletDelegate__DelegateSignature();
	void OnImpactDelegate__DelegateSignature(const struct FHitResult& HitInfo);
	void OnImpact(const struct FHitResult& _ImpactResult);
	void LaunchBulletDelegate__DelegateSignature();
};


// Class ShadowTrackerExtra.STExtraUIUtils
// 0x0000 (0x0028 - 0x0028)
class USTExtraUIUtils : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraUIUtils");
		return ptr;
	}


	void STATIC_PrintGameLog(const struct FString& LogContent);
	struct FString STATIC_GetOwningPlayerRoleID(class UUAEUserWidget* UAEUserWidget);
	class ASTExtraPlayerCharacter* STATIC_GetOwningPlayerPawnOrVehicleDriver(class UUAEUserWidget* UAEUserWidget);
	struct FString STATIC_GetOwningPlayerOpenID(class UUAEUserWidget* UAEUserWidget);
	class ASTExtraPlayerController* STATIC_GetOwningPlayerNoDefault(class UUAEUserWidget* UAEUserWidget);
	class ASTExtraPlayerController* STATIC_GetOwningPlayer(class UUAEUserWidget* UAEUserWidget);
	struct FText STATIC_GetFloatAsStringWithPrecision(float TheFloat, int Precision, bool IncludeLeadingZero);
	class ASTExtraPlayerState* STATIC_GetCurPlayerState(class UUAEUserWidget* UAEUserWidget);
	struct FString STATIC_GetBattleID(class UUAEUserWidget* UAEUserWidget);
};


// Class ShadowTrackerExtra.STExtraUnderWaterEffectComp
// 0x00A0 (0x0340 - 0x02A0)
class USTExtraUnderWaterEffectComp : public USceneComponent
{
public:
	bool                                               bTickWaterEffectEnabled;                                  // 0x02A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02A1(0x0007) MISSED OFFSET
	struct FName                                       UnderWaterFogTagName;                                     // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      UnderWaterCamEffectClass;                                 // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02B8(0x0008) MISSED OFFSET
	struct FTransform                                  UnderWaterCamEffectTransform;                             // 0x02C0(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	class UAkAudioEvent*                               SfxInWater;                                               // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               SfxOutWater;                                              // 0x02F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FoggyWeatherUnderWaterFogMaxOpacity;                      // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NormalWeatherUnderWaterFogMaxOpacity;                     // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UExponentialHeightFogComponent*              UnderWaterFogComp;                                        // 0x0308(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class AWaterSwimActor*>                     WaterSwimObjs;                                            // 0x0310(0x0010) (ZeroConstructor)
	TArray<class UExponentialHeightFogComponent*>      SceneFogComps;                                            // 0x0320(0x0010) (ExportObject, ZeroConstructor)
	class UCameraComponent*                            LastActiveCamComp;                                        // 0x0330(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0338(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraUnderWaterEffectComp");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraVehicleMovementComponent4W
// 0x0058 (0x0498 - 0x0440)
class USTExtraVehicleMovementComponent4W : public UWheeledVehicleMovementComponent4W
{
public:
	TArray<struct FWheelHubSetup>                      WheelHubSetups;                                           // 0x0440(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ExtraOptBoneNames;                                        // 0x0450(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0460(0x0010) MISSED OFFSET
	bool                                               bHideWheelPhyBodyOnServer;                                // 0x0470(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0471(0x0007) MISSED OFFSET
	TArray<class UVehicleWheel*>                       WheelHubs;                                                // 0x0478(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	class ASTExtraVehicleBase*                         CharacterOwner;                                           // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0490(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleMovementComponent4W");
		return ptr;
	}


	void OnDriverRide();
	void OnDriverLeave();
	void HandleOnSeatDetached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
	void HandleOnSeatChanged(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType LastSeatType, int LastSeatIdx, ESTExtraVehicleSeatType NewSeatType, int NewSeatIdx);
	void HandleOnSeatAttached(class ASTExtraPlayerCharacter* Character, ESTExtraVehicleSeatType SeatType, int SeatIdx);
};


// Class ShadowTrackerExtra.STExtraVehicleUtils
// 0x0000 (0x0028 - 0x0028)
class USTExtraVehicleUtils : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleUtils");
		return ptr;
	}


	bool STATIC_IsPassenger(class ASTExtraBaseCharacter* Character);
	bool STATIC_IsDriver(class ASTExtraBaseCharacter* Character);
	class UVehicleUserComponent* STATIC_GetVehicleUserComp(class ASTExtraBaseCharacter* Character);
	EAvatarDamagePosition STATIC_GetVehiclePartByBoneName(class ASTExtraVehicleBase* Vehicle, const struct FName& BoneName);
	struct FString STATIC_GetVehicleInfo(class ASTExtraVehicleBase* VH);
	class UVehicleUserComponent* STATIC_GetFirstVehicleUserComp(class UWorld* World);
	class ASTExtraPlayerController* STATIC_GetController(class ASTExtraBaseCharacter* Character);
	struct FString STATIC_GetCharacterInfo(class ASTExtraBaseCharacter* CH);
	class ASTExtraBaseCharacter* STATIC_GetCharacter(class ASTExtraPlayerController* PC);
};


// Class ShadowTrackerExtra.STExtraVehicleWheel
// 0x0030 (0x0128 - 0x00F8)
class USTExtraVehicleWheel : public UVehicleWheel
{
public:
	struct FVector                                     SuspensionTravelDir;                                      // 0x00F8(0x000C) (Edit, IsPlainOldData)
	struct FVector                                     TireForceOffset;                                          // 0x0104(0x000C) (Edit, IsPlainOldData)
	TEnumAsByte<ECollisionChannel>                     QueryChannel;                                             // 0x0110(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              LongSlipEffectThreshold;                                  // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LatSlipEffectThreshold;                                   // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x011C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraVehicleWheel");
		return ptr;
	}

};


// Class ShadowTrackerExtra.STExtraWheeledVehicle
// 0x0130 (0x07A0 - 0x0670)
class ASTExtraWheeledVehicle : public ASTExtraVehicleBase
{
public:
	class UParticleSystemComponent*                    DustPSC[0x4];                                             // 0x0670(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	TArray<class UParticleSystemComponent*>            PSCs;                                                     // 0x0690(0x0010) (ExportObject, ZeroConstructor, Transient)
	class USTExtraVehicleMovementComponent4W*          VehicleMovement;                                          // 0x06A0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06A8(0x0004) MISSED OFFSET
	float                                              TorqueMultiplierforBoosting;                              // 0x06AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WheelEffectUpdateInterval;                                // 0x06B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ValidTransformMinWheelNum;                                // 0x06B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnVehicleWheelLanded;                                     // 0x06B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MinLandingWheelSuspensionOffset;                          // 0x06C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnVehicleGearChanged;                                     // 0x06D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x06E0(0x0008) MISSED OFFSET
	class UAkAudioEvent*                               Sfx_MoveConcrete;                                         // 0x06E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_MoveMud;                                              // 0x06F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_MoveWater;                                            // 0x06F8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_Slip;                                                 // 0x0700(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_TireExplosion;                                        // 0x0708(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_GearUp;                                               // 0x0710(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UAkAudioEvent*                               Sfx_GearDown;                                             // 0x0718(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Sfx_RPMRelativeCurve;                                     // 0x0720(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x74];                                      // 0x0728(0x0074) MISSED OFFSET
	unsigned char                                      bWheelGrounded : 1;                                       // 0x079C(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x079D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STExtraWheeledVehicle");
		return ptr;
	}


	void OnWheelsLanded();
	void OnGearChanged(bool bIsUp);
	float GetVehicleSpeed();
	struct FVector GetRotationInputDir();
	void BroadcastClientVehicleWheelDestroyEffect();
};


// Class ShadowTrackerExtra.STScreenAppearanceComponent
// 0x0068 (0x0160 - 0x00F8)
class USTScreenAppearanceComponent : public UActorComponent
{
public:
	TArray<struct FAppearanceMatData>                  AppearancePresentList;                                    // 0x00F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	struct FTransform                                  AppearanceMeshRelativeTransform;                          // 0x0110(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	class UStaticMeshComponent*                        OwnerAppearanceMesh;                                      // 0x0140(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FAppearanceMatData>                  CurAppearanceList;                                        // 0x0148(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STScreenAppearanceComponent");
		return ptr;
	}


	void StopScreenAppearance(const struct FString& AppearanceName);
	class UMaterialInstanceDynamic* PlayPresentScreenAppearance(const struct FString& AppearanceName);
	class UMaterialInstanceDynamic* PlayCustomScreenAppearance(const struct FString& AppearanceName, class UMaterialInterface* MatToPlay, float LifeSpan);
	bool IsScreenAppearancePlaying(const struct FString& AppearanceName);
};


// Class ShadowTrackerExtra.STSpectatorPawn
// 0x0000 (0x03F0 - 0x03F0)
class ASTSpectatorPawn : public ASpectatorPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STSpectatorPawn");
		return ptr;
	}

};


// Class ShadowTrackerExtra.SurviveHUD
// 0x0220 (0x0790 - 0x0570)
class ASurviveHUD : public ATslBaseHUD
{
public:
	unsigned char                                      bIsWorldMapVisible : 1;                                   // 0x0570(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0571(0x0003) MISSED OFFSET
	struct FVector                                     MarkerPosition;                                           // 0x0574(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bShowCrosshair;                                           // 0x0580(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               ShowHitPerform;                                           // 0x0581(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0582(0x0006) MISSED OFFSET
	struct FHitPerformData                             HitPerform;                                               // 0x0588(0x0060) (Edit, DisableEditOnInstance)
	struct FScriptMulticastDelegate                    OnNotifyBlockingWidgetOpened;                             // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UTexture2D*                                  HUDMainTexture;                                           // 0x05F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  CrossHairDisableTexture;                                  // 0x0600(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture2D*                                  HUDPlayerTexture;                                         // 0x0608(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FCanvasIcon                                 Crosshair[0x5];                                           // 0x0610(0x0018)
	struct FCanvasIcon                                 ProgreesBar;                                              // 0x0688(0x0018)
	struct FCanvasIcon                                 BKProgreesBar;                                            // 0x06A0(0x0018)
	struct FCanvasIcon                                 ProgressBarPlayer[0x2];                                   // 0x06B8(0x0018)
	struct FCanvasIcon                                 Marker;                                                   // 0x06E8(0x0018)
	class UTexture2D*                                  HUDWorldMapTexture;                                       // 0x0700(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FCanvasIcon                                 WORLDMAP;                                                 // 0x0708(0x0018)
	class UTexture2D*                                  AimCrosshairTextrue;                                      // 0x0720(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0728(0x0030) MISSED OFFSET
	class UTslSceneCaptureWorld*                       SceneCaptureWorld;                                        // 0x0758(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0760(0x0010) MISSED OFFSET
	struct FString                                     SceneCapturePackageName;                                  // 0x0770(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	bool                                               bUseSceneCaptureWorld;                                    // 0x0780(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xF];                                       // 0x0781(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.SurviveHUD");
		return ptr;
	}


	void SpawnActorInSceneCaptureWorld(class UClass* ActorClass, const struct FTransform& SpawnTransform, const struct FScriptDelegate& DelegateToCall);
	void EnableCrosshair(bool bEnable);
};


// Class ShadowTrackerExtra.TargetKeyOperation
// 0x0068 (0x0090 - 0x0028)
class UTargetKeyOperation : public UObject
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0028(0x0058) MISSED OFFSET
	class ASTExtraBaseCharacter*                       PawnOwner;                                                // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       Target;                                                   // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetKeyOperation");
		return ptr;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	struct FString ToString();
	void TaskRemoved();
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
	bool IsReachable();
	TEnumAsByte<EOperationRunResult> Finish();
	void DebugDraw(const struct FColor& debugColor, bool isPersist);
	void Awake();
};


// Class ShadowTrackerExtra.TargetMoveOperation
// 0x0030 (0x00C0 - 0x0090)
class UTargetMoveOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetMoveOperation");
		return ptr;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	TEnumAsByte<EOperationRunResult> MoveCloseToTargetWithSprint(float DeltaTime);
	TEnumAsByte<EOperationRunResult> MoveCloseToTarget(float DletaTime);
	bool IsValidate();
	bool IsReachable();
	TEnumAsByte<EOperationRunResult> Finish();
};


// Class ShadowTrackerExtra.TargetSprintOperation
// 0x0008 (0x0098 - 0x0090)
class UTargetSprintOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetSprintOperation");
		return ptr;
	}


	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TargetJumpOperation
// 0x0030 (0x00C0 - 0x0090)
class UTargetJumpOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x30];                                      // 0x0090(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetJumpOperation");
		return ptr;
	}


	void TaskRemoved();
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
	void DebugDraw(const struct FColor& debugColor, bool isPersist);
	void Awake();
};


// Class ShadowTrackerExtra.TargetCrouchOperation
// 0x0008 (0x0098 - 0x0090)
class UTargetCrouchOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetCrouchOperation");
		return ptr;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TargetVehicleOperation
// 0x0020 (0x00B0 - 0x0090)
class UTargetVehicleOperation : public UTargetKeyOperation
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0090(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TargetVehicleOperation");
		return ptr;
	}


	TEnumAsByte<EOperationRunResult> Update(float DeltaTime);
	TEnumAsByte<EOperationRunResult> Start();
	bool IsValidate();
};


// Class ShadowTrackerExtra.TeammatePositionWidget
// 0x00E0 (0x0390 - 0x02B0)
class UTeammatePositionWidget : public UUAEUserWidget
{
public:
	class UCanvasPanelSlot*                            CanvasPanel;                                              // 0x02B0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UImage*                                      ArrowImage;                                               // 0x02B8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UCanvasPanel*                                TeammateDistPanel;                                        // 0x02C0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TeammateDistText;                                         // 0x02C8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UTextBlock*                                  TeammateNameText;                                         // 0x02D0(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UGridPanel*                                  TeammateGridPanel;                                        // 0x02D8(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	bool                                               InAir;                                                    // 0x02E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E1(0x0007) MISSED OFFSET
	class ASTExtraPlayerState*                         SavedPlayerState;                                         // 0x02E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector4                                    Limit;                                                    // 0x02F0(0x0010) (Edit, IsPlainOldData)
	int                                                heightPlus;                                               // 0x0300(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                rightPlus;                                                // 0x0304(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   UIOffset;                                                 // 0x0308(0x0008) (Edit, IsPlainOldData)
	struct FVector                                     LocOffset;                                                // 0x0310(0x000C) (Edit, IsPlainOldData)
	struct FVector2D                                   OnPlaneUIOffset;                                          // 0x031C(0x0008) (Edit, IsPlainOldData)
	float                                              DeadAlpha;                                                // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DeadMournSec;                                             // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaBegin;                                               // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaEnd;                                                 // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaStep;                                                // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaBeginDistance;                                       // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaEndDistance;                                         // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleBegin;                                               // 0x0340(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleEnd;                                                 // 0x0344(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleStep;                                                // 0x0348(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleBeginDistance;                                       // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ScaleEndDistance;                                         // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxShowDistance;                                          // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                TargetDistance;                                           // 0x0358(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x035C(0x001C) MISSED OFFSET
	class ASTExtraPlayerController*                    STExtraPlayerController;                                  // 0x0378(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0380(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TeammatePositionWidget");
		return ptr;
	}


	void SetCurrentWidgetVisible(bool visible);
};


// Class ShadowTrackerExtra.TestAIController
// 0x0010 (0x0500 - 0x04F0)
class ATestAIController : public ABaseAIController
{
public:
	class UClass*                                      EquipedWeaponClass;                                       // 0x04F0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      CharacterClass;                                           // 0x04F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TestAIController");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TirggerItem_TriggerBox
// 0x0010 (0x0380 - 0x0370)
class ATirggerItem_TriggerBox : public ATriggerBox
{
public:
	struct FString                                     ExtraMsgInfo;                                             // 0x0370(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TirggerItem_TriggerBox");
		return ptr;
	}


	void OnTriggerExit(class AActor* OverlappedActor, class AActor* Other);
	void OnTriggerEnter(class AActor* OverlappedActor, class AActor* Other);
};


// Class ShadowTrackerExtra.TriggerAction_MsgToLevel
// 0x0000 (0x0038 - 0x0038)
class UTriggerAction_MsgToLevel : public UTriggerAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_MsgToLevel");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TriggerAction_PrintMsg
// 0x0008 (0x0040 - 0x0038)
class UTriggerAction_PrintMsg : public UTriggerAction
{
public:
	float                                              DelayTime;                                                // 0x0038(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerAction_PrintMsg");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TriggerCondition_ObjectEqual
// 0x0020 (0x0050 - 0x0030)
class UTriggerCondition_ObjectEqual : public UTriggerCondition
{
public:
	struct FString                                     CompareKeyName;                                           // 0x0030(0x0010) (BlueprintVisible, ZeroConstructor)
	struct FString                                     ExtraMsg;                                                 // 0x0040(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerCondition_ObjectEqual");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TriggerEvent_LevelObjectMsg
// 0x0000 (0x0090 - 0x0090)
class UTriggerEvent_LevelObjectMsg : public UTriggerEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerEvent_LevelObjectMsg");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TriggerItem_DrivingCheckPoint
// 0x0020 (0x0390 - 0x0370)
class ATriggerItem_DrivingCheckPoint : public ATriggerBox
{
public:
	struct FString                                     ExtraMsgInfo;                                             // 0x0370(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<EDrivingCheckPointState>               CheckPointState;                                          // 0x0380(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bIsActive;                                                // 0x0381(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE];                                       // 0x0382(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_DrivingCheckPoint");
		return ptr;
	}


	void OnTriggerExit(class AActor* OverlappedActor, class AActor* Other);
	void OnTriggerEnter(class AActor* OverlappedActor, class AActor* Other);
	void OnRep_ChangeShow();
	bool IsActive();
	void Deactivate();
	void Activate();
};


// Class ShadowTrackerExtra.TriggerItem_TriggerClock
// 0x0040 (0x03B0 - 0x0370)
class ATriggerItem_TriggerClock : public ATriggerBase
{
public:
	struct FString                                     ClockTag;                                                 // 0x0370(0x0010) (Edit, ZeroConstructor)
	bool                                               IsStartOnBegin;                                           // 0x0380(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0381(0x0007) MISSED OFFSET
	TArray<float>                                      TriggerSecondsArray;                                      // 0x0388(0x0010) (Edit, ZeroConstructor)
	struct FTimerHandle                                TimerHandle_Trigger;                                      // 0x0398(0x0008)
	int                                                CurSecondsArrayIndex;                                     // 0x03A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x03A4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TriggerItem_TriggerClock");
		return ptr;
	}


	void Stop();
	void Start();
	void OnTime();
};


// Class ShadowTrackerExtra.TslAnchorActor
// 0x0010 (0x0378 - 0x0368)
class ATslAnchorActor : public AActor
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0368(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslAnchorActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslBallisticsComp
// 0x0688 (0x0780 - 0x00F8)
class UTslBallisticsComp : public UActorComponent
{
public:
	struct FTrajectoryWeaponData                       TrajectoryConfig;                                         // 0x00F8(0x0070) (Edit, DisableEditOnInstance)
	struct FWeaponDeviationData                        WeaponDeviationConfig;                                    // 0x0168(0x0044) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	struct FWeaponGunData                              WeaponGunConfig;                                          // 0x01B0(0x00D0) (Edit, DisableEditOnInstance)
	struct FWeaponGunAnim                              WeaponGunAnim;                                            // 0x0280(0x0110) (Edit, DisableEditOnInstance)
	struct FWeaponData                                 WeaponConfig;                                             // 0x0390(0x00A8) (Edit, DisableEditOnInstance)
	float                                              TrajectoryGravityZ;                                       // 0x0438(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x043C(0x0004) MISSED OFFSET
	struct FName                                       FiringAttachPoint;                                        // 0x0440(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       MuzzleAttachPoint;                                        // 0x0448(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ScopingAttachPoint;                                       // 0x0450(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslRecoilComp*                              TslRecoilComp;                                            // 0x0458(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2B8];                                     // 0x0460(0x02B8) MISSED OFFSET
	int                                                CurrentAmmoData;                                          // 0x0718(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x64];                                      // 0x071C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBallisticsComp");
		return ptr;
	}


	void SpawnImpactEffect_Reliable(const struct FHitResult& Impact, const struct FVector& RelLocation, uint16_t AmmoId);
	void SimulateHit_UnReliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void SimulateHit_Reliable(const struct FHitResult& Impact, const struct FVector& RelLocation);
	void ServerNotifyHit_Test(TArray<struct FServerNotifyHitArgs> HitArgsList);
	void ServerNotifyHit_NonPlayerCharacter_Test(TArray<struct FServerNotifyHitArgs_NonPlayerCharacter> HitArgsList);
	void ServerNotifyHit_NonPlayerCharacter(const struct FServerNotifyHitArgs_NonPlayerCharacter& HitArgs);
	void ServerNotifyHit(const struct FServerNotifyHitArgs& HitArgs);
	void ServerNotifyCrack(class ASTExtraBaseCharacter* TargetCharacter, const struct FVector_NetQuantize& LocationRelative, float BulletVelocity);
	void ServerLogBodyPenetration(int AttackId, const struct FName& DamageZone, float DamageDiff);
	void ServerHandleFiring_AllowInfinityAmmo();
	void ServerHandleFiring();
	struct FWeaponGunData GetWeaponGunData();
	float GetWeaponFullReloadTime();
	struct FWeaponData GetWeaponConfig();
	struct FTrajectoryWeaponData GetTrajectoryConfig();
	float GetCurrentStabilityVar();
	int GetAmmoPerClip();
	void ClientNotifyAmmo(int InCurrentAmmoData);
};


// Class ShadowTrackerExtra.ActionInputEventHolder
// 0x0028 (0x0050 - 0x0028)
class UActionInputEventHolder : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ActionInputEventHolder");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslBaseLobbySceneTravel
// 0x0098 (0x0400 - 0x0368)
class ATslBaseLobbySceneTravel : public AActor
{
public:
	class ACameraActor*                                MainCamera;                                               // 0x0368(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACameraActor*                                CurrentSceneCamera;                                       // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class ACameraActor*                                NextSceneCamera;                                          // 0x0378(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     NextSceneName;                                            // 0x0380(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0390(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnTslLobbySceneUpdate;                                    // 0x0398(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTslLobbySceneTravelFinished;                            // 0x03A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03B8(0x0008) MISSED OFFSET
	struct FTransform                                  CurrentCameraStartTM;                                     // 0x03C0(0x0030) (Transient, IsPlainOldData)
	float                                              CurrentCameraStartFieldOfView;                            // 0x03F0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x03F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBaseLobbySceneTravel");
		return ptr;
	}


	void UpdateScene();
	void SetMainCameraTransformAndFieldOfView(const struct FTransform& TM, float FieldOfView);
	void OnStartTravel();
	void GetNextSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void GetCurrentSceneCameraTransformAndFieldOfView(struct FTransform* TM, float* FieldOfView);
	void FinishTravel(bool bUpdateScene);
};


// Class ShadowTrackerExtra.TslBaseOptionWidget
// 0x00D0 (0x0380 - 0x02B0)
class UTslBaseOptionWidget : public UUAEUserWidget
{
public:
	struct FName                                       OptionName;                                               // 0x02B0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC8];                                      // 0x02B8(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBaseOptionWidget");
		return ptr;
	}


	void OnReset();
	void OnDefault();
	void OnApply();
	bool IsKeyUp();
	bool IsEnableApply();
	bool IsChanged();
};


// Class ShadowTrackerExtra.TslBpRewardRuleTable
// 0x0000 (0x0080 - 0x0080)
class UTslBpRewardRuleTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBpRewardRuleTable");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslBreatheComp
// 0x00C0 (0x01B8 - 0x00F8)
class UTslBreatheComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	class UCurveVector*                                Curve_WeaponSway;                                         // 0x0108(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveVector*                                Curve_WeaponSway_HoldBreath;                              // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_WeaponSwayFOVModifier;                              // 0x0118(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x54];                                      // 0x0120(0x0054) MISSED OFFSET
	float                                              ApneaDuration;                                            // 0x0174(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0178(0x0008) MISSED OFFSET
	bool                                               bIsHoldingBreath;                                         // 0x0180(0x0001) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              Breath;                                                   // 0x0184(0x0004) (Edit, Net, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BreathMax;                                                // 0x0188(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumBreathToHold;                                      // 0x018C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumBreathStartHoldingBreath;                          // 0x0190(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreathPerSecond;                                          // 0x0194(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              BreathRestoreTickInterval;                                // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoldBreathStopInterpSpeed;                                // 0x019C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoldBreathSwayScalar;                                     // 0x01A0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HoldBreathSwayReturnMod;                                  // 0x01A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x01A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslBreatheComp");
		return ptr;
	}


	void SetSwayDebuffParameters(float SwaySpeed, float SwayVerticalMultiplier, float SwayHorizontalMultiplier);
	void ServerSetHoldingBreath(bool bNewHoldingBreath);
	void ServerSetGunDirectionSway(const struct FRotator& InGunDirectionSway);
	void OnRep_Breath(float LastBreath);
	void OnChangeBreathADS(float CurBreath, float LastBreath);
	bool IsHoldingBreath();
	struct FVector GetSwayModifier();
	struct FRotator GetCurrentSway();
	float GetBreathRatio();
	bool CanStartHoldingBreath();
	void AddBreath(float Value);
};


// Class ShadowTrackerExtra.TslConfirmationDialogWidget
// 0x00E0 (0x03A0 - 0x02C0)
class UTslConfirmationDialogWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0xE0];                                      // 0x02C0(0x00E0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslConfirmationDialogWidget");
		return ptr;
	}


	void OnButtonClick(EPopupButtonID ButtonID);
};


// Class ShadowTrackerExtra.TslEmoteComponent
// 0x0080 (0x0178 - 0x00F8)
class UTslEmoteComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x00F8(0x0024) MISSED OFFSET
	float                                              EmotePlayTimeout;                                         // 0x011C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimulatedProxyFailedChecksTollerance;                     // 0x0120(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CurrentLoadedEmoteBlendTime;                              // 0x0124(0x0004) (ZeroConstructor, IsPlainOldData)
	class UAnimSequenceBase*                           CurrentLoadedEmoteSequence;                               // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0130(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    AnimMontagePlayDelegate;                                  // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    StopEventDelegate;                                        // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    FinishEventDelegate;                                      // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0168(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslEmoteComponent");
		return ptr;
	}


	float StopSlotAnim(class UAnimSequenceBase* AnimSequence, const struct FName& SlotName, float BlendTime);
	bool Stop(int EmoteID);
	void Server_EmotePlay(const struct FName& EmoteName, bool bIsRNG, const struct FName& SectionName);
	void SendSystemMessageEmoteUnavailable();
	void SendSystemMessageEmoteEmpty();
	void SendSystemMessageEmoteBlocked();
	float PlaySlotAnim(class UAnimSequenceBase* AnimSequence, const struct FName& SlotName, float InPlayRate, float BlendTime);
	bool Play(int EmoteID);
	void OnMontageInterrupted(class UAnimMontage* Montage);
	void OnAsyncLoadEmoteAnim();
	bool IsAbleGetEmoteDataByName(const struct FName& EmoteName);
	class UTexture2D* STATIC_GetEmoteTextureByName(const struct FName& EmoteName);
	TArray<struct FName> STATIC_GetEmoteNames();
	class UMaterialInterface* STATIC_GetEmoteMaterialByName(const struct FName& EmoteName);
	struct FText STATIC_GetEmoteLocalizedName(const struct FName& EmoteName);
	class UBackpackEmoteHandle* GetEmoteHandle(int ItemID);
	class UDataTable* GetEmoteDataTable();
	struct FEmoteDBDataRow GetEmoteDataByName(const struct FName& EmoteName);
	bool Emote_TryToPlay(const struct FName& EmoteName, bool bIsLobby);
	void Client_EmotePlay(const struct FName& EmoteName, bool bIsRNG, const struct FName& SectionName);
	bool CanOpenEmoteWheel();
};


// Class ShadowTrackerExtra.TslEmoteDB
// 0x0000 (0x0080 - 0x0080)
class UTslEmoteDB : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslEmoteDB");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslEmoteTraceData
// 0x0010 (0x0040 - 0x0030)
class UTslEmoteTraceData : public UDataAsset
{
public:
	TArray<struct FEmoteTraceCheck>                    TraceCheckArray;                                          // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslEmoteTraceData");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslWheelBaseSubWidget
// 0x00F0 (0x03B0 - 0x02C0)
class UTslWheelBaseSubWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_CanvasPanel                OutsideCanvasWidget_Binder;                               // 0x02C0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             FocusSwitcher_Binder;                                     // 0x02E0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Overlay                    TargetImageOverlay_Binder;                                // 0x0300(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      TargetImage_Binder;                                       // 0x0320(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  InitAnimation_Binder;                                     // 0x0348(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForSelectedAnimation_Binder;                       // 0x0368(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutForNonSelectedAnimation_Binder;                    // 0x0388(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	int                                                NonFocusedWidgetIndex;                                    // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                FocusedWidgetIndex;                                       // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslWheelBaseSubWidget");
		return ptr;
	}


	void SetFocus(bool bOnFocus);
	void PlaySelectAnimation(bool bFocus);
	struct FText GetNameText();
	struct FText GetDescriptionText();
	bool DoAction();
};


// Class ShadowTrackerExtra.TslEmoteWheelSubWidget
// 0x00A0 (0x0450 - 0x03B0)
class UTslEmoteWheelSubWidget : public UTslWheelBaseSubWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  ShortcutTextBlock_Binder;                                 // 0x03B0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOnFocus_Binder;                 // 0x03D0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             ShowShortcutWidgetSwitcherOffFocus_Binder;                // 0x03F0(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FString                                     ActionNamePrefix;                                         // 0x0410(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	int                                                ShowShortcutWidgetIndex;                                  // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                HideShortcutWidgetIndex;                                  // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0428(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslEmoteWheelSubWidget");
		return ptr;
	}


	struct FText GetNameText();
	bool DoAction();
};


// Class ShadowTrackerExtra.TslWheelBaseWidget
// 0x01A0 (0x0460 - 0x02C0)
class UTslWheelBaseWidget : public UUmgBaseWidget
{
public:
	bool                                               IsWidgetShown;                                            // 0x02C0(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	struct FUmgWidgetBinder_Overlay                    WheelOverlay_Binder;                                      // 0x02C8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      MouseCursorIcon_Binder;                                   // 0x02E8(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Image                      CenterImage_Binder;                                       // 0x0310(0x0028) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterTitleTextBlock_Binder;                              // 0x0338(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_TextBlock                  CenterDescriptionTextBlock_Binder;                        // 0x0358(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    CloseGuideSizeBox_Binder;                                 // 0x0378(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeInAnimation_Binder;                                   // 0x0398(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  FadeOutAnimation_Binder;                                  // 0x03B8(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FString                                     WidgetName;                                               // 0x03D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              AngleOffset;                                              // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DelayTimeBeforeUnfocusOnGamepad;                          // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FText                                       UnavailableSystemMessageText;                             // 0x03F0(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UClass*                                      SubWidgetClass;                                           // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bShowMouseCursor;                                         // 0x0410(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0411(0x0003) MISSED OFFSET
	float                                              GamepadSafeZoneRadius;                                    // 0x0414(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MouseSafeZoneRadius;                                      // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETslWheelWidgetSelectType                          MouseSelectType;                                          // 0x041C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	ETslWheelWidgetSelectType                          GamepadSelectType;                                        // 0x041D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x041E(0x0002) MISSED OFFSET
	TArray<class UTslWheelBaseSubWidget*>              SubWidgets;                                               // 0x0420(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0430(0x0008) MISSED OFFSET
	ETslWheelWidgetSelectType                          SelectType;                                               // 0x0438(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1B];                                      // 0x0439(0x001B) MISSED OFFSET
	ETslWheelWidgetMouseCursorDirectionType            MouseCursorDirectionType;                                 // 0x0454(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0455(0x0003) MISSED OFFSET
	float                                              RestrictedDistanceFromCenter;                             // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x045C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslWheelBaseWidget");
		return ptr;
	}


	void WidgetShow();
	void WidgetHide();
	void OnClicked();
	void Cancel();
};


// Class ShadowTrackerExtra.TslEmoteWheelWidget
// 0x0078 (0x04D8 - 0x0460)
class UTslEmoteWheelWidget : public UTslWheelBaseWidget
{
public:
	TArray<struct FName>                               EmoteRowNames;                                            // 0x0460(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               EmoteShorcutNames;                                        // 0x0470(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FEmoteDBDataRow>                     EmoteDataRows;                                            // 0x0480(0x0010) (ZeroConstructor)
	TArray<struct FName>                               MovementAxises;                                           // 0x0490(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FTslAxisInputCallbackConfig>         GamepadMovementAxises;                                    // 0x04A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FName>                               TurnAxises;                                               // 0x04B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              BlockMovingTime;                                          // 0x04C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x04C4(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslEmoteWheelWidget");
		return ptr;
	}


	void OnSelectEmoteByIndex(int Index);
	void OnSelect9();
	void OnSelect8();
	void OnSelect7();
	void OnSelect6();
	void OnSelect5();
	void OnSelect4();
	void OnSelect3();
	void OnSelect2();
	void OnSelect12();
	void OnSelect11();
	void OnSelect10();
	void OnSelect1();
	void DoNothingFloat(float Value);
	void DoNothing();
};


// Class ShadowTrackerExtra.TslGameOption
// 0x0000 (0x0028 - 0x0028)
class UTslGameOption : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslGameOption");
		return ptr;
	}


	struct FText STATIC_WheelAxisNameToWheelActionName(const struct FTslInputKey& Key, float InAxisScale);
	void STATIC_SetWorldMapZoomLevel(int NewZoomLevel);
	void STATIC_SetVSyncEnabled(bool bEnable);
	void STATIC_SetVoiceOutputVolume(int Volume);
	void STATIC_SetVoiceOutputMute(bool bIsMute);
	void STATIC_SetVoiceInputVolume(int Volume);
	void STATIC_SetVoiceInputSensitivity(int Volume);
	void STATIC_SetVoiceInputMute(bool bIsMute);
	void STATIC_SetUsingPerScopeSensitivity(ETslControllerType ControllerType, bool NewVal);
	void STATIC_SetUseTeamVoice(bool bUse);
	void STATIC_SetUsePushToTalk(bool bUse);
	void STATIC_SetUseGlobalVoice(bool bUse);
	void STATIC_SetUseCharacterCapture(bool bUseCharacterCapture);
	void STATIC_SetUISoundVolume(float Volume);
	void STATIC_SetUISoundMute(bool bIsMute);
	void STATIC_SetTslInputMode(EInputModeSettingActions eAction, ETslInputModes eTslInputMode);
	void STATIC_SetTpsWeaponIconShowType(EUiShowType NewShowType);
	void STATIC_SetSelectMinimapTypeIndex(int Index);
	void STATIC_SetScreenScale(float Value);
	void STATIC_SetScreenResoultion(const struct FScreenResolution& ScreenResolution);
	void STATIC_SetQualityLevel(EQualityType Quality, int QualityLevel);
	void STATIC_SetOverallScalabilityLevel(int Value);
	void STATIC_SetMouseVerticalSensitivityMultiplier(float InValue);
	void STATIC_SetMouseSensitivity(const struct FName& InMouseSensitiveName, float InMouseSensitivity);
	void STATIC_SetMotionBlur(bool bEnabled);
	void STATIC_SetMinimapColorType(EMinimapColorType InType);
	void STATIC_SetMaxFPS(int MaxFps);
	void STATIC_SetMasterSoundVolume(float Volume);
	void STATIC_SetMasterSoundMute(bool bIsMute);
	void STATIC_SetKeyHintEnable(bool bEnable);
	void STATIC_SetInvertMouse(bool bInvert);
	void STATIC_SetInvertGamePadY(bool bInvert);
	void STATIC_SetInvertGamePadX(bool bInvert);
	void STATIC_SetInputKey_Internal(const struct FTslInputKey& NewKey, EKeyBindingSlot InKeyBindingSlot, bool bGamepad, TArray<struct FTslInputKey>* OutKeyList);
	void STATIC_SetIconKillfeedEnabled(bool bEnable);
	void STATIC_SetGamma(float Gamma);
	void STATIC_SetGamePadToggleAcceleration(bool bUse);
	void STATIC_SetGamePadSensitivity(const struct FName& InGamePadSensitiveName, float InGamePadSensitivity);
	void STATIC_SetGamepadPresetType(EGamepadPresets InGamepadPreset);
	void STATIC_SetGamePadDeadZone_Left(float InGamePadDeadZone);
	void STATIC_SetGamePadDeadZone(float InGamePadDeadZone);
	void STATIC_SetFullScreen(TEnumAsByte<EWindowMode> InFullscreenMode);
	void STATIC_SetFpsWeaponSlotShow(bool bNewShow);
	void STATIC_SetFpsCameraFov(float NewFovValue);
	void STATIC_SetFppWeaponIconShowType(EUiShowType NewShowType);
	void STATIC_SetFppEquipableItemIconShowType(EUiShowType NewShowType);
	void STATIC_SetForceFeedbackMultiplier(float InValue);
	void STATIC_SetForceFeedbackEffectEnabled(bool bEnabled);
	void STATIC_SetEquipableIteIconShow(bool bNewShow);
	void STATIC_SetEnablePreloadingMap(bool bEnabled);
	void STATIC_SetEnableMinimapViewScale(bool bEnable);
	void STATIC_SetEnableHrtfRemoteWeaponSound(bool bEnable);
	void STATIC_SetEnableFunctionality(EGameplayFunctionalities eAction, bool bValue);
	void STATIC_SetEnableClientReplay(EGameplayClientReplay eAction, bool bValue);
	void STATIC_SetEffectSoundVolume(float Volume);
	void STATIC_SetEffectSoundMute(bool bIsMute);
	void STATIC_SetCustomCrosshairColor(const struct FColor& InColor);
	void STATIC_SetCurrentCultureName(const struct FString& InCultureName);
	void STATIC_SetCurrentCrosshairColorString(const struct FString& CrosshairColorStr);
	void STATIC_SetCurrentColorBlindKeyByInt(int ColorBlindKey);
	void STATIC_SetCurrentColorBlindKey(EColorBlindType ColorBlindKey);
	void STATIC_SetBGMSoundVolume(float Volume);
	void STATIC_SetBGMSoundMute(bool bIsMute);
	void STATIC_SetAxisKeysToDefault(const struct FName& AxisName, float Scale);
	void STATIC_SetAxisKeys(const struct FName& AxisName, float Scale, TArray<struct FTslInputKey> NewKeys);
	void STATIC_SetAxisKey(const struct FName& AxisName, float Scale, const struct FTslInputKey& NewKey, EKeyBindingSlot InKeyBindingSlot, bool bGamepad);
	void STATIC_SetAutoReloadOnOutOfAmmoFireEnable(bool bEnable);
	void STATIC_SetActionKeysToDefault(const struct FName& ActionName);
	void STATIC_SetActionKeys(const struct FName& ActionName, TArray<struct FTslInputKey> NewKeys);
	void STATIC_SetActionKey(const struct FName& ActionName, const struct FTslInputKey& NewKey, EKeyBindingSlot InKeyBindingSlot, bool bGamepad);
	TArray<struct FName> STATIC_NotDuplicateCategoryNames(const struct FName& CatecoryName);
	bool STATIC_IsVSyncEnabled();
	bool STATIC_IsVoiceOutputMute();
	bool STATIC_IsVoiceInputMute();
	bool STATIC_IsUsingPerScopeSensitivity(ETslControllerType ControllerType);
	bool STATIC_IsUISoundMute();
	bool STATIC_IsScorpio();
	bool STATIC_IsMouseWheelInput(const struct FTslInputKey& InInputedKey);
	bool STATIC_IsModifierKey(const struct FTslInputKey& Key);
	bool STATIC_IsMasterSoundMute();
	bool STATIC_IsKeyValid(const struct FTslInputKey& Key);
	bool STATIC_IsKeyUsed(const struct FTslInputKey& Key);
	bool STATIC_IsKeyHintEnabled();
	bool STATIC_IsInvertMouse();
	bool STATIC_IsInvertGamePadY();
	bool STATIC_IsInvertGamePadX();
	bool STATIC_IsIconKillfeedEnabled();
	bool STATIC_IsGamepadKey(const struct FTslInputKey& Key);
	bool STATIC_IsFunctionalityEnabled(EGameplayFunctionalities eAction);
	bool STATIC_IsForceFeedbackEffectEnabled();
	bool STATIC_IsEnabledPreloadingMap();
	bool STATIC_IsEnabledMotionBlur();
	bool STATIC_IsEnabledMinimapViewScale();
	bool STATIC_IsEnabledHrtfRemoteWeaponSound();
	bool STATIC_IsEnabledAutoReloadOnOutOfAmmoFire();
	bool STATIC_IsEffectSoundMute();
	bool STATIC_IsDoubleTapSupported(EInputModeSettingActions eAction);
	bool STATIC_IsDefaultFunctionalityEnabled(EGameplayFunctionalities eAction);
	bool STATIC_IsDefaultClientReplayEnabled(EGameplayClientReplay eAction);
	bool STATIC_IsCustomCrosshairColorEnabled();
	bool STATIC_IsClientReplayEnabled(EGameplayClientReplay eAction);
	bool STATIC_IsBGMSoundMute();
	int STATIC_GetWorldMapZoomSpeedLevel();
	int STATIC_GetVoiceOutputVolume();
	int STATIC_GetVoiceInputVolume();
	int STATIC_GetVoiceInputSensitivity();
	bool STATIC_GetUseTeamVoice();
	bool STATIC_GetUsePushToTalk();
	bool STATIC_GetUseGlobalVoice();
	bool STATIC_GetUseCharacterCapture();
	float STATIC_GetUISoundVolume();
	ETslInputModes STATIC_GetTslInputMode(EInputModeSettingActions eAction);
	class UTslGameUserSettings* STATIC_GetTslGameUserSettings();
	EUiShowType STATIC_GetTpsWeaponIconShowType();
	TArray<struct FScreenResolution> STATIC_GetSupportedScreenResolutions();
	TArray<struct FSurportQualityLevel> STATIC_GetSupportedQualityLevels();
	bool STATIC_GetSupportedKillcam();
	float STATIC_GetSupportedFpsCameraFovRangeMin();
	float STATIC_GetSupportedFpsCameraFovRangeMax();
	bool STATIC_GetSupportedClientReplay();
	int STATIC_GetSelectMiniMapTypeIndex();
	float STATIC_GetScreenScale();
	struct FScreenResolution STATIC_GetScreenResolution();
	struct FLinearColor STATIC_GetReticleColor(EReticleType InReticleType, const struct FLinearColor& InBaseColor);
	bool STATIC_GetReplayOptionEditable();
	int STATIC_GetQualityLevel(EQualityType Quality);
	int STATIC_GetOverallScalabilityLevel();
	struct FString STATIC_GetNativeName(const struct FString& InCultureName);
	struct FString STATIC_GetNativeLanguage(const struct FString& InCultureName);
	float STATIC_GetMouseVerticalSensitivityMultiplier();
	float STATIC_GetMouseSensitivity(const struct FName& InMouseSensitiveName);
	TArray<struct FUiType> STATIC_GetMiniMapTypes();
	EMinimapColorType STATIC_GetMinimapColorType();
	int STATIC_GetMaxFps();
	float STATIC_GetMasterSoundVolume();
	struct FText STATIC_GetKeyName(const struct FTslInputKey& Key);
	TArray<struct FKeyInputModeName> STATIC_GetKeyInputModeNames();
	float STATIC_GetGamma();
	bool STATIC_GetGamePadToggleAcceleration();
	float STATIC_GetGamePadSensitivity(const struct FName& InGamePadSensitiveName);
	EGamepadPresets STATIC_GetGamepadPresetType();
	TArray<struct FTslGamepadKeyPreset> STATIC_GetGamepadKeyPresetDatas();
	float STATIC_GetGamePadDeadZone_Left();
	float STATIC_GetGamePadDeadZone();
	TEnumAsByte<EWindowMode> STATIC_GetFullScreenMode();
	float STATIC_GetFpsCameraFov();
	EUiShowType STATIC_GetFppWeaponIconShowType();
	EUiShowType STATIC_GetFppEquipableItemIconShowType();
	float STATIC_GetForceFeedbackMultiplier();
	float STATIC_GetEffectSoundVolume();
	ETslInputModes STATIC_GetDefaultInputModeSetting(EInputModeSettingActions eAction);
	EGamepadPresets STATIC_GetDefaultGamepadPreset();
	struct FString STATIC_GetDefaultCultureName();
	struct FLinearColor STATIC_GetDefaultCrosshairColor();
	struct FColor STATIC_GetCustomCrosshairColor();
	struct FString STATIC_GetCurrentCultureName();
	struct FString STATIC_GetCurrentCrosshairColorStr();
	EColorBlindType STATIC_GetCurrentColorBlindKey();
	TArray<struct FPresetColor> STATIC_GetCrosshairColors();
	struct FLinearColor STATIC_GetCrosshairColor();
	float STATIC_GetConvertedMouseSensitivity(const struct FName& InMouseSensitiveName);
	float STATIC_GetConvertedGamePadSensitivity(const struct FName& InGamePadSensitiveName);
	TArray<struct FColorBlindType> STATIC_GetColorBlindTypes();
	float STATIC_GetBGMSoundVolume();
	TArray<struct FTslInputKey> STATIC_GetAxisKeys(const struct FName& AxisName, float Scale, bool bDefault);
	struct FTslInputKey STATIC_GetAxisKey(const struct FName& AxisName, float Scale, bool bGamepad, bool bDefault, bool bWantAnyKey, EKeyBindingSlot eKeySlot);
	TArray<struct FQualityLevelInfo> STATIC_GetAutoQualityLevels(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	TArray<struct FTslInputKey> STATIC_GetActionKeys(const struct FName& ActionName, bool bDefault);
	struct FTslInputKey STATIC_GetActionKey(const struct FName& ActionName, bool bGamepad, bool bDefault, bool bWantAnyKey, EKeyBindingSlot eKeySlot);
	float STATIC_DefaultGamePadInnerDeadZone();
	TArray<struct FCustomizableMouseSensitiveName> STATIC_CustomizableScopeMouseSensitiveNames();
	TArray<struct FCustomizableGamePadSensitiveName> STATIC_CustomizableScopeGamePadSensitiveNames();
	TArray<struct FCustomizableMouseSensitiveName> STATIC_CustomizableNonScopeMouseSensitiveNames();
	TArray<struct FCustomizableGamePadSensitiveName> STATIC_CustomizableNonScopeGamePadSensitiveNames();
	TArray<struct FCustomizableMouseSensitiveName> STATIC_CustomizableMouseSensitiveNames();
	TArray<struct FCustomizableGamePadSensitiveName> STATIC_CustomizableGamePadSensitiveNames();
	TArray<struct FCustomizableCategoryData> STATIC_CustomizableCategoryData();
	TArray<struct FCustomizableAxisName> STATIC_CustomizableAxisName();
	TArray<struct FCustomizableActionName> STATIC_CustomizableActionNames();
	TArray<struct FString> STATIC_CultureNames();
	void STATIC_ClearAllGamepadKeyBinding();
	ETslInputModes STATIC_CastTslInputModeFromName(const struct FName& InputModeName);
	void STATIC_ApplySettingsWithHudUpdateOption(bool bCheckForCommandLineOverrides, bool bHudUpdate);
	void STATIC_ApplyMouseSensitivity();
	void STATIC_ApplyGameUserSettings(bool bCheckForCommandLineOverrides);
	void STATIC_ApplyGamePadSensitivity();
	void STATIC_ApplyGamepadKeyPresetDatas();
	void STATIC_ApplyGamePadDeadZone();
	void STATIC_ApplyAutoQualitySetting();
};


// Class ShadowTrackerExtra.TslGamepadKeyHintContentWidget
// 0x0060 (0x0320 - 0x02C0)
class UTslGamepadKeyHintContentWidget : public UUmgBaseWidget
{
public:
	struct FKey                                        FirstKey;                                                 // 0x02C0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FKey                                        SecondKey;                                                // 0x02D8(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FText                                       DisplayName;                                              // 0x02F0(0x0018) (BlueprintVisible, BlueprintReadOnly)
	EGamepadInputResponseTypes                         ResponseType;                                             // 0x0308(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInProneStance;                                       // 0x0309(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x030A(0x0006) MISSED OFFSET
	TArray<struct FTslKeyIconData>                     KeyIconDatas;                                             // 0x0310(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslGamepadKeyHintContentWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
};


// Class ShadowTrackerExtra.TslGamepadKeyHintSet
// 0x0070 (0x0330 - 0x02C0)
class UTslGamepadKeyHintSet : public UUmgBaseWidget
{
public:
	EKeyHintType                                       KeyHintType;                                              // 0x02C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	TArray<struct FHintKeyInfo>                        HintKeys_1;                                               // 0x02C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FHintKeyInfo>                        HintKeys_2;                                               // 0x02D8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      KeyHintContentClass;                                      // 0x02E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x02F0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x0310(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslGamepadKeyHintSet");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker
// 0x0008 (0x0030 - 0x0028)
class UTslKeyHintChecker : public UObject
{
public:
	bool                                               bCurrState;                                               // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsChanged;                                               // 0x0029(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x002A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Menu
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Menu : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Menu");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Parachuting
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Parachuting : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Parachuting");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Character
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Character : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Character");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Driver
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Driver : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Driver");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Rider
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Rider : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Rider");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_WeaponUse
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WeaponUse : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_WeaponUse");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_WeaponChange
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WeaponChange : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_WeaponChange");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ADS
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ADS");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Aim
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Aim : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Aim");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ADS_8x15x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_8x15x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ADS_8x15x");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ADS_6x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_6x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ADS_6x");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ADS_1x2x3x
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_1x2x3x : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ADS_1x2x3x");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ADS_IronSight
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ADS_IronSight : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ADS_IronSight");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Throwing
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Throwing : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Throwing");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Heal
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Heal : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Heal");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_Swimming
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_Swimming : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_Swimming");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_TeamSpectating
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_TeamSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_TeamSpectating");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_KillerSpectating
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_KillerSpectating : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_KillerSpectating");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_WorldMap
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_WorldMap : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_WorldMap");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_FreefallNew
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_FreefallNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_FreefallNew");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyHintChecker_ParachuteNew
// 0x0000 (0x0030 - 0x0030)
class UTslKeyHintChecker_ParachuteNew : public UTslKeyHintChecker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyHintChecker_ParachuteNew");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslGamepadKeyHintWidget
// 0x0058 (0x0318 - 0x02C0)
class UTslGamepadKeyHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   HintSizeBox_Binder;                                       // 0x02C8(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x02E8(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x0308(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslGamepadKeyHintWidget");
		return ptr;
	}


	void UpdateHintSizeBoxPosition();
	void OnGameUserSettingApplied();
};


// Class ShadowTrackerExtra.TslGameUserSettings
// 0x01B0 (0x02B8 - 0x0108)
class UTslGameUserSettings : public UGameUserSettings
{
public:
	float                                              ScreenScale;                                              // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              Gamma;                                                    // 0x010C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxFps;                                                   // 0x0110(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsLanMatch;                                              // 0x0114(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsMasterSoundMute;                                       // 0x0115(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0116(0x0002) MISSED OFFSET
	float                                              MasterSoundVolume;                                        // 0x0118(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEffectSoundMute;                                       // 0x011C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	float                                              EffectSoundVolume;                                        // 0x0120(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsUISoundMute;                                           // 0x0124(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0125(0x0003) MISSED OFFSET
	float                                              UISoundVolume;                                            // 0x0128(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsBGMSoundMute;                                          // 0x012C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	float                                              BGMSoundVolume;                                           // 0x0130(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsEnabledHrtfRemoteWeaponSound;                          // 0x0134(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsVoiceInputMute;                                        // 0x0135(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsVoiceOutputMute;                                       // 0x0136(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0137(0x0001) MISSED OFFSET
	int                                                VoiceInputSensitivity;                                    // 0x0138(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                VoiceInputVolume;                                         // 0x013C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                VoiceOutputVolume;                                        // 0x0140(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUsePushToTalk;                                           // 0x0144(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseGlobalVoice;                                          // 0x0145(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseTeamVoice;                                            // 0x0146(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSavedGraphicOption;                                      // 0x0147(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bMotionBlur;                                              // 0x0148(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	struct FString                                     CultureName;                                              // 0x0150(0x0010) (ZeroConstructor, Config)
	struct FString                                     LastCultureName;                                          // 0x0160(0x0010) (ZeroConstructor, Config)
	struct FCustomInputSettings                        CustomInputSettins;                                       // 0x0170(0x00C8) (Config)
	int                                                SelectMiniMapIndex;                                       // 0x0238(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FpsCameraFov;                                             // 0x023C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseForceFeedback;                                        // 0x0240(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	float                                              ForceFeedbackMultiplier;                                  // 0x0244(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                ColorBlindType;                                           // 0x0248(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bAutoReloadOnOutOfAmmoFire;                               // 0x024C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x024D(0x0003) MISSED OFFSET
	struct FString                                     CrosshairColorString;                                     // 0x0250(0x0010) (ZeroConstructor, Config)
	struct FColor                                      CustomCrosshairColor;                                     // 0x0260(0x0004) (Config, IsPlainOldData)
	EMinimapColorType                                  MinimapColorType;                                         // 0x0264(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EUiShowType                                        FppWeaponIconShowType;                                    // 0x0265(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EUiShowType                                        TpsWeaponIconShowType;                                    // 0x0266(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EUiShowType                                        FppEquipableItemIconShowType;                             // 0x0267(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseCharacterCapture;                                     // 0x0268(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	int                                                WorldMapZoomSpeedLevel;                                   // 0x026C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableMinimapViewScale;                                  // 0x0270(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIconKillfeedEnabled;                                     // 0x0271(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeCrouch;                                          // 0x0272(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeProne;                                           // 0x0273(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeWalk;                                            // 0x0274(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     bToggleSprint;                                            // 0x0275(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeHoldRotation;                                    // 0x0276(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeHoldBreath;                                      // 0x0277(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModePeek;                                            // 0x0278(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeMap;                                             // 0x0279(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeADS;                                             // 0x027A(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	ETslInputModes                                     InputModeAim;                                             // 0x027B(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEditorApplyOverrideScalability;                          // 0x027C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	EGamepadPresets                                    GamepadPresetType;                                        // 0x027D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseKeyHint;                                              // 0x027E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseFreeLookInterp;                                       // 0x027F(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseClientReplay;                                         // 0x0280(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseKillcam;                                              // 0x0281(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bPreloadingMap;                                           // 0x0282(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x5];                                       // 0x0283(0x0005) MISSED OFFSET
	TArray<struct FString>                             ErangelPreloadingMaps;                                    // 0x0288(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             MiramarPreloadingMaps;                                    // 0x0298(0x0010) (ZeroConstructor, Config)
	struct FScriptMulticastDelegate                    OnGameUserSettingApplied;                                 // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslGameUserSettings");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponRecoilConfig
// 0x0088 (0x00B8 - 0x0030)
class UWeaponRecoilConfig : public UDataAsset
{
public:
	struct FRecoilInfo                                 RecoilInfo;                                               // 0x0030(0x0088) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponRecoilConfig");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyboardAndMouseHintContentWidget
// 0x0080 (0x0340 - 0x02C0)
class UTslKeyboardAndMouseHintContentWidget : public UUmgBaseWidget
{
public:
	struct FTslInputKey                                Key;                                                      // 0x02C0(0x0020) (BlueprintVisible, BlueprintReadOnly)
	struct FTslInputKey                                Key_InvertedAxis;                                         // 0x02E0(0x0020) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bActionBinding;                                           // 0x0300(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisBinding;                                             // 0x0301(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDummyBinding;                                            // 0x0302(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x0303(0x0005) MISSED OFFSET
	struct FName                                       BindingName;                                              // 0x0308(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FText                                       HintText;                                                 // 0x0310(0x0018) (BlueprintVisible, BlueprintReadOnly)
	bool                                               bHold;                                                    // 0x0328(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bRelease;                                                 // 0x0329(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideInProneStance;                                       // 0x032A(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5];                                       // 0x032B(0x0005) MISSED OFFSET
	TArray<struct FTslKeyIconData>                     KeyIconDatas;                                             // 0x0330(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyboardAndMouseHintContentWidget");
		return ptr;
	}


	void UpdateDesign_Normal();
	bool IsUsingFunctionKeys();
	bool IsInvertedAxisKeyUsingFunctionKeys();
};


// Class ShadowTrackerExtra.TslKeyboardAndMouseHintSet
// 0x0060 (0x0320 - 0x02C0)
class UTslKeyboardAndMouseHintSet : public UUmgBaseWidget
{
public:
	EKeyHintType                                       KeyHintType;                                              // 0x02C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02C1(0x0007) MISSED OFFSET
	TArray<struct FKeyboardAndMouseActionAndAxisBindingHintInfo> HintActionAndAxisBindings;                                // 0x02C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      KeyHintContentClass;                                      // 0x02D8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   HintVerticalBox_Binder;                                   // 0x02E0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Animation                  HintAnimation_Binder;                                     // 0x0300(0x0020) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyboardAndMouseHintSet");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeyboardAndMouseHintWidget
// 0x0038 (0x02F8 - 0x02C0)
class UTslKeyboardAndMouseHintWidget : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x02C0(0x0008) MISSED OFFSET
	struct FUmgWidgetBinder_Gerneral                   HintSetSwitcher_Binder;                                   // 0x02C8(0x0020) (Edit, DisableEditOnInstance)
	TArray<struct FTslKeyHintData>                     KeyHintDatas;                                             // 0x02E8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyboardAndMouseHintWidget");
		return ptr;
	}


	void OnGameUserSettingApplied();
};


// Class ShadowTrackerExtra.TslKeyDisplayWidget
// 0x0060 (0x03E0 - 0x0380)
class UTslKeyDisplayWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyInputed;                                             // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TArray<class UTslKeyReceiverWidget*>               KeyReceiverWidgets;                                       // 0x0390(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FUmgWidgetBinder_UserWidget>         KeyReceiverWidgetBinders;                                 // 0x03A0(0x0010) (Edit, ZeroConstructor)
	struct FName                                       InputName;                                                // 0x03B0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       CategoryName;                                             // 0x03B8(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FText                                       DisplayText;                                              // 0x03C0(0x0018) (BlueprintVisible)
	bool                                               bGamepad;                                                 // 0x03D8(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisInput;                                               // 0x03D9(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03DA(0x0002) MISSED OFFSET
	float                                              AxisScale;                                                // 0x03DC(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyDisplayWidget");
		return ptr;
	}


	void TransferInputEvent(const struct FTslInputKey& TslInputKey);
	void SetupKeyDisplayWidget(const struct FName& InInputName, const struct FText& InDisplayName, const struct FName& InCategoryName, bool InbAxisInput, float InAxisScale, bool InbGamepad);
	void InitializeKeyDisplayWidget(bool bDefault);
	void ApplyKey();
};


// Class ShadowTrackerExtra.TslKeyReceiverWidget
// 0x00A0 (0x0350 - 0x02B0)
class UTslKeyReceiverWidget : public UUAEUserWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyReceived;                                            // 0x02B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FTslInputKey                                OriginKey;                                                // 0x02C0(0x0020) (BlueprintVisible)
	struct FKey                                        FirstDownKey;                                             // 0x02E0(0x0018) (BlueprintVisible)
	struct FTslInputKey                                CurrentDownKey;                                           // 0x02F8(0x0020) (BlueprintVisible)
	struct FTslInputKey                                LastDownedKey;                                            // 0x0318(0x0020) (BlueprintVisible)
	bool                                               bFocused;                                                 // 0x0338(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableInput;                                             // 0x0339(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIsKeyUp;                                                 // 0x033A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAxisInput;                                               // 0x033B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AxisScale;                                                // 0x033C(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FKey>                                MouseButtons;                                             // 0x0340(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyReceiverWidget");
		return ptr;
	}


	void UpdateKeyUp(const struct FKey& InKey);
	void UpdateKeyDown(const struct FKey& InKey);
	void KeyUp(const struct FKey& InKey);
	void KeyDown(const struct FKey& InKey);
	bool IsInputKeyDown();
	struct FText GetLastDownedKeyName();
};


// Class ShadowTrackerExtra.TslKeyOptionWidget
// 0x0070 (0x03F0 - 0x0380)
class UTslKeyOptionWidget : public UTslBaseOptionWidget
{
public:
	struct FUmgWidgetBinder_Gerneral                   ScrollBox_Binder;                                         // 0x0380(0x0020) (Edit)
	TArray<class UTslKeySettingWidget*>                KeySettingWidgets;                                        // 0x03A0(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	class UClass*                                      MouseSettingWidgetClass;                                  // 0x03B0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslBaseOptionWidget*                        MouseSettingWidget;                                       // 0x03B8(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UClass*                                      KeySettingWidgetClass;                                    // 0x03C0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UClass*                                      GamePadSettingWidgetClass;                                // 0x03C8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UTslBaseOptionWidget*                        GamePadSettingWidget;                                     // 0x03D0(0x0008) (BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               CategoryOrder;                                            // 0x03D8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeyOptionWidget");
		return ptr;
	}


	void OnKeyChanged(class UTslKeyDisplayWidget* InKeyDisplayWidget, const struct FTslInputKey& InInputedKey);
	void InitializeKeyAndMouseSetting();
};


// Class ShadowTrackerExtra.TslLoadingScreen
// 0x0118 (0x03D8 - 0x02C0)
class UTslLoadingScreen : public UUmgBaseWidget
{
public:
	class UDataTable*                                  LoadingScreenDataTable_KeyGuide;                          // 0x02C0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UDataTable*                                  LoadingScreenDataTable;                                   // 0x02C8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x02D0(0x0050) UNKNOWN PROPERTY: MapProperty ShadowTrackerExtra.TslLoadingScreen.DefaultBackgroundsByType
	class UClass*                                      DefaultTipWidget;                                         // 0x0320(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TMap<EUserRank, float>                             KeyGuideRatioMap;                                         // 0x0328(0x0050) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	struct FLoadingScreenTypePercentConfig             KeyGuideTypePercentConfig;                                // 0x0378(0x0040) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FElementaryRankGuidePercentConfig           ElementaryRankGuidePercentConfigForTextTip;               // 0x03B8(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UBorder*                                     MainBorder;                                               // 0x03D0(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLoadingScreen");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslLoadingScreenPage
// 0x0078 (0x0338 - 0x02C0)
class UTslLoadingScreenPage : public UUmgBaseWidget
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x02C0(0x0050) UNKNOWN PROPERTY: MapProperty ShadowTrackerExtra.TslLoadingScreenPage.DefaultBackgroundsByType
	unsigned char                                      UnknownData01[0x28];                                      // 0x0310(0x0028) UNKNOWN PROPERTY: SoftObjectProperty ShadowTrackerExtra.TslLoadingScreenPage.BackgroundTexturePtr

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLoadingScreenPage");
		return ptr;
	}


	void OnUpdate(const struct FText& Title, const struct FText& Description, class UTexture2D* BackgroundTexture, const struct FLinearColor& BackgroundColor);
};


// Class ShadowTrackerExtra.TslLobbyNameTagHudWidget
// 0x0040 (0x0300 - 0x02C0)
class UTslLobbyNameTagHudWidget : public UUmgBaseWidget
{
public:
	class UClass*                                      LobbyNameNameTagWidgetClass;                              // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_CanvasPanel                CanvasPanel_Binder;                                       // 0x02C8(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bUseNameTagOffsetTranslations;                            // 0x02E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x02E9(0x0007) MISSED OFFSET
	TArray<struct FVector>                             NameTagOffsetTranslations;                                // 0x02F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLobbyNameTagHudWidget");
		return ptr;
	}


	void UpdateNameTagWidget_Internal(int SlotIndex);
	void SetNameTagWidget_Internal(int SlotIndex);
	void ResetNameTagWidget_Internal(int SlotIndex);
	class UTslLobbyNameTagWidget* GetNameTagWidget_Internal(int SlotIndex);
	class ALobbyCharacter* GetLobbyCharacter(int SlotIndex);
};


// Class ShadowTrackerExtra.TslLobbyNameTagWidget
// 0x0138 (0x03F8 - 0x02C0)
class UTslLobbyNameTagWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_TextBlock                  NickName_Binder;                                          // 0x02C0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   RankEmblem_Binder;                                        // 0x02E0(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             VoiceSwitcher_Binder;                                     // 0x0300(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    VoiceSizeBox_Binder;                                      // 0x0320(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    HostSizeBox_Binder;                                       // 0x0340(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    StateIconSizeBox_Binder;                                  // 0x0360(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_WidgetSwitcher             StateWidgetSwitcher_Binder;                               // 0x0380(0x0020) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_Gerneral                   BackgroundBlur_Binder;                                    // 0x03A0(0x0020) (Edit, DisableEditOnInstance)
	bool                                               bTestAlwaysShowIcons;                                     // 0x03C0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bHideIfAlone;                                             // 0x03C1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideStateIconIfAlone;                                    // 0x03C2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHideIdleStateIcon;                                       // 0x03C3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SlotIndex;                                                // 0x03C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       NameTagSocketName;                                        // 0x03C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NameTagOffsetTranslation;                                 // 0x03D0(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bIsHost;                                                  // 0x03DC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsReady;                                                 // 0x03DD(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsSpeaking;                                              // 0x03DE(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsLogout;                                                // 0x03DF(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLobbyNameTagWidget");
		return ptr;
	}


	void UpdateWidgetSwitchers();
	void UpdateWidgetsVisibilities();
	void SetSpeaking(bool InbSpeaking);
	void SetReady(bool InbReady);
	void SetRankEmblem(ERatingRankType RankType);
	void SetOffsetTranslation(const struct FVector& InOffsetTranslation);
	void SetNickName(const struct FString& InNickName);
	void SetHost(bool InbHost);
	void SetBinding();
	void OnVoiceChatUpdated(const struct FString& InUniqueId, bool InbTeamChannel, bool InbSpeaking, float InEnergy);
	bool IsAlone();
	void InitWidget(const struct FString& InNickName, ERatingRankType InRankEmblem);
	void HandlePrepass();
};


// Class ShadowTrackerExtra.TslLobbySceneDataTable
// 0x0000 (0x0080 - 0x0080)
class UTslLobbySceneDataTable : public UDataTable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLobbySceneDataTable");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslLPCGameEngine
// 0x0000 (0x0E70 - 0x0E70)
class UTslLPCGameEngine : public UUAEGameEngine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLPCGameEngine");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslLPCPlayerState
// 0x03C0 (0x0A08 - 0x0648)
class ATslLPCPlayerState : public ASTExtraPlayerState
{
public:
	int                                                Ranking;                                                  // 0x0648(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                PersonalRanking;                                          // 0x064C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FString                                     AccountId;                                                // 0x0650(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bKilled : 1;                                              // 0x0660(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0661(0x0003) MISSED OFFSET
	int                                                KillerPlayerTeamNum;                                      // 0x0664(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0668(0x0008) MISSED OFFSET
	struct FString                                     ReportToken;                                              // 0x0670(0x0010) (Net, ZeroConstructor, Transient)
	bool                                               bShowMapMarker;                                           // 0x0680(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0681(0x0003) MISSED OFFSET
	struct FVector2D                                   MapMarkerPosition;                                        // 0x0684(0x0008) (BlueprintVisible, IsPlainOldData)
	struct FVector2D                                   PingPosition;                                             // 0x068C(0x0008) (BlueprintVisible, IsPlainOldData)
	float                                              PiningTimeSeconds;                                        // 0x0694(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEmptyReplicatedCastableItems;                            // 0x0698(0x0001) (ZeroConstructor, IsPlainOldData)
	EObserverAuthorityType                             ObserverAuthorityType;                                    // 0x0699(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x069A(0x0002) MISSED OFFSET
	int                                                TeamNumber;                                               // 0x069C(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                SquadIndex;                                               // 0x06A0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                SquadMemberIndex;                                         // 0x06A4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FTslPlayerStatistics                        PlayerStatistics;                                         // 0x06A8(0x0004) (Net, Transient)
	struct FTslPlayerStatisticsForOwner                PlayerStatisticsForOwner;                                 // 0x06AC(0x0010) (Net, Transient)
	unsigned char                                      UnknownData04[0x4];                                       // 0x06BC(0x0004) MISSED OFFSET
	struct FTslPlayerStatisticsNotReplicated           PlayerStatisticsNotReplicated;                            // 0x06C0(0x0118) (Transient)
	float                                              DamageDealtOnEnemy;                                       // 0x07D8(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x21];                                      // 0x07DC(0x0021) MISSED OFFSET
	unsigned char                                      bQuitter : 1;                                             // 0x07FD(0x0001) (Net)
	unsigned char                                      UnknownData06[0x182];                                     // 0x07FE(0x0182) MISSED OFFSET
	bool                                               bIsInAircraft;                                            // 0x0980(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0981(0x0003) MISSED OFFSET
	int                                                UnknownNumber;                                            // 0x0984(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              LastHitTime;                                              // 0x0988(0x0004) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x098C(0x0004) MISSED OFFSET
	struct FString                                     CurrentAttackerPlayerNetId;                               // 0x0990(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	unsigned char                                      UnknownData09[0x8];                                       // 0x09A0(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnUniqueIdReplicated;                                     // 0x09A8(0x0010) (ZeroConstructor, InstancedReference)
	unsigned char                                      UnknownData10[0xC];                                       // 0x09B8(0x000C) MISSED OFFSET
	struct FTslPlayTime                                PlayTime;                                                 // 0x09C4(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	float                                              AASBpFactor;                                              // 0x09D4(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x4];                                       // 0x09D8(0x0004) MISSED OFFSET
	struct FTslPlayerBpReward                          BpReward;                                                 // 0x09DC(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	struct FTslPlayerXpReward                          XpReward;                                                 // 0x09EC(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	struct FTslPlayerRewardBoost                       RewardBoost;                                              // 0x09F4(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, Transient)
	struct FTslPlayerRewardContext                     RewardContext;                                            // 0x09FC(0x000C) (BlueprintVisible, BlueprintReadOnly, Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslLPCPlayerState");
		return ptr;
	}


	void SPing(TArray<unsigned char> Data);
	void SetPingPosition(const struct FVector2D& InPingPosition);
	void SetClientUnknownNumber(int NewUnknownNumber);
	void ServerTournamentData(TArray<uint32_t> Data);
	void OnRep_ReportToken(const struct FString& OldReportToken);
	void OnRep_Ranking(int OldRanking);
	void OnRep_PlayerStatisticsForOwner();
	void OnRep_PlayerStatistics(const struct FTslPlayerStatistics& OldPlayerStatistics);
	void OnRep_LastHitTime();
	void OnRep_bQuitter();
	bool IsQuitter();
	bool IsObserver();
	bool IsMaxLevel();
	bool IsInAircraft();
	void InformAboutKill(EDamageReason DamageReason, class AActor* DamageCauser, class UDamageType* DamageType, float Distance);
	float GetXpRewardByTeamSpectatingTime();
	float GetXpRewardBySurvivalTime();
	float GetXpBoostingAmount();
	float GetXpBoost();
	int GetUnknownNumber();
	float GetTotalXpRewardRaw();
	float GetTotalXpRewardBoostedAndCapped();
	float GetTotalXpRewardBoosted();
	float GetTotalBpRewardRaw();
	float GetTotalBpRewardBoosted();
	float GetTeamSpectatingTimeInSeconds();
	int GetTeamNum();
	float GetSurvivalTimeInSeconds();
	int GetSquadMemberIndex();
	int GetSquadIndex();
	struct FString GetShortPlayerName();
	float GetPiningTimeSeconds();
	struct FVector2D GetPingPosition();
	float GetPing();
	class ASTExtraPlayerController* GetOwningTslPlayerController();
	EObserverAuthorityType GetObserverAuthorityType();
	struct FVector2D GetMapMarkerPosition();
	int GetKills();
	struct FString GetDisplayName(bool bShortPlayerName, bool bHideName);
	float GetDailyXpMax();
	float GetCurrentDailyXp();
	float GetBpRewardByRanking();
	float GetBpRewardByPlayTime();
	float GetBpRewardByKills();
	float GetBpRewardByDamageDealt();
	float GetBpBoostingAmount();
	float GetBpBoost();
	void CPing(TArray<unsigned char> Data);
	void ClientUpdateRankingOnlineEvent(int InRanking);
	void ClientTournamentData(TArray<uint32_t> Data);
	void ClientSetReconnectAddId();
	void ClientInformFirstKill();
	void ClientInformAssist();
	void BroadcastTeamKillingSpree(int InTeamNumber, int KillCount);
	void BroadcastTeamElimination(int EliminatorTeamNum, bool bIsWipedOut, int EliminatedTeamRank);
	void BroadcastPersonalKillingSpree(const struct FString& PlayerNameStr, int InTeamNumber, int KillCount);
	void BroadcastMidGameBan(class ATslLPCPlayerState* BannedPlayerState, const struct FString& BanCode, const struct FString& BanType);
	void BroadcastDeath(class ATslLPCPlayerState* KillerPlayerState, class ATslLPCPlayerState* GroggyPlayerInstigator, class UDamageType* KillerDamageType, EDamageReason DamageReason, const struct FText& DamageCauserName, class UClass* DamageCauserClass, int AlivePlayerNum, int AliveTeamNum, bool InbIsStealKilled);
};


// Class ShadowTrackerExtra.TslMotorbikeVehicle
// 0x02A0 (0x0A40 - 0x07A0)
class ATslMotorbikeVehicle : public ASTExtraWheeledVehicle
{
public:
	bool                                               bUseKickstandStabilize;                                   // 0x07A0(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07A1(0x0003) MISSED OFFSET
	float                                              MinSuspensionOffsetForContact;                            // 0x07A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeOnServer;                                       // 0x07A8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeOnRemoteClient;                                 // 0x07A9(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x07AA(0x0002) MISSED OFFSET
	float                                              KickstandStabAngularDamp;                                 // 0x07AC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandMAV;                                             // 0x07B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamping_Client;                             // 0x07B4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamping_Server;                             // 0x07B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoDriverAngularDamping_Client;                            // 0x07BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NoDriverAngularDamping_Server;                            // 0x07C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeTorqueScalar;                           // 0x07C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeRollScalar;                             // 0x07C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabilizeRollMinRange;                           // 0x07CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinVelocityForStabilizeOverride;                          // 0x07D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              KickstandStabLinearDamp;                                  // 0x07D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectStabilizeSpeedKickstand;                            // 0x07D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseTeleportOnStabilize;                                  // 0x07DC(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLinearStabilizeInterp;                                // 0x07DD(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseSleepForcingOnStabilize;                              // 0x07DE(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x07DF(0x0001) MISSED OFFSET
	float                                              SleepForceRollLimit;                                      // 0x07E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DirectStabilizeSpeedDriver;                               // 0x07E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       StabilizeBone_Low;                                        // 0x07E8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       StabilizeBone_High;                                       // 0x07F0(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Roll;                                               // 0x07F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_RollReturn;                                         // 0x0800(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Steer;                                              // 0x0808(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Yaw;                                                // 0x0810(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 Curve_Torque;                                             // 0x0818(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabStaticVector;                                         // 0x0820(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabStaticVectorKickstand;                                // 0x082C(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     StabNoDriverVector;                                       // 0x0838(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_In;                                        // 0x0844(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Velocity_Out;                                       // 0x084C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_In;                                           // 0x0854(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabX_Pitch_Out;                                          // 0x085C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_In;                                        // 0x0864(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Velocity_Out;                                       // 0x086C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_In;                                            // 0x0874(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Roll_Out;                                           // 0x087C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_In;                                           // 0x0884(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabZ_Pitch_Out;                                          // 0x088C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_In;                                       // 0x0894(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorquePitch_Out;                                      // 0x089C(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              StabTorque_ForceScalar;                                   // 0x08A4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_In;                                     // 0x08A8(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   StabTorque_AngVel_Out;                                    // 0x08B0(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseFlipping;                                             // 0x08B8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x08B9(0x0003) MISSED OFFSET
	float                                              FlippingForce;                                            // 0x08BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialFlipTimer;                                         // 0x08C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bMappedAngularDamping;                                    // 0x08C4(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x08C5(0x0003) MISSED OFFSET
	float                                              MinVelocityForFlipping;                                   // 0x08C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DisableDamageAfterFlipSec;                                // 0x08CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x08D0(0x000C) MISSED OFFSET
	float                                              DefaultLinearDamp;                                        // 0x08DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultAngularDamp;                                       // 0x08E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DefaultMAV;                                               // 0x08E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_RiseRate;                                    // 0x08E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_FallRate;                                    // 0x08EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_LowerClamp;                                  // 0x08F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapPitchIn;                                  // 0x08F4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapRollIn;                                   // 0x08FC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlphaRemoteMultiplier;                             // 0x0904(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeWithContactNormal;                              // 0x0908(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0909(0x0003) MISSED OFFSET
	float                                              StabilizeWithContactNormalAlpha;                          // 0x090C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactNormalInterpSpeed;                                 // 0x0910(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseForceFramceScale;                                     // 0x0914(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseLocalSpaceAngVel;                                     // 0x0915(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x0916(0x0002) MISSED OFFSET
	struct FVector2D                                   AirControlF_VelMap;                                       // 0x0918(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlB_VelMap;                                       // 0x0920(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlL_VelMap;                                       // 0x0928(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlR_VelMap;                                       // 0x0930(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlQ_VelMap;                                       // 0x0938(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlE_VelMap;                                       // 0x0940(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_FB_Torque;                                     // 0x0948(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_LR_Torque;                                     // 0x094C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_QE_Torque;                                     // 0x0950(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bStabilizeInAir;                                          // 0x0954(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0955(0x0003) MISSED OFFSET
	float                                              FC_PitchUp;                                               // 0x0958(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              FC_PitchDown;                                             // 0x095C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseAnchoring;                                            // 0x0960(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0961(0x0003) MISSED OFFSET
	float                                              MinImpulseForAnchorRelease;                               // 0x0964(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingInMap;                        // 0x0968(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   DriverVelocityAngularDampingOutMap;                       // 0x0970(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteering;                                  // 0x0978(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteerNoInput;                              // 0x0979(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bProcessCounterSteerOnRemote;                             // 0x097A(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData10[0x1];                                       // 0x097B(0x0001) MISSED OFFSET
	float                                              CounterSteerAngularSpeedScalar;                           // 0x097C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerNoInputSpeedScalar;                           // 0x0980(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_Default;                               // 0x0984(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_NoThrottle;                            // 0x0988(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_Brake;                                 // 0x098C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerScalar_NoInput;                               // 0x0990(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   CounterSteer_VelocityOutMap;                              // 0x0994(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              CounterSteerMinForwardSpeed;                              // 0x099C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FMotoRollDampSettings                       MotoRollDampSettings;                                     // 0x09A0(0x001C) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData11[0x3C];                                      // 0x09BC(0x003C) MISSED OFFSET
	class ATslAnchorActor*                             AnchorActorRef;                                           // 0x09F8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bStabilizeActive;                                         // 0x0A00(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0A01(0x0003) MISSED OFFSET
	float                                              AirControlPitchInput;                                     // 0x0A04(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bKickstandStabilizeActive;                                // 0x0A08(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0xF];                                       // 0x0A09(0x000F) MISSED OFFSET
	float                                              StablizeCurrentTimer;                                     // 0x0A18(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bProcessAutoEject;                                        // 0x0A1C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x3];                                       // 0x0A1D(0x0003) MISSED OFFSET
	float                                              AutoEjectGroundDistance;                                  // 0x0A20(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEjectRoll;                                            // 0x0A24(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEjectPitch;                                           // 0x0A28(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEject_RiseRate;                                       // 0x0A2C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AutoEject_FallRate;                                       // 0x0A30(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0A34(0x0004) MISSED OFFSET
	bool                                               bRunStabilizeOnEntry;                                     // 0x0A38(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0A39(0x0003) MISSED OFFSET
	float                                              StabilizeInitialTimer;                                    // 0x0A3C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslMotorbikeVehicle");
		return ptr;
	}


	bool VehicleHasDriver();
	void SetAirControlRollInput(float Value);
	void SetAirControlR(float inFloat);
	void SetAirControlQ(float inFloat);
	void SetAirControlPitchInput(float Value);
	void SetAirControlL(float inFloat);
	void SetAirControlF(float inFloat);
	void SetAirControlE(float inFloat);
	void SetAirControlB(float inFloat);
	void ProcessFlipAndStabilize();
	void OnVehicleEjected();
	void OnPostDriverRide();
	void OnPostDriverLeave();
	void OnMeshHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	bool IsUsingActiveStabilize();
	bool IsKickstandActive();
	bool IsFlippingEnabled();
	bool HasContact();
	float GetCOMSteerOffset();
};


// Class ShadowTrackerExtra.TslMotorbikeVehicle_Sidecar
// 0x0020 (0x0A60 - 0x0A40)
class ATslMotorbikeVehicle_Sidecar : public ATslMotorbikeVehicle
{
public:
	float                                              Sidecar_COM_Y_Left;                                       // 0x0A40(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              Sidecar_COM_Y_Right;                                      // 0x0A44(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     Sidecar_StabilizerHigh_StaticCOM;                         // 0x0A48(0x000C) (Edit, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0A54(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslMotorbikeVehicle_Sidecar");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslMotorbikeVehicle_Standalone
// 0x0000 (0x0A40 - 0x0A40)
class ATslMotorbikeVehicle_Standalone : public ATslMotorbikeVehicle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslMotorbikeVehicle_Standalone");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslPlayerDamageConfig
// 0x0080 (0x00B0 - 0x0030)
class UTslPlayerDamageConfig : public UDataAsset
{
public:
	TMap<EDamageZoneType, struct FPlayerDamageZoneDesc> DamageZones;                                              // 0x0030(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0080(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslPlayerDamageConfig");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslPopupInterface
// 0x0000 (0x0028 - 0x0028)
class UTslPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslPopupInterface");
		return ptr;
	}


	void SetPopup(EPopupStyle PopupStyle, const struct FText& Title, const struct FText& Message, const struct FScriptDelegate& PressedDelegate);
};


// Class ShadowTrackerExtra.TslPostProcessEffect
// 0x0050 (0x03B8 - 0x0368)
class ATslPostProcessEffect : public AActor
{
public:
	struct FName                                       TargetPostProcessVolumeName;                              // 0x0368(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FPostProcessMaterial>                PostProcessMaterials;                                     // 0x0370(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	TArray<struct FPostProcessEffectParameter>         DefaultPostProcessEffectParameter;                        // 0x0380(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FPostProcessEffectDynamicMaterialState> PostProcessEffectDynamicMaterialStates;                   // 0x0390(0x0010) (ZeroConstructor, Transient)
	class APostProcessVolume*                          PostProcessVolume;                                        // 0x03A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x03A8(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslPostProcessEffect");
		return ptr;
	}


	bool SetMaterialVectorParameter(int idx, const struct FName& ParameterName, const struct FLinearColor& Value);
	bool SetMaterialParameter(int idx, const struct FName& ParameterName, float Value);
	bool SetMaterialBlendWeight(int idx, float Value);
	bool SetEffectParameter(const struct FString& ParameterName, float Value);
	bool SetDepthOfFieldFarBlurSize(float NewBlurSize);
	void OnSetEffectParameter(const struct FString& ParameterName, float Value);
	float GetEffectParameter(const struct FString& ParameterName, float DefaultValue);
	float GetDepthOfFieldFarBlurSize();
};


// Class ShadowTrackerExtra.TslRankEmblemWidget
// 0x0098 (0x0358 - 0x02C0)
class UTslRankEmblemWidget : public UUmgBaseWidget
{
public:
	struct FUmgWidgetBinder_Image                      EmblemImage_Binder;                                       // 0x02C0(0x0028) (Edit, DisableEditOnInstance)
	struct FUmgWidgetBinder_SizeBox                    EmblemSizeBox_Binder;                                     // 0x02E8(0x0020) (Edit, DisableEditOnInstance)
	TMap<ERatingRankType, class UTexture2D*>           RankEmblems;                                              // 0x0308(0x0050) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslRankEmblemWidget");
		return ptr;
	}


	void SetRankEmblemFromRankType(ERatingRankType InRankType);
};


// Class ShadowTrackerExtra.TslRecoilComp
// 0x0038 (0x0130 - 0x00F8)
class UTslRecoilComp : public UActorComponent
{
public:
	class UWeaponRecoilConfig*                         RecoilConfig;                                             // 0x00F8(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0100(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslRecoilComp");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslSceneCaptureWorld
// 0x0078 (0x00A0 - 0x0028)
class UTslSceneCaptureWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UGameInstance*                               GameInstance;                                             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	class UWorld*                                      World;                                                    // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x48];                                      // 0x0058(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslSceneCaptureWorld");
		return ptr;
	}


	void InitWorld(class UGameInstance* GameInstance, const struct FString& SceneCapturePackageName);
	void DestroyWorld();
};


// Class ShadowTrackerExtra.TslSettings
// 0x0740 (0x0768 - 0x0028)
class UTslSettings : public UObject
{
public:
	int                                                ObserverNetSpeed;                                         // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               SupportedClientReplay;                                    // 0x002C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               SupportedKillcam;                                         // 0x002D(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStartServerRecording;                                    // 0x002E(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002F(0x0001) MISSED OFFSET
	int                                                ReportAvailableRecordDaysAgo;                             // 0x0030(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxReplaysForNullStreamer;                                // 0x0034(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Item;                                         // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Character;                                    // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Weapon;                                       // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Vehicle;                                      // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Parachute;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Door;                                         // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistance_Window;                                       // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistanceMinModifier;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistanceTargetFps;                                     // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepDistanceMinFps;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                RepDistanceUncontrolledMinNumConnections;                 // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                RepDistanceMinNumConnections;                             // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Character;                                   // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_WheeledVehicle;                              // 0x006C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_FloatingVehicle;                             // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Parachute;                                   // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_Aircraft;                                    // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepFrequency_CarePackage;                                 // 0x007C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_Character;                                // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_WheeledVehicle;                           // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              DemoMaxRecordHz_FloatingVehicle;                          // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RepVehicle_SpawnDistance;                                 // 0x008C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RepVehicle_UnspawnDistance;                               // 0x0090(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FRigidBodyErrorCorrection                   RepVehicle_PhysicErrorCorrection;                         // 0x0094(0x001C) (Edit, Config)
	float                                              CharacterCorrection_MaxSpeed;                             // 0x00B0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterCorrection_MaxSpeedPositionError;                // 0x00B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterCorrection_ZeroSpeedPositionError;               // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bBattlEyeEnabled;                                         // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bBattlEyeEnabledInPIE;                                    // 0x00BD(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET
	float                                              BattlEyeReliablePacketIntervalOnClient;                   // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BattlEyeReliablePacketIntervalOnServer;                   // 0x00C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPEnabled;                                               // 0x00C8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPEnabledInPIE;                                          // 0x00C9(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTPLaFPSUpdateStatus;                                     // 0x00CA(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x00CB(0x0001) MISSED OFFSET
	float                                              TPLaFPSUpdateStatusPeriodInMs;                            // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bChineseLicensing;                                        // 0x00D0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseGappLobby;                                            // 0x00D1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x00D2(0x0006) MISSED OFFSET
	struct FString                                     GappLobbyUrl;                                             // 0x00D8(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bKoreanRating;                                            // 0x00E8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKakao;                                                   // 0x00E9(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bKakaoTest;                                               // 0x00EA(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIsXenuineRunning;                                        // 0x00EB(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GameStateLogInterval;                                     // 0x00EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerStatLogInterval;                                    // 0x00F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              CharacterPositionLogInterval;                             // 0x00F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DestructibleComponentMaxDrawDistance;                     // 0x00F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	class UClass*                                      CharacterClassToPlay;                                     // 0x0100(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FBoneBinding>                        BoneMapping;                                              // 0x0108(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSoftObjectPath>                     TestVehicleClasses;                                       // 0x0118(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSoftObjectPath>                     TestFloatingVehicleClasses;                               // 0x0128(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FChineseLicensingDefaultCustomizeData> ChineseLicensingDefaultCustomizeData;                     // 0x0138(0x0010) (Edit, ZeroConstructor, Config)
	float                                              StoppedWheeledVehicleSpeedThreshold;                      // 0x0148(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              StoppedFloatingVehicleSpeedThreshold;                     // 0x014C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LastDriverDuration;                                       // 0x0150(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TArray<struct FSoftObjectPath>                     TestSkinClasses;                                          // 0x0158(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bSupportedSkin;                                           // 0x0168(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0169(0x0003) MISSED OFFSET
	float                                              InteractableDistanceToleranceOnDedicatedServer;           // 0x016C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractableDistance_ItemDefault;                         // 0x0170(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InteractableSpeed_ItemDefault;                            // 0x0174(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FInteractionCollisionData                   InteractionCollisionForFPS;                               // 0x0178(0x0014) (Edit, Config)
	struct FInteractionCollisionData                   InteractionCollisionForTPS;                               // 0x018C(0x0014) (Edit, Config)
	float                                              TimeBetweenTracers;                                       // 0x01A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bPreventFinishMatchInPIE;                                 // 0x01A4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableInitialItemDonator;                                // 0x01A5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x2];                                       // 0x01A6(0x0002) MISSED OFFSET
	float                                              InventoryMaxSpaceDefault;                                 // 0x01A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x4];                                       // 0x01AC(0x0004) MISSED OFFSET
	class UTexture*                                    ErrorIconTexture;                                         // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UTexture*                                    LoadingIconTexture;                                       // 0x01B8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             AssetsForPackageIntegrity;                                // 0x01C0(0x0010) (ZeroConstructor)
	float                                              UICrosshairDistance;                                      // 0x01D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              UICrosshairInterpSpeed;                                   // 0x01D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              UICrosshairDisableDistance;                               // 0x01D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticDragScale;                                       // 0x01DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticDropScale;                                       // 0x01E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              BallisticMOAScale;                                        // 0x01E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilControlScale;                                       // 0x01E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              RecoilAnimScale;                                          // 0x01EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GameTimeMultiplier;                                       // 0x01F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               AimOffsetRayCast;                                         // 0x01F4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData09[0x3];                                       // 0x01F5(0x0003) MISSED OFFSET
	float                                              MeleeWeaponPitchMin;                                      // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeWeaponPitchMax;                                      // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData)
	bool                                               EnableThrowLagCompensation;                               // 0x0200(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               FullRecoilRecovery;                                       // 0x0201(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2];                                       // 0x0202(0x0002) MISSED OFFSET
	struct FLevelLoadingBoostParameters                LevelLoadingBoostParameters;                              // 0x0204(0x0010) (Edit, Config)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	TArray<struct FString>                             ErangelIgnoreWeatherIds;                                  // 0x0218(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FNearClippingValue>                  NearClippingValues;                                       // 0x0228(0x0010) (ZeroConstructor, Config)
	TArray<struct FCustomizableCategoryData>           CustomizableCategoryData;                                 // 0x0238(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableActionName>             CustomizableActionNames;                                  // 0x0248(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableAxisName>               CustomizableAxisNames;                                    // 0x0258(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableMouseSensitiveName>     CustomizableMouseSensitiveNames;                          // 0x0268(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FNamedFovRecord>                     NamedFovList;                                             // 0x0278(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FCustomizableGamePadSensitiveName>   CustomizableGamePadSensitiveNames;                        // 0x0288(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSurportQualityLevel>                SupportedQualityLevels;                                   // 0x0298(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FScreenResolution>                   SupportedScreenResolutions;                               // 0x02A8(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             MouseSensitivityCurve;                                    // 0x02B8(0x0018) (Edit, Config)
	struct FSoftObjectPath                             GammaCurve;                                               // 0x02D0(0x0018) (Edit, Config)
	struct FSoftObjectPath                             VibrationCurve;                                           // 0x02E8(0x0018) (Edit, Config)
	struct FSoftObjectPath                             DBNOEffectFadeOutCurve;                                   // 0x0300(0x0018) (Edit, Config)
	struct FSoftObjectPath                             ReviveEffectCurve;                                        // 0x0318(0x0018) (Edit, Config)
	struct FAimAcceleration                            GamePadAimAcceleration;                                   // 0x0330(0x0008) (Edit, Config, IsPlainOldData)
	TArray<struct FColorBlindType>                     ColorBlindTypes;                                          // 0x0338(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FPresetColor>                        CrosshairColors;                                          // 0x0348(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FReticleColors>                      ReticleColors;                                            // 0x0358(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FKeyInputModeName>                   KeyInputModeNames;                                        // 0x0368(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FUiType>                             MiniMapTypeList;                                          // 0x0378(0x0010) (Edit, ZeroConstructor, Config)
	float                                              MinimumScreenResolutionRatio;                             // 0x0388(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FScreenResolution                           MinimumScreenResolution;                                  // 0x038C(0x0008) (Edit, Config)
	unsigned char                                      UnknownData12[0x4];                                       // 0x0394(0x0004) MISSED OFFSET
	TArray<struct FTeamColorAndIcon>                   OverrideMarkerColorAndIcons;                              // 0x0398(0x0010) (Edit, ZeroConstructor, Config)
	struct FTeamColorAndIcon                           OverrideDefaultTeamMarkerColorAndIcons;                   // 0x03A8(0x0038) (Edit, Config)
	float                                              PunchClientHitLeeway_Attacker;                            // 0x03E0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PunchClientHitLeeway_Victim;                              // 0x03E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PunchClientHitLeeway_VictimInPlace;                       // 0x03E8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_Attacker;                            // 0x03EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MeleeClientHitLeeway_AttackerInPlace;                     // 0x03F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeeway;                                      // 0x03F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeewayZ;                                     // 0x03F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideHitLeewayInPlace;                               // 0x03FC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogClientSideHitLeeway;                                   // 0x0400(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogClientSideHitLeewayZ;                                  // 0x0404(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideOriginDistanceLeeway;                           // 0x0408(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ClientSideOriginDistanceLeewayInPlace;                    // 0x040C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TravelDistanceLeeway;                                     // 0x0410(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AllowedHitLag;                                            // 0x0414(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LogMinHitLag;                                             // 0x0418(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed;                                       // 0x041C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed_Crouch;                                // 0x0420(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              HackDetectionSpeed_Prone;                                 // 0x0424(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InvalidRevivingMaxTime;                                   // 0x0428(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData13[0x4];                                       // 0x042C(0x0004) MISSED OFFSET
	TMap<ECheatType, unsigned char>                    CheatLogMaxCounts;                                        // 0x0430(0x0050) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData14[0x10];                                      // 0x0480(0x0010) MISSED OFFSET
	TArray<struct FOverrideScalability>                OverrideScalabilities;                                    // 0x0490(0x0010) (Edit, ZeroConstructor, Config)
	float                                              FakeDoorBlockMaxY;                                        // 0x04A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	TArray<struct FReportCauseData>                    ReportCauses;                                             // 0x04A8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSubjectToReport>                    SubjectToReport;                                          // 0x04B8(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FReportDetailCauseTypeDescription>   ReportDetailCauseTypeDescriptions;                        // 0x04C8(0x0010) (Edit, ZeroConstructor, Config)
	float                                              FreelookRecoveryInterpSpeed;                              // 0x04D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	TMap<struct FName, float>                          GamepadSensitiveMultiplier;                               // 0x04E0(0x0050) (Edit, ZeroConstructor, Config)
	float                                              GamePadInnerDeadZone;                                     // 0x0530(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadOutDeadZoneAcceleration;                           // 0x0534(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadOutMaxAxisValue;                                   // 0x0538(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GamePadAccelerationStandardFps;                           // 0x053C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FTslGamepadKeyPreset>                GamepadKeyPresets;                                        // 0x0540(0x0010) (Edit, ZeroConstructor, Config)
	float                                              AimAssistDecisionRadius;                                  // 0x0550(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bApplyInputValue;                                         // 0x0554(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bIgnorePadSensitive;                                      // 0x0555(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData17[0x2];                                       // 0x0556(0x0002) MISSED OFFSET
	float                                              InsensitiveZone;                                          // 0x0558(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x4];                                       // 0x055C(0x0004) MISSED OFFSET
	TArray<struct FAimAssistData>                      AimCameraAssists;                                         // 0x0560(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      ADSCameraAssists;                                         // 0x0570(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope2XCameraAssists;                                     // 0x0580(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope4XCameraAssists;                                     // 0x0590(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope8XCameraAssists;                                     // 0x05A0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FAimAssistData>                      Scope15XCameraAssists;                                    // 0x05B0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData19[0x8];                                       // 0x05C0(0x0008) MISSED OFFSET
	bool                                               bVoiceChatEnabled;                                        // 0x05C8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData20[0x7];                                       // 0x05C9(0x0007) MISSED OFFSET
	struct FSoftObjectPath                             DialogUMGWidgetClassStringAssetReference;                 // 0x05D0(0x0018) (Edit, Config)
	struct FSoftObjectPath                             LoadingScreenUMGWidgetClassStringAssetReference;          // 0x05E8(0x0018) (Edit, Config)
	unsigned char                                      UnknownData21[0x50];                                      // 0x0600(0x0050) MISSED OFFSET
	class UCurveFloat*                                 LoadedMouseSensitivityCurve;                              // 0x0650(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedGammaCurve;                                         // 0x0658(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedVibrationCurve;                                     // 0x0660(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedDBNOEffectFadeOutCurve;                             // 0x0668(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UCurveFloat*                                 LoadedReviveEffectCurve;                                  // 0x0670(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UTextureRenderTarget2D*                      CharacterStudioRenderTarget;                              // 0x0678(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  LoadedWeaponSkinDB;                                       // 0x0680(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UDataTable*                                  LoadedParachuteSkinDB;                                    // 0x0688(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FAnimatableCustomizableObjectData>   AnimatableCustomizableDatas;                              // 0x0690(0x0010) (Edit, ZeroConstructor, Config)
	TMap<struct FName, float>                          NotifyDistanceLimitMap;                                   // 0x06A0(0x0050) (Edit, ZeroConstructor)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Graphic;                                // 0x06F0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Sound;                                  // 0x0700(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Control;                                // 0x0710(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FOptionContentDesc>                  GamepadOptionList_Gameplay;                               // 0x0720(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bTestShowAllOption;                                       // 0x0730(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x7];                                       // 0x0731(0x0007) MISSED OFFSET
	TArray<struct FName>                               TslFontStyles;                                            // 0x0738(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FLinearColor>                        TeamColors;                                               // 0x0748(0x0010) (Edit, ZeroConstructor, Config)
	struct FLinearColor                                SoloColor;                                                // 0x0758(0x0010) (Edit, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslSettings");
		return ptr;
	}


	void SetCharacterStudioRenderTarget(class UTextureRenderTarget2D* rt);
	bool IsXenuineRunning();
	bool IsVoiceChatEnabled();
	bool IsUsingGappLobby();
	bool IsForKoreanRating();
	bool IsForKakaoTest();
	bool IsForKakao();
	bool IsForChineseLicensing();
	class UTslSettings* STATIC_GetTslSettings();
	float GetNotifyMaxDistanceByName(const struct FName& InName);
	struct FString GetGappLobbyUrl();
	class UTextureRenderTarget2D* GetCharacterStudioRenderTarget();
};


// Class ShadowTrackerExtra.TslSpecificLocationMarker
// 0x0020 (0x0388 - 0x0368)
class ATslSpecificLocationMarker : public AActor
{
public:
	class USphereComponent*                            SphereComponent;                                          // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FString                                     LocationName;                                             // 0x0370(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	float                                              Radius;                                                   // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0384(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslSpecificLocationMarker");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslStatics
// 0x0000 (0x0028 - 0x0028)
class UTslStatics : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslStatics");
		return ptr;
	}


	void STATIC_UseHighPrecisionMouseMovement(class APlayerController* PlayerController);
	float STATIC_SwitchValueByIsConsole(float Value, float ConsoleOverrideValue);
	void STATIC_SetWorldOriginByDistance(class APlayerController* Controller, float XYDistanceToShift);
	void STATIC_SetWorldOrigin(class APlayerController* Controller);
	void STATIC_SetAnimationAkSwitch(class ACharacter* Character, const struct FString& SwitchGroup, const struct FString& SwitchState);
	void STATIC_SetAnimationAkRTPC(class ACharacter* Character, const struct FString& RTPCName, float RTPCValue);
	struct FVector STATIC_ServerPositionToLocal(class UObject* WorldContextObject, const struct FVector& Server);
	void STATIC_SaveStringToFile(const struct FString& Str, const struct FString& Filename);
	void STATIC_SaveImageToFile(const struct FString& Filename, int Width, int Height, TArray<struct FLinearColor> LinearColorArray, bool bCanReplaceExisting);
	struct FVector STATIC_SafeDivide_VectorFloat(const struct FVector& A, float B, const struct FVector& DivideByZeroValue);
	int STATIC_SafeDivide_IntInt(int A, int B, int DivideByZeroValue);
	float STATIC_SafeDivide_FloatFloat(float A, float B, float DivideByZeroValue);
	void STATIC_ReleaseMouseCaptureFromPlayerController(class APlayerController* PlayerController);
	bool STATIC_PredictProjectilePathBox(class UObject* WorldContextObject, const struct FVector& startPos, const struct FVector& LaunchVelocity, bool bTracePath, const struct FVector& ProjectileBox, TArray<TEnumAsByte<EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AActor*> ActorsToIgnore, TEnumAsByte<EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FHitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);
	int STATIC_PostAkEvent(class ACharacter* Character, class UAkAudioEvent* AkEvent, const struct FString& EventName);
	struct FString STATIC_PhysicalSurfaceToString(TEnumAsByte<EPhysicalSurface> Type);
	struct FName STATIC_PhysicalSurfaceToName(TEnumAsByte<EPhysicalSurface> Type);
	struct FVector STATIC_LocalPositionToServer(class UObject* WorldContextObject, const struct FVector& Local);
	bool STATIC_LineSphereIntersection(const struct FVector& Center, const struct FVector& Origion, const struct FVector& Direction, float Radius, struct FVector* Intersection1, struct FVector* Intersection2);
	bool STATIC_IsXboxOnePlatform();
	bool STATIC_IsUsingGappLobby();
	bool STATIC_IsShipping();
	bool STATIC_IsServerActor(class AActor* Actor);
	bool STATIC_IsPS4Platform();
	bool STATIC_IsPointOnTheRay(const struct FVector2D& TargetPoint, const struct FVector2D& LineStart, const struct FVector2D& LineEnd);
	bool STATIC_IsPIE(class UObject* WorldContextObject);
	bool STATIC_IsPCPlatform();
	bool STATIC_IsOptionAllowedOnPlatform(EOptionExposeType InType);
	bool STATIC_IsNpcStopMovement();
	bool STATIC_IsNpcGodMode();
	bool STATIC_IsMapFullyLoaded(class UWorld* World);
	bool STATIC_IsGamepadConnected();
	bool STATIC_IsForKoreanRating();
	bool STATIC_IsForChineseLicensing();
	bool STATIC_IsEditor();
	bool STATIC_IsConsolePlatform();
	bool STATIC_IsClientActor(class AActor* Actor);
	class APhysicsVolume* STATIC_GetWaterVolumeAtLocation(class UObject* WorldContextObject, const struct FVector& Point);
	struct FString STATIC_GetTslPlatformName();
	class UPhysicalMaterial* STATIC_GetSimplePhysicalMaterial(class UPrimitiveComponent* PrimitiveComponent);
	struct FVector STATIC_GetServerLocation(class UObject* ActorOrComponent);
	struct FString STATIC_GetScreenshotDir();
	float STATIC_GetRecoilAnimScale();
	float STATIC_GetMOAScale();
	struct FString STATIC_GetMemoryInfo();
	struct FString STATIC_GetGappLobbyUrl();
	struct FString STATIC_GetGameVersion();
	struct FString STATIC_GetFullGameVersion();
	int STATIC_GetDummyHelmetLevel();
	int STATIC_GetDummyArmorLevel();
	bool STATIC_GetConsoleValue(const struct FString& ConsloeName, float* OutValueFloat, int* OutValueInt, struct FString* OutValueString);
	void STATIC_GetColorFromGameIni(const struct FString& InSection, const struct FString& InKey, struct FColor* OutColor);
	struct FVector STATIC_GetColorBlindTypeCorrectedColor(const struct FVector& InColor, EColorBlindType ColorBlindType);
	float STATIC_GetBallisticDropScale();
	float STATIC_GetBallisticDragScale();
	void STATIC_GetArrayFromGameIni(const struct FString& InSection, const struct FString& InKey, TArray<struct FString>* OutStringArray);
	void STATIC_GetArrayFromEngineIni(const struct FString& InSection, const struct FString& InKey, TArray<struct FString>* OutStringArray);
	float STATIC_GetAngleFromX(const struct FVector2D& TargetVector, bool bClockwise);
	float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	bool STATIC_FindActorFromTag(class UObject* WorldContextObject, const struct FName& Tag, class AActor** FoundActor);
	ERatingRankType STATIC_ConvertRawRatingRankTypeInteger(int RankType);
	void STATIC_ApplyDamage(class AActor* DamagedActor, float BaseDamage, class AController* EventInstigator, class AActor* DamageCauser, class UClass* DamageTypeClass, const struct FAttackId& AttackId);
};


// Class ShadowTrackerExtra.ReticleSettings
// 0x0030 (0x0060 - 0x0030)
class UReticleSettings : public UDataAsset
{
public:
	float                                              ReticleAngularSize;                                       // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ReticleCenter;                                            // 0x0034(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	class UTexture2D*                                  ReticleTexture;                                           // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bUseReticleTextureOverride;                               // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FReticleTextureData>                 ReticleTextureDataArray;                                  // 0x0050(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.ReticleSettings");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslKeySettingWidget
// 0x0070 (0x03F0 - 0x0380)
class UTslKeySettingWidget : public UTslBaseOptionWidget
{
public:
	struct FScriptMulticastDelegate                    OnKeyChanged;                                             // 0x0380(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      KeyDisplayWidgetClass;                                    // 0x0390(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FUmgWidgetBinder_Gerneral                   KeyScrollBoxBinder;                                       // 0x0398(0x0020) (Edit)
	TArray<class UTslKeyDisplayWidget*>                KeyDisplayWidgets;                                        // 0x03B8(0x0010) (BlueprintVisible, ExportObject, ZeroConstructor)
	struct FText                                       DisplayText;                                              // 0x03C8(0x0018) (BlueprintVisible)
	struct FName                                       CategoryName;                                             // 0x03E0(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslKeySettingWidget");
		return ptr;
	}


	void TransferInputEvent(class UTslKeyDisplayWidget* KeyDisplayWidget, const struct FTslInputKey& TslInputKey);
	void StartupKeySettingWidget(const struct FName& InCategoryName, const struct FText& InDisplayText);
	void SetToDefault();
	void InitializeKeySettingWidget();
};


// Class ShadowTrackerExtra.TslWebPopupInterface
// 0x0000 (0x0028 - 0x0028)
class UTslWebPopupInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslWebPopupInterface");
		return ptr;
	}


	void ShowWebPopup(const struct FWebPopupParam& Param);
	void PreloadWebPopup(TArray<struct FWebPopupParam> WebPopupParams);
	bool HasChildren();
	void CloseWebPopup(const struct FString& PopupId);
};


// Class ShadowTrackerExtra.TslXpRewardRuleAsset
// 0x0018 (0x0048 - 0x0030)
class UTslXpRewardRuleAsset : public UDataAsset
{
public:
	float                                              OverallGain;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SurvivalTimeGain;                                         // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              TeamSpectatingTimeGain;                                   // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              UnitTimeInSeconds;                                        // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              XpPerUnitTime;                                            // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxDailyXp;                                               // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslXpRewardRuleAsset");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAEAIOcclusionBoundsVolume
// 0x0000 (0x03A0 - 0x03A0)
class AUAEAIOcclusionBoundsVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAEAIOcclusionBoundsVolume");
		return ptr;
	}

};


// Class ShadowTrackerExtra.TslWeaponAttachmentData
// 0x0218 (0x0248 - 0x0030)
class UTslWeaponAttachmentData : public UDataAsset
{
public:
	struct FWeaponAttachmentData                       WeaponAttachmentData;                                     // 0x0030(0x0218) (Edit, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.TslWeaponAttachmentData");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkill
// 0x0030 (0x04B0 - 0x0480)
class AUAESkill : public AUTSkill
{
public:
	struct FScriptMulticastDelegate                    OnSkillCustomEvent;                                       // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               TriggerFromServer;                                        // 0x0490(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	EPawnState                                         PawnState;                                                // 0x0491(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               AutoEnterState;                                           // 0x0492(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsAddHealTimes;                                           // 0x0493(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0494(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkill");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AddRecoveryPrompt
// 0x0018 (0x0160 - 0x0148)
class UUAESkillAction_AddRecoveryPrompt : public UUAESkillAction
{
public:
	struct FString                                     ShowDataKey;                                              // 0x0148(0x0010) (Edit, ZeroConstructor)
	float                                              Value;                                                    // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AddRecoveryPrompt");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AddRemoveBuff
// 0x0020 (0x0168 - 0x0148)
class UUAESkillAction_AddRemoveBuff : public UUAESkillAction
{
public:
	bool                                               IsAddBuff;                                                // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	struct FName                                       BuffName;                                                 // 0x0150(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                AddLayerCount;                                            // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	class UUAESkillPicker*                             TargetPicker;                                             // 0x0160(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AddRemoveBuff");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_AttachActor
// 0x0038 (0x0180 - 0x0148)
class UUAESkillAction_AttachActor : public UUAESkillAction
{
public:
	struct FSkillAction_AttachActorCreateData          AttachActorData;                                          // 0x0148(0x0030) (Edit)
	class AActor*                                      AttachedActor;                                            // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_AttachActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_BreakGlass
// 0x0008 (0x0150 - 0x0148)
class UUAESkillAction_BreakGlass : public UUAESkillAction
{
public:
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0148(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_BreakGlass");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItem
// 0x0010 (0x0158 - 0x0148)
class UUAESkillAction_ConsumeHandleItem : public UUAESkillAction
{
public:
	int                                                ItemID;                                                   // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Type;                                                     // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Count;                                                    // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               IsGrenade;                                                // 0x0154(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0155(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ConsumeHandleItem");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_CustomEvent
// 0x0008 (0x0150 - 0x0148)
class UUAESkillAction_CustomEvent : public UUAESkillAction
{
public:
	TEnumAsByte<EUAESkillEvent>                        CustomEvent;                                              // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_CustomEvent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_GasCan
// 0x0008 (0x0150 - 0x0148)
class UUAESkillAction_GasCan : public UUAESkillAction
{
public:
	bool                                               RunOnServer;                                              // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	float                                              GasValue;                                                 // 0x014C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_GasCan");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_GrenadeSwitchBackToWeapon
// 0x0000 (0x0148 - 0x0148)
class UUAESkillAction_GrenadeSwitchBackToWeapon : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_GrenadeSwitchBackToWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_JumpPhase
// 0x0010 (0x0158 - 0x0148)
class UUAESkillAction_JumpPhase : public UUAESkillAction
{
public:
	int                                                NewPhaseID;                                               // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	class UUAESkillCondition*                          JumpCondtion;                                             // 0x0150(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_JumpPhase");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_JumpToRandomPhase
// 0x0018 (0x0160 - 0x0148)
class UUAESkillAction_JumpToRandomPhase : public UUAESkillAction
{
public:
	int                                                StartIndex;                                               // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EndIndex;                                                 // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsCanBeCurIndex;                                          // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET
	class UUAESkillCondition*                          JumpCondtion;                                             // 0x0158(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_JumpToRandomPhase");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_LockItem
// 0x0000 (0x0148 - 0x0148)
class UUAESkillAction_LockItem : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_LockItem");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_Log
// 0x0010 (0x0158 - 0x0148)
class UUAESkillAction_Log : public UUAESkillAction
{
public:
	struct FString                                     LogString;                                                // 0x0148(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_Log");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PauseAnims
// 0x0010 (0x0158 - 0x0148)
class UUAESkillAction_PauseAnims : public UUAESkillAction
{
public:
	float                                              Duration;                                                 // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x014C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PauseAnims");
		return ptr;
	}


	void ResetAnimationFrame();
};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage
// 0x0010 (0x0158 - 0x0148)
class UUAESkillAction_PlayMontage : public UUAESkillAction
{
public:
	class UAnimMontage*                                AnimMontage;                                              // 0x0148(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0150(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAERecastNavMesh
// 0x0030 (0x0650 - 0x0620)
class AUAERecastNavMesh : public ARecastNavMesh
{
public:
	struct FString                                     NavDataPath;                                              // 0x0620(0x0010) (Edit, ZeroConstructor)
	struct FString                                     NewNavDataPath;                                           // 0x0630(0x0010) (Edit, ZeroConstructor)
	bool                                               LoadInPIE;                                                // 0x0640(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInDS;                                                 // 0x0641(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInClient;                                             // 0x0642(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               LoadInEditor;                                             // 0x0643(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0644(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAERecastNavMesh");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose
// 0x0020 (0x0178 - 0x0158)
class UUAESkillAction_PlayMontage_Pose : public UUAESkillAction_PlayMontage
{
public:
	struct FSkillPoseMontageData                       PoseMontageData;                                          // 0x0158(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Pose");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Jump
// 0x0008 (0x0180 - 0x0178)
class UUAESkillAction_PlayMontage_Jump : public UUAESkillAction_PlayMontage_Pose
{
public:
	class UAnimMontage*                                AnimMontage_Jump;                                         // 0x0178(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_PlayMontage_Jump");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_RandomAction
// 0x0018 (0x0160 - 0x0148)
class UUAESkillAction_RandomAction : public UUAESkillAction
{
public:
	TArray<struct FRandomActionGroup>                  SkillCandidates;                                          // 0x0148(0x0010) (Edit, ZeroConstructor)
	int                                                RandomeIndex;                                             // 0x0158(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_RandomAction");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_Recovery
// 0x0028 (0x0170 - 0x0148)
class UUAESkillAction_Recovery : public UUAESkillAction
{
public:
	struct FString                                     PropertyName;                                             // 0x0148(0x0010) (Edit, ZeroConstructor)
	int                                                ItemID;                                                   // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERecoveryType>                         RecoveryType;                                             // 0x015C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	float                                              RecoveryValue;                                            // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RecoveryLimit;                                            // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               RunOnServer;                                              // 0x0168(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<ERecoveryReasonType>                   ReasonType;                                               // 0x0169(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x016A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_Recovery");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ReplaceCharAnim
// 0x0018 (0x0160 - 0x0148)
class UUAESkillAction_ReplaceCharAnim : public UUAESkillAction
{
public:
	ECharacterAnimType                                 CharacterAnimType;                                        // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	TArray<class UAnimationAsset*>                     PoseAnimList;                                             // 0x0150(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ReplaceCharAnim");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SetPlayerState
// 0x0008 (0x0150 - 0x0148)
class UUAESkillAction_SetPlayerState : public UUAESkillAction
{
public:
	EPawnState                                         PawnState;                                                // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               SetEnter;                                                 // 0x0149(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x014A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SetPlayerState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SetRecoveryPrompt
// 0x0038 (0x0180 - 0x0148)
class UUAESkillAction_SetRecoveryPrompt : public UUAESkillAction
{
public:
	struct FHealthPredictShowData                      ShowData;                                                 // 0x0148(0x0020) (Edit)
	struct FString                                     RemovePrePromptKey;                                       // 0x0168(0x0010) (Edit, ZeroConstructor)
	bool                                               RemoveByAddBuff;                                          // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SetRecoveryPrompt");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ShowSkillPrompt
// 0x0020 (0x0168 - 0x0148)
class UUAESkillAction_ShowSkillPrompt : public UUAESkillAction
{
public:
	float                                              LastTime;                                                 // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	struct FText                                       PromptText;                                               // 0x0150(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ShowSkillPrompt");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_ShowWeapon
// 0x0018 (0x0160 - 0x0148)
class UUAESkillAction_ShowWeapon : public UUAESkillAction
{
public:
	bool                                               bShowWeapon;                                              // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUndoClear;                                               // 0x0149(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPhaseFinishClear;                                        // 0x014A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x014B(0x0005) MISSED OFFSET
	struct FName                                       WeaponName;                                               // 0x0150(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_ShowWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnActor
// 0x0058 (0x01A0 - 0x0148)
class UUAESkillAction_SpawnActor : public UUAESkillAction
{
public:
	struct FSkillAction_SpawnActorCreateData           SpawnActorData;                                           // 0x0148(0x0050) (Edit)
	class AActor*                                      SpawnedActor;                                             // 0x0198(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SpawnProjectile
// 0x0020 (0x0168 - 0x0148)
class UUAESkillAction_SpawnProjectile : public UUAESkillAction
{
public:
	struct FSkillAction_SpawnProjectileCreateData      SpawnProjectileData;                                      // 0x0148(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SpawnProjectile");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_StopSkill
// 0x0000 (0x0148 - 0x0148)
class UUAESkillAction_StopSkill : public UUAESkillAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_StopSkill");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SwitchWeapon
// 0x0008 (0x0150 - 0x0148)
class UUAESkillAction_SwitchWeapon : public UUAESkillAction
{
public:
	ESurviveWeaponPropSlot                             WeaponSlot;                                               // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               SwitchBackWhenFinish;                                     // 0x0149(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x014A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SwitchWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_TakeDamage
// 0x0040 (0x0188 - 0x0148)
class UUAESkillAction_TakeDamage : public UUAESkillAction
{
public:
	float                                              DamageAmount;                                             // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FWeaponHitPartCoff                          HitPartCoff;                                              // 0x014C(0x0024) (Edit, BlueprintVisible)
	int                                                SpecificItemID;                                           // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ItemType;                                                 // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EMeleeDamageSubType>                   SubDamageType;                                            // 0x0178(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0179(0x0007) MISSED OFFSET
	class UUAESkillPicker*                             DamagePicker;                                             // 0x0180(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_TakeDamage");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillAction_SwitchWeaponToGrenade
// 0x0028 (0x0170 - 0x0148)
class UUAESkillAction_SwitchWeaponToGrenade : public UUAESkillAction
{
public:
	struct FString                                     WeaponSlotName;                                           // 0x0148(0x0010) (Edit, ZeroConstructor)
	struct FItemDefineID                               ItemDefineID;                                             // 0x0158(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillAction_SwitchWeaponToGrenade");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition
// 0x0008 (0x0130 - 0x0128)
class UUAESkillCondition : public UUTSkillCondition
{
public:
	TWeakObjectPtr<class APawn>                        OwnerPawn;                                                // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_And
// 0x0010 (0x0140 - 0x0130)
class UUAESkillCondition_And : public UUAESkillCondition
{
public:
	TArray<class UUAESkillCondition*>                  Conditions;                                               // 0x0130(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_And");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_FallingMode
// 0x0000 (0x0130 - 0x0130)
class UUAESkillCondition_FallingMode : public UUAESkillCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_FallingMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_GrenadeMode
// 0x0008 (0x0138 - 0x0130)
class UUAESkillCondition_GrenadeMode : public UUAESkillCondition
{
public:
	TEnumAsByte<EThrowGrenadeMode>                     GrenadeMode;                                              // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_GrenadeMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_HandleItemLimit
// 0x0018 (0x0148 - 0x0130)
class UUAESkillCondition_HandleItemLimit : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	int                                                NeedItemNum;                                              // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                ItemID;                                                   // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Type;                                                     // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckBothSide;                                           // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0141(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_HandleItemLimit");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_MoveDist
// 0x0018 (0x0148 - 0x0130)
class UUAESkillCondition_MoveDist : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0131(0x0003) MISSED OFFSET
	float                                              DistValue;                                                // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0138(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_MoveDist");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_Not
// 0x0008 (0x0138 - 0x0130)
class UUAESkillCondition_Not : public UUAESkillCondition
{
public:
	class UUAESkillCondition*                          Condition;                                                // 0x0130(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_Not");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_KeyEvent
// 0x0008 (0x0138 - 0x0130)
class UUAESkillCondition_KeyEvent : public UUAESkillCondition
{
public:
	TEnumAsByte<EUTSkillEventType>                     KeyEvent;                                                 // 0x0130(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_KeyEvent");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_PlayerState
// 0x0018 (0x0148 - 0x0130)
class UUAESkillCondition_PlayerState : public UUAESkillCondition
{
public:
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0130(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET
	TArray<EPawnState>                                 ArrPlayerState;                                           // 0x0138(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_PlayerState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_PropertyLimit
// 0x0020 (0x0150 - 0x0130)
class UUAESkillCondition_PropertyLimit : public UUAESkillCondition
{
public:
	struct FString                                     PropertyName;                                             // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<EOperatorType>                         OperatorType;                                             // 0x0140(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<EValueType>                            ValueType;                                                // 0x0141(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0142(0x0002) MISSED OFFSET
	float                                              PropertyValue;                                            // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               ShowPrompt;                                               // 0x0148(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0149(0x0003) MISSED OFFSET
	int                                                PromptID;                                                 // 0x014C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_PropertyLimit");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillConditionAction
// 0x0010 (0x0158 - 0x0148)
class UUAESkillConditionAction : public UUAESkillAction
{
public:
	class UUAESkillCondition*                          Condition;                                                // 0x0148(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UUAESkillAction*                             Action;                                                   // 0x0150(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillConditionAction");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillCondition_Or
// 0x0010 (0x0140 - 0x0130)
class UUAESkillCondition_Or : public UUAESkillCondition
{
public:
	TArray<class UUAESkillCondition*>                  Conditions;                                               // 0x0130(0x0010) (Edit, BlueprintVisible, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillCondition_Or");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillInterface
// 0x0000 (0x0028 - 0x0028)
class UUAESkillInterface : public UUTSkillInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillInterface");
		return ptr;
	}


	void TriggerEntryEvent(EUTSkillEntry EntryEvent);
	void TriggerCustomEvent(TEnumAsByte<EUAESkillEvent> EventType);
	void InitFromSkill(class AUAESkill* SkillOwner);
};


// Class ShadowTrackerExtra.UAESkillEventEffectMapForEditor
// 0x0008 (0x0158 - 0x0150)
class UUAESkillEventEffectMapForEditor : public UUTSkillEventEffectMapForEditor
{
public:
	TEnumAsByte<EUAESkillEvent>                        UAESkillEventType;                                        // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillEventEffectMapForEditor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillPhase
// 0x0000 (0x01D0 - 0x01D0)
class UUAESkillPhase : public UUTSkillPhase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPhase");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker
// 0x0000 (0x0168 - 0x0168)
class UUAESkillPicker : public UUTSkillPicker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_Fan
// 0x0018 (0x0180 - 0x0168)
class UUAESkillPicker_Fan : public UUAESkillPicker
{
public:
	struct FUTSkillPicker_FanCreateData                FanData;                                                  // 0x0168(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_Fan");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillPicker_FanForClient
// 0x0000 (0x0180 - 0x0180)
class UUAESkillPicker_FanForClient : public UUAESkillPicker_Fan
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_FanForClient");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UAESkillManagerComponent
// 0x0078 (0x0248 - 0x01D0)
class UUAESkillManagerComponent : public UUTSkillManagerComponent
{
public:
	TArray<struct FUTSkillEntryConfig>                 SkillEntryConfigs;                                        // 0x01D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x68];                                      // 0x01E0(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillManagerComponent");
		return ptr;
	}


	void TriggerEvent(int SkillID, TEnumAsByte<EUTSkillEventType> EventType);
	void TriggerCurSkillEvent(TEnumAsByte<EUAESkillEvent> UAEEvent);
	void TouchCancelSkillLock();
	bool ShouldDropBagItem(const struct FItemDefineID& SkillItemID);
	void SetSkillOwner(class APawn* Pawn);
	void ServerTriggerCurSkillEvent(TEnumAsByte<EUAESkillEvent> UAEEvent);
	void InsertGrenadeIDToName(int GrenadeID, const struct FName& Name);
	void InsertGrenadeIDInOrder(int GrenadeID);
	class AUTSkill* GetSkillByEntry(EUTSkillEntry Entry);
};


// Class ShadowTrackerExtra.UAESkillPicker_SkillOwner
// 0x0000 (0x0168 - 0x0168)
class UUAESkillPicker_SkillOwner : public UUAESkillPicker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UAESkillPicker_SkillOwner");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UIDataProcessingFunctionLibrary
// 0x0008 (0x0030 - 0x0028)
class UUIDataProcessingFunctionLibrary : public UBlueprintFunctionLibrary
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UIDataProcessingFunctionLibrary");
		return ptr;
	}


	void UpdatePlayerPredictHealthUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerHealthUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerEnergyUI(class ASTExtraPlayerController* PC);
	void UpdatePlayerDyingHealth(class ASTExtraPlayerController* PC);
	void UpdatePlayerBreathAmmount(class ASTExtraPlayerController* PC);
	class UUIDataProcessingFunctionLibrary* STATIC_UILibraryInstance();
	TArray<struct FComparableGrenadeItemType> SortGrenadeItemArray(TArray<struct FComparableGrenadeItemType> GrenadeArray, class ASTExtraBaseCharacter* PlayerCharacter, TEnumAsByte<EGrenadeType> CurListFirstType);
	TArray<struct FCompatableComsumableItemType> SortConsumableItemArray(TArray<struct FCompatableComsumableItemType> ConsumableArray, bool IgnoreFirst, TEnumAsByte<EConsumeItemType> FirstItemType);
	void STATIC_SetUnitPosAndOpacityAndSize(class UPanelWidget* GPanel, class UBorder* BBorder, const struct FVector2D& Scale, float Opacity, const struct FVector2D& OffsetVector);
	void SetInGameUIUserWidget(class UUAEUserWidget* UserWidget);
	bool STATIC_IsPlayerCanDoSprintOperation(class ASTExtraPlayerCharacter* Player);
	bool IsHitPointValidInCircularHitTestPolicy(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent, float HitAreaRadius);
	void HandleCharacterAttrChange(const struct FString& AttrName, class ASTExtraBaseCharacter* Character);
	TEnumAsByte<EGrenadeType> GrenadeSpecificSlotNameToENumAdapter(const struct FName& GrenadeSpecificSlotName);
	float STATIC_GetServerWorldSecond(class UObject* WorldContextObject);
	int GetCurPlatformType();
	float GetCharacterEnergyValue(class APawn* CharaterPawn);
};


// Class ShadowTrackerExtra.UiHelperFunctions
// 0x0000 (0x0028 - 0x0028)
class UUiHelperFunctions : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UiHelperFunctions");
		return ptr;
	}


	class ALobbyHUD* STATIC_GetLobbyHUD(class UUserWidget* Widget);
	TArray<class UWidget*> STATIC_GetChildrenOfPanel(class UPanelWidget* PanelWidget);
};


// Class ShadowTrackerExtra.UNGCondition_CanGetInVehicle
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_CanGetInVehicle : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanGetInVehicle");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_CanJumpOutPlane
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_CanJumpOutPlane : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanJumpOutPlane");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_CanOpenParachute
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_CanOpenParachute : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_CanOpenParachute");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_DeadBoxCollapsed
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_DeadBoxCollapsed : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_DeadBoxCollapsed");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveDeadBoxInRange
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveDeadBoxInRange : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveDeadBoxInRange");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveSpecifiedStuff
// 0x0020 (0x0050 - 0x0030)
class UUNGCondition_HaveSpecifiedStuff : public USTNewbieGuideConditionBase
{
public:
	TArray<int>                                        CheckTypeArray;                                           // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0040(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveSpecifiedStuff");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveStuffCanPickUp
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveStuffCanPickUp : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveStuffCanPickUp");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_HaveStuffInBackpack
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_HaveStuffInBackpack : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_HaveStuffInBackpack");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsBeenLandingXsec
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_IsBeenLandingXsec : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsBeenLandingXsec");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsHealthInRange
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsHealthInRange : public USTNewbieGuideConditionBase
{
public:
	float                                              HealthUpperLimit;                                         // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              HealthLowerLimit;                                         // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TWeakObjectPtr<class ASTExtraBaseCharacter>        PlayerCharacter;                                          // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsHealthInRange");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsHurtByWeapon
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsHurtByWeapon : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsHurtByWeapon");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInKillZoneLastXs
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsInKillZoneLastXs : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInKillZoneLastXs");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInSafeZone
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsInSafeZone : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInSafeZone");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsInSomePoseForXSec
// 0x0010 (0x0040 - 0x0030)
class UUNGCondition_IsInSomePoseForXSec : public USTNewbieGuideConditionBase
{
public:
	float                                              ActiveTime;                                               // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TEnumAsByte<ESTEPoseState>                         CheckState;                                               // 0x0034(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0035(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsInSomePoseForXSec");
		return ptr;
	}


	void OnPlayerStateChange(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
};


// Class ShadowTrackerExtra.UNGCondition_IsNoEnemyInRange
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_IsNoEnemyInRange : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsNoEnemyInRange");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_IsPropSlotHaveGun
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_IsPropSlotHaveGun : public USTNewbieGuideConditionBase
{
public:
	ESurviveWeaponPropSlot                             CheckSlotType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_IsPropSlotHaveGun");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_KillSomeOne
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_KillSomeOne : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_KillSomeOne");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_PickUpCollapsed
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_PickUpCollapsed : public USTNewbieGuideConditionBase
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_PickUpCollapsed");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_PickupListCollapsed
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_PickupListCollapsed : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_PickupListCollapsed");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_SafeZoneFirstAppear
// 0x0000 (0x0030 - 0x0030)
class UUNGCondition_SafeZoneFirstAppear : public USTNewbieGuideConditionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_SafeZoneFirstAppear");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UNGCondition_SitOnSpecifiedSeat
// 0x0008 (0x0038 - 0x0030)
class UUNGCondition_SitOnSpecifiedSeat : public USTNewbieGuideConditionBase
{
public:
	ESTExtraVehicleUserState                           CheckSeatType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UNGCondition_SitOnSpecifiedSeat");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UserInputCache
// 0x0000 (0x0028 - 0x0028)
class UUserInputCache : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UserInputCache");
		return ptr;
	}


	void STATIC_ResetReportComplaintNames();
	bool STATIC_CheckIsNameReport(const struct FString& ReportName);
	void STATIC_CacheReportComplaintName(const struct FString& ReportName, bool IsReport);
};


// Class ShadowTrackerExtra.UTSkillAppearance_AddParticle
// 0x0060 (0x01A8 - 0x0148)
class UUTSkillAppearance_AddParticle : public UUAESkillAction
{
public:
	class UParticleSystem*                             TemplateParticle_Effect;                                  // 0x0148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UParticleSystemComponent>     ParticleInstance;                                         // 0x0150(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       HangMeshTagName;                                          // 0x0158(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParticleCompTagName;                                      // 0x0160(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationPosition;                                         // 0x0168(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FRotator                                    LocationRotation;                                         // 0x0174(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     LocationScale;                                            // 0x0180(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     FPPScale;                                                 // 0x018C(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	struct FVector                                     FPPLocationPosition;                                      // 0x0198(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	bool                                               bPhaseFinishRemove;                                       // 0x01A4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUndoRemove;                                              // 0x01A5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01A6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_AddParticle");
		return ptr;
	}


	void UndoAction();
	void Reset();
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class ShadowTrackerExtra.UTSkillAppearance_ParticleSystem
// 0x00B8 (0x0200 - 0x0148)
class UUTSkillAppearance_ParticleSystem : public UUTSkillAction
{
public:
	struct FUTSkillAppearance_ParticleSystem_Item      Item;                                                     // 0x0148(0x0078) (Edit, BlueprintVisible)
	TWeakObjectPtr<class UParticleSystemComponent>     AppearanceInstance;                                       // 0x01C0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x38];                                      // 0x01C8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_ParticleSystem");
		return ptr;
	}


	void OnHurtAppearanceParticleSystemFinished(class UParticleSystemComponent* PSC);
	void OnAppearanceParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class ShadowTrackerExtra.UTSkillAppearance_RomoveParticle
// 0x0010 (0x0158 - 0x0148)
class UUTSkillAppearance_RomoveParticle : public UUAESkillAction
{
public:
	struct FName                                       ParticleCompTagName;                                      // 0x0148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPhaseFinishRemove;                                       // 0x0150(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUndoRemove;                                              // 0x0151(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0152(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_RomoveParticle");
		return ptr;
	}


	void UndoAction();
	void Reset();
	bool RealDoAction();
};


// Class ShadowTrackerExtra.UTSkillAppearance_SoundCue
// 0x0080 (0x01C8 - 0x0148)
class UUTSkillAppearance_SoundCue : public UUTSkillAction
{
public:
	struct FUTSkillAppearance_SoundCue_Item            Item;                                                     // 0x0148(0x0018) (Edit, BlueprintVisible)
	TMap<TEnumAsByte<EPhysicalSurface>, class UAkAudioEvent*> PhysSoundMap;                                             // 0x0160(0x0050) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x01B0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UTSkillAppearance_SoundCue");
		return ptr;
	}

};


// Class ShadowTrackerExtra.UUAESkillCondition_InVehicle
// 0x0008 (0x0138 - 0x0130)
class UUUAESkillCondition_InVehicle : public UUAESkillCondition
{
public:
	bool                                               IsDriver;                                                 // 0x0130(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0131(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.UUAESkillCondition_InVehicle");
		return ptr;
	}

};


// Class ShadowTrackerExtra.VehicleCommonComponent
// 0x0090 (0x0188 - 0x00F8)
class UVehicleCommonComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    VehicleHPChangedDelegate;                                 // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    VehicleFuelChangedDelegate;                               // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    VehicleWheelsHPChangedDelegate;                           // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HPMax;                                                    // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HP;                                                       // 0x012C(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      WheelsCurrentHP;                                          // 0x0130(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	float                                              FuelMax;                                                  // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Fuel;                                                     // 0x0144(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              FuelConsumeFactor;                                        // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<struct FSTExtraVehicleWheelHP>              WheelsHP;                                                 // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FName                                       SimpleBodyBoneName;                                       // 0x0160(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FName>                               ComplexBodyBoneNames;                                     // 0x0168(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	struct FName                                       MainComplexBodyBoneName;                                  // 0x0178(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FName                                       ComplexCollisionProfileName;                              // 0x0180(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleCommonComponent");
		return ptr;
	}


	void VehicleTakeDamage(float Damage, class AController* Instigator);
	void TakeDamageByHitPart(float Damage, unsigned char HitPart, bool IgnoreWheels, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void TakeDamageByBoneName(float Damage, bool IgnoreWheels, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser, struct FName* BoneName);
	void OnRep_WheelsCurrentHP();
	void OnRep_HP();
	void OnRep_Fuel();
	bool NoFuel();
	bool IsDestroyed();
	int GetWheelsHPNum();
	float GetWheelHPMax(int WheelIdx);
	float GetWheelHP(int WheelIdx);
	float GetVehicleHPMax();
	float GetVehicleHP();
	float GetFuelMax();
	float GetFuelConsumeFactor();
	float GetFuel();
};


// Class ShadowTrackerExtra.VehicleDamageComponent
// 0x0098 (0x0190 - 0x00F8)
class UVehicleDamageComponent : public UActorComponent
{
public:
	float                                              ImpactModifier;                                           // 0x00F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactAbsorption;                                         // 0x00FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactAbsorptionPassenger;                                // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactModifierUpsideDown;                                 // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactAbsorptionUpsideDown;                               // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactAbsorptionPassengerUpsideDown;                      // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitIgnoreImpulseThreshold;                                // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	float                                              DamageSelfCD;                                             // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	float                                              AllowedMaxHitDistanceSqAtServer;                          // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionBaseDamage;                                      // 0x0124(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionMinimumDamage;                                   // 0x0128(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionRadiusInner;                                     // 0x012C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionRadiusOuter;                                     // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionDamageFalloff;                                   // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ExplosionBaseMomentumMag;                                 // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	class UClass*                                      ExplosionDamageType;                                      // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               OnlyBreakWindowThroughDriver;                             // 0x0148(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0149(0x0007) MISSED OFFSET
	class UCurveFloat*                                 VehicleHitCharacterDamageCurve;                           // 0x0150(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UCurveFloat*                                 CharacterDamageMassCurve;                                 // 0x0158(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LaunchVelocityFactorOnHitCharacter;                       // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumCharacterLaunchSpeed;                              // 0x0164(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterLaunchSpeedMultiplier;                           // 0x0168(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterHitMinimumVehicleSpeed;                          // 0x016C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterDamageMassUnitMultiplier;                        // 0x0170(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinimumCharacterDamage;                                   // 0x0174(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              CharacterDamageVelocityUnitMultiplier;                    // 0x0178(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DamageCharacterCD;                                        // 0x017C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x10];                                      // 0x0180(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleDamageComponent");
		return ptr;
	}


	void HandleOnVehicleHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
};


// Class ShadowTrackerExtra.STVehicleWheelDustConfig
// 0x0010 (0x0040 - 0x0030)
class USTVehicleWheelDustConfig : public UDataAsset
{
public:
	TArray<struct FSTVehicleWheelDust>                 WheelDusts;                                               // 0x0030(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STVehicleWheelDustConfig");
		return ptr;
	}

};


// Class ShadowTrackerExtra.VehicleMotorbikeComponent
// 0x0148 (0x0240 - 0x00F8)
class UVehicleMotorbikeComponent : public UActorComponent
{
public:
	struct FScriptMulticastDelegate                    OnContactChanged;                                         // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UCurveFloat*                                 Curve_Roll;                                               // 0x0108(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_ReturnClamp;                                        // 0x0110(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Steer;                                              // 0x0118(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Yaw;                                                // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_TorqueStab;                                         // 0x0128(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Roll_Cart;                                          // 0x0130(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_ReturnClamp_Cart;                                   // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Steer_Cart;                                         // 0x0140(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_Yaw_Cart;                                           // 0x0148(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UCurveFloat*                                 Curve_TorqueStab_Cart;                                    // 0x0150(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bHasSidecart;                                             // 0x0158(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0159(0x0007) MISSED OFFSET
	struct FName                                       LowStabBoneName;                                          // 0x0160(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FName                                       HighStabBoneName;                                         // 0x0168(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SideCartHighStabCOM;                                      // 0x0170(0x000C) (Edit, BlueprintVisible, IsPlainOldData)
	float                                              ScaleTorque;                                              // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ScaleCenterOfMass;                                        // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CurrentTorque;                                            // 0x0184(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	struct FVector                                     CurrentCenterOfMass;                                      // 0x0190(0x000C) (BlueprintVisible, BlueprintReadOnly, IsPlainOldData)
	bool                                               bKickstandStabilizeEnabled;                               // 0x019C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	float                                              KickstandAngularDamping;                                  // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              KickstandMaxAngVelocity;                                  // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              KickstandEnableMaxSpeed;                                  // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bContact;                                                 // 0x01AC(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x01AD(0x000B) MISSED OFFSET
	float                                              COMOffsetSteer;                                           // 0x01B8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ContactAlpha_RiseRate;                                    // 0x01BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_FallRate;                                    // 0x01C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlpha_LowerClamp;                                  // 0x01C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapPitchIn;                                  // 0x01C8(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   ContactAlpha_MapRollIn;                                   // 0x01D0(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              ContactAlphaRemoteMultiplier;                             // 0x01D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlF_VelMap;                                       // 0x01DC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlB_VelMap;                                       // 0x01E4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlL_VelMap;                                       // 0x01EC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlR_VelMap;                                       // 0x01F4(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlQ_VelMap;                                       // 0x01FC(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	struct FVector2D                                   AirControlE_VelMap;                                       // 0x0204(0x0008) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_FB_Torque;                                     // 0x020C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_LR_Torque;                                     // 0x0210(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControl_QE_Torque;                                     // 0x0214(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AirControlPitchInput;                                     // 0x0218(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x24];                                      // 0x021C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleMotorbikeComponent");
		return ptr;
	}


	void SetAirControlR(float inFloat);
	void SetAirControlQ(float inFloat);
	void SetAirControlPitchInput(float InInput);
	void SetAirControlL(float inFloat);
	void SetAirControlF(float inFloat);
	void SetAirControlE(float inFloat);
	void SetAirControlB(float inFloat);
	void HandleOnVehicleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	float GetAirControlPitchInput();
};


// Class ShadowTrackerExtra.VehicleSeatComponent
// 0x00E8 (0x01E0 - 0x00F8)
class UVehicleSeatComponent : public UActorComponent
{
public:
	class APhysicsVolume*                              WaterVolume;                                              // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<EVHSeatGUIType>>                SeatGUITypes;                                             // 0x0100(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0110(0x0018) MISSED OFFSET
	TArray<struct FSTExtraVehicleSeat>                 Seats;                                                    // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance)
	TArray<class ASTExtraPlayerCharacter*>             SeatOccupiers;                                            // 0x0138(0x0010) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor)
	TArray<struct FName>                               AlternativeLeaveVehicleSockets;                           // 0x0148(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              LeaveVehicleVelocityScale;                                // 0x0158(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bCheckValidLeaveLocationBySweep;                          // 0x015C(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSeatAttached;                                           // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSeatDetached;                                           // 0x0170(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnSeatChanged;                                            // 0x0180(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnUpdateSeatGUI;                                          // 0x0190(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FString                                     LatestDriverPlayerName;                                   // 0x01A0(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int                                                MaxInUseSeatGUIIndex;                                     // 0x01B0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnDriverRideAtClient;                                     // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnDriverLeaveAtClient;                                    // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	bool                                               bDoEntryAngleCheck;                                       // 0x01D8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	float                                              MinEntryAngle;                                            // 0x01DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleSeatComponent");
		return ptr;
	}


	void OnRep_Occupiers();
	bool IsSeatAvailableByIndex(int SeatIndex);
	bool IsSeatAvailable(ESTExtraVehicleSeatType SeatType);
	class ASTExtraPlayerCharacter* GetDriver();
	void ClientSetLeaveVehicleLocation(class ASTExtraPlayerCharacter* Character, const struct FVector& LeaveLocation);
};


// Class ShadowTrackerExtra.VehicleSpringArmComponent
// 0x0070 (0x0390 - 0x0320)
class UVehicleSpringArmComponent : public USpringArmComponent
{
public:
	float                                              MinForwardSpeedToRotationKMH;                             // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ForwardSpeedToRotSpeed;                                   // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StayTimeBeforeReturning;                                  // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bNeverAutoReturnSmartCamera;                              // 0x032C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x032D(0x0003) MISSED OFFSET
	struct FRotator                                    RelativeToOwnerRotator;                                   // 0x0330(0x000C) (IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x033C(0x001C) MISSED OFFSET
	bool                                               bDrawDebugLineAndShap;                                    // 0x0358(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0359(0x0003) MISSED OFFSET
	float                                              MinPitch;                                                 // 0x035C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MaxPitch;                                                 // 0x0360(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              SimulRotationSpeed;                                       // 0x0364(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x28];                                      // 0x0368(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleSpringArmComponent");
		return ptr;
	}


	void DelayRotationLagEnabledEnd();
	void DelayRotationLagEnabled(bool bEnabled, float Time, const struct FRotator& _RelativeRotator);
};


// Class ShadowTrackerExtra.STCharacterNearDeathComp
// 0x00A8 (0x01A0 - 0x00F8)
class USTCharacterNearDeathComp : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	float                                              BreathMax;                                                // 0x0100(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AssistAccountableDuration;                                // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EnterNearDeathDamageInvincibleTime;                       // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               IsTurnOnDebugSameTeamAccountable;                         // 0x010C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	class UCurveFloat*                                 CurveLayeredDeathInterval;                                // 0x0110(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MaxDeathTimes;                                            // 0x0118(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               IsDebugging;                                              // 0x011C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x011D(0x000B) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnRescueStatusChange;                                     // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ASTExtraBaseCharacter*                       PawnOwner;                                                // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              EnterNearDeathSeconds;                                    // 0x0140(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Breath;                                                   // 0x0144(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	int                                                NearDeathRestoredOrignalHealth;                           // 0x0148(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<struct FNearDeathRestoredOrignalHealthStruct> RestoredHealthArray;                                      // 0x0150(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	int                                                NearDeathRestoredOrignalBreathAmount;                     // 0x0160(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0164(0x000C) MISSED OFFSET
	class AController*                                 EventInstigatorRecorded;                                  // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	class AActor*                                      DamageCauserRecorded;                                     // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0180(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.STCharacterNearDeathComp");
		return ptr;
	}


	float SetHealthSafety(float AddVal);
	void S2C_HelpOther(class ACharacter* HelpWho, bool IsTurnInfo, float RemainingRescueTime);
	void S2C_BeHelpedByOther(class ACharacter* ByWho, bool IsTurnInfo, float RemainingRescueTime);
	void RescueFinishSuccessfully();
	void OnRep_BreathChanged();
	bool IsNearDeathInvincible();
	bool IsHealthAlive();
	bool IsHaveLastBreathStatus();
	bool IsFinishedLastBreathStatus();
	void InitializeOwner(class APawn* TempPawn);
	bool GotoLastBreathStatus(class AController* EventInstigator, class AActor* DamageCauser, const struct FDamageEvent& DamageEvent, float _finalDamage, bool IsDamageFromVehicleExplode);
	float GetBreathMax();
	float GetBreath();
	void EnterSwimWhileDying();
	void DoFinishLastBreath();
	void ClearNearDeathTeammate();
	float AddHealthSafety(float AddVal, bool ForceIgnoreInvinceTime);
	void AddDeadBuff();
};


// Class ShadowTrackerExtra.VehicleUserComponent
// 0x00D0 (0x01C8 - 0x00F8)
class UVehicleUserComponent : public UActorComponent
{
public:
	class ASTExtraVehicleBase*                         CurrentClosestVehicle;                                    // 0x00F8(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FScriptMulticastDelegate                    CurrentClosestVehicleChanged;                             // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnEnterVehicle;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnExitVehicle;                                            // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ASTExtraVehicleBase*                         Vehicle;                                                  // 0x0130(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class ASTExtraPlayerCharacter*                     Character;                                                // 0x0138(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ESTExtraVehicleUserState                           VehicleUserState;                                         // 0x0140(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0141(0x0007) MISSED OFFSET
	class ASTExtraVehicleBase*                         LastDriveVehicle;                                         // 0x0148(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	float                                              UpdateVehicleSpeedGUIInterval;                            // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	float                                              UpdateClosestVehicleInterval;                             // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	TArray<class ASTExtraVehicleBase*>                 OverlappingVehicles;                                      // 0x0160(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0170(0x0010) MISSED OFFSET
	bool                                               EnableVehicleShoot;                                       // 0x0180(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              MaxAllowedExitSpeedDiff;                                  // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0xC];                                       // 0x0188(0x000C) MISSED OFFSET
	bool                                               bRotateToViewOnExitVehicle;                               // 0x0194(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0195(0x0003) MISSED OFFSET
	float                                              NoFuelTipsDisplayCooldown;                                // 0x0198(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	struct FVehicleUserReconnRepData                   ReconnRepData;                                            // 0x01A0(0x0018) (Net)
	unsigned char                                      UnknownData08[0x2];                                       // 0x01B8(0x0002) MISSED OFFSET
	bool                                               bAllowProcessReconnectionDataMoreThanOnce;                // 0x01BA(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData09[0x1];                                       // 0x01BB(0x0001) MISSED OFFSET
	float                                              CurrentMoveForwardRate;                                   // 0x01BC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CurrentMoveRightRate;                                     // 0x01C0(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleUserComponent");
		return ptr;
	}


	void UpdatePassengerViewPitchLimit();
	void TurnVehicle(float Rate);
	void TryUseHorn(bool bUse);
	void TryLeanOutOrIn(bool bAutoLeanOut);
	void TryLeanOut(bool bLean);
	void TryExitVehicle();
	void TryEnterVehicle(class ASTExtraVehicleBase* InVehicle, ESTExtraVehicleSeatType SeatType);
	void TryChangeVehicleSeatForPC(int SeatIndex);
	void TryChangeVehicleSeat();
	void SetBrake(float Rate);
	void SetBoosting(bool bEnabled);
	void SetAirControlF(float Rate);
	void SetAirControlB(float Rate);
	void RspLeanOut(bool bOut);
	void RspExitVehicle(bool bSuccess);
	void RspEnterVehicle(class ASTExtraVehicleBase* InVehicle, bool bSuccess, ESTExtraVehicleSeatType SeatType);
	void RspChangeVehicleSeatForPC(bool bSuccess, int SeatIndex);
	void RspChangeVehicleSeat(bool bSuccess, ESTExtraVehicleSeatType SeatType);
	void ReqSyncViewTargetLastDriveInfo(class ASTExtraPlayerController* ObserverController, class ASTExtraBaseCharacter* ViewTargetCharacter);
	void ReqMarkLastestVehicle(class ASTExtraPlayerController* STEPC, class ASTExtraVehicleBase* InVehicle);
	void ReqLeanOut(bool IsLeanOut);
	void ReqExitVehicle(const struct FVector& ClientVehicleVelocity);
	void ReqEraseLastDriveVehicle();
	void ReqEnterVehicle(class ASTExtraVehicleBase* InVehicle, ESTExtraVehicleSeatType SeatType);
	void ReqChangeVehicleSeatForPC(int SeatIndex);
	void ReqChangeVehicleSeat();
	void ProcessReconnectionData();
	void OnUpdateVehicleSpeedGUI(float RawSpeed);
	void OnServerAboutToReconnect();
	void OnRep_VehicleUserReconnRepData();
	void OnExitVehicleCompleted();
	void OnEnterVehicleCompleted(ESTExtraVehicleSeatType SeatType);
	void OnCurrrentClosestVehicleChanged();
	void OnChangeVehicleSeatCompleted(ESTExtraVehicleSeatType SeatType);
	void NotifyLeaveVehicleFailed();
	void MoveVehicleRight(float Rate);
	void MoveVehicleForward(float Rate);
	bool IsClosestVehicleSeatAvailable(ESTExtraVehicleSeatType SeatType);
	ESTExtraVehicleUserState GetVehicleUserState();
	bool CanVehicleShoot(class ASTExtraPlayerCharacter* PlayerCharacter);
	bool CanUseVehicleHorn();
	void AddVehicleFuel(float Amount);
};


// Class ShadowTrackerExtra.VoiceCheckObject
// 0x0038 (0x0060 - 0x0028)
class UVoiceCheckObject : public UObject
{
public:
	int                                                MaxCount;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                maxShowCount;                                             // 0x002C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              maxShowAlpha;                                             // 0x0030(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              nowViewDis;                                               // 0x0034(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MoveMaxShowDis;                                           // 0x0038(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              WeaponMaxShowDis;                                         // 0x003C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              VehicleMaxShowDis;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              glassMaxShowDis;                                          // 0x0044(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<struct FVoiceCheckObjectNode>               imageList;                                                // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor)
	class ASTExtraPlayerController*                    PlayerController;                                         // 0x0058(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VoiceCheckObject");
		return ptr;
	}


	void VoiceTick(float DeltaTime);
	void AddWeaponShotVoice(class ASTExtraShootWeapon* Weapon, const struct FVector& posVector, float showTime, bool isslience);
	void AddVehicleVoice(class ASTExtraVehicleBase* Vehicle, const struct FVector& posVector, float showTime);
	void AddGlassVoice(const struct FVector& posVector, float showTime);
	void AddCharacterMoveVoice(class ASTExtraBaseCharacter* Character, const struct FVector& posVector, float showTime);
};


// Class ShadowTrackerExtra.WarGameMode
// 0x0050 (0x13E0 - 0x1390)
class AWarGameMode : public ABattleRoyaleGameModeTeam
{
public:
	class UPlaneComponent*                             PlaneComp;                                                // 0x1390(0x0008) (Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData)
	TArray<class APlayerController*>                   RespawnedPlayers;                                         // 0x1398(0x0010) (ZeroConstructor)
	int                                                MatchDurationTime;                                        // 0x13A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                WinScore;                                                 // 0x13AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Score_MakeOtherGotoNearDeath;                             // 0x13B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Score_RescueOthers;                                       // 0x13B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Score_TeamAllDeath;                                       // 0x13B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Score_Kill;                                               // 0x13BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FRespawnItemConfigInst>              RespawnItemConfigList;                                    // 0x13C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	class URespawnItemConfig*                          RespawnItemConfig;                                        // 0x13D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       CurRespawnPlane;                                          // 0x13D8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WarGameMode");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WarGameState
// 0x0040 (0x06E8 - 0x06A8)
class AWarGameState : public ASTExtraGameStateBase
{
public:
	struct FScoreChangeValue                           ScoreChangeValue;                                         // 0x06A8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net)
	float                                              MatchLeftTimeRepPeriod;                                   // 0x06B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                MatchLeftTime;                                            // 0x06B4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              RespawnLeftTime;                                          // 0x06B8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06BC(0x0004) MISSED OFFSET
	bool                                               ResetRespawnLeftTime;                                     // 0x06C0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06C1(0x0003) MISSED OFFSET
	int                                                TeamCount;                                                // 0x06C4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              LastRespawnTimeUpdateTimeSecond;                          // 0x06C8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x14];                                      // 0x06CC(0x0014) MISSED OFFSET
	int                                                GameModeWinScore;                                         // 0x06E0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x06E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WarGameState");
		return ptr;
	}


	void UpdateRespawnCountDownUI();
	void SetLastRespawnTimeUpdateTimeSecond();
	void OnRep_WinScore();
	void OnRep_TeamCount();
	void OnRep_RespawnLeftTime();
	void OnRep_MatchLeftTime();
	void OnRep_LastRespawnTimeUpdateTimeSecond();
	int GetWinScore();
	int GetTeamCount();
	float GetRespawnLeftTime();
	float GetMatchLeftTime();
};


// Class ShadowTrackerExtra.VehicleSyncComponent
// 0x0438 (0x0530 - 0x00F8)
class UVehicleSyncComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x380];                                     // 0x00F8(0x0380) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnActorHit;                                               // 0x0478(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class ASTExtraVehicleBase*                         VehicleOwner;                                             // 0x0488(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x5C];                                      // 0x0490(0x005C) MISSED OFFSET
	float                                              MinReliableCorrectionInterval;                            // 0x04EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x04F0(0x0004) MISSED OFFSET
	float                                              MinCorrectionInterval;                                    // 0x04F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04F8(0x0004) MISSED OFFSET
	float                                              SendingToServerIntervalAtClient;                          // 0x04FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0500(0x0008) MISSED OFFSET
	float                                              SendingReliableHitToServerIntervalAtClient;               // 0x0508(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x050C(0x0004) MISSED OFFSET
	float                                              AllowedMaxDistanceSqAtServer;                             // 0x0510(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StationaryCorrectionIntervalAtClient;                     // 0x0514(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0518(0x0004) MISSED OFFSET
	float                                              StationaryCorrectionSpeedThresholdSq;                     // 0x051C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              StationaryCorrectionThresholdDistanceSq;                  // 0x0520(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData07[0xC];                                       // 0x0524(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.VehicleSyncComponent");
		return ptr;
	}


	void SendServerOthervehicleMoveToClientUnreliably(class UVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerOthervehicleMoveToClientReliably(class UVehicleSyncComponent* TargetSyncComponent, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerMoveToClientUnreliably(const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendServerMoveToClientReliably(int InCorrectionId, const struct FVector_NetQuantize100& ServerLocation, const struct FVector_NetQuantize100& ServerLinearVelocity, const struct FVector_NetQuantizeNormal& ServerRotator, const struct FVector_NetQuantize100& ServerAngularVelocity);
	void SendClientMoveToServerUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t Checksum);
	void SendClientMoveToServerReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, uint32_t Checksum);
	void SendClientHitToServerUnreliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t Checksum);
	void SendClientHitToServerReliably(int InCorrectionId, const struct FVector_NetQuantize100& ClientLocation, const struct FVector_NetQuantize100& ClientLinearVelocity, const struct FVector_NetQuantizeNormal& ClientRotator, const struct FVector_NetQuantize100& ClientAngularVelocity, const struct FVector_NetQuantize100& NormalImpulse, const struct FHitResult& Hit, uint32_t Checksum);
	void OnHitAtServer(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHitAtClient(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDriverRide();
	TArray<class ASTExtraBaseCharacter*> GetRiders();
	void Correct(class UVehicleSyncComponent* OtherVehicle);
	void ApplyRigidBodyState(struct FRigidBodyState* NewState);
};


// Class ShadowTrackerExtra.WarPlayerState
// 0x0048 (0x0690 - 0x0648)
class AWarPlayerState : public ASTExtraPlayerState
{
public:
	struct FWarPlayerStateScore                        RepPlayerStateScore;                                      // 0x0648(0x0018) (BlueprintVisible, BlueprintReadOnly, Net)
	struct FWarPlayerStateScore                        DisplayTipsScore;                                         // 0x0660(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FWarPlayerStateScore                        CachePlayerStateScore;                                    // 0x0678(0x0018)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WarPlayerState");
		return ptr;
	}


	void OnRep_PlayerStateScore();
};


// Class ShadowTrackerExtra.WaterSwimActor
// 0x0010 (0x0378 - 0x0368)
class AWaterSwimActor : public AActor
{
public:
	class UBoxComponent*                               WaterBoxComp;                                             // 0x0368(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0370(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WaterSwimActor");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponAntiCheatComp
// 0x0098 (0x0198 - 0x0100)
class UWeaponAntiCheatComp : public UWeaponLogicBaseComponent
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0108(0x0028) MISSED OFFSET
	float                                              ShootRateCheckInterval;                                   // 0x0130(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               ShootRateCheckTag;                                        // 0x0134(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0135(0x0003) MISSED OFFSET
	float                                              ShootRateCheckMulCoff;                                    // 0x0138(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               ShootHitTargetIntervalCheckTag;                           // 0x013C(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x013D(0x0003) MISSED OFFSET
	float                                              ShootHitTargetIntervalMulCoff;                            // 0x0140(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x54];                                      // 0x0144(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponAntiCheatComp");
		return ptr;
	}


	void OnWeaponStopFire();
	void OnWeaponStartFire();
	void OnWeaponShootHit(const struct FShootWeaponDamageEvent& DamageDetail, const struct FBulletHitInfoUploadData& HitData, const struct FLocalShootHitData& LocalHitData);
	void OnWeaponReloaded();
};


// Class ShadowTrackerExtra.WeaponAutoAimingComponent
// 0x0628 (0x0720 - 0x00F8)
class UWeaponAutoAimingComponent : public UActorComponent
{
public:
	TArray<struct FEnemyInfo>                          enemyList;                                                // 0x00F8(0x0010) (ZeroConstructor)
	struct FVector2D                                   screenCenter;                                             // 0x0108(0x0008) (IsPlainOldData)
	struct FCDInfo                                     CDInfo;                                                   // 0x0110(0x000C)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	struct FEnemyInfo                                  SelectInfo;                                               // 0x0120(0x0028)
	struct FEnemyInfo                                  LastSelectInfo;                                           // 0x0148(0x0028)
	class APlayerController*                           PlayerController;                                         // 0x0170(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class ASTExtraBaseCharacter*                       PlayerPawn;                                               // 0x0178(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0180(0x0010) MISSED OFFSET
	float                                              AIM_CD_WHEN_OPERATE_CAMERA_WHEN_JUMP;                     // 0x0190(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AIM_HOLD_WHEN_OPEN_FIRE;                                  // 0x0194(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              DEFAULT_CD_TIME;                                          // 0x0198(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData02[0x94];                                      // 0x019C(0x0094) MISSED OFFSET
	TArray<struct FName>                               Bones;                                                    // 0x0230(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	bool                                               bShowDebug;                                               // 0x0240(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEquipWeapon;                                             // 0x0241(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bInit;                                                    // 0x0242(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x5];                                       // 0x0243(0x0005) MISSED OFFSET
	class ASTExtraPlayerController*                    extraPlayerController;                                    // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4D0];                                     // 0x0250(0x04D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponAutoAimingComponent");
		return ptr;
	}


	void TryDoAiming(float DeltaTime);
	void SetCD(float CDTime);
	class ASTExtraPlayerCharacter* SelectAimTarget(float DeltaTime);
	void OnUnEquipWeapon();
	void OnEquipWeapon();
	void Init(class AController* Controller);
	void HandleShoot(class ASTExtraWeapon* Weapon);
	void ClearCD();
	bool CheckSmoke(const struct FVector& startPoint, class ASTExtraPlayerCharacter* Pawn);
	bool CanEnemeyRaycastReach(const struct FVector& startPoint, class ASTExtraPlayerCharacter* Pawn);
};


// Class ShadowTrackerExtra.WeaponOwnerProxy
// 0x0030 (0x0058 - 0x0028)
class UWeaponOwnerProxy : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class AActor*                                      OwnerActor;                                               // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class APawn*                                       OwnerPawn;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class AController*                                 OwnerController;                                          // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	class ASTExtraWeapon*                              BindedWeapon;                                             // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponOwnerProxy");
		return ptr;
	}


	void OnWeaponStopFireDelegate__DelegateSignature();
	void HandlePlayerSwitchCameraMode(TEnumAsByte<EPlayerCameraMode> Mode);
	void HandlePlayerChangePose(TEnumAsByte<ESTEPoseState> LastPose, TEnumAsByte<ESTEPoseState> NewPose);
	class ASTExtraPlayerController* GetOwnerSTExtraPlayerController();
	class ASTExtraBaseCharacter* GetOwnerSTExtraPlayerCharacter();
	class APlayerController* GetOwnerPlayerController();
	class APawn* GetOwnerPawn();
	class AController* GetOwnerController();
	class AActor* GetOwnerActor();
};


// Class ShadowTrackerExtra.WeaponOwnerProxyFactory
// 0x0000 (0x0028 - 0x0028)
class UWeaponOwnerProxyFactory : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponOwnerProxyFactory");
		return ptr;
	}


	class UWeaponOwnerProxy* GetWeaponOwnerProxy();
};


// Class ShadowTrackerExtra.WeaponPostFireState
// 0x0010 (0x0168 - 0x0158)
class UWeaponPostFireState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0160(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponPostFireState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponPreFireState
// 0x0010 (0x0168 - 0x0158)
class UWeaponPreFireState : public UWeaponStateBase
{
public:
	class ASTExtraShootWeapon*                         OwnerShootWeapon;                                         // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0160(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponPreFireState");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WeaponAvatarComponent
// 0x0130 (0x06A0 - 0x0570)
class UWeaponAvatarComponent : public UAvatarComponent
{
public:
	struct FScriptMulticastDelegate                    OnScopeEquipDelegate;                                     // 0x0570(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnScopeUnequipDelegate;                                   // 0x0580(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TMap<struct FMiniItem, struct FWeaponAttachmentConfig> attachmentRef;                                            // 0x0590(0x0050) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x05E0(0x0008) MISSED OFFSET
	class ASTExtraShootWeapon*                         ownerWeapon;                                              // 0x05E8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB0];                                      // 0x05F0(0x00B0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponAvatarComponent");
		return ptr;
	}


	void SwapAttachment(EWeaponAttachmentSocketType slotID, bool isExchange);
	bool PutOnEquipmentByItemHandle(class UBattleItemHandleBase* ItemHandle, class USkeletalMesh* skMesh, class UStaticMesh* stMesh);
	void OnScopeUnequipDelegate__DelegateSignature();
	void OnScopeEquipDelegate__DelegateSignature();
	void OnMeshLoaded(const struct FSoftObjectPath& AssetList, class UBattleItemHandleBase* itemHandles, bool isReplaced);
	void OnItemHandleLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void OnAttachItemLoaded(const struct FItemDefineID& DefineID, class UBattleItemHandleBase* ItemHandle);
	void NetSyncData(int Slot, ESyncOperation Type, class UBattleItemHandleBase* Handle);
	void LoadMeshsAsync(class UBattleItemHandleBase* handleList, bool needDirectLoad);
	bool IsTeammate();
	bool IsAutonomousAvatar();
	void InitialAvatarParam(int AGender);
	void InitDefaultMesh(class UBattleItemHandleBase* Handle);
	class UStaticMesh* GetStaticMesh(const struct FWeaponMeshCfg& meshPack);
	struct FName GetSocketName(int slotID, int subSlotID);
	class USkeletalMesh* GetSkeletalMesh(const struct FWeaponMeshCfg& meshPack);
	bool GetMeshResRef(class UBackpackWeaponAttachHandle* Handle, struct FSoftObjectPath* AssetRef);
	class UMeshComponent* GetAttachmentSocketTransform(int slotID);
	class UAnimationAsset* GetAttachmentAnim(EWeaponAttachmentSocketType slotID, int AnimIdx);
	void ClearMeshBySlot(int Slot, bool putDefault);
	void ClearMeshByItemHandle(class UBattleItemHandleBase* ItemHandle);
	bool ApplyStaticMeshByID(int Slot, class UStaticMesh* pSM, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
	bool ApplySkeletalMeshByID(int Slot, class USkeletalMesh* Mesh, class UMaterialInstance* Mat, class UBattleItemHandleBase* Handle);
};


// Class ShadowTrackerExtra.WeaponStateDefault
// 0x0000 (0x0158 - 0x0158)
class UWeaponStateDefault : public UWeaponStateBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponStateDefault");
		return ptr;
	}

};


// Class ShadowTrackerExtra.WidgetManageable
// 0x0000 (0x0028 - 0x0028)
class UWidgetManageable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WidgetManageable");
		return ptr;
	}


	class UUserWidget* FindWidget(const struct FString& Name);
};


// Class ShadowTrackerExtra.WidgetManagementLibrary
// 0x0000 (0x0028 - 0x0028)
class UWidgetManagementLibrary : public UBlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WidgetManagementLibrary");
		return ptr;
	}


	class UUserWidget* STATIC_FindWidgetFromManager(class AHUD* HUD, const struct FString& WidgetName);
};


// Class ShadowTrackerExtra.WonderfulRecordingCut
// 0x0058 (0x0080 - 0x0028)
class UWonderfulRecordingCut : public UObject
{
public:
	TArray<struct FWonderfulCutOutputData>             WonderfulCutOutputDataList;                               // 0x0028(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData00[0x24];                                      // 0x0038(0x0024) MISSED OFFSET
	bool                                               bIsChickenDinner;                                         // 0x005C(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              ChickenDinnerTimeSecs;                                    // 0x0060(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bIsShowSmallCircle;                                       // 0x0064(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              ShowSmallCircleTimeSecs;                                  // 0x0068(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	TArray<struct FWonderfulCutShootDamageData>        ShootDamageDataList;                                      // 0x0070(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WonderfulRecordingCut");
		return ptr;
	}


	void StopRecord(bool bRankFirst);
	void StartRecord();
	void SortShootDamageData(TArray<struct FWonderfulCutShootDamageSortData>* LargeCircleDataList, TArray<struct FWonderfulCutShootDamageSortData>* SmallCircleDataList);
	void CaptureRecordCut(TEnumAsByte<EWonderfulCutCaptureType> CaptureType, int DamagePlayerID, TEnumAsByte<EWonderfulCutShootDamageType> ShootDamageType, float ShootDistance, const struct FString& CauserName);
	void BuildOutputData();
};


// Class ShadowTrackerExtra.WrapperOverlapManagerComponent
// 0x0030 (0x06F0 - 0x06C0)
class UWrapperOverlapManagerComponent : public UBoxComponent
{
public:
	uint16_t                                           ManagerLevel;                                             // 0x06C0(0x0002) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x06C2(0x0002) MISSED OFFSET
	float                                              OverlapCheckInterval;                                     // 0x06C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	bool                                               bDrawSubLevelManageComp;                                  // 0x06C8(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x06C9(0x0003) MISSED OFFSET
	float                                              DrawSubLevelManageCompTime;                               // 0x06CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	TArray<class AActor*>                              OverlappedSubLevelActorArray;                             // 0x06D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData02[0x10];                                      // 0x06E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WrapperOverlapManagerComponent");
		return ptr;
	}


	void HandleOnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void HandleEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int OtherBodyIndex);
};


// Class ShadowTrackerExtra.WeaponSpecificHandler
// 0x0030 (0x0130 - 0x0100)
class UWeaponSpecificHandler : public UWeaponLogicBaseComponent
{
public:
	struct FItemDefineID                               ItemDefineID;                                             // 0x0100(0x0018) (BlueprintVisible, BlueprintReadOnly)
	struct FName                                       LogicSocket;                                              // 0x0118(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       AttachSocket;                                             // 0x0120(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	ESurviveWeaponPropSlot                             SurviveWeaponPropSlot;                                    // 0x0128(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0129(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class ShadowTrackerExtra.WeaponSpecificHandler");
		return ptr;
	}


	class UItemHandleBase* GetBackpackItemHandle();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
